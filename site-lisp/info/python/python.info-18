This is python.info, produced by makeinfo version 4.8 from
build/texinfo/python.texi.

Generated by Sphinx 1.1pre.
INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY

     Python 2.7.2, April 02, 2012

     Georg Brandl

     Copyright (C) 1990-2012, Python Software Foundation


File: python.info,  Node: Traceback Examples,  Up: traceback --- Print or retrieve a stack traceback

5.27.10.1 Traceback Examples
............................

This simple example implements a basic read-eval-print loop, similar to
(but less useful than) the standard Python interactive interpreter
loop.  For a more complete implementation of the interpreter loop,
refer to the *note code: 62.  module.

    import sys, traceback

    def run_user_code(envdir):
        source = raw_input(">>> ")
        try:
            exec source in envdir
        except:
            print "Exception in user code:"
            print '-'*60
            traceback.print_exc(file=sys.stdout)
            print '-'*60

    envdir = {}
    while 1:
        run_user_code(envdir)

The following example demonstrates the different ways to print and
format the exception and traceback:

    import sys, traceback

    def lumberjack():
        bright_side_of_death()

    def bright_side_of_death():
        return tuple()[0]

    try:
        lumberjack()
    except IndexError:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        print "*** print_tb:"
        traceback.print_tb(exc_traceback, limit=1, file=sys.stdout)
        print "*** print_exception:"
        traceback.print_exception(exc_type, exc_value, exc_traceback,
                                  limit=2, file=sys.stdout)
        print "*** print_exc:"
        traceback.print_exc()
        print "*** format_exc, first and last line:"
        formatted_lines = traceback.format_exc().splitlines()
        print formatted_lines[0]
        print formatted_lines[-1]
        print "*** format_exception:"
        print repr(traceback.format_exception(exc_type, exc_value,
                                              exc_traceback))
        print "*** extract_tb:"
        print repr(traceback.extract_tb(exc_traceback))
        print "*** format_tb:"
        print repr(traceback.format_tb(exc_traceback))
        print "*** tb_lineno:", exc_traceback.tb_lineno

The output for the example would look similar to this:

    *** print_tb:
      File "<doctest...>", line 10, in <module>
        lumberjack()
    *** print_exception:
    Traceback (most recent call last):
      File "<doctest...>", line 10, in <module>
        lumberjack()
      File "<doctest...>", line 4, in lumberjack
        bright_side_of_death()
    IndexError: tuple index out of range
    *** print_exc:
    Traceback (most recent call last):
      File "<doctest...>", line 10, in <module>
        lumberjack()
      File "<doctest...>", line 4, in lumberjack
        bright_side_of_death()
    IndexError: tuple index out of range
    *** format_exc, first and last line:
    Traceback (most recent call last):
    IndexError: tuple index out of range
    *** format_exception:
    ['Traceback (most recent call last):\n',
     '  File "<doctest...>", line 10, in <module>\n    lumberjack()\n',
     '  File "<doctest...>", line 4, in lumberjack\n    bright_side_of_death()\n',
     '  File "<doctest...>", line 7, in bright_side_of_death\n    return tuple()[0]\n',
     'IndexError: tuple index out of range\n']
    *** extract_tb:
    [('<doctest...>', 10, '<module>', 'lumberjack()'),
     ('<doctest...>', 4, 'lumberjack', 'bright_side_of_death()'),
     ('<doctest...>', 7, 'bright_side_of_death', 'return tuple()[0]')]
    *** format_tb:
    ['  File "<doctest...>", line 10, in <module>\n    lumberjack()\n',
     '  File "<doctest...>", line 4, in lumberjack\n    bright_side_of_death()\n',
     '  File "<doctest...>", line 7, in bright_side_of_death\n    return tuple()[0]\n']
    *** tb_lineno: 10

The following example shows the different ways to print and format the
stack:

    >>> import traceback
    >>> def another_function():
    ...     lumberstack()
    ...
    >>> def lumberstack():
    ...     traceback.print_stack()
    ...     print repr(traceback.extract_stack())
    ...     print repr(traceback.format_stack())
    ...
    >>> another_function()
      File "<doctest>", line 10, in <module>
        another_function()
      File "<doctest>", line 3, in another_function
        lumberstack()
      File "<doctest>", line 6, in lumberstack
        traceback.print_stack()
    [('<doctest>', 10, '<module>', 'another_function()'),
     ('<doctest>', 3, 'another_function', 'lumberstack()'),
     ('<doctest>', 7, 'lumberstack', 'print repr(traceback.extract_stack())')]
    ['  File "<doctest>", line 10, in <module>\n    another_function()\n',
     '  File "<doctest>", line 3, in another_function\n    lumberstack()\n',
     '  File "<doctest>", line 8, in lumberstack\n    print repr(traceback.format_stack())\n']

This last example demonstrates the final few formatting functions:

    >>> import traceback
    >>> traceback.format_list([('spam.py', 3, '<module>', 'spam.eggs()'),
    ...                        ('eggs.py', 42, 'eggs', 'return "bacon"')])
    ['  File "spam.py", line 3, in <module>\n    spam.eggs()\n',
     '  File "eggs.py", line 42, in eggs\n    return "bacon"\n']
    >>> an_error = IndexError('tuple index out of range')
    >>> traceback.format_exception_only(type(an_error), an_error)
    ['IndexError: tuple index out of range\n']



File: python.info,  Node: __future__ --- Future statement definitions,  Next: gc --- Garbage Collector interface,  Prev: traceback --- Print or retrieve a stack traceback,  Up: Python Runtime Services

5.27.11 `__future__' -- Future statement definitions
----------------------------------------------------

*note __future__: 1. is a real module, and serves three purposes:

   * To avoid confusing existing tools that analyze import statements
     and expect to find the modules they're importing.

   * To ensure that *note future statements: 7fc. run under releases
     prior to 2.1 at least yield runtime exceptions (the import of
     *note __future__: 1. will fail, because there was no module of
     that name prior to 2.1).

   * To document when incompatible changes were introduced, and when
     they will be -- or were -- made mandatory.  This is a form of
     executable documentation, and can be inspected programmatically
     via importing *note __future__: 1. and examining its contents.

  Each statement in `__future__.py' is of the form:

    FeatureName = _Feature(OptionalRelease, MandatoryRelease,
                           CompilerFlag)

where, normally, _OptionalRelease_ is less than _MandatoryRelease_, and
both are 5-tuples of the same form as `sys.version_info':

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # "alpha", "beta", "candidate" or "final"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

_OptionalRelease_ records the first release in which the feature was
accepted.

  In the case of a _MandatoryRelease_ that has not yet occurred,
_MandatoryRelease_ predicts the release in which the feature will
become part of the language.

  Else _MandatoryRelease_ records when the feature became part of the
language; in releases at or after that, modules no longer need a future
statement to use the feature in question, but may continue to use such
imports.

  _MandatoryRelease_ may also be `None', meaning that a planned feature
got dropped.

  Instances of class `_Feature' have two corresponding methods,
`getOptionalRelease()' and `getMandatoryRelease()'.

  _CompilerFlag_ is the (bitfield) flag that should be passed in the
fourth argument to the built-in function *note compile(): 1f8. to
enable the feature in dynamically compiled code.  This flag is stored
in the `compiler_flag' attribute on `_Feature' instances.

  No feature description will ever be deleted from *note __future__: 1.
Since its introduction in Python 2.1 the following features have found
their way into the language using this mechanism:

feature                optional in       mandatory in       effect
-------------------------------------------------------------------------------------------------------------- 
nested_scopes          2.1.0b1           2.2                PEP 227(1): _Statically Nested Scopes_
generators             2.2.0a1           2.3                PEP 255(2): _Simple Generators_
division               2.2.0a2           3.0                PEP 238(3): _Changing the Division Operator_
absolute_import        2.5.0a1           2.7                PEP 328(4): _Imports: Multi-Line and
                                                            Absolute/Relative_
with_statement         2.5.0a1           2.6                PEP 343(5): _The "with" Statement_
print_function         2.6.0a2           3.0                PEP 3105(6): _Make print a function_
unicode_literals       2.6.0a2           3.0                PEP 3112(7): _Bytes literals in Python 3000_

See also
........

*note Future statements: 7fc.
     How the compiler treats future imports.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0227

  (2) http://www.python.org/dev/peps/pep-0255

  (3) http://www.python.org/dev/peps/pep-0238

  (4) http://www.python.org/dev/peps/pep-0328

  (5) http://www.python.org/dev/peps/pep-0343

  (6) http://www.python.org/dev/peps/pep-3105

  (7) http://www.python.org/dev/peps/pep-3112


File: python.info,  Node: gc --- Garbage Collector interface,  Next: inspect --- Inspect live objects,  Prev: __future__ --- Future statement definitions,  Up: Python Runtime Services

5.27.12 `gc' -- Garbage Collector interface
-------------------------------------------

This module provides an interface to the optional garbage collector.  It
provides the ability to disable the collector, tune the collection
frequency, and set debugging options.  It also provides access to
unreachable objects that the collector found but cannot free.  Since
the collector supplements the reference counting already used in
Python, you can disable the collector if you are sure your program does
not create reference cycles.  Automatic collection can be disabled by
calling `gc.disable()'.  To debug a leaking program call
`gc.set_debug(gc.DEBUG_LEAK)'. Notice that this includes
`gc.DEBUG_SAVEALL', causing garbage-collected objects to be saved in
gc.garbage for inspection.

  The *note gc: dc. module provides the following functions:

 -- Function: gc.enable ()
     Enable automatic garbage collection.

 -- Function: gc.disable ()
     Disable automatic garbage collection.

 -- Function: gc.isenabled ()
     Returns true if automatic collection is enabled.

 -- Function: gc.collect ([generation])
     With no arguments, run a full collection.  The optional argument
     _generation_ may be an integer specifying which generation to
     collect (from 0 to 2).  A *note ValueError: 233. is raised if the
     generation number  is invalid. The number of unreachable objects
     found is returned.

     Changed in version 2.5: The optional _generation_ argument was
     added.

     Changed in version 2.6: The free lists maintained for a number of
     built-in types are cleared whenever a full collection or
     collection of the highest generation (2) is run.  Not all items in
     some free lists may be freed due to the particular implementation,
     in particular *note int: 1ef. and *note float: 1e8.

 -- Function: gc.set_debug (flags)
     Set the garbage collection debugging flags. Debugging information
     will be written to `sys.stderr'.  See below for a list of
     debugging flags which can be combined using bit operations to
     control debugging.

 -- Function: gc.get_debug ()
     Return the debugging flags currently set.

 -- Function: gc.get_objects ()
     Returns a list of all objects tracked by the collector, excluding
     the list returned.

     New in version 2.2.

 -- Function: gc.set_threshold (threshold0[, threshold1[, threshold2]])
     Set the garbage collection thresholds (the collection frequency).
     Setting _threshold0_ to zero disables collection.

     The GC classifies objects into three generations depending on how
     many collection sweeps they have survived.  New objects are placed
     in the youngest generation (generation `0').  If an object
     survives a collection it is moved into the next older generation.
     Since generation `2' is the oldest generation, objects in that
     generation remain there after a collection.  In order to decide
     when to run, the collector keeps track of the number object
     allocations and deallocations since the last collection.  When the
     number of allocations minus the number of deallocations exceeds
     _threshold0_, collection starts.  Initially only generation `0' is
     examined.  If generation `0' has been examined more than
     _threshold1_ times since generation `1' has been examined, then
     generation `1' is examined as well.  Similarly, _threshold2_
     controls the number of collections of generation `1' before
     collecting generation `2'.

 -- Function: gc.get_count ()
     Return the current collection  counts as a tuple of `(count0,
     count1, count2)'.

     New in version 2.5.

 -- Function: gc.get_threshold ()
     Return the current collection thresholds as a tuple of
     `(threshold0, threshold1, threshold2)'.

 -- Function: gc.get_referrers (*objs)
     Return the list of objects that directly refer to any of objs.
     This function will only locate those containers which support
     garbage collection; extension types which do refer to other
     objects but do not support garbage collection will not be found.

     Note that objects which have already been dereferenced, but which
     live in cycles and have not yet been collected by the garbage
     collector can be listed among the resulting referrers.  To get
     only currently live objects, call *note collect(): 3af.  before
     calling *note get_referrers(): 2390.

     Care must be taken when using objects returned by *note
     get_referrers(): 2390. because some of them could still be under
     construction and hence in a temporarily invalid state. Avoid using
     *note get_referrers(): 2390. for any purpose other than debugging.

     New in version 2.2.

 -- Function: gc.get_referents (*objs)
     Return a list of objects directly referred to by any of the
     arguments. The referents returned are those objects visited by the
     arguments' C-level `tp_traverse' methods (if any), and may not be
     all objects actually directly reachable.  `tp_traverse' methods
     are supported only by objects that support garbage collection, and
     are only required to visit objects that may be involved in a
     cycle.  So, for example, if an integer is directly reachable from
     an argument, that integer object may or may not appear in the
     result list.

     New in version 2.3.

 -- Function: gc.is_tracked (obj)
     Returns True if the object is currently tracked by the garbage
     collector, False otherwise.  As a general rule, instances of
     atomic types aren't tracked and instances of non-atomic types
     (containers, user-defined objects...) are.  However, some
     type-specific optimizations can be present in order to suppress
     the garbage collector footprint of simple instances (e.g. dicts
     containing only atomic keys and values):

         >>> gc.is_tracked(0)
         False
         >>> gc.is_tracked("a")
         False
         >>> gc.is_tracked([])
         True
         >>> gc.is_tracked({})
         False
         >>> gc.is_tracked({"a": 1})
         False
         >>> gc.is_tracked({"a": []})
         True

     New in version 2.7.

  The following variable is provided for read-only access (you can
mutate its value but should not rebind it):

 -- Data: gc.garbage
     A list of objects which the collector found to be unreachable but
     could not be freed (uncollectable objects).  By default, this list
     contains only objects with *note __del__(): 6e0. methods. (1)
     Objects that have *note __del__(): 6e0. methods and are part of a
     reference cycle cause the entire reference cycle to be
     uncollectable, including objects not necessarily in the cycle but
     reachable only from it.  Python doesn't collect such cycles
     automatically because, in general, it isn't possible for Python to
     guess a safe order in which to run the *note __del__(): 6e0.
     methods.  If you know a safe order, you can force the issue by
     examining the _garbage_ list, and explicitly breaking cycles due
     to your objects within the list.  Note that these objects are kept
     alive even so by virtue of being in the _garbage_ list, so they
     should be removed from _garbage_ too.  For example, after breaking
     cycles, do `del gc.garbage[:]' to empty the list.  It's generally
     better to avoid the issue by not creating cycles containing objects
     with *note __del__(): 6e0. methods, and _garbage_ can be examined
     in that case to verify that no such cycles are being created.

     If *note DEBUG_SAVEALL: 2393. is set, then all unreachable objects
     will be added to this list rather than freed.

  The following constants are provided for use with *note set_debug():
238a.:

 -- Data: gc.DEBUG_STATS
     Print statistics during collection.  This information can be
     useful when tuning the collection frequency.

 -- Data: gc.DEBUG_COLLECTABLE
     Print information on collectable objects found.

 -- Data: gc.DEBUG_UNCOLLECTABLE
     Print information of uncollectable objects found (objects which
     are not reachable but cannot be freed by the collector).  These
     objects will be added to the `garbage' list.

 -- Data: gc.DEBUG_INSTANCES
     When *note DEBUG_COLLECTABLE: 2395. or *note DEBUG_UNCOLLECTABLE:
     2396. is set, print information about instance objects found.

 -- Data: gc.DEBUG_OBJECTS
     When *note DEBUG_COLLECTABLE: 2395. or *note DEBUG_UNCOLLECTABLE:
     2396. is set, print information about objects other than instance
     objects found.

 -- Data: gc.DEBUG_SAVEALL
     When set, all unreachable objects found will be appended to
     _garbage_ rather than being freed.  This can be useful for
     debugging a leaking program.

 -- Data: gc.DEBUG_LEAK
     The debugging flags necessary for the collector to print
     information about a leaking program (equal to `DEBUG_COLLECTABLE |
     DEBUG_UNCOLLECTABLE | DEBUG_INSTANCES | DEBUG_OBJECTS |
     DEBUG_SAVEALL').

  ---------- Footnotes ----------

  (1) Prior to Python 2.2, the list contained all instance objects in
unreachable cycles,  not only those with *note __del__(): 6e0. methods.


File: python.info,  Node: inspect --- Inspect live objects,  Next: site --- Site-specific configuration hook,  Prev: gc --- Garbage Collector interface,  Up: Python Runtime Services

5.27.13 `inspect' -- Inspect live objects
-----------------------------------------

New in version 2.1.

  The *note inspect: f9. module provides several useful functions to
help get information about live objects such as modules, classes,
methods, functions, tracebacks, frame objects, and code objects.  For
example, it can help you examine the contents of a class, retrieve the
source code of a method, extract and format the argument list for a
function, or get all the information you need to display a detailed
traceback.

  There are four main kinds of services provided by this module: type
checking, getting source code, inspecting classes and functions, and
examining the interpreter stack.

* Menu:

* Types and members::
* Retrieving source code::
* Classes and functions: Classes and functions<2>.
* The interpreter stack::


File: python.info,  Node: Types and members,  Next: Retrieving source code,  Up: inspect --- Inspect live objects

5.27.13.1 Types and members
...........................

The *note getmembers(): 239e. function retrieves the members of an
object such as a class or module. The sixteen functions whose names
begin with "is" are mainly provided as convenient choices for the
second argument to *note getmembers(): 239e.  They also help you
determine when you can expect to find the following special attributes:

Type            Attribute             Description                     Notes
---------------------------------------------------------------------------------- 
module          __doc__               documentation string            
                __file__              filename (missing for built-in  
                                      modules)                        
class           __doc__               documentation string            
                __module__            name of module in which this    
                                      class was defined               
method          __doc__               documentation string            
                __name__              name with which this method     
                                      was defined                     
                im_class              class object that asked for     (1)
                                      this method                     
                im_func or __func__   function object containing      
                                      implementation of method        
                im_self or __self__   instance to which this method   
                                      is bound, or `None'             
function        __doc__               documentation string            
                __name__              name with which this function   
                                      was defined                     
                func_code             code object containing          
                                      compiled function *note         
                                      bytecode: 567.                  
                func_defaults         tuple of any default values     
                                      for arguments                   
                func_doc              (same as __doc__)               
                func_globals          global namespace in which this  
                                      function was defined            
                func_name             (same as __name__)              
generator       __iter__              defined to support iteration    
                                      over container                  
                close                 raises new GeneratorExit        
                                      exception inside the generator  
                                      to terminate the iteration      
                gi_code               code object                     
                gi_frame              frame object or possibly None   
                                      once the generator has been     
                                      exhausted                       
                gi_running            set to 1 when generator is      
                                      executing, 0 otherwise          
                next                  return the next item from the   
                                      container                       
                send                  resumes the generator and       
                                      "sends" a value that becomes    
                                      the result of the current       
                                      yield-expression                
                throw                 used to raise an exception      
                                      inside the generator            
traceback       tb_frame              frame object at this level      
                tb_lasti              index of last attempted         
                                      instruction in bytecode         
                tb_lineno             current line number in Python   
                                      source code                     
                tb_next               next inner traceback object     
                                      (called by this level)          
frame           f_back                next outer frame object (this   
                                      frame's caller)                 
                f_builtins            builtins namespace seen by      
                                      this frame                      
                f_code                code object being executed in   
                                      this frame                      
                f_exc_traceback       traceback if raised in this     
                                      frame, or `None'                
                f_exc_type            exception type if raised in     
                                      this frame, or `None'           
                f_exc_value           exception value if raised in    
                                      this frame, or `None'           
                f_globals             global namespace seen by this   
                                      frame                           
                f_lasti               index of last attempted         
                                      instruction in bytecode         
                f_lineno              current line number in Python   
                                      source code                     
                f_locals              local namespace seen by this    
                                      frame                           
                f_restricted          0 or 1 if frame is in           
                                      restricted execution mode       
                f_trace               tracing function for this       
                                      frame, or `None'                
code            co_argcount           number of arguments (not        
                                      including * or ** args)         
                co_code               string of raw compiled bytecode 
                co_consts             tuple of constants used in the  
                                      bytecode                        
                co_filename           name of file in which this      
                                      code object was created         
                co_firstlineno        number of first line in Python  
                                      source code                     
                co_flags              bitmap: 1=optimized `|'         
                                      2=newlocals `|' 4=*arg `|'      
                                      8=**arg                         
                co_lnotab             encoded mapping of line         
                                      numbers to bytecode indices     
                co_name               name with which this code       
                                      object was defined              
                co_names              tuple of names of local         
                                      variables                       
                co_nlocals            number of local variables       
                co_stacksize          virtual machine stack space     
                                      required                        
                co_varnames           tuple of names of arguments     
                                      and local variables             
builtin         __doc__               documentation string            
                __name__              original name of this function  
                                      or method                       
                __self__              instance to which a method is   
                                      bound, or `None'                

  Note:

  1. Changed in version 2.2: `im_class' used to refer to the class that
     defined the method.

 -- Function: inspect.getmembers (object[, predicate])
     Return all the members of an object in a list of (name, value)
     pairs sorted by name.  If the optional _predicate_ argument is
     supplied, only members for which the predicate returns a true
     value are included.

          Note: *note getmembers(): 239e. does not return metaclass
          attributes when the argument is a class (this behavior is
          inherited from the *note dir(): 329. function).

 -- Function: inspect.getmoduleinfo (path)
     Return a tuple of values that describe how Python will interpret
     the file identified by _path_ if it is a module, or `None' if it
     would not be identified as a module.  The return tuple is `(name,
     suffix, mode, module_type)', where _name_ is the name of the
     module without the name of any enclosing package, _suffix_ is the
     trailing part of the file name (which may not be a dot-delimited
     extension), _mode_ is the *note open(): 2cb. mode that would be
     used (`'r'' or `'rb''), and _module_type_ is an integer giving the
     type of the module.  _module_type_ will have a value which can be
     compared to the constants defined in the *note imp: f6. module;
     see the documentation for that module for more information on
     module types.

     Changed in version 2.6: Returns a *note named tuple: 9e9.
     `ModuleInfo(name, suffix, mode, module_type)'.

 -- Function: inspect.getmodulename (path)
     Return the name of the module named by the file _path_, without
     including the names of enclosing packages.  This uses the same
     algorithm as the interpreter uses when searching for modules.  If
     the name cannot be matched according to the interpreter's rules,
     `None' is returned.

 -- Function: inspect.ismodule (object)
     Return true if the object is a module.

 -- Function: inspect.isclass (object)
     Return true if the object is a class, whether built-in or created
     in Python code.

 -- Function: inspect.ismethod (object)
     Return true if the object is a bound method written in Python.

 -- Function: inspect.isfunction (object)
     Return true if the object is a Python function, which includes
     functions created by a *note lambda: 23a5. expression.

 -- Function: inspect.isgeneratorfunction (object)
     Return true if the object is a Python generator function.

     New in version 2.6.

 -- Function: inspect.isgenerator (object)
     Return true if the object is a generator.

     New in version 2.6.

 -- Function: inspect.istraceback (object)
     Return true if the object is a traceback.

 -- Function: inspect.isframe (object)
     Return true if the object is a frame.

 -- Function: inspect.iscode (object)
     Return true if the object is a code.

 -- Function: inspect.isbuiltin (object)
     Return true if the object is a built-in function or a bound
     built-in method.

 -- Function: inspect.isroutine (object)
     Return true if the object is a user-defined or built-in function
     or method.

 -- Function: inspect.isabstract (object)
     Return true if the object is an abstract base class.

     New in version 2.6.

 -- Function: inspect.ismethoddescriptor (object)
     Return true if the object is a method descriptor, but not if *note
     ismethod(): 23a3, *note isclass(): 23a2, *note isfunction(): 23a4.
     or *note isbuiltin(): 23ab.  are true.

     This is new as of Python 2.2, and, for example, is true of
     `int.__add__'. An object passing this test has a `__get__'
     attribute but not a `__set__' attribute, but beyond that the set
     of attributes varies.  `__name__' is usually sensible, and
     `__doc__' often is.

     Methods implemented via descriptors that also pass one of the
     other tests return false from the *note ismethoddescriptor():
     23ae. test, simply because the other tests promise more - you can,
     e.g., count on having the `im_func' attribute (etc) when an object
     passes *note ismethod(): 23a3.

 -- Function: inspect.isdatadescriptor (object)
     Return true if the object is a data descriptor.

     Data descriptors have both a `__get__' and a `__set__' attribute.
     Examples are properties (defined in Python), getsets, and members.
     The latter two are defined in C and there are more specific tests
     available for those types, which is robust across Python
     implementations.  Typically, data descriptors will also have
     `__name__' and `__doc__' attributes (properties, getsets, and
     members have both of these attributes), but this is not guaranteed.

     New in version 2.3.

 -- Function: inspect.isgetsetdescriptor (object)
     Return true if the object is a getset descriptor.

     *CPython implementation detail:* getsets are attributes defined in
     extension modules via `PyGetSetDef' structures.  For Python
     implementations without such types, this method will always return
     `False'.

     New in version 2.5.

 -- Function: inspect.ismemberdescriptor (object)
     Return true if the object is a member descriptor.

     *CPython implementation detail:* Member descriptors are attributes
     defined in extension modules via *note PyMemberDef: 2b9.
     structures.  For Python implementations without such types, this
     method will always return `False'.

     New in version 2.5.


File: python.info,  Node: Retrieving source code,  Next: Classes and functions<2>,  Prev: Types and members,  Up: inspect --- Inspect live objects

5.27.13.2 Retrieving source code
................................

 -- Function: inspect.getdoc (object)
     Get the documentation string for an object, cleaned up with *note
     cleandoc(): 23b5.

 -- Function: inspect.getcomments (object)
     Return in a single string any lines of comments immediately
     preceding the object's source code (for a class, function, or
     method), or at the top of the Python source file (if the object is
     a module).

 -- Function: inspect.getfile (object)
     Return the name of the (text or binary) file in which an object
     was defined.  This will fail with a *note TypeError: 215. if the
     object is a built-in module, class, or function.

 -- Function: inspect.getmodule (object)
     Try to guess which module an object was defined in.

 -- Function: inspect.getsourcefile (object)
     Return the name of the Python source file in which an object was
     defined.  This will fail with a *note TypeError: 215. if the
     object is a built-in module, class, or function.

 -- Function: inspect.getsourcelines (object)
     Return a list of source lines and starting line number for an
     object. The argument may be a module, class, method, function,
     traceback, frame, or code object.  The source code is returned as
     a list of the lines corresponding to the object and the line
     number indicates where in the original source file the first line
     of code was found.  An *note IOError: 1f7. is raised if the source
     code cannot be retrieved.

 -- Function: inspect.getsource (object)
     Return the text of the source code for an object. The argument may
     be a module, class, method, function, traceback, frame, or code
     object.  The source code is returned as a single string.  An *note
     IOError: 1f7. is raised if the source code cannot be retrieved.

 -- Function: inspect.cleandoc (doc)
     Clean up indentation from docstrings that are indented to line up
     with blocks of code.  Any whitespace that can be uniformly removed
     from the second line onwards is removed.  Also, all tabs are
     expanded to spaces.

     New in version 2.6.


File: python.info,  Node: Classes and functions<2>,  Next: The interpreter stack,  Prev: Retrieving source code,  Up: inspect --- Inspect live objects

5.27.13.3 Classes and functions
...............................

 -- Function: inspect.getclasstree (classes[, unique])
     Arrange the given list of classes into a hierarchy of nested
     lists. Where a nested list appears, it contains classes derived
     from the class whose entry immediately precedes the list.  Each
     entry is a 2-tuple containing a class and a tuple of its base
     classes.  If the _unique_ argument is true, exactly one entry
     appears in the returned structure for each class in the given
     list.  Otherwise, classes using multiple inheritance and their
     descendants will appear multiple times.

 -- Function: inspect.getargspec (func)
     Get the names and default values of a Python function's arguments.
     A tuple of four things is returned: `(args, varargs, keywords,
     defaults)'. _args_ is a list of the argument names (it may contain
     nested lists). _varargs_ and _keywords_ are the names of the `*'
     and `**' arguments or `None'. _defaults_ is a tuple of default
     argument values or None if there are no default arguments; if this
     tuple has _n_ elements, they correspond to the last _n_ elements
     listed in _args_.

     Changed in version 2.6: Returns a *note named tuple: 9e9.
     `ArgSpec(args, varargs, keywords, defaults)'.

 -- Function: inspect.getargvalues (frame)
     Get information about arguments passed into a particular frame. A
     tuple of four things is returned: `(args, varargs, keywords,
     locals)'. _args_ is a list of the argument names (it may contain
     nested lists). _varargs_ and _keywords_ are the names of the `*'
     and `**' arguments or `None'.  _locals_ is the locals dictionary
     of the given frame.

     Changed in version 2.6: Returns a *note named tuple: 9e9.
     `ArgInfo(args, varargs, keywords, locals)'.

 -- Function: inspect.formatargspec (args[, varargs, varkw, defaults,
          formatarg, formatvarargs, formatvarkw, formatvalue, join])
     Format a pretty argument spec from the four values returned by
     *note getargspec(): 23bf.  The format* arguments are the
     corresponding optional formatting functions that are called to
     turn names and values into strings.

 -- Function: inspect.formatargvalues (args[, varargs, varkw, locals,
          formatarg, formatvarargs, formatvarkw, formatvalue, join])
     Format a pretty argument spec from the four values returned by
     *note getargvalues(): 23c0.  The format* arguments are the
     corresponding optional formatting functions that are called to
     turn names and values into strings.

 -- Function: inspect.getmro (cls)
     Return a tuple of class cls's base classes, including cls, in
     method resolution order.  No class appears more than once in this
     tuple. Note that the method resolution order depends on cls's
     type.  Unless a very peculiar user-defined metatype is in use, cls
     will be the first element of the tuple.

 -- Function: inspect.getcallargs (func[, *args][, **kwds])
     Bind the _args_ and _kwds_ to the argument names of the Python
     function or method _func_, as if it was called with them. For
     bound methods, bind also the first argument (typically named
     `self') to the associated instance. A dict is returned, mapping
     the argument names (including the names of the `*' and `**'
     arguments, if any) to their values from _args_ and _kwds_. In case
     of invoking _func_ incorrectly, i.e. whenever `func(*args,
     **kwds)' would raise an exception because of incompatible
     signature, an exception of the same type and the same or similar
     message is raised. For example:

         >>> from inspect import getcallargs
         >>> def f(a, b=1, *pos, **named):
         ...     pass
         >>> getcallargs(f, 1, 2, 3)
         {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}
         >>> getcallargs(f, a=2, x=4)
         {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()}
         >>> getcallargs(f)
         Traceback (most recent call last):
         ...
         TypeError: f() takes at least 1 argument (0 given)

     New in version 2.7.


File: python.info,  Node: The interpreter stack,  Prev: Classes and functions<2>,  Up: inspect --- Inspect live objects

5.27.13.4 The interpreter stack
...............................

When the following functions return "frame records," each record is a
tuple of six items: the frame object, the filename, the line number of
the current line, the function name, a list of lines of context from
the source code, and the index of the current line within that list.

     Note: Keeping references to frame objects, as found in the first
     element of the frame records these functions return, can cause
     your program to create reference cycles.  Once a reference cycle
     has been created, the lifespan of all objects which can be
     accessed from the objects which form the cycle can become much
     longer even if Python's optional cycle detector is enabled.  If
     such cycles must be created, it is important to ensure they are
     explicitly broken to avoid the delayed destruction of objects and
     increased memory consumption which occurs.

     Though the cycle detector will catch these, destruction of the
     frames (and local variables) can be made deterministic by removing
     the cycle in a *note finally: 385. clause.  This is also important
     if the cycle detector was disabled when Python was compiled or
     using *note gc.disable(): 2388.  For example:

         def handle_stackframe_without_leak():
             frame = inspect.currentframe()
             try:
                 # do something with the frame
             finally:
                 del frame



  The optional _context_ argument supported by most of these functions
specifies the number of lines of context to return, which are centered
around the current line.

 -- Function: inspect.getframeinfo (frame[, context])
     Get information about a frame or traceback object.  A 5-tuple is
     returned, the last five elements of the frame's frame record.

     Changed in version 2.6: Returns a *note named tuple: 9e9.
     `Traceback(filename, lineno, function, code_context, index)'.

 -- Function: inspect.getouterframes (frame[, context])
     Get a list of frame records for a frame and all outer frames.
     These frames represent the calls that lead to the creation of
     _frame_. The first entry in the returned list represents _frame_;
     the last entry represents the outermost call on _frame_'s stack.

 -- Function: inspect.getinnerframes (traceback[, context])
     Get a list of frame records for a traceback's frame and all inner
     frames.  These frames represent calls made as a consequence of
     _frame_.  The first entry in the list represents _traceback_; the
     last entry represents where the exception was raised.

 -- Function: inspect.currentframe ()
     Return the frame object for the caller's stack frame.

     *CPython implementation detail:* This function relies on Python
     stack frame support in the interpreter, which isn't guaranteed to
     exist in all implementations of Python.  If running in an
     implementation without Python stack frame support this function
     returns `None'.

 -- Function: inspect.stack ([context])
     Return a list of frame records for the caller's stack.  The first
     entry in the returned list represents the caller; the last entry
     represents the outermost call on the stack.

 -- Function: inspect.trace ([context])
     Return a list of frame records for the stack between the current
     frame and the frame in which an exception currently being handled
     was raised in.  The first entry in the list represents the caller;
     the last entry represents where the exception was raised.


File: python.info,  Node: site --- Site-specific configuration hook,  Next: user --- User-specific configuration hook,  Prev: inspect --- Inspect live objects,  Up: Python Runtime Services

5.27.14 `site' -- Site-specific configuration hook
--------------------------------------------------

*This module is automatically imported during initialization.* The
automatic import can be suppressed using the interpreter's *note -S:
61a. option.

  Importing this module will append site-specific paths to the module
search path.

  It starts by constructing up to four directories from a head and a
tail part.  For the head part, it uses `sys.prefix' and
`sys.exec_prefix'; empty heads are skipped.  For the tail part, it uses
the empty string and then `lib/site-packages' (on Windows) or
`lib/python|version|/site-packages' and then `lib/site-python' (on Unix
and Macintosh).  For each of the distinct head-tail combinations, it
sees if it refers to an existing directory, and if so, adds it to
`sys.path' and also inspects the newly added path for configuration
files.

  A path configuration file is a file whose name has the form
`package.pth' and exists in one of the four directories mentioned
above; its contents are additional items (one per line) to be added to
`sys.path'.  Non-existing items are never added to `sys.path', but no
check is made that the item refers to a directory (rather than a file).
No item is added to `sys.path' more than once.  Blank lines and lines
beginning with `#' are skipped.  Lines starting with `import' (followed
by space or tab) are executed.

  Changed in version 2.6: A space or tab is now required after the
import keyword.

  For example, suppose `sys.prefix' and `sys.exec_prefix' are set to
`/usr/local'.  The Python X.Y library is then installed in
`/usr/local/lib/python_X.Y_' (where only the first three characters of
`sys.version' are used to form the installation path name).  Suppose
this has a subdirectory `/usr/local/lib/python_X.Y_/site-packages' with
three subsubdirectories, `foo', `bar' and `spam', and two path
configuration files, `foo.pth' and `bar.pth'.  Assume `foo.pth'
contains the following:

    # foo package configuration

    foo
    bar
    bletch

and `bar.pth' contains:

    # bar package configuration

    bar

Then the following version-specific directories are added to
`sys.path', in this order:

    /usr/local/lib/pythonX.Y/site-packages/bar
    /usr/local/lib/pythonX.Y/site-packages/foo

Note that `bletch' is omitted because it doesn't exist; the `bar'
directory precedes the `foo' directory because `bar.pth' comes
alphabetically before `foo.pth'; and `spam' is omitted because it is
not mentioned in either path configuration file.

  After these path manipulations, an attempt is made to import a module
named `sitecustomize', which can perform arbitrary site-specific
customizations.  If this import fails with an *note ImportError: 35f.
exception, it is silently ignored.

  Note that for some non-Unix systems, `sys.prefix' and
`sys.exec_prefix' are empty, and the path manipulations are skipped;
however the import of `sitecustomize' is still attempted.

 -- Data: site.PREFIXES
     A list of prefixes for site package directories

     New in version 2.6.

 -- Data: site.ENABLE_USER_SITE
     Flag showing the status of the user site directory. True means the
     user site directory is enabled and added to sys.path. When the flag
     is None the user site directory is disabled for security reasons.

     New in version 2.6.

 -- Data: site.USER_SITE
     Path to the user site directory for the current Python version or
     None

     New in version 2.6.

 -- Data: site.USER_BASE
     Path to the base directory for user site directories

     New in version 2.6.

 -- Environment Variable: PYTHONNOUSERSITE
     New in version 2.6.

 -- Environment Variable: PYTHONUSERBASE
     New in version 2.6.

 -- Function: site.addsitedir (sitedir, known_paths=None)
     Adds a directory to sys.path and processes its pth files.

 -- Function: site.getsitepackages ()
     Returns a list containing all global site-packages directories
     (and possibly site-python).

     New in version 2.7.

 -- Function: site.getuserbase ()
     Returns the "user base" directory path.

     The "user base" directory can be used to store data. If the global
     variable `USER_BASE' is not initialized yet, this function will
     also set it.

     New in version 2.7.

 -- Function: site.getusersitepackages ()
     Returns the user-specific site-packages directory path.

     If the global variable `USER_SITE' is not initialized yet, this
     function will also set it.

     New in version 2.7.


File: python.info,  Node: user --- User-specific configuration hook,  Next: fpectl --- Floating point exception control,  Prev: site --- Site-specific configuration hook,  Up: Python Runtime Services

5.27.15 `user' -- User-specific configuration hook
--------------------------------------------------

Deprecated since version 2.6: The *note user: 18c. module has been
removed in Python 3.0.

  As a policy, Python doesn't run user-specified code on startup of
Python programs.  (Only interactive sessions execute the script
specified in the *note PYTHONSTARTUP: 500. environment variable if it
exists).

  However, some programs or sites may find it convenient to allow users
to have a standard customization file, which gets run when a program
requests it.  This module implements such a mechanism.  A program that
wishes to use the mechanism must execute the statement

    import user


  The *note user: 18c. module looks for a file `.pythonrc.py' in the
user's home directory and if it can be opened, executes it (using *note
execfile(): 425.) in its own (the module *note user: 18c.'s) global
namespace.  Errors during this phase are not caught; that's up to the
program that imports the *note user: 18c. module, if it wishes.  The
home directory is assumed to be named by the `HOME' environment
variable; if this is not set, the current directory is used.

  The user's `.pythonrc.py' could conceivably test for `sys.version' if
it wishes to do different things depending on the Python version.

  A warning to users: be very conservative in what you place in your
`.pythonrc.py' file.  Since you don't know which programs will use it,
changing the behavior of standard modules or functions is generally not
a good idea.

  A suggestion for programmers who wish to use this mechanism: a simple
way to let users specify options for your package is to have them
define variables in their `.pythonrc.py' file that you test in your
module.  For example, a module `spam' that has a verbosity level can
look for a variable `user.spam_verbose', as follows:

    import user

    verbose = bool(getattr(user, "spam_verbose", 0))

(The three-argument form of *note getattr(): 844. is used in case the
user has not defined `spam_verbose' in their `.pythonrc.py' file.)

  Programs with extensive customization needs are better off reading a
program-specific customization file.

  Programs with security or privacy concerns should _not_ import this
module; a user can easily break into a program by placing arbitrary
code in the `.pythonrc.py' file.

  Modules for general use should _not_ import this module; it may
interfere with the operation of the importing program.

See also
........

Module *note site: 159.
     Site-wide customization mechanism.


File: python.info,  Node: fpectl --- Floating point exception control,  Next: distutils --- Building and installing Python modules,  Prev: user --- User-specific configuration hook,  Up: Python Runtime Services

5.27.16 `fpectl' -- Floating point exception control
----------------------------------------------------

     Note: The *note fpectl: d5. module is not built by default, and
     its usage is discouraged and may be dangerous except in the hands
     of experts.  See also the section *note Limitations and other
     considerations: 23d9. on limitations for more details.

Most computers carry out floating point operations in conformance with
the so-called IEEE-754 standard. On any real computer, some floating
point operations produce results that cannot be expressed as a normal
floating point value. For example, try

    >>> import math
    >>> math.exp(1000)
    inf
    >>> math.exp(1000) / math.exp(1000)
    nan

(The example above will work on many platforms. DEC Alpha may be one
exception.)  "Inf" is a special, non-numeric value in IEEE-754 that
stands for "infinity", and "nan" means "not a number." Note that, other
than the non-numeric results, nothing special happened when you asked
Python to carry out those calculations.  That is in fact the default
behaviour prescribed in the IEEE-754 standard, and if it works for you,
stop reading now.

  In some circumstances, it would be better to raise an exception and
stop processing at the point where the faulty operation was attempted.
The *note fpectl: d5. module is for use in that situation. It provides
control over floating point units from several hardware manufacturers,
allowing the user to turn on the generation of `SIGFPE' whenever any of
the IEEE-754 exceptions Division by Zero, Overflow, or Invalid
Operation occurs. In tandem with a pair of wrapper macros that are
inserted into the C code comprising your python system, `SIGFPE' is
trapped and converted into the Python *note FloatingPointError: 23da.
exception.

  The *note fpectl: d5. module defines the following functions and may
raise the given exception:

 -- Function: fpectl.turnon_sigfpe ()
     Turn on the generation of `SIGFPE', and set up an appropriate
     signal handler.

 -- Function: fpectl.turnoff_sigfpe ()
     Reset default handling of floating point exceptions.

 -- Exception: fpectl.FloatingPointError
     After *note turnon_sigfpe(): 23db. has been executed, a floating
     point operation that raises one of the IEEE-754 exceptions
     Division by Zero, Overflow, or Invalid operation will in turn
     raise this standard Python exception.

* Menu:

* Example: Example<12>.
* Limitations and other considerations::


File: python.info,  Node: Example<12>,  Next: Limitations and other considerations,  Up: fpectl --- Floating point exception control

5.27.16.1 Example
.................

The following example demonstrates how to start up and test operation
of the *note fpectl: d5. module.

    >>> import fpectl
    >>> import fpetest
    >>> fpectl.turnon_sigfpe()
    >>> fpetest.test()
    overflow        PASS
    FloatingPointError: Overflow

    div by 0        PASS
    FloatingPointError: Division by zero
      [ more output from test elided ]
    >>> import math
    >>> math.exp(1000)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    FloatingPointError: in math_1



File: python.info,  Node: Limitations and other considerations,  Prev: Example<12>,  Up: fpectl --- Floating point exception control

5.27.16.2 Limitations and other considerations
..............................................

Setting up a given processor to trap IEEE-754 floating point errors
currently requires custom code on a per-architecture basis. You may
have to modify *note fpectl: d5. to control your particular hardware.

  Conversion of an IEEE-754 exception to a Python exception requires
that the wrapper macros `PyFPE_START_PROTECT' and `PyFPE_END_PROTECT'
be inserted into your code in an appropriate fashion.  Python itself
has been modified to support the *note fpectl: d5. module, but many
other codes of interest to numerical analysts have not.

  The *note fpectl: d5. module is not thread-safe.

See also
........

Some files in the source distribution may be interesting in learning
more about how this module operates. The include file `Include/pyfpe.h'
discusses the implementation of this module at some length.
`Modules/fpetestmodule.c' gives several examples of use. Many
additional examples can be found in `Objects/floatobject.c'.


File: python.info,  Node: distutils --- Building and installing Python modules,  Prev: fpectl --- Floating point exception control,  Up: Python Runtime Services

5.27.17 `distutils' -- Building and installing Python modules
-------------------------------------------------------------

The *note distutils: 86. package provides support for building and
installing additional modules into a Python installation.  The new
modules may be either 100%-pure Python, or may be extension modules
written in C, or may be collections of Python packages which include
modules coded in both Python and C.

  This package is discussed in two separate chapters:

See also
........

*note Distributing Python Modules: 23e2.
     The manual for developers and packagers of Python modules.  This
     describes how to prepare *note distutils: 86.-based packages so
     that they may be easily installed into an existing Python
     installation.

*note Installing Python Modules: 5f2.
     An "administrators" manual which includes information on
     installing modules into an existing Python installation. You do
     not need to be a Python programmer to read this manual.


File: python.info,  Node: Custom Python Interpreters,  Next: Restricted Execution,  Prev: Python Runtime Services,  Up: The Python Standard Library

5.28 Custom Python Interpreters
===============================

The modules described in this chapter allow writing interfaces similar
to Python's interactive interpreter.  If you want a Python interpreter
that supports some special feature in addition to the Python language,
you should look at the *note code: 62. module.  (The *note codeop: 64.
module is lower-level, used to support compiling a possibly-incomplete
chunk of Python code.)

  The full list of modules described in this chapter is:

* Menu:

* code: code --- Interpreter base classes. Interpreter base classes
* codeop: codeop --- Compile Python code. Compile Python code

code --- Interpreter base classes

* Interactive Interpreter Objects::
* Interactive Console Objects::


File: python.info,  Node: code --- Interpreter base classes,  Next: codeop --- Compile Python code,  Up: Custom Python Interpreters

5.28.1 `code' -- Interpreter base classes
-----------------------------------------

The `code' module provides facilities to implement read-eval-print
loops in Python.  Two classes and convenience functions are included
which can be used to build applications which provide an interactive
interpreter prompt.

 -- Class: code.InteractiveInterpreter ([locals])
     This class deals with parsing and interpreter state (the user's
     namespace); it does not deal with input buffering or prompting or
     input file naming (the filename is always passed in explicitly).
     The optional _locals_ argument specifies the dictionary in which
     code will be executed; it defaults to a newly created dictionary
     with key `'__name__'' set to `'__console__'' and key `'__doc__''
     set to `None'.

 -- Class: code.InteractiveConsole ([locals[, filename]])
     Closely emulate the behavior of the interactive Python
     interpreter. This class builds on *note InteractiveInterpreter:
     23e8. and adds prompting using the familiar `sys.ps1' and
     `sys.ps2', and input buffering.

 -- Function: code.interact ([banner[, readfunc[, local]]])
     Convenience function to run a read-eval-print loop.  This creates
     a new instance of *note InteractiveConsole: 1667. and sets
     _readfunc_ to be used as the *note raw_input(): 83a. method, if
     provided.  If _local_ is provided, it is passed to the *note
     InteractiveConsole: 1667. constructor for use as the default
     namespace for the interpreter loop.  The *note interact(): 23e9.
     method of the instance is then run with _banner_ passed as the
     banner to use, if provided.  The console object is discarded after
     use.

 -- Function: code.compile_command (source[, filename[, symbol]])
     This function is useful for programs that want to emulate Python's
     interpreter main loop (a.k.a. the read-eval-print loop).  The
     tricky part is to determine when the user has entered an
     incomplete command that can be completed by entering more text (as
     opposed to a complete command or a syntax error).  This function
     _almost_ always makes the same decision as the real interpreter
     main loop.

     _source_ is the source string; _filename_ is the optional filename
     from which source was read, defaulting to `'<input>''; and
     _symbol_ is the optional grammar start symbol, which should be
     either `'single'' (the default) or `'eval''.

     Returns a code object (the same as `compile(source, filename,
     symbol)') if the command is complete and valid; `None' if the
     command is incomplete; raises *note SyntaxError: 485. if the
     command is complete and contains a syntax error, or raises *note
     OverflowError: 2cf. or *note ValueError: 233. if the command
     contains an invalid literal.

* Menu:

* Interactive Interpreter Objects::
* Interactive Console Objects::


File: python.info,  Node: Interactive Interpreter Objects,  Next: Interactive Console Objects,  Up: code --- Interpreter base classes

5.28.1.1 Interactive Interpreter Objects
........................................

 -- Method: InteractiveInterpreter.runsource (source[, filename[,
          symbol]])
     Compile and run some source in the interpreter. Arguments are the
     same as for *note compile_command(): 23ea.; the default for
     _filename_ is `'<input>'', and for _symbol_ is `'single''.  One
     several things can happen:

        * The input is incorrect; *note compile_command(): 23ea. raised
          an exception (*note SyntaxError: 485. or *note OverflowError:
          2cf.).  A syntax traceback will be printed by calling the
          *note showsyntaxerror(): 23ee. method.  *note runsource():
          23ed.  returns `False'.

        * The input is incomplete, and more input is required; *note
          compile_command(): 23ea.  returned `None'. *note runsource():
          23ed. returns `True'.

        * The input is complete; *note compile_command(): 23ea.
          returned a code object.  The code is executed by calling the
          *note runcode(): 23ef. (which also handles run-time
          exceptions, except for *note SystemExit: 321.). *note
          runsource(): 23ed. returns `False'.

     The return value can be used to decide whether to use `sys.ps1' or
     `sys.ps2' to prompt the next line.

 -- Method: InteractiveInterpreter.runcode (code)
     Execute a code object. When an exception occurs, *note
     showtraceback(): 23f0. is called to display a traceback.  All
     exceptions are caught except *note SystemExit: 321, which is
     allowed to propagate.

     A note about *note KeyboardInterrupt: 24e.: this exception may
     occur elsewhere in this code, and may not always be caught.  The
     caller should be prepared to deal with it.

 -- Method: InteractiveInterpreter.showsyntaxerror ([filename])
     Display the syntax error that just occurred.  This does not
     display a stack trace because there isn't one for syntax errors.
     If _filename_ is given, it is stuffed into the exception instead
     of the default filename provided by Python's parser, because it
     always uses `'<string>'' when reading from a string. The output is
     written by the *note write(): 23f1. method.

 -- Method: InteractiveInterpreter.showtraceback ()
     Display the exception that just occurred.  We remove the first
     stack item because it is within the interpreter object
     implementation. The output is written by the *note write(): 23f1.
     method.

 -- Method: InteractiveInterpreter.write (data)
     Write a string to the standard error stream (`sys.stderr').
     Derived classes should override this to provide the appropriate
     output handling as needed.


File: python.info,  Node: Interactive Console Objects,  Prev: Interactive Interpreter Objects,  Up: code --- Interpreter base classes

5.28.1.2 Interactive Console Objects
....................................

The *note InteractiveConsole: 1667. class is a subclass of *note
InteractiveInterpreter: 23e8, and so offers all the methods of the
interpreter objects as well as the following additions.

 -- Method: InteractiveConsole.interact ([banner])
     Closely emulate the interactive Python console. The optional
     banner argument specify the banner to print before the first
     interaction; by default it prints a banner similar to the one
     printed by the standard Python interpreter, followed by the class
     name of the console object in parentheses (so as not to confuse
     this with the real interpreter - since it's so close!).

 -- Method: InteractiveConsole.push (line)
     Push a line of source text to the interpreter. The line should not
     have a trailing newline; it may have internal newlines.  The line
     is appended to a buffer and the interpreter's `runsource()' method
     is called with the concatenated contents of the buffer as source.
     If this indicates that the command was executed or invalid, the
     buffer is reset; otherwise, the command is incomplete, and the
     buffer is left as it was after the line was appended.  The return
     value is `True' if more input is required, `False' if the line was
     dealt with in some way (this is the same as `runsource()').

 -- Method: InteractiveConsole.resetbuffer ()
     Remove any unhandled source text from the input buffer.

 -- Method: InteractiveConsole.raw_input ([prompt])
     Write a prompt and read a line.  The returned line does not
     include the trailing newline.  When the user enters the EOF key
     sequence, *note EOFError: 854. is raised.  The base implementation
     uses the built-in function *note raw_input(): 83a.; a subclass may
     replace this with a different implementation.


File: python.info,  Node: codeop --- Compile Python code,  Prev: code --- Interpreter base classes,  Up: Custom Python Interpreters

5.28.2 `codeop' -- Compile Python code
--------------------------------------

The *note codeop: 64. module provides utilities upon which the Python
read-eval-print loop can be emulated, as is done in the *note code: 62.
module.  As a result, you probably don't want to use the module
directly; if you want to include such a loop in your program you
probably want to use the *note code: 62.  module instead.

  There are two parts to this job:

  1. Being able to tell if a line of input completes a Python
     statement: in short, telling whether to print '`>>>'' or '`...''
     next.

  2. Remembering which future statements the user has entered, so
     subsequent input can be compiled with these in effect.

  The *note codeop: 64. module provides a way of doing each of these
things, and a way of doing them both.

  To do just the former:

 -- Function: codeop.compile_command (source[, filename[, symbol]])
     Tries to compile _source_, which should be a string of Python code
     and return a code object if _source_ is valid Python code. In that
     case, the filename attribute of the code object will be
     _filename_, which defaults to `'<input>''. Returns `None' if
     _source_ is _not_ valid Python code, but is a prefix of valid
     Python code.

     If there is a problem with _source_, an exception will be raised.
     *note SyntaxError: 485. is raised if there is invalid Python
     syntax, and *note OverflowError: 2cf. or *note ValueError: 233. if
     there is an invalid literal.

     The _symbol_ argument determines whether _source_ is compiled as a
     statement (`'single'', the default) or as an *note expression:
     231e. (`'eval'').  Any other value will cause *note ValueError:
     233. to  be raised.

          Note: It is possible (but not likely) that the parser stops
          parsing with a successful outcome before reaching the end of
          the source; in this case, trailing symbols may be ignored
          instead of causing an error.  For example, a backslash
          followed by two newlines may be followed by arbitrary garbage.
          This will be fixed once the API for the parser is better.

 -- Class: codeop.Compile
     Instances of this class have *note __call__(): 6d4. methods
     identical in signature to the built-in function *note compile():
     1f8, but with the difference that if the instance compiles program
     text containing a *note __future__: 1. statement, the instance
     'remembers' and compiles all subsequent program texts with the
     statement in force.

 -- Class: codeop.CommandCompiler
     Instances of this class have *note __call__(): 6d4. methods
     identical in signature to *note compile_command(): 23fa.; the
     difference is that if the instance compiles program text
     containing a `__future__' statement, the instance 'remembers' and
     compiles all subsequent program texts with the statement in force.

  A note on version compatibility: the *note Compile: 23fb. and *note
CommandCompiler: 23fc. are new in Python 2.2.  If you want to enable the
future-tracking features of 2.2 but also retain compatibility with 2.1
and earlier versions of Python you can either write

    try:
        from codeop import CommandCompiler
        compile_command = CommandCompiler()
        del CommandCompiler
    except ImportError:
        from codeop import compile_command

which is a low-impact change, but introduces possibly unwanted global
state into your program, or you can write:

    try:
        from codeop import CommandCompiler
    except ImportError:
        def CommandCompiler():
            from codeop import compile_command
            return compile_command

and then call `CommandCompiler' every time you need a fresh compiler
object.


File: python.info,  Node: Restricted Execution,  Next: Importing Modules,  Prev: Custom Python Interpreters,  Up: The Python Standard Library

5.29 Restricted Execution
=========================

     Warning: In Python 2.3 these modules have been disabled due to
     various known and not readily fixable security holes.  The modules
     are still documented here to help in reading old code that uses
     the *note rexec: 148. and *note Bastion: 17. modules.

_Restricted execution_ is the basic framework in Python that allows for
the segregation of trusted and untrusted code.  The framework is based
on the notion that trusted Python code (a _supervisor_) can create a
"padded cell' (or environment) with limited permissions, and run the
untrusted code within this cell.  The untrusted code cannot break out
of its cell, and can only interact with sensitive system resources
through interfaces defined and managed by the trusted code.  The term
"restricted execution" is favored over "safe-Python" since true safety
is hard to define, and is determined by the way the restricted
environment is created.  Note that the restricted environments can be
nested, with inner cells creating subcells of lesser, but never
greater, privilege.

  An interesting aspect of Python's restricted execution model is that
the interfaces presented to untrusted code usually have the same names
as those presented to trusted code.  Therefore no special interfaces
need to be learned to write code designed to run in a restricted
environment.  And because the exact nature of the padded cell is
determined by the supervisor, different restrictions can be imposed,
depending on the application.  For example, it might be deemed "safe"
for untrusted code to read any file within a specified directory, but
never to write a file.  In this case, the supervisor may redefine the
built-in *note open(): 2cb. function so that it raises an exception
whenever the _mode_ parameter is `'w''.  It might also perform a
`chroot()'-like operation on the _filename_ parameter, such that root
is always relative to some safe "sandbox" area of the filesystem.  In
this case, the untrusted code would still see an built-in *note open():
2cb. function in its environment, with the same calling interface.  The
semantics would be identical too, with *note IOError: 1f7.s being
raised when the supervisor determined that an unallowable parameter is
being used.

  The Python run-time determines whether a particular code block is
executing in restricted execution mode based on the identity of the
`__builtins__' object in its global variables: if this is (the
dictionary of) the standard *note __builtin__: 0. module, the code is
deemed to be unrestricted, else it is deemed to be restricted.

  Python code executing in restricted mode faces a number of
limitations that are designed to prevent it from escaping from the
padded cell. For instance, the function object attribute `func_globals'
and the class and instance object attribute `__dict__' are unavailable.

  Two modules provide the framework for setting up restricted execution
environments:

* Menu:

* rexec: rexec --- Restricted execution framework. Restricted execution framework
* Bastion: Bastion --- Restricting access to objects. Restricting access to objects

rexec --- Restricted execution framework

* RExec Objects::
* Defining restricted environments::
* An example::


File: python.info,  Node: rexec --- Restricted execution framework,  Next: Bastion --- Restricting access to objects,  Up: Restricted Execution

5.29.1 `rexec' -- Restricted execution framework
------------------------------------------------

Deprecated since version 2.6: The *note rexec: 148. module has been
removed in Python 3.0.

  Changed in version 2.3: Disabled module.

     Warning: The documentation has been left in place to help in
     reading old code that uses the module.

  This module contains the *note RExec: 2402. class, which supports
`r_eval()', `r_execfile()', `r_exec()', and `r_import()' methods, which
are restricted versions of the standard Python functions *note eval():
34f, *note execfile(): 425. and the *note exec: 3f3. and *note import:
1f1. statements. Code executed in this restricted environment will only
have access to modules and functions that are deemed safe; you can
subclass *note RExec: 2402. to add or remove capabilities as desired.

     Warning: While the *note rexec: 148. module is designed to perform
     as described below, it does have a few known vulnerabilities which
     could be exploited by carefully written code.  Thus it should not
     be relied upon in situations requiring "production ready"
     security.  In such situations, execution via sub-processes or very
     careful "cleansing" of both code and data to be processed may be
     necessary.  Alternatively, help in patching known *note rexec:
     148. vulnerabilities would be welcomed.

     Note: The *note RExec: 2402. class can prevent code from
     performing unsafe operations like reading or writing disk files,
     or using TCP/IP sockets.  However, it does not protect against
     code using extremely large amounts of memory or processor time.

 -- Class: rexec.RExec ([hooks[, verbose]])
     Returns an instance of the *note RExec: 2402. class.

     _hooks_ is an instance of the `RHooks' class or a subclass of it.
     If it is omitted or `None', the default `RHooks' class is
     instantiated.  Whenever the *note rexec: 148. module searches for
     a module (even a built-in one) or reads a module's code, it
     doesn't actually go out to the file system itself.  Rather, it
     calls methods of an `RHooks' instance that was passed to or
     created by its constructor.  (Actually, the *note RExec: 2402.
     object doesn't make these calls -- they are made by a module
     loader object that's part of the *note RExec: 2402. object.  This
     allows another level of flexibility, which can be useful when
     changing the mechanics of *note import: 1f1. within the restricted
     environment.)

     By providing an alternate `RHooks' object, we can control the file
     system accesses made to import a module, without changing the
     actual algorithm that controls the order in which those accesses
     are made.  For instance, we could substitute an `RHooks' object
     that passes all filesystem requests to a file server elsewhere,
     via some RPC mechanism such as ILU.  Grail's applet loader uses
     this to support importing applets from a URL for a directory.

     If _verbose_ is true, additional debugging output may be sent to
     standard output.

  It is important to be aware that code running in a restricted
environment can still call the *note sys.exit(): 2a2. function.  To
disallow restricted code from exiting the interpreter, always protect
calls that cause restricted code to run with a *note try: 384./*note
except: 386. statement that catches the *note SystemExit: 321.
exception.  Removing the *note sys.exit(): 2a2. function from the
restricted environment is not sufficient -- the restricted code could
still use `raise SystemExit'.  Removing *note SystemExit: 321. is not a
reasonable option; some library code makes use of this and would break
were it not available.

See also
........

Grail Home Page(1)
     Grail is a Web browser written entirely in Python.  It uses the
     *note rexec: 148.  module as a foundation for supporting Python
     applets, and can be used as an example usage of this module.

* Menu:

* RExec Objects::
* Defining restricted environments::
* An example::

  ---------- Footnotes ----------

  (1) http://grail.sourceforge.net/


File: python.info,  Node: RExec Objects,  Next: Defining restricted environments,  Up: rexec --- Restricted execution framework

5.29.1.1 RExec Objects
......................

*note RExec: 2402. instances support the following methods:

 -- Method: RExec.r_eval (code)
     _code_ must either be a string containing a Python expression, or
     a compiled code object, which will be evaluated in the restricted
     environment's *note __main__: 2. module.  The value of the
     expression or code object will be returned.

 -- Method: RExec.r_exec (code)
     _code_ must either be a string containing one or more lines of
     Python code, or a compiled code object, which will be executed in
     the restricted environment's *note __main__: 2. module.

 -- Method: RExec.r_execfile (filename)
     Execute the Python code contained in the file _filename_ in the
     restricted environment's *note __main__: 2. module.

  Methods whose names begin with `s_' are similar to the functions
beginning with `r_', but the code will be granted access to restricted
versions of the standard I/O streams `sys.stdin', `sys.stderr', and
`sys.stdout'.

 -- Method: RExec.s_eval (code)
     _code_ must be a string containing a Python expression, which will
     be evaluated in the restricted environment.

 -- Method: RExec.s_exec (code)
     _code_ must be a string containing one or more lines of Python
     code, which will be executed in the restricted environment.

 -- Method: RExec.s_execfile (code)
     Execute the Python code contained in the file _filename_ in the
     restricted environment.

  *note RExec: 2402. objects must also support various methods which
will be implicitly called by code executing in the restricted
environment. Overriding these methods in a subclass is used to change
the policies enforced by a restricted environment.

 -- Method: RExec.r_import (modulename[, globals[, locals[, fromlist]]])
     Import the module _modulename_, raising an *note ImportError: 35f.
     exception if the module is considered unsafe.

 -- Method: RExec.r_open (filename[, mode[, bufsize]])
     Method called when *note open(): 2cb. is called in the restricted
     environment.  The arguments are identical to those of *note
     open(): 2cb, and a file object (or a class instance compatible
     with file objects) should be returned.  *note RExec: 2402.'s
     default behaviour is allow opening any file for reading, but
     forbidding any attempt to write a file.  See the example below for
     an implementation of a less restrictive *note r_open(): 240c.

 -- Method: RExec.r_reload (module)
     Reload the module object _module_, re-parsing and re-initializing
     it.

 -- Method: RExec.r_unload (module)
     Unload the module object _module_ (remove it from the restricted
     environment's `sys.modules' dictionary).

  And their equivalents with access to restricted standard I/O streams:

 -- Method: RExec.s_import (modulename[, globals[, locals[, fromlist]]])
     Import the module _modulename_, raising an *note ImportError: 35f.
     exception if the module is considered unsafe.

 -- Method: RExec.s_reload (module)
     Reload the module object _module_, re-parsing and re-initializing
     it.

 -- Method: RExec.s_unload (module)
     Unload the module object _module_.



File: python.info,  Node: Defining restricted environments,  Next: An example,  Prev: RExec Objects,  Up: rexec --- Restricted execution framework

5.29.1.2 Defining restricted environments
.........................................

The *note RExec: 2402. class has the following class attributes, which
are used by the *note __init__(): 36b. method.  Changing them on an
existing instance won't have any effect; instead, create a subclass of
*note RExec: 2402. and assign them new values in the class definition.
Instances of the new class will then use those new values.  All these
attributes are tuples of strings.

 -- Attribute: RExec.nok_builtin_names
     Contains the names of built-in functions which will _not_ be
     available to programs running in the restricted environment.  The
     value for *note RExec: 2402. is `('open', 'reload',
     '__import__')'. (This gives the exceptions, because by far the
     majority of built-in functions are harmless.  A subclass that
     wants to override this variable should probably start with the
     value from the base class and concatenate additional forbidden
     functions -- when new dangerous built-in functions are added to
     Python, they will also be added to this module.)

 -- Attribute: RExec.ok_builtin_modules
     Contains the names of built-in modules which can be safely
     imported. The value for *note RExec: 2402. is `('audioop',
     'array', 'binascii', 'cmath', 'errno', 'imageop', 'marshal',
     'math', 'md5', 'operator', 'parser', 'regex', 'select', 'sha',
     '_sre', 'strop', 'struct', 'time')'.  A similar remark about
     overriding this variable applies -- use the value from the base
     class as a starting point.

 -- Attribute: RExec.ok_path
     Contains the directories which will be searched when an *note
     import: 1f1. is performed in the restricted environment.   The
     value for *note RExec: 2402. is the same as `sys.path' (at the
     time the module is loaded) for unrestricted code.

 -- Attribute: RExec.ok_posix_names
     Contains the names of the functions in the *note os: 129. module
     which will be available to programs running in the restricted
     environment.  The value for *note RExec: 2402. is `('error',
     'fstat', 'listdir', 'lstat', 'readlink', 'stat', 'times', 'uname',
     'getpid', 'getppid', 'getcwd', 'getuid', 'getgid', 'geteuid',
     'getegid')'.


 -- Attribute: RExec.ok_sys_names
     Contains the names of the functions and variables in the *note
     sys: 16e. module which will be available to programs running in
     the restricted environment.  The value for *note RExec: 2402. is
     `('ps1', 'ps2', 'copyright', 'version', 'platform', 'exit',
     'maxint')'.

 -- Attribute: RExec.ok_file_types
     Contains the file types from which modules are allowed to be
     loaded. Each file type is an integer constant defined in the *note
     imp: f6. module. The meaningful values are `PY_SOURCE',
     `PY_COMPILED', and `C_EXTENSION'.  The value for *note RExec:
     2402. is `(C_EXTENSION, PY_SOURCE)'.  Adding `PY_COMPILED' in
     subclasses is not recommended; an attacker could exit the
     restricted execution mode by putting a forged byte-compiled file
     (`.pyc') anywhere in your file system, for example by writing it to
     `/tmp' or uploading it to the `/incoming' directory of your public
     FTP server.


File: python.info,  Node: An example,  Prev: Defining restricted environments,  Up: rexec --- Restricted execution framework

5.29.1.3 An example
...................

Let us say that we want a slightly more relaxed policy than the standard
*note RExec: 2402. class.  For example, if we're willing to allow files
in `/tmp' to be written, we can subclass the *note RExec: 2402. class:

    class TmpWriterRExec(rexec.RExec):
        def r_open(self, file, mode='r', buf=-1):
            if mode in ('r', 'rb'):
                pass
            elif mode in ('w', 'wb', 'a', 'ab'):
                # check filename : must begin with /tmp/
                if file[:5]!='/tmp/':
                    raise IOError("can't write outside /tmp")
                elif (string.find(file, '/../') >= 0 or
                     file[:3] == '../' or file[-3:] == '/..'):
                    raise IOError("'..' in filename forbidden")
            else: raise IOError("Illegal open() mode")
            return open(file, mode, buf)

Notice that the above code will occasionally forbid a perfectly valid
filename; for example, code in the restricted environment won't be able
to open a file called `/tmp/foo/../bar'.  To fix this, the `r_open()'
method would have to simplify the filename to `/tmp/bar', which would
require splitting apart the filename and performing various operations
on it.  In cases where security is at stake, it may be preferable to
write simple code which is sometimes overly restrictive, instead of
more general code that is also more complex and may harbor a subtle
security hole.


File: python.info,  Node: Bastion --- Restricting access to objects,  Prev: rexec --- Restricted execution framework,  Up: Restricted Execution

5.29.2 `Bastion' -- Restricting access to objects
-------------------------------------------------

Deprecated since version 2.6: The *note Bastion: 17. module has been
removed in Python 3.0.

  Changed in version 2.3: Disabled module.

     Note: The documentation has been left in place to help in reading
     old code that uses the module.

  According to the dictionary, a bastion is "a fortified area or
position", or "something that is considered a stronghold."  It's a
suitable name for this module, which provides a way to forbid access to
certain attributes of an object.  It must always be used with the *note
rexec: 148. module, in order to allow restricted-mode programs access
to certain safe attributes of an object, while denying access to other,
unsafe attributes.

 -- Function: Bastion.Bastion (object[, filter[, name[, class]]])
     Protect the object _object_, returning a bastion for the object.
     Any attempt to access one of the object's attributes will have to
     be approved by the _filter_ function; if the access is denied an
     *note AttributeError: 1f5. exception will be raised.

     If present, _filter_ must be a function that accepts a string
     containing an attribute name, and returns true if access to that
     attribute will be permitted; if _filter_ returns false, the access
     is denied.  The default filter denies access to any function
     beginning with an underscore (`'_'').  The bastion's string
     representation will be `<Bastion for name>' if a value for _name_
     is provided; otherwise, `repr(object)' will be used.

     _class_, if present, should be a subclass of *note BastionClass:
     241e.;  see the code in `bastion.py' for the details.  Overriding
     the default *note BastionClass: 241e. will rarely be required.

 -- Class: Bastion.BastionClass (getfunc, name)
     Class which actually implements bastion objects.  This is the
     default class used by *note Bastion(): 17.  The _getfunc_
     parameter is a function which returns the value of an attribute
     which should be exposed to the restricted execution environment
     when called with the name of the attribute as the only parameter.
     _name_ is used to construct the *note repr(): 146. of the *note
     BastionClass: 241e.  instance.

See also
........

Grail Home Page(1)
     Grail, an Internet browser written in Python, uses these modules
     to support Python applets.  More information on the use of
     Python's restricted execution mode in Grail is available on the
     Web site.

  ---------- Footnotes ----------

  (1) http://grail.sourceforge.net/


File: python.info,  Node: Importing Modules,  Next: Python Language Services,  Prev: Restricted Execution,  Up: The Python Standard Library

5.30 Importing Modules
======================

The modules described in this chapter provide new ways to import other
Python modules and hooks for customizing the import process.

  The full list of modules described in this chapter is:

* Menu:

* imp: imp --- Access the import internals. Access the import internals
* importlib: importlib -- Convenience wrappers for __import__. Convenience wrappers for __import__()
* imputil: imputil --- Import utilities. Import utilities
* zipimport: zipimport --- Import modules from Zip archives. Import modules from Zip archives
* pkgutil: pkgutil --- Package extension utility. Package extension utility
* modulefinder: modulefinder --- Find modules used by a script. Find modules used by a script
* runpy: runpy --- Locating and executing Python modules. Locating and executing Python modules

imp --- Access the import internals

* Examples: Examples<17>.

imputil --- Import utilities

* Examples: Examples<18>.

zipimport --- Import modules from Zip archives

* zipimporter Objects::
* Examples: Examples<19>.

modulefinder --- Find modules used by a script

* Example usage of ModuleFinder::


File: python.info,  Node: imp --- Access the import internals,  Next: importlib -- Convenience wrappers for __import__,  Up: Importing Modules

5.30.1 `imp' -- Access the `import' internals
---------------------------------------------

This module provides an interface to the mechanisms used to implement
the *note import: 1f1. statement.  It defines the following constants
and functions:

 -- Function: imp.get_magic ()
     Return the magic string value used to recognize byte-compiled code
     files (`.pyc' files).  (This value may be different for each
     Python version.)

 -- Function: imp.get_suffixes ()
     Return a list of 3-element tuples, each describing a particular
     type of module. Each triple has the form `(suffix, mode, type)',
     where _suffix_ is a string to be appended to the module name to
     form the filename to search for, _mode_ is the mode string to pass
     to the built-in *note open(): 2cb. function to open the file (this
     can be `'r'' for text files or `'rb'' for binary files), and
     _type_ is the file type, which has one of the values *note
     PY_SOURCE: 2426, *note PY_COMPILED: 2427, or *note C_EXTENSION:
     2428, described below.

 -- Function: imp.find_module (name[, path])
     Try to find the module _name_.  If _path_ is omitted or `None',
     the list of directory names given by `sys.path' is searched, but
     first a few special places are searched: the function tries to
     find a built-in module with the given name (*note C_BUILTIN:
     242a.), then a frozen module (*note PY_FROZEN: 242b.), and on some
     systems some other places are looked in as well (on Windows, it
     looks in the registry which may point to a specific file).

     Otherwise, _path_ must be a list of directory names; each
     directory is searched for files with any of the suffixes returned
     by *note get_suffixes(): 2425.  above.  Invalid names in the list
     are silently ignored (but all list items must be strings).

     If search is successful, the return value is a 3-element tuple
     `(file, pathname, description)':

     _file_ is an open file object positioned at the beginning,
     _pathname_ is the pathname of the file found, and _description_ is
     a 3-element tuple as contained in the list returned by *note
     get_suffixes(): 2425. describing the kind of module found.

     If the module does not live in a file, the returned _file_ is
     `None', _pathname_ is the empty string, and the _description_
     tuple contains empty strings for its suffix and mode; the module
     type is indicated as given in parentheses above.  If the search is
     unsuccessful, *note ImportError: 35f. is raised.  Other exceptions
     indicate problems with the arguments or environment.

     If the module is a package, _file_ is `None', _pathname_ is the
     package path and the last item in the _description_ tuple is *note
     PKG_DIRECTORY: 242c.

     This function does not handle hierarchical module names (names
     containing dots).  In order to find _P_.*M*, that is, submodule
     _M_ of package _P_, use *note find_module(): 2429. and *note
     load_module(): 242d. to find and load package _P_, and then use
     *note find_module(): 2429. with the _path_ argument set to
     `P.__path__'.  When _P_ itself has a dotted name, apply this
     recipe recursively.

 -- Function: imp.load_module (name, file, pathname, description)
     Load a module that was previously found by *note find_module():
     2429. (or by an otherwise conducted search yielding compatible
     results).  This function does more than importing the module: if
     the module was already imported, it is equivalent to a *note
     reload(): 55f.!  The _name_ argument indicates the full module
     name (including the package name, if this is a submodule of a
     package).  The _file_ argument is an open file, and _pathname_ is
     the corresponding file name; these can be `None' and `''',
     respectively, when the module is a package or not being loaded
     from a file.  The _description_ argument is a tuple, as would be
     returned by *note get_suffixes(): 2425, describing what kind of
     module must be loaded.

     If the load is successful, the return value is the module object;
     otherwise, an exception (usually *note ImportError: 35f.) is
     raised.

     *Important:* the caller is responsible for closing the _file_
     argument, if it was not `None', even when an exception is raised.
     This is best done using a *note try: 384 ... *note finally: 385.
     statement.

 -- Function: imp.new_module (name)
     Return a new empty module object called _name_.  This object is
     _not_ inserted in `sys.modules'.

 -- Function: imp.lock_held ()
     Return `True' if the import lock is currently held, else `False'.
     On platforms without threads, always return `False'.

     On platforms with threads, a thread executing an import holds an
     internal lock until the import is complete. This lock blocks other
     threads from doing an import until the original import completes,
     which in turn prevents other threads from seeing incomplete module
     objects constructed by the original thread while in the process of
     completing its import (and the imports, if any, triggered by that).

 -- Function: imp.acquire_lock ()
     Acquire the interpreter's import lock for the current thread.
     This lock should be used by import hooks to ensure thread-safety
     when importing modules.

     Once a thread has acquired the import lock, the same thread may
     acquire it again without blocking; the thread must release it once
     for each time it has acquired it.

     On platforms without threads, this function does nothing.

     New in version 2.3.

 -- Function: imp.release_lock ()
     Release the interpreter's import lock. On platforms without
     threads, this function does nothing.

     New in version 2.3.

  The following constants with integer values, defined in this module,
are used to indicate the search result of *note find_module(): 2429.

 -- Data: imp.PY_SOURCE
     The module was found as a source file.

 -- Data: imp.PY_COMPILED
     The module was found as a compiled code object file.

 -- Data: imp.C_EXTENSION
     The module was found as dynamically loadable shared library.

 -- Data: imp.PKG_DIRECTORY
     The module was found as a package directory.

 -- Data: imp.C_BUILTIN
     The module was found as a built-in module.

 -- Data: imp.PY_FROZEN
     The module was found as a frozen module (see *note init_frozen():
     2432.).

  The following constant and functions are obsolete; their
functionality is available through *note find_module(): 2429. or *note
load_module(): 242d. They are kept around for backward compatibility:

 -- Data: imp.SEARCH_ERROR
     Unused.

 -- Function: imp.init_builtin (name)
     Initialize the built-in module called _name_ and return its module
     object along with storing it in `sys.modules'.  If the module was
     already initialized, it will be initialized _again_.
     Re-initialization involves the copying of the built-in module's
     `__dict__' from the cached module over the module's entry in
     `sys.modules'.  If there is no built-in module called _name_,
     `None' is returned.

 -- Function: imp.init_frozen (name)
     Initialize the frozen module called _name_ and return its module
     object.  If the module was already initialized, it will be
     initialized _again_.  If there is no frozen module called _name_,
     `None' is returned.  (Frozen modules are modules written in Python
     whose compiled byte-code object is incorporated into a
     custom-built Python interpreter by Python's *freeze* utility. See
     `Tools/freeze/' for now.)

 -- Function: imp.is_builtin (name)
     Return `1' if there is a built-in module called _name_ which can be
     initialized again.  Return `-1' if there is a built-in module
     called _name_ which cannot be initialized again (see *note
     init_builtin(): 2434.).  Return `0' if there is no built-in module
     called _name_.

 -- Function: imp.is_frozen (name)
     Return `True' if there is a frozen module (see *note
     init_frozen(): 2432.) called _name_, or `False' if there is no
     such module.

 -- Function: imp.load_compiled (name, pathname[, file])
     Load and initialize a module implemented as a byte-compiled code
     file and return its module object.  If the module was already
     initialized, it will be initialized _again_.  The _name_ argument
     is used to create or access a module object.  The _pathname_
     argument points to the byte-compiled code file.  The _file_
     argument is the byte-compiled code file, open for reading in
     binary mode, from the beginning. It must currently be a real file
     object, not a user-defined class emulating a file.

 -- Function: imp.load_dynamic (name, pathname[, file])
     Load and initialize a module implemented as a dynamically loadable
     shared library and return its module object.  If the module was
     already initialized, it will be initialized _again_.
     Re-initialization involves copying the `__dict__' attribute of the
     cached instance of the module over the value used in the module
     cached in `sys.modules'.  The _pathname_ argument must point to
     the shared library.  The _name_ argument is used to construct the
     name of the initialization function: an external C function called
     `initname()' in the shared library is called.  The optional _file_
     argument is ignored.  (Note: using shared libraries is highly
     system dependent, and not all systems support it.)

 -- Function: imp.load_source (name, pathname[, file])
     Load and initialize a module implemented as a Python source file
     and return its module object.  If the module was already
     initialized, it will be initialized _again_.  The _name_ argument
     is used to create or access a module object.  The _pathname_
     argument points to the source file.  The _file_ argument is the
     source file, open for reading as text, from the beginning. It must
     currently be a real file object, not a user-defined class
     emulating a file.  Note that if a properly matching byte-compiled
     file (with suffix `.pyc' or `.pyo') exists, it will be used
     instead of parsing the given source file.

 -- Class: imp.NullImporter (path_string)
     The *note NullImporter: 232c. type is a PEP 302(1) import hook
     that handles non-directory path strings by failing to find any
     modules.  Calling this type with an existing directory or empty
     string raises *note ImportError: 35f.  Otherwise, a *note
     NullImporter: 232c. instance is returned.

     Python adds instances of this type to `sys.path_importer_cache'
     for any path entries that are not directories and are not handled
     by any other path hooks on `sys.path_hooks'.  Instances have only
     one method:

      -- Method: find_module (fullname[, path])
          This method always returns `None', indicating that the
          requested module could not be found.

     New in version 2.5.

* Menu:

* Examples: Examples<17>.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0302


File: python.info,  Node: Examples<17>,  Up: imp --- Access the import internals

5.30.1.1 Examples
.................

The following function emulates what was the standard import statement
up to Python 1.4 (no hierarchical module names).  (This
_implementation_ wouldn't work in that version, since *note
find_module(): 2429. has been extended and *note load_module(): 242d.
has been added in 1.4.)

    import imp
    import sys

    def __import__(name, globals=None, locals=None, fromlist=None):
        # Fast path: see if the module has already been imported.
        try:
            return sys.modules[name]
        except KeyError:
            pass

        # If any of the following calls raises an exception,
        # there's a problem we can't handle -- let the caller handle it.

        fp, pathname, description = imp.find_module(name)

        try:
            return imp.load_module(name, fp, pathname, description)
        finally:
            # Since we may exit via an exception, close fp explicitly.
            if fp:
                fp.close()


  A more complete example that implements hierarchical module names and
includes a *note reload(): 55f. function can be found in the module
`knee'.  The `knee' module can be found in `Demo/imputil/' in the
Python source distribution.


File: python.info,  Node: importlib -- Convenience wrappers for __import__,  Next: imputil --- Import utilities,  Prev: imp --- Access the import internals,  Up: Importing Modules

5.30.2 `importlib' - Convenience wrappers for `__import__()'
------------------------------------------------------------

New in version 2.7.

  This module is a minor subset of what is available in the more
full-featured package of the same name from Python 3.1 that provides a
complete implementation of *note import: 1f1. What is here has been
provided to help ease in transitioning from 2.7 to 3.1.

 -- Function: importlib.import_module (name, package=None)
     Import a module. The _name_ argument specifies what module to
     import in absolute or relative terms (e.g. either `pkg.mod' or
     `..mod'). If the name is specified in relative terms, then the
     _package_ argument must be specified to the package which is to
     act as the anchor for resolving the package name (e.g.
     `import_module('..mod', 'pkg.subpkg')' will import `pkg.mod').
     The specified module will be inserted into *note sys.modules: 7f5.
     and returned.


File: python.info,  Node: imputil --- Import utilities,  Next: zipimport --- Import modules from Zip archives,  Prev: importlib -- Convenience wrappers for __import__,  Up: Importing Modules

5.30.3 `imputil' -- Import utilities
------------------------------------

Deprecated since version 2.6: The *note imputil: f8. module has been
removed in Python 3.0.

  This module provides a very handy and useful mechanism for custom
*note import: 1f1. hooks. Compared to the older `ihooks' module, *note
imputil: f8. takes a dramatically simpler and more straight-forward
approach to custom *note import: 1f1. functions.

 -- Class: imputil.ImportManager ([fs_imp])
     Manage the import process.

      -- Method: install ([namespace])
          Install this ImportManager into the specified namespace.

      -- Method: uninstall ()
          Restore the previous import mechanism.

      -- Method: add_suffix (suffix, importFunc)
          Undocumented.

 -- Class: imputil.Importer
     Base class for replacing standard import functions.

      -- Method: import_top (name)
          Import a top-level module.

      -- Method: get_code (parent, modname, fqname)
          Find and retrieve the code for the given module.

          _parent_ specifies a parent module to define a context for
          importing.  It may be `None', indicating no particular
          context for the search.

          _modname_ specifies a single module (not dotted) within the
          parent.

          _fqname_ specifies the fully-qualified module name. This is a
          (potentially) dotted name from the "root" of the module
          namespace down to the modname.

          If there is no parent, then modname==fqname.

          This method should return `None', or a 3-tuple.

                  * If the module was not found, then `None' should be
                    returned.

                  * The first item of the 2- or 3-tuple should be the
                    integer 0 or 1, specifying whether the module that
                    was found is a package or not.

                  * The second item is the code object for the module
                    (it will be executed within the new module's
                    namespace). This item can also be a fully-loaded
                    module object (e.g. loaded from a shared lib).

                  * The third item is a dictionary of name/value pairs
                    that will be inserted into new module before the
                    code object is executed. This is provided in case
                    the module's code expects certain values (such as
                    where the module was found). When the second item
                    is a module object, then these names/values will be
                    inserted _after_ the module has been
                    loaded/initialized.

 -- Class: imputil.BuiltinImporter
     Emulate the import mechanism for built-in and frozen modules.
     This is a sub-class of the *note Importer: 2445. class.

      -- Method: get_code (parent, modname, fqname)
          Undocumented.

 -- Function: imputil.py_suffix_importer (filename, finfo, fqname)
     Undocumented.

 -- Class: imputil.DynLoadSuffixImporter ([desc])
     Undocumented.

      -- Method: import_file (filename, finfo, fqname)
          Undocumented.

* Menu:

* Examples: Examples<18>.


File: python.info,  Node: Examples<18>,  Up: imputil --- Import utilities

5.30.3.1 Examples
.................

This is a re-implementation of hierarchical module import.

  This code is intended to be read, not executed.  However, it does work
- all you need to do to enable it is "import knee".

  (The name is a pun on the clunkier predecessor of this module, "ni".)

    import sys, imp, __builtin__

    # Replacement for __import__()
    def import_hook(name, globals=None, locals=None, fromlist=None):
        parent = determine_parent(globals)
        q, tail = find_head_package(parent, name)
        m = load_tail(q, tail)
        if not fromlist:
            return q
        if hasattr(m, "__path__"):
            ensure_fromlist(m, fromlist)
        return m

    def determine_parent(globals):
        if not globals or  not globals.has_key("__name__"):
            return None
        pname = globals['__name__']
        if globals.has_key("__path__"):
            parent = sys.modules[pname]
            assert globals is parent.__dict__
            return parent
        if '.' in pname:
            i = pname.rfind('.')
            pname = pname[:i]
            parent = sys.modules[pname]
            assert parent.__name__ == pname
            return parent
        return None

    def find_head_package(parent, name):
        if '.' in name:
            i = name.find('.')
            head = name[:i]
            tail = name[i+1:]
        else:
            head = name
            tail = ""
        if parent:
            qname = "%s.%s" % (parent.__name__, head)
        else:
            qname = head
        q = import_module(head, qname, parent)
        if q: return q, tail
        if parent:
            qname = head
            parent = None
            q = import_module(head, qname, parent)
            if q: return q, tail
        raise ImportError("No module named " + qname)

    def load_tail(q, tail):
        m = q
        while tail:
            i = tail.find('.')
            if i < 0: i = len(tail)
            head, tail = tail[:i], tail[i+1:]
            mname = "%s.%s" % (m.__name__, head)
            m = import_module(head, mname, m)
            if not m:
                raise ImportError("No module named " + mname)
        return m

    def ensure_fromlist(m, fromlist, recursive=0):
        for sub in fromlist:
            if sub == "*":
                if not recursive:
                    try:
                        all = m.__all__
                    except AttributeError:
                        pass
                    else:
                        ensure_fromlist(m, all, 1)
                continue
            if sub != "*" and not hasattr(m, sub):
                subname = "%s.%s" % (m.__name__, sub)
                submod = import_module(sub, subname, m)
                if not submod:
                    raise ImportError("No module named " + subname)

    def import_module(partname, fqname, parent):
        try:
            return sys.modules[fqname]
        except KeyError:
            pass
        try:
            fp, pathname, stuff = imp.find_module(partname,
                                                  parent and parent.__path__)
        except ImportError:
            return None
        try:
            m = imp.load_module(fqname, fp, pathname, stuff)
        finally:
            if fp: fp.close()
        if parent:
            setattr(parent, partname, m)
        return m


    # Replacement for reload()
    def reload_hook(module):
        name = module.__name__
        if '.' not in name:
            return import_module(name, name, None)
        i = name.rfind('.')
        pname = name[:i]
        parent = sys.modules[pname]
        return import_module(name[i+1:], name, parent)


    # Save the original hooks
    original_import = __builtin__.__import__
    original_reload = __builtin__.reload

    # Now install our hooks
    __builtin__.__import__ = import_hook
    __builtin__.reload = reload_hook


  Also see the `importers' module (which can be found in
`Demo/imputil/' in the Python source distribution) for additional
examples.


File: python.info,  Node: zipimport --- Import modules from Zip archives,  Next: pkgutil --- Package extension utility,  Prev: imputil --- Import utilities,  Up: Importing Modules

5.30.4 `zipimport' -- Import modules from Zip archives
------------------------------------------------------

New in version 2.3.

  This module adds the ability to import Python modules (`*.py',
`*.py[co]') and packages from ZIP-format archives. It is usually not
needed to use the *note zipimport: 1ac. module explicitly; it is
automatically used by the built-in *note import: 1f1. mechanism for
`sys.path' items that are paths to ZIP archives.

  Typically, `sys.path' is a list of directory names as strings.  This
module also allows an item of `sys.path' to be a string naming a ZIP
file archive.  The ZIP archive can contain a subdirectory structure to
support package imports, and a path within the archive can be specified
to only import from a subdirectory.  For example, the path
`/tmp/example.zip/lib/' would only import from the `lib/' subdirectory
within the archive.

  Any files may be present in the ZIP archive, but only files `.py' and
`.py[co]' are available for import.  ZIP import of dynamic modules
(`.pyd', `.so') is disallowed. Note that if an archive only contains
`.py' files, Python will not attempt to modify the archive by adding the
corresponding `.pyc' or `.pyo' file, meaning that if a ZIP archive
doesn't contain `.pyc' files, importing may be rather slow.

  Using the built-in *note reload(): 55f. function will fail if called
on a module loaded from a ZIP archive; it is unlikely that *note
reload(): 55f. would be needed, since this would imply that the ZIP has
been altered during runtime.

  ZIP archives with an archive comment are currently not supported.

See also
........

PKZIP Application Note(1)
     Documentation on the ZIP file format by Phil Katz, the creator of
     the format and algorithms used.

PEP 273(2) - Import Modules from Zip Archives
     Written by James C. Ahlstrom, who also provided an implementation.
     Python 2.3 follows the specification in PEP 273, but uses an
     implementation written by Just van Rossum that uses the import
     hooks described in PEP 302.

PEP 302(3) - New Import Hooks
     The PEP to add the import hooks that help this module work.

  This module defines an exception:

 -- Exception: zipimport.ZipImportError
     Exception raised by zipimporter objects. It's a subclass of *note
     ImportError: 35f, so it can be caught as *note ImportError: 35f,
     too.

* Menu:

* zipimporter Objects::
* Examples: Examples<19>.

  ---------- Footnotes ----------

  (1) http://www.pkware.com/documents/casestudies/APPNOTE.TXT

  (2) http://www.python.org/dev/peps/pep-0273

  (3) http://www.python.org/dev/peps/pep-0302


File: python.info,  Node: zipimporter Objects,  Next: Examples<19>,  Up: zipimport --- Import modules from Zip archives

5.30.4.1 zipimporter Objects
............................

*note zipimporter: 2454. is the class for importing ZIP files.

 -- Class: zipimport.zipimporter (archivepath)
     Create a new zipimporter instance. _archivepath_ must be a path to
     a ZIP file, or to a specific path within a ZIP file.  For example,
     an _archivepath_ of `foo/bar.zip/lib' will look for modules in the
     `lib' directory inside the ZIP file `foo/bar.zip' (provided that
     it exists).

     *note ZipImportError: 2451. is raised if _archivepath_ doesn't
     point to a valid ZIP archive.

      -- Method: find_module (fullname[, path])
          Search for a module specified by _fullname_. _fullname_ must
          be the fully qualified (dotted) module name. It returns the
          zipimporter instance itself if the module was found, or *note
          None: 389. if it wasn't. The optional _path_ argument is
          ignored--it's there for compatibility with the importer
          protocol.

      -- Method: get_code (fullname)
          Return the code object for the specified module. Raise *note
          ZipImportError: 2451. if the module couldn't be found.

      -- Method: get_data (pathname)
          Return the data associated with _pathname_. Raise *note
          IOError: 1f7. if the file wasn't found.

      -- Method: get_filename (fullname)
          Return the value `__file__' would be set to if the specified
          module was imported. Raise *note ZipImportError: 2451. if the
          module couldn't be found.

     New in version 2.7.

      -- Method: get_source (fullname)
          Return the source code for the specified module. Raise *note
          ZipImportError: 2451. if the module couldn't be found, return
          *note None: 389. if the archive does contain the module, but
          has no source for it.

      -- Method: is_package (fullname)
          Return True if the module specified by _fullname_ is a
          package. Raise *note ZipImportError: 2451. if the module
          couldn't be found.

      -- Method: load_module (fullname)
          Load the module specified by _fullname_. _fullname_ must be
          the fully qualified (dotted) module name. It returns the
          imported module, or raises *note ZipImportError: 2451. if it
          wasn't found.

      -- Attribute: archive
          The file name of the importer's associated ZIP file, without
          a possible subpath.

      -- Attribute: prefix
          The subpath within the ZIP file where modules are searched.
          This is the empty string for zipimporter objects which point
          to the root of the ZIP file.

     The *note archive: 245c. and *note prefix: 245d. attributes, when
     combined with a slash, equal the original _archivepath_ argument
     given to the *note zipimporter: 2454. constructor.


File: python.info,  Node: Examples<19>,  Prev: zipimporter Objects,  Up: zipimport --- Import modules from Zip archives

5.30.4.2 Examples
.................

Here is an example that imports a module from a ZIP archive - note that
the *note zipimport: 1ac. module is not explicitly used.

    $ unzip -l /tmp/example.zip
    Archive:  /tmp/example.zip
      Length     Date   Time    Name
     --------    ----   ----    ----
         8467  11-26-02 22:30   jwzthreading.py
     --------                   -------
         8467                   1 file
    $ ./python
    Python 2.3 (#1, Aug 1 2003, 19:54:32)
    >>> import sys
    >>> sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of path
    >>> import jwzthreading
    >>> jwzthreading.__file__
    '/tmp/example.zip/jwzthreading.py'



File: python.info,  Node: pkgutil --- Package extension utility,  Next: modulefinder --- Find modules used by a script,  Prev: zipimport --- Import modules from Zip archives,  Up: Importing Modules

5.30.5 `pkgutil' -- Package extension utility
---------------------------------------------

This module provides utilities for the import system, in particular
package support.

  New in version 2.3.

 -- Function: pkgutil.extend_path (path, name)
     Extend the search path for the modules which comprise a package.
     Intended use is to place the following code in a package's
     `__init__.py':

         from pkgutil import extend_path
         __path__ = extend_path(__path__, __name__)

     This will add to the package's `__path__' all subdirectories of
     directories on `sys.path' named after the package.  This is useful
     if one wants to distribute different parts of a single logical
     package as multiple directories.

     It also looks for `*.pkg' files beginning where `*' matches the
     _name_ argument.  This feature is similar to `*.pth' files (see the
     *note site: 159. module for more information), except that it
     doesn't special-case lines starting with `import'.  A `*.pkg' file
     is trusted at face value: apart from checking for duplicates, all
     entries found in a `*.pkg' file are added to the path, regardless
     of whether they exist on the filesystem.  (This is a feature.)

     If the input path is not a list (as is the case for frozen
     packages) it is returned unchanged.  The input path is not
     modified; an extended copy is returned.  Items are only appended
     to the copy at the end.

     It is assumed that *note sys.path: 60f. is a sequence.  Items of
     *note sys.path: 60f.  that are not (Unicode or 8-bit) strings
     referring to existing directories are ignored.  Unicode items on
     *note sys.path: 60f. that cause errors when used as filenames may
     cause this function to raise an exception (in line with *note
     os.path.isdir(): dc1. behavior).

 -- Class: pkgutil.ImpImporter (dirname=None)
     PEP 302(1) Importer that wraps Python's "classic" import algorithm.

     If _dirname_ is a string, a PEP 302(2) importer is created that
     searches that directory.  If _dirname_ is `None', a PEP 302(3)
     importer is created that searches the current *note sys.path: 60f,
     plus any modules that are frozen or built-in.

     Note that *note ImpImporter: 2463. does not currently support
     being used by placement on *note sys.meta_path: 7f6.

 -- Class: pkgutil.ImpLoader (fullname, file, filename, etc)
     PEP 302(4) Loader that wraps Python's "classic" import algorithm.

 -- Function: pkgutil.find_loader (fullname)
     Find a PEP 302(5) "loader" object for _fullname_.

     If _fullname_ contains dots, path must be the containing package's
     `__path__'.  Returns `None' if the module cannot be found or
     imported.  This function uses *note iter_importers(): 2466, and is
     thus subject to the same limitations regarding platform-specific
     special import locations such as the Windows registry.

 -- Function: pkgutil.get_importer (path_item)
     Retrieve a PEP 302(6) importer for the given _path_item_.

     The returned importer is cached in *note sys.path_importer_cache:
     7fa. if it was newly created by a path hook.

     If there is no importer, a wrapper around the basic import
     machinery is returned.  This wrapper is never inserted into the
     importer cache (`None' is inserted instead).

     The cache (or part of it) can be cleared manually if a rescan of
     *note sys.path_hooks: 7f9. is necessary.

 -- Function: pkgutil.get_loader (module_or_name)
     Get a PEP 302(7) "loader" object for _module_or_name_.

     If the module or package is accessible via the normal import
     mechanism, a wrapper around the relevant part of that machinery is
     returned.  Returns `None' if the module cannot be found or
     imported.  If the named module is not already imported, its
     containing package (if any) is imported, in order to establish the
     package `__path__'.

     This function uses *note iter_importers(): 2466, and is thus
     subject to the same limitations regarding platform-specific
     special import locations such as the Windows registry.

 -- Function: pkgutil.iter_importers (fullname='')
     Yield PEP 302(8) importers for the given module name.

     If fullname contains a '.', the importers will be for the package
     containing fullname, otherwise they will be importers for *note
     sys.meta_path: 7f6, *note sys.path: 60f, and Python's "classic"
     import machinery, in that order.  If the named module is in a
     package, that package is imported as a side effect of invoking
     this function.

     Non- PEP 302(9) mechanisms (e.g. the Windows registry) used by the
     standard import machinery to find files in alternative locations
     are partially supported, but are searched _after_ *note sys.path:
     60f.  Normally, these locations are searched _before_ *note
     sys.path: 60f, preventing *note sys.path: 60f.  entries from
     shadowing them.

     For this to cause a visible difference in behaviour, there must be
     a module or package name that is accessible via both *note
     sys.path: 60f. and one of the non- PEP 302(10) file system
     mechanisms.  In this case, the emulation will find the former
     version, while the builtin import mechanism will find the latter.

     Items of the following types can be affected by this discrepancy:
     `imp.C_EXTENSION', `imp.PY_SOURCE', `imp.PY_COMPILED',
     `imp.PKG_DIRECTORY'.

 -- Function: pkgutil.iter_modules (path=None, prefix='')
     Yields `(module_loader, name, ispkg)' for all submodules on
     _path_, or, if path is `None', all top-level modules on `sys.path'.

     _path_ should be either `None' or a list of paths to look for
     modules in.

     _prefix_ is a string to output on the front of every module name
     on output.

 -- Function: pkgutil.walk_packages (path=None, prefix='', onerror=None)
     Yields `(module_loader, name, ispkg)' for all modules recursively
     on _path_, or, if path is `None', all accessible modules.

     _path_ should be either `None' or a list of paths to look for
     modules in.

     _prefix_ is a string to output on the front of every module name
     on output.

     Note that this function must import all _packages_ (_not_ all
     modules!) on the given _path_, in order to access the `__path__'
     attribute to find submodules.

     _onerror_ is a function which gets called with one argument (the
     name of the package which was being imported) if any exception
     occurs while trying to import a package.  If no _onerror_ function
     is supplied, *note ImportError: 35f.s are caught and ignored,
     while all other exceptions are propagated, terminating the search.

     Examples:

         # list all modules python can access
         walk_packages()

         # list all submodules of ctypes
         walk_packages(ctypes.__path__, ctypes.__name__ + '.')



 -- Function: pkgutil.get_data (package, resource)
     Get a resource from a package.

     This is a wrapper for the PEP 302(11) loader *note get_data():
     246b. API.  The _package_ argument should be the name of a
     package, in standard module format (`foo.bar').  The _resource_
     argument should be in the form of a relative filename, using `/'
     as the path separator.  The parent directory name `..' is not
     allowed, and nor is a rooted name (starting with a `/').

     The function returns a binary string that is the contents of the
     specified resource.

     For packages located in the filesystem, which have already been
     imported, this is the rough equivalent of:

         d = os.path.dirname(sys.modules[package].__file__)
         data = open(os.path.join(d, resource), 'rb').read()

     If the package cannot be located or loaded, or it uses a PEP
     302(12) loader which does not support *note get_data(): 246b, then
     `None' is returned.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0302

  (2) http://www.python.org/dev/peps/pep-0302

  (3) http://www.python.org/dev/peps/pep-0302

  (4) http://www.python.org/dev/peps/pep-0302

  (5) http://www.python.org/dev/peps/pep-0302

  (6) http://www.python.org/dev/peps/pep-0302

  (7) http://www.python.org/dev/peps/pep-0302

  (8) http://www.python.org/dev/peps/pep-0302

  (9) http://www.python.org/dev/peps/pep-0302

  (10) http://www.python.org/dev/peps/pep-0302

  (11) http://www.python.org/dev/peps/pep-0302

  (12) http://www.python.org/dev/peps/pep-0302


File: python.info,  Node: modulefinder --- Find modules used by a script,  Next: runpy --- Locating and executing Python modules,  Prev: pkgutil --- Package extension utility,  Up: Importing Modules

5.30.6 `modulefinder' -- Find modules used by a script
------------------------------------------------------

New in version 2.3.

  This module provides a *note ModuleFinder: 246e. class that can be
used to determine the set of modules imported by a script.
`modulefinder.py' can also be run as a script, giving the filename of a
Python script as its argument, after which a report of the imported
modules will be printed.

 -- Function: modulefinder.AddPackagePath (pkg_name, path)
     Record that the package named _pkg_name_ can be found in the
     specified _path_.

 -- Function: modulefinder.ReplacePackage (oldname, newname)
     Allows specifying that the module named _oldname_ is in fact the
     package named _newname_.  The most common usage would be  to
     handle how the `_xmlplus' package replaces the `xml' package.

 -- Class: modulefinder.ModuleFinder ([path=None, debug=0, excludes=[],
          replace_paths=[]])
     This class provides *note run_script(): 2471. and *note report():
     2472. methods to determine the set of modules imported by a
     script. _path_ can be a list of directories to search for modules;
     if not specified, `sys.path' is used.  _debug_ sets the debugging
     level; higher values make the class print  debugging messages about
     what it's doing. _excludes_ is a list of module names to exclude
     from the analysis. _replace_paths_ is a list of `(oldpath,
     newpath)' tuples that will be replaced in module paths.

      -- Method: report ()
          Print a report to standard output that lists the modules
          imported by the script and their paths, as well as modules
          that are missing or seem to be missing.

      -- Method: run_script (pathname)
          Analyze the contents of the _pathname_ file, which must
          contain Python code.

      -- Attribute: modules
          A dictionary mapping module names to modules. See *note
          Example usage of ModuleFinder: 2474.

* Menu:

* Example usage of ModuleFinder::


File: python.info,  Node: Example usage of ModuleFinder,  Up: modulefinder --- Find modules used by a script

5.30.6.1 Example usage of `ModuleFinder'
........................................

The script that is going to get analyzed later on (bacon.py):

    import re, itertools

    try:
        import baconhameggs
    except ImportError:
        pass

    try:
        import guido.python.ham
    except ImportError:
        pass

The script that will output the report of bacon.py:

    from modulefinder import ModuleFinder

    finder = ModuleFinder()
    finder.run_script('bacon.py')

    print 'Loaded modules:'
    for name, mod in finder.modules.iteritems():
        print '%s: ' % name,
        print ','.join(mod.globalnames.keys()[:3])

    print '-'*50
    print 'Modules not imported:'
    print '\n'.join(finder.badmodules.iterkeys())

Sample output (may vary depending on the architecture):

    Loaded modules:
    _types:
    copy_reg:  _inverted_registry,_slotnames,__all__
    sre_compile:  isstring,_sre,_optimize_unicode
    _sre:
    sre_constants:  REPEAT_ONE,makedict,AT_END_LINE
    sys:
    re:  __module__,finditer,_expand
    itertools:
    __main__:  re,itertools,baconhameggs
    sre_parse:  __getslice__,_PATTERNENDERS,SRE_FLAG_UNICODE
    array:
    types:  __module__,IntType,TypeType
    ---------------------------------------------------
    Modules not imported:
    guido.python.ham
    baconhameggs



File: python.info,  Node: runpy --- Locating and executing Python modules,  Prev: modulefinder --- Find modules used by a script,  Up: Importing Modules

5.30.7 `runpy' -- Locating and executing Python modules
-------------------------------------------------------

New in version 2.5.

  The *note runpy: 14c. module is used to locate and run Python modules
without importing them first. Its main use is to implement the *note
-m: 2ec. command line switch that allows scripts to be located using
the Python module namespace rather than the filesystem.

  The *note runpy: 14c. module provides two functions:

 -- Function: runpy.run_module (mod_name, init_globals=None,
          run_name=None, alter_sys=False)
     Execute the code of the specified module and return the resulting
     module globals dictionary. The module's code is first located
     using the standard import mechanism (refer to PEP 302(1) for
     details) and then executed in a fresh module namespace.

     If the supplied module name refers to a package rather than a
     normal module, then that package is imported and the `__main__'
     submodule within that package is then executed and the resulting
     module globals dictionary returned.

     The optional dictionary argument _init_globals_ may be used to
     pre-populate the module's globals dictionary before the code is
     executed. The supplied dictionary will not be modified. If any of
     the special global variables below are defined in the supplied
     dictionary, those definitions are overridden by *note
     run_module(): 610.

     The special global variables `__name__', `__file__', `__loader__'
     and `__package__' are set in the globals dictionary before the
     module code is executed (Note that this is a minimal set of
     variables - other variables may be set implicitly as an
     interpreter implementation detail).

     `__name__' is set to _run_name_ if this optional argument is not
     *note None: 389, to `mod_name + '.__main__'' if the named module
     is a package and to the _mod_name_ argument otherwise.

     `__file__' is set to the name provided by the module loader. If the
     loader does not make filename information available, this variable
     is set to *note None: 389.

     `__loader__' is set to the PEP 302(2) module loader used to
     retrieve the code for the module (This loader may be a wrapper
     around the standard import mechanism).

     `__package__' is set to _mod_name_ if the named module is a
     package and to `mod_name.rpartition('.')[0]' otherwise.

     If the argument _alter_sys_ is supplied and evaluates to *note
     True: 39f, then `sys.argv[0]' is updated with the value of
     `__file__' and `sys.modules[__name__]' is updated with a temporary
     module object for the module being executed. Both `sys.argv[0]'
     and `sys.modules[__name__]' are restored to their original values
     before the function returns.

     Note that this manipulation of *note sys: 16e. is not thread-safe.
     Other threads may see the partially initialised module, as well as
     the altered list of arguments. It is recommended that the *note
     sys: 16e. module be left alone when invoking this function from
     threaded code.

     Changed in version 2.7: Added ability to execute packages by
     looking for a `__main__' submodule

 -- Function: runpy.run_path (file_path, init_globals=None,
          run_name=None)
     Execute the code at the named filesystem location and return the
     resulting module globals dictionary. As with a script name
     supplied to the CPython command line, the supplied path may refer
     to a Python source file, a compiled bytecode file or a valid
     sys.path entry containing a `__main__' module (e.g. a zipfile
     containing a top-level `__main__.py' file).

     For a simple script, the specified code is simply executed in a
     fresh module namespace. For a valid sys.path entry (typically a
     zipfile or directory), the entry is first added to the beginning
     of `sys.path'. The function then looks for and executes a *note
     __main__: 2. module using the updated path. Note that there is no
     special protection against invoking an existing *note __main__: 2.
     entry located elsewhere on `sys.path' if there is no such module
     at the specified location.

     The optional dictionary argument _init_globals_ may be used to
     pre-populate the module's globals dictionary before the code is
     executed. The supplied dictionary will not be modified. If any of
     the special global variables below are defined in the supplied
     dictionary, those definitions are overridden by *note run_path():
     247.

     The special global variables `__name__', `__file__', `__loader__'
     and `__package__' are set in the globals dictionary before the
     module code is executed (Note that this is a minimal set of
     variables - other variables may be set implicitly as an
     interpreter implementation detail).

     `__name__' is set to _run_name_ if this optional argument is not
     *note None: 389. and to `'<run_path>'' otherwise.

     `__file__' is set to the name provided by the module loader. If the
     loader does not make filename information available, this variable
     is set to *note None: 389. For a simple script, this will be set
     to `file_path'.

     `__loader__' is set to the PEP 302(3) module loader used to
     retrieve the code for the module (This loader may be a wrapper
     around the standard import mechanism). For a simple script, this
     will be set to *note None: 389.

     `__package__' is set to `__name__.rpartition('.')[0]'.

     A number of alterations are also made to the *note sys: 16e.
     module. Firstly, `sys.path' may be altered as described above.
     `sys.argv[0]' is updated with the value of `file_path' and
     `sys.modules[__name__]' is updated with a temporary module object
     for the module being executed. All modifications to items in *note
     sys: 16e. are reverted before the function returns.

     Note that, unlike *note run_module(): 610, the alterations made to
     *note sys: 16e.  are not optional in this function as these
     adjustments are essential to allowing the execution of sys.path
     entries. As the thread-safety limitations still apply, use of this
     function in threaded code should be either serialised with the
     import lock or delegated to a separate process.

     New in version 2.7.

See also
........

PEP 338(4) - Executing modules as scripts
     PEP written and implemented by Nick Coghlan.

PEP 366(5) - Main module explicit relative imports
     PEP written and implemented by Nick Coghlan.

  *note Command line and environment: 608. - CPython command line
details

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0302

  (2) http://www.python.org/dev/peps/pep-0302

  (3) http://www.python.org/dev/peps/pep-0302

  (4) http://www.python.org/dev/peps/pep-0338

  (5) http://www.python.org/dev/peps/pep-0366


File: python.info,  Node: Python Language Services,  Next: Python compiler package,  Prev: Importing Modules,  Up: The Python Standard Library

5.31 Python Language Services
=============================

Python provides a number of modules to assist in working with the Python
language.  These modules support tokenizing, parsing, syntax analysis,
bytecode disassembly, and various other facilities.

  These modules include:

* Menu:

* parser: parser --- Access Python parse trees. Access Python parse trees
* Abstract Syntax Trees::
* symtable: symtable --- Access to the compiler's symbol tables. Access to the compiler's symbol tables
* symbol: symbol --- Constants used with Python parse trees. Constants used with Python parse trees
* token: token --- Constants used with Python parse trees. Constants used with Python parse trees
* keyword: keyword --- Testing for Python keywords. Testing for Python keywords
* tokenize: tokenize --- Tokenizer for Python source. Tokenizer for Python source
* tabnanny: tabnanny --- Detection of ambiguous indentation. Detection of ambiguous indentation
* pyclbr: pyclbr --- Python class browser support. Python class browser support
* py_compile: py_compile --- Compile Python source files. Compile Python source files
* compileall: compileall --- Byte-compile Python libraries. Byte-compile Python libraries
* dis: dis --- Disassembler for Python bytecode. Disassembler for Python bytecode
* pickletools: pickletools --- Tools for pickle developers. Tools for pickle developers

parser --- Access Python parse trees

* Creating ST Objects::
* Converting ST Objects::
* Queries on ST Objects::
* Exceptions and Error Handling::
* ST Objects::
* Example; Emulation of compile(): Example Emulation of compile.

Abstract Syntax Trees

* Node classes::
* Abstract Grammar::
* ast Helpers::

symtable --- Access to the compiler's symbol tables

* Generating Symbol Tables::
* Examining Symbol Tables::

pyclbr --- Python class browser support

* Class Objects: Class Objects<2>.
* Function Objects::

compileall --- Byte-compile Python libraries

* Command-line use::
* Public functions::

dis --- Disassembler for Python bytecode

* Python Bytecode Instructions::


File: python.info,  Node: parser --- Access Python parse trees,  Next: Abstract Syntax Trees,  Up: Python Language Services

5.31.1 `parser' -- Access Python parse trees
--------------------------------------------

The *note parser: 12c. module provides an interface to Python's
internal parser and byte-code compiler.  The primary purpose for this
interface is to allow Python code to edit the parse tree of a Python
expression and create executable code from this.  This is better than
trying to parse and modify an arbitrary Python code fragment as a
string because parsing is performed in a manner identical to the code
forming the application.  It is also faster.

     Note: From Python 2.5 onward, it's much more convenient to cut in
     at the Abstract Syntax Tree (AST) generation and compilation
     stage, using the *note ast: f.  module.

     The *note parser: 12c. module exports the names documented here
     also with "st" replaced by "ast"; this is a legacy from the time
     when there was no other AST and has nothing to do with the AST
     found in Python 2.5.  This is also the reason for the functions'
     keyword arguments being called _ast_, not _st_.  The "ast"
     functions will be removed in Python 3.0.

  There are a few things to note about this module which are important
to making use of the data structures created.  This is not a tutorial
on editing the parse trees for Python code, but some examples of using
the *note parser: 12c. module are presented.

  Most importantly, a good understanding of the Python grammar
processed by the internal parser is required.  For full information on
the language syntax, refer to *note The Python Language Reference: 4e6.
The parser itself is created from a grammar specification defined in
the file `Grammar/Grammar' in the standard Python distribution.  The
parse trees stored in the ST objects created by this module are the
actual output from the internal parser when created by the *note
expr(): 247d. or *note suite(): 247e. functions, described below.  The
ST objects created by *note sequence2st(): 247f. faithfully simulate
those structures.  Be aware that the values of the sequences which are
considered "correct" will vary from one version of Python to another as
the formal grammar for the language is revised.  However, transporting
code from one Python version to another as source text will always
allow correct parse trees to be created in the target version, with the
only restriction being that migrating to an older version of the
interpreter will not support more recent language constructs.  The
parse trees are not typically compatible from one version to another,
whereas source code has always been forward-compatible.

  Each element of the sequences returned by *note st2list(): 2480. or
*note st2tuple(): 2481.  has a simple form.  Sequences representing
non-terminal elements in the grammar always have a length greater than
one.  The first element is an integer which identifies a production in
the grammar.  These integers are given symbolic names in the C header
file `Include/graminit.h' and the Python module *note symbol: 16c.
Each additional element of the sequence represents a component of the
production as recognized in the input string: these are always sequences
which have the same form as the parent.  An important aspect of this
structure which should be noted is that keywords used to identify the
parent node type, such as the keyword *note if: 41b. in an `if_stmt',
are included in the node tree without any special treatment.  For
example, the *note if: 41b. keyword is represented by the tuple `(1,
'if')', where `1' is the numeric value associated with all `NAME'
tokens, including variable and function names defined by the user.  In
an alternate form returned when line number information is requested,
the same token might be represented as `(1, 'if', 12)', where the `12'
represents the line number at which the terminal symbol was found.

  Terminal elements are represented in much the same way, but without
any child elements and the addition of the source text which was
identified.  The example of the *note if: 41b. keyword above is
representative.  The various types of terminal symbols are defined in
the C header file `Include/token.h' and the Python module *note token:
17f.

  The ST objects are not required to support the functionality of this
module, but are provided for three purposes: to allow an application to
amortize the cost of processing complex parse trees, to provide a parse
tree representation which conserves memory space when compared to the
Python list or tuple representation, and to ease the creation of
additional modules in C which manipulate parse trees.  A simple
"wrapper" class may be created in Python to hide the use of ST objects.

  The *note parser: 12c. module defines functions for a few distinct
purposes.  The most important purposes are to create ST objects and to
convert ST objects to other representations such as parse trees and
compiled code objects, but there are also functions which serve to
query the type of parse tree represented by an ST object.

See also
........

Module *note symbol: 16c.
     Useful constants representing internal nodes of the parse tree.

Module *note token: 17f.
     Useful constants representing leaf nodes of the parse tree and
     functions for testing node values.

* Menu:

* Creating ST Objects::
* Converting ST Objects::
* Queries on ST Objects::
* Exceptions and Error Handling::
* ST Objects::
* Example; Emulation of compile(): Example Emulation of compile.


File: python.info,  Node: Creating ST Objects,  Next: Converting ST Objects,  Up: parser --- Access Python parse trees

5.31.1.1 Creating ST Objects
............................

ST objects may be created from source code or from a parse tree. When
creating an ST object from source, different functions are used to
create the `'eval'' and `'exec'' forms.

 -- Function: parser.expr (source)
     The *note expr(): 247d. function parses the parameter _source_ as
     if it were an input to `compile(source, 'file.py', 'eval')'.  If
     the parse succeeds, an ST object is created to hold the internal
     parse tree representation, otherwise an appropriate exception is
     raised.

 -- Function: parser.suite (source)
     The *note suite(): 247e. function parses the parameter _source_ as
     if it were an input to `compile(source, 'file.py', 'exec')'.  If
     the parse succeeds, an ST object is created to hold the internal
     parse tree representation, otherwise an appropriate exception is
     raised.

 -- Function: parser.sequence2st (sequence)
     This function accepts a parse tree represented as a sequence and
     builds an internal representation if possible.  If it can validate
     that the tree conforms to the Python grammar and all nodes are
     valid node types in the host version of Python, an ST object is
     created from the internal representation and returned to the
     called.  If there is a problem creating the internal
     representation, or if the tree cannot be validated, a *note
     ParserError: 2484. exception is raised.  An ST object created this
     way should not be assumed to compile correctly; normal exceptions
     raised by compilation may still be initiated when the ST object is
     passed to *note compilest(): 2485.  This may indicate problems not
     related to syntax (such as a *note MemoryError: 918. exception),
     but may also be due to constructs such as the result of parsing
     `del f(0)', which escapes the Python parser but is checked by the
     bytecode compiler.

     Sequences representing terminal tokens may be represented as
     either two-element lists of the form `(1, 'name')' or as
     three-element lists of the form `(1, 'name', 56)'.  If the third
     element is present, it is assumed to be a valid line number.  The
     line number may be specified for any subset of the terminal
     symbols in the input tree.

 -- Function: parser.tuple2st (sequence)
     This is the same function as *note sequence2st(): 247f.  This
     entry point is maintained for backward compatibility.


File: python.info,  Node: Converting ST Objects,  Next: Queries on ST Objects,  Prev: Creating ST Objects,  Up: parser --- Access Python parse trees

5.31.1.2 Converting ST Objects
..............................

ST objects, regardless of the input used to create them, may be
converted to parse trees represented as list- or tuple- trees, or may
be compiled into executable code objects.  Parse trees may be extracted
with or without line numbering information.

 -- Function: parser.st2list (ast[, line_info])
     This function accepts an ST object from the caller in _ast_ and
     returns a Python list representing the equivalent parse tree.  The
     resulting list representation can be used for inspection or the
     creation of a new parse tree in list form.  This function does not
     fail so long as memory is available to build the list
     representation.  If the parse tree will only be used for
     inspection, *note st2tuple(): 2481. should be used instead to
     reduce memory consumption and fragmentation.  When the list
     representation is required, this function is significantly faster
     than retrieving a tuple representation and converting that to
     nested lists.

     If _line_info_ is true, line number information will be included
     for all terminal tokens as a third element of the list
     representing the token.  Note that the line number provided
     specifies the line on which the token _ends_.  This information is
     omitted if the flag is false or omitted.

 -- Function: parser.st2tuple (ast[, line_info])
     This function accepts an ST object from the caller in _ast_ and
     returns a Python tuple representing the equivalent parse tree.
     Other than returning a tuple instead of a list, this function is
     identical to *note st2list(): 2480.

     If _line_info_ is true, line number information will be included
     for all terminal tokens as a third element of the list
     representing the token.  This information is omitted if the flag
     is false or omitted.

 -- Function: parser.compilest (ast[, filename='<syntax-tree>'])
     The Python byte compiler can be invoked on an ST object to produce
     code objects which can be used as part of an *note exec: 3f3.
     statement or a call to the built-in *note eval(): 34f. function.
     This function provides the interface to the compiler, passing the
     internal parse tree from _ast_ to the parser, using the source
     file name specified by the _filename_ parameter. The default value
     supplied for _filename_ indicates that the source was an ST object.

     Compiling an ST object may result in exceptions related to
     compilation; an example would be a *note SyntaxError: 485. caused
     by the parse tree for `del f(0)': this statement is considered
     legal within the formal grammar for Python but is not a legal
     language construct.  The *note SyntaxError: 485. raised for this
     condition is actually generated by the Python byte-compiler
     normally, which is why it can be raised at this point by the *note
     parser: 12c. module.  Most causes of compilation failure can be
     diagnosed programmatically by inspection of the parse tree.


File: python.info,  Node: Queries on ST Objects,  Next: Exceptions and Error Handling,  Prev: Converting ST Objects,  Up: parser --- Access Python parse trees

5.31.1.3 Queries on ST Objects
..............................

Two functions are provided which allow an application to determine if
an ST was created as an expression or a suite.  Neither of these
functions can be used to determine if an ST was created from source
code via *note expr(): 247d. or *note suite(): 247e. or from a parse
tree via *note sequence2st(): 247f.

 -- Function: parser.isexpr (ast)
     When _ast_ represents an `'eval'' form, this function returns
     true, otherwise it returns false.  This is useful, since code
     objects normally cannot be queried for this information using
     existing built-in functions.  Note that the code objects created
     by *note compilest(): 2485. cannot be queried like this either, and
     are identical to those created by the built-in *note compile():
     1f8. function.

 -- Function: parser.issuite (ast)
     This function mirrors *note isexpr(): 248b. in that it reports
     whether an ST object represents an `'exec'' form, commonly known
     as a "suite."  It is not safe to assume that this function is
     equivalent to `not isexpr(ast)', as additional syntactic fragments
     may be supported in the future.


File: python.info,  Node: Exceptions and Error Handling,  Next: ST Objects,  Prev: Queries on ST Objects,  Up: parser --- Access Python parse trees

5.31.1.4 Exceptions and Error Handling
......................................

The parser module defines a single exception, but may also pass other
built-in exceptions from other portions of the Python runtime
environment.  See each function for information about the exceptions it
can raise.

 -- Exception: parser.ParserError
     Exception raised when a failure occurs within the parser module.
     This is generally produced for validation failures rather than the
     built-in *note SyntaxError: 485. raised during normal parsing. The
     exception argument is either a string describing the reason of the
     failure or a tuple containing a sequence causing the failure from
     a parse tree passed to *note sequence2st(): 247f.  and an
     explanatory string.  Calls to *note sequence2st(): 247f. need to
     be able to handle either type of exception, while calls to other
     functions in the module will only need to be aware of the simple
     string values.

  Note that the functions *note compilest(): 2485, *note expr(): 247d,
and *note suite(): 247e. may raise exceptions which are normally raised
by the parsing and compilation process.  These include the built in
exceptions *note MemoryError: 918, *note OverflowError: 2cf, *note
SyntaxError: 485, and *note SystemError: 91b.  In these cases, these
exceptions carry all the meaning normally associated with them.  Refer
to the descriptions of each function for detailed information.


File: python.info,  Node: ST Objects,  Next: Example Emulation of compile,  Prev: Exceptions and Error Handling,  Up: parser --- Access Python parse trees

5.31.1.5 ST Objects
...................

Ordered and equality comparisons are supported between ST objects.
Pickling of ST objects (using the *note pickle: 12e. module) is also
supported.

 -- Data: parser.STType
     The type of the objects returned by *note expr(): 247d, *note
     suite(): 247e. and *note sequence2st(): 247f.

  ST objects have the following methods:

 -- Method: ST.compile ([filename])
     Same as `compilest(st, filename)'.

 -- Method: ST.isexpr ()
     Same as `isexpr(st)'.

 -- Method: ST.issuite ()
     Same as `issuite(st)'.

 -- Method: ST.tolist ([line_info])
     Same as `st2list(st, line_info)'.

 -- Method: ST.totuple ([line_info])
     Same as `st2tuple(st, line_info)'.


File: python.info,  Node: Example Emulation of compile,  Prev: ST Objects,  Up: parser --- Access Python parse trees

5.31.1.6 Example: Emulation of `compile()'
..........................................

While many useful operations may take place between parsing and bytecode
generation, the simplest operation is to do nothing.  For this purpose,
using the *note parser: 12c. module to produce an intermediate data
structure is equivalent to the code

    >>> code = compile('a + 5', 'file.py', 'eval')
    >>> a = 5
    >>> eval(code)
    10

The equivalent operation using the *note parser: 12c. module is
somewhat longer, and allows the intermediate internal parse tree to be
retained as an ST object:

    >>> import parser
    >>> st = parser.expr('a + 5')
    >>> code = st.compile('file.py')
    >>> a = 5
    >>> eval(code)
    10

An application which needs both ST and code objects can package this
code into readily available functions:

    import parser

    def load_suite(source_string):
        st = parser.suite(source_string)
        return st, st.compile()

    def load_expression(source_string):
        st = parser.expr(source_string)
        return st, st.compile()



File: python.info,  Node: Abstract Syntax Trees,  Next: symtable --- Access to the compiler's symbol tables,  Prev: parser --- Access Python parse trees,  Up: Python Language Services

5.31.2 Abstract Syntax Trees
----------------------------

New in version 2.5: The low-level `_ast' module containing only the
node classes.

  New in version 2.6: The high-level `ast' module containing all
helpers.

  The *note ast: f. module helps Python applications to process trees
of the Python abstract syntax grammar.  The abstract syntax itself
might change with each Python release; this module helps to find out
programmatically what the current grammar looks like.

  An abstract syntax tree can be generated by passing
`ast.PyCF_ONLY_AST' as a flag to the *note compile(): 1f8. built-in
function, or using the *note parse(): 249b.  helper provided in this
module.  The result will be a tree of objects whose classes all inherit
from *note ast.AST: 249c.  An abstract syntax tree can be compiled into
a Python code object using the built-in *note compile(): 1f8. function.

See also
........

Latest version of the ast module Python source code(1)

* Menu:

* Node classes::
* Abstract Grammar::
* ast Helpers::

  ---------- Footnotes ----------

  (1)
http://svn.python.org/view/python/branches/release27-maint/Lib/ast.py?view=markup


File: python.info,  Node: Node classes,  Next: Abstract Grammar,  Up: Abstract Syntax Trees

5.31.2.1 Node classes
.....................

 -- Class: ast.AST
     This is the base of all AST node classes.  The actual node classes
     are derived from the `Parser/Python.asdl' file, which is reproduced
     *note below: 249e.  They are defined in the `_ast' C module and
     re-exported in *note ast: f.

     There is one class defined for each left-hand side symbol in the
     abstract grammar (for example, `ast.stmt' or `ast.expr').  In
     addition, there is one class defined for each constructor on the
     right-hand side; these classes inherit from the classes for the
     left-hand side trees.  For example, `ast.BinOp' inherits from
     `ast.expr'.  For production rules with alternatives (aka "sums"),
     the left-hand side class is abstract: only instances of specific
     constructor nodes are ever created.

      -- Attribute: _fields
          Each concrete class has an attribute *note _fields: 249f.
          which gives the names of all child nodes.

          Each instance of a concrete class has one attribute for each
          child node, of the type as defined in the grammar.  For
          example, `ast.BinOp' instances have an attribute `left' of
          type `ast.expr'.

          If these attributes are marked as optional in the grammar
          (using a question mark), the value might be `None'.  If the
          attributes can have zero-or-more values (marked with an
          asterisk), the values are represented as Python lists.  All
          possible attributes must be present and have valid values
          when compiling an AST with *note compile(): 1f8.

      -- Attribute: lineno
      -- Attribute: col_offset
          Instances of `ast.expr' and `ast.stmt' subclasses have *note
          lineno: 24a0. and *note col_offset: 24a1. attributes.  The
          *note lineno: 24a0. is the line number of source text
          (1-indexed so the first line is line 1) and the *note
          col_offset: 24a1. is the UTF-8 byte offset of the first token
          that generated the node.  The UTF-8 offset is recorded
          because the parser uses UTF-8 internally.

     The constructor of a class `ast.T' parses its arguments as follows:

        * If there are positional arguments, there must be as many as
          there are items in `T._fields'; they will be assigned as
          attributes of these names.

        * If there are keyword arguments, they will set the attributes
          of the same names to the given values.

     For example, to create and populate an `ast.UnaryOp' node, you
     could use

         node = ast.UnaryOp()
         node.op = ast.USub()
         node.operand = ast.Num()
         node.operand.n = 5
         node.operand.lineno = 0
         node.operand.col_offset = 0
         node.lineno = 0
         node.col_offset = 0

     or the more compact

         node = ast.UnaryOp(ast.USub(), ast.Num(5, lineno=0, col_offset=0),
                            lineno=0, col_offset=0)

     New in version 2.6: The constructor as explained above was added.
     In Python 2.5 nodes had to be created by calling the class
     constructor without arguments and setting the attributes
     afterwards.


File: python.info,  Node: Abstract Grammar,  Next: ast Helpers,  Prev: Node classes,  Up: Abstract Syntax Trees

5.31.2.2 Abstract Grammar
.........................

The module defines a string constant `__version__' which is the decimal
Subversion revision number of the file shown below.

  The abstract grammar is currently defined as follows:

    -- ASDL's five builtin types are identifier, int, string, object, bool

    module Python version "$Revision$"
    {
    	mod = Module(stmt* body)
    	    | Interactive(stmt* body)
    	    | Expression(expr body)

    	    -- not really an actual node but useful in Jython's typesystem.
    	    | Suite(stmt* body)

    	stmt = FunctionDef(identifier name, arguments args,
                                stmt* body, expr* decorator_list)
    	      | ClassDef(identifier name, expr* bases, stmt* body, expr* decorator_list)
    	      | Return(expr? value)

    	      | Delete(expr* targets)
    	      | Assign(expr* targets, expr value)
    	      | AugAssign(expr target, operator op, expr value)

    	      -- not sure if bool is allowed, can always use int
     	      | Print(expr? dest, expr* values, bool nl)

    	      -- use 'orelse' because else is a keyword in target languages
    	      | For(expr target, expr iter, stmt* body, stmt* orelse)
    	      | While(expr test, stmt* body, stmt* orelse)
    	      | If(expr test, stmt* body, stmt* orelse)
    	      | With(expr context_expr, expr? optional_vars, stmt* body)

    	      -- 'type' is a bad name
    	      | Raise(expr? type, expr? inst, expr? tback)
    	      | TryExcept(stmt* body, excepthandler* handlers, stmt* orelse)
    	      | TryFinally(stmt* body, stmt* finalbody)
    	      | Assert(expr test, expr? msg)

    	      | Import(alias* names)
    	      | ImportFrom(identifier? module, alias* names, int? level)

    	      -- Doesn't capture requirement that locals must be
    	      -- defined if globals is
    	      -- still supports use as a function!
    	      | Exec(expr body, expr? globals, expr? locals)

    	      | Global(identifier* names)
    	      | Expr(expr value)
    	      | Pass | Break | Continue

    	      -- XXX Jython will be different
    	      -- col_offset is the byte offset in the utf8 string the parser uses
    	      attributes (int lineno, int col_offset)

    	      -- BoolOp() can use left & right?
    	expr = BoolOp(boolop op, expr* values)
    	     | BinOp(expr left, operator op, expr right)
    	     | UnaryOp(unaryop op, expr operand)
    	     | Lambda(arguments args, expr body)
    	     | IfExp(expr test, expr body, expr orelse)
    	     | Dict(expr* keys, expr* values)
    	     | Set(expr* elts)
    	     | ListComp(expr elt, comprehension* generators)
    	     | SetComp(expr elt, comprehension* generators)
    	     | DictComp(expr key, expr value, comprehension* generators)
    	     | GeneratorExp(expr elt, comprehension* generators)
    	     -- the grammar constrains where yield expressions can occur
    	     | Yield(expr? value)
    	     -- need sequences for compare to distinguish between
    	     -- x < 4 < 3 and (x < 4) < 3
    	     | Compare(expr left, cmpop* ops, expr* comparators)
    	     | Call(expr func, expr* args, keyword* keywords,
    			 expr? starargs, expr? kwargs)
    	     | Repr(expr value)
    	     | Num(object n) -- a number as a PyObject.
    	     | Str(string s) -- need to specify raw, unicode, etc?
    	     -- other literals? bools?

    	     -- the following expression can appear in assignment context
    	     | Attribute(expr value, identifier attr, expr_context ctx)
    	     | Subscript(expr value, slice slice, expr_context ctx)
    	     | Name(identifier id, expr_context ctx)
    	     | List(expr* elts, expr_context ctx)
    	     | Tuple(expr* elts, expr_context ctx)

    	      -- col_offset is the byte offset in the utf8 string the parser uses
    	      attributes (int lineno, int col_offset)

    	expr_context = Load | Store | Del | AugLoad | AugStore | Param

    	slice = Ellipsis | Slice(expr? lower, expr? upper, expr? step)
    	      | ExtSlice(slice* dims)
    	      | Index(expr value)

    	boolop = And | Or

    	operator = Add | Sub | Mult | Div | Mod | Pow | LShift
                     | RShift | BitOr | BitXor | BitAnd | FloorDiv

    	unaryop = Invert | Not | UAdd | USub

    	cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn

    	comprehension = (expr target, expr iter, expr* ifs)

    	-- not sure what to call the first argument for raise and except
    	excepthandler = ExceptHandler(expr? type, expr? name, stmt* body)
    	                attributes (int lineno, int col_offset)

    	arguments = (expr* args, identifier? vararg,
    		     identifier? kwarg, expr* defaults)

            -- keyword arguments supplied to call
            keyword = (identifier arg, expr value)

            -- import name with optional 'as' alias.
            alias = (identifier name, identifier? asname)
    }



File: python.info,  Node: ast Helpers,  Prev: Abstract Grammar,  Up: Abstract Syntax Trees

5.31.2.3 `ast' Helpers
......................

New in version 2.6.

  Apart from the node classes, *note ast: f. module defines these
utility functions and classes for traversing abstract syntax trees:

 -- Function: ast.parse (source, filename='<unknown>', mode='exec')
     Parse the source into an AST node.  Equivalent to `compile(source,
     filename, mode, ast.PyCF_ONLY_AST)'.

 -- Function: ast.literal_eval (node_or_string)
     Safely evaluate an expression node or a string containing a Python
     expression.  The string or node provided may only consist of the
     following Python literal structures: strings, numbers, tuples,
     lists, dicts, booleans, and `None'.

     This can be used for safely evaluating strings containing Python
     expressions from untrusted sources without the need to parse the
     values oneself.

 -- Function: ast.get_docstring (node, clean=True)
     Return the docstring of the given _node_ (which must be a
     `FunctionDef', `ClassDef' or `Module' node), or `None' if it has
     no docstring.  If _clean_ is true, clean up the docstring's
     indentation with *note inspect.cleandoc(): 23b5.

 -- Function: ast.fix_missing_locations (node)
     When you compile a node tree with *note compile(): 1f8, the
     compiler expects `lineno' and `col_offset' attributes for every
     node that supports them.  This is rather tedious to fill in for
     generated nodes, so this helper adds these attributes recursively
     where not already set, by setting them to the values of the parent
     node.  It works recursively starting at _node_.

 -- Function: ast.increment_lineno (node, n=1)
     Increment the line number of each node in the tree starting at
     _node_ by _n_.  This is useful to "move code" to a different
     location in a file.

 -- Function: ast.copy_location (new_node, old_node)
     Copy source location (`lineno' and `col_offset') from _old_node_
     to _new_node_ if possible, and return _new_node_.

 -- Function: ast.iter_fields (node)
     Yield a tuple of `(fieldname, value)' for each field in
     `node._fields' that is present on _node_.

 -- Function: ast.iter_child_nodes (node)
     Yield all direct child nodes of _node_, that is, all fields that
     are nodes and all items of fields that are lists of nodes.

 -- Function: ast.walk (node)
     Recursively yield all descendant nodes in the tree starting at
     _node_ (including _node_ itself), in no specified order.  This is
     useful if you only want to modify nodes in place and don't care
     about the context.

 -- Class: ast.NodeVisitor
     A node visitor base class that walks the abstract syntax tree and
     calls a visitor function for every node found.  This function may
     return a value which is forwarded by the *note visit(): 24ac.
     method.

     This class is meant to be subclassed, with the subclass adding
     visitor methods.

      -- Method: visit (node)
          Visit a node.  The default implementation calls the method
          called `self.visit__classname_' where _classname_ is the name
          of the node class, or *note generic_visit(): 24ad. if that
          method doesn't exist.

      -- Method: generic_visit (node)
          This visitor calls *note visit(): 24ac. on all children of
          the node.

          Note that child nodes of nodes that have a custom visitor
          method won't be visited unless the visitor calls *note
          generic_visit(): 24ad. or visits them itself.

     Don't use the *note NodeVisitor: 24ab. if you want to apply
     changes to nodes during traversal.  For this a special visitor
     exists (*note NodeTransformer: 24ae.) that allows modifications.

 -- Class: ast.NodeTransformer
     A *note NodeVisitor: 24ab. subclass that walks the abstract syntax
     tree and allows modification of nodes.

     The *note NodeTransformer: 24ae. will walk the AST and use the
     return value of the visitor methods to replace or remove the old
     node.  If the return value of the visitor method is `None', the
     node will be removed from its location, otherwise it is replaced
     with the return value.  The return value may be the original node
     in which case no replacement takes place.

     Here is an example transformer that rewrites all occurrences of
     name lookups (`foo') to `data['foo']':

         class RewriteName(NodeTransformer):

             def visit_Name(self, node):
                 return copy_location(Subscript(
                     value=Name(id='data', ctx=Load()),
                     slice=Index(value=Str(s=node.id)),
                     ctx=node.ctx
                 ), node)

     Keep in mind that if the node you're operating on has child nodes
     you must either transform the child nodes yourself or call the
     `generic_visit()' method for the node first.

     For nodes that were part of a collection of statements (that
     applies to all statement nodes), the visitor may also return a
     list of nodes rather than just a single node.

     Usually you use the transformer like this:

         node = YourTransformer().visit(node)



 -- Function: ast.dump (node, annotate_fields=True,
          include_attributes=False)
     Return a formatted dump of the tree in _node_.  This is mainly
     useful for debugging purposes.  The returned string will show the
     names and the values for fields.  This makes the code impossible
     to evaluate, so if evaluation is wanted _annotate_fields_ must be
     set to False.  Attributes such as line numbers and column offsets
     are not dumped by default.  If this is wanted,
     _include_attributes_ can be set to `True'.


File: python.info,  Node: symtable --- Access to the compiler's symbol tables,  Next: symbol --- Constants used with Python parse trees,  Prev: Abstract Syntax Trees,  Up: Python Language Services

5.31.3 `symtable' -- Access to the compiler's symbol tables
-----------------------------------------------------------

Symbol tables are generated by the compiler from AST just before
bytecode is generated.  The symbol table is responsible for calculating
the scope of every identifier in the code.  *note symtable: 16d.
provides an interface to examine these tables.

* Menu:

* Generating Symbol Tables::
* Examining Symbol Tables::


File: python.info,  Node: Generating Symbol Tables,  Next: Examining Symbol Tables,  Up: symtable --- Access to the compiler's symbol tables

5.31.3.1 Generating Symbol Tables
.................................

 -- Function: symtable.symtable (code, filename, compile_type)
     Return the toplevel *note SymbolTable: 24b4. for the Python source
     _code_.  _filename_ is the name of the file containing the code.
     _compile_type_ is like the _mode_ argument to *note compile(): 1f8.


File: python.info,  Node: Examining Symbol Tables,  Prev: Generating Symbol Tables,  Up: symtable --- Access to the compiler's symbol tables

5.31.3.2 Examining Symbol Tables
................................

 -- Class: symtable.SymbolTable
     A namespace table for a block.  The constructor is not public.

      -- Method: get_type ()
          Return the type of the symbol table.  Possible values are
          `'class'', `'module'', and `'function''.

      -- Method: get_id ()
          Return the table's identifier.

      -- Method: get_name ()
          Return the table's name.  This is the name of the class if
          the table is for a class, the name of the function if the
          table is for a function, or `'top'' if the table is global
          (*note get_type(): 24b6. returns `'module'').

      -- Method: get_lineno ()
          Return the number of the first line in the block this table
          represents.

      -- Method: is_optimized ()
          Return `True' if the locals in this table can be optimized.

      -- Method: is_nested ()
          Return `True' if the block is a nested class or function.

      -- Method: has_children ()
          Return `True' if the block has nested namespaces within it.
          These can be obtained with *note get_children(): 24bd.

      -- Method: has_exec ()
          Return `True' if the block uses `exec'.

      -- Method: has_import_star ()
          Return `True' if the block uses a starred from-import.

      -- Method: get_identifiers ()
          Return a list of names of symbols in this table.

      -- Method: lookup (name)
          Lookup _name_ in the table and return a *note Symbol: 24c2.
          instance.

      -- Method: get_symbols ()
          Return a list of *note Symbol: 24c2. instances for names in
          the table.

      -- Method: get_children ()
          Return a list of the nested symbol tables.

 -- Class: symtable.Function
     A namespace for a function or method.  This class inherits *note
     SymbolTable: 24b4.

      -- Method: get_parameters ()
          Return a tuple containing names of parameters to this
          function.

      -- Method: get_locals ()
          Return a tuple containing names of locals in this function.

      -- Method: get_globals ()
          Return a tuple containing names of globals in this function.

      -- Method: get_frees ()
          Return a tuple containing names of free variables in this
          function.

 -- Class: symtable.Class
     A namespace of a class.  This class inherits *note SymbolTable:
     24b4.

      -- Method: get_methods ()
          Return a tuple containing the names of methods declared in
          the class.

 -- Class: symtable.Symbol
     An entry in a *note SymbolTable: 24b4. corresponding to an
     identifier in the source.  The constructor is not public.

      -- Method: get_name ()
          Return the symbol's name.

      -- Method: is_referenced ()
          Return `True' if the symbol is used in its block.

      -- Method: is_imported ()
          Return `True' if the symbol is created from an import
          statement.

      -- Method: is_parameter ()
          Return `True' if the symbol is a parameter.

      -- Method: is_global ()
          Return `True' if the symbol is global.

      -- Method: is_declared_global ()
          Return `True' if the symbol is declared global with a global
          statement.

      -- Method: is_local ()
          Return `True' if the symbol is local to its block.

      -- Method: is_free ()
          Return `True' if the symbol is referenced in its block, but
          not assigned to.

      -- Method: is_assigned ()
          Return `True' if the symbol is assigned to in its block.

      -- Method: is_namespace ()
          Return `True' if name binding introduces new namespace.

          If the name is used as the target of a function or class
          statement, this will be true.

          For example:

              >>> table = symtable.symtable("def some_func(): pass", "string", "exec")
              >>> table.lookup("some_func").is_namespace()
              True

          Note that a single name can be bound to multiple objects.  If
          the result is `True', the name may also be bound to other
          objects, like an int or list, that does not introduce a new
          namespace.

      -- Method: get_namespaces ()
          Return a list of namespaces bound to this name.

      -- Method: get_namespace ()
          Return the namespace bound to this name.  If more than one
          namespace is bound, a *note ValueError: 233. is raised.


File: python.info,  Node: symbol --- Constants used with Python parse trees,  Next: token --- Constants used with Python parse trees,  Prev: symtable --- Access to the compiler's symbol tables,  Up: Python Language Services

5.31.4 `symbol' -- Constants used with Python parse trees
---------------------------------------------------------

This module provides constants which represent the numeric values of
internal nodes of the parse tree.  Unlike most Python constants, these
use lower-case names.  Refer to the file `Grammar/Grammar' in the
Python distribution for the definitions of the names in the context of
the language grammar.  The specific numeric values which the names map
to may change between Python versions.

  This module also provides one additional data object:

 -- Data: symbol.sym_name
     Dictionary mapping the numeric values of the constants defined in
     this module back to name strings, allowing more human-readable
     representation of parse trees to be generated.

See also
........

Module *note parser: 12c.
     The second example for the *note parser: 12c. module shows how to
     use the *note symbol: 16c. module.


File: python.info,  Node: token --- Constants used with Python parse trees,  Next: keyword --- Testing for Python keywords,  Prev: symbol --- Constants used with Python parse trees,  Up: Python Language Services

5.31.5 `token' -- Constants used with Python parse trees
--------------------------------------------------------

This module provides constants which represent the numeric values of
leaf nodes of the parse tree (terminal tokens).  Refer to the file
`Grammar/Grammar' in the Python distribution for the definitions of the
names in the context of the language grammar.  The specific numeric
values which the names map to may change between Python versions.

  The module also provides a mapping from numeric codes to names and
some functions.  The functions mirror definitions in the Python C
header files.

 -- Data: token.tok_name
     Dictionary mapping the numeric values of the constants defined in
     this module back to name strings, allowing more human-readable
     representation of parse trees to be generated.

 -- Function: token.ISTERMINAL (x)
     Return true for terminal token values.

 -- Function: token.ISNONTERMINAL (x)
     Return true for non-terminal token values.

 -- Function: token.ISEOF (x)
     Return true if _x_ is the marker indicating the end of input.

  The token constants are:

 -- Data: token.ENDMARKER
 -- Data: token.NAME
 -- Data: token.NUMBER
 -- Data: token.STRING
 -- Data: token.NEWLINE
 -- Data: token.INDENT
 -- Data: token.DEDENT
 -- Data: token.LPAR
 -- Data: token.RPAR
 -- Data: token.LSQB
 -- Data: token.RSQB
 -- Data: token.COLON
 -- Data: token.COMMA
 -- Data: token.SEMI
 -- Data: token.PLUS
 -- Data: token.MINUS
 -- Data: token.STAR
 -- Data: token.SLASH
 -- Data: token.VBAR
 -- Data: token.AMPER
 -- Data: token.LESS
 -- Data: token.GREATER
 -- Data: token.EQUAL
 -- Data: token.DOT
 -- Data: token.PERCENT
 -- Data: token.BACKQUOTE
 -- Data: token.LBRACE
 -- Data: token.RBRACE
 -- Data: token.EQEQUAL
 -- Data: token.NOTEQUAL
 -- Data: token.LESSEQUAL
 -- Data: token.GREATEREQUAL
 -- Data: token.TILDE
 -- Data: token.CIRCUMFLEX
 -- Data: token.LEFTSHIFT
 -- Data: token.RIGHTSHIFT
 -- Data: token.DOUBLESTAR
 -- Data: token.PLUSEQUAL
 -- Data: token.MINEQUAL
 -- Data: token.STAREQUAL
 -- Data: token.SLASHEQUAL
 -- Data: token.PERCENTEQUAL
 -- Data: token.AMPEREQUAL
 -- Data: token.VBAREQUAL
 -- Data: token.CIRCUMFLEXEQUAL
 -- Data: token.LEFTSHIFTEQUAL
 -- Data: token.RIGHTSHIFTEQUAL
 -- Data: token.DOUBLESTAREQUAL
 -- Data: token.DOUBLESLASH
 -- Data: token.DOUBLESLASHEQUAL
 -- Data: token.AT
 -- Data: token.OP
 -- Data: token.ERRORTOKEN
 -- Data: token.N_TOKENS
 -- Data: token.NT_OFFSET

See also
........

Module *note parser: 12c.
     The second example for the *note parser: 12c. module shows how to
     use the *note symbol: 16c. module.


File: python.info,  Node: keyword --- Testing for Python keywords,  Next: tokenize --- Tokenizer for Python source,  Prev: token --- Constants used with Python parse trees,  Up: Python Language Services

5.31.6 `keyword' -- Testing for Python keywords
-----------------------------------------------

This module allows a Python program to determine if a string is a
keyword.

 -- Function: keyword.iskeyword (s)
     Return true if _s_ is a Python keyword.

 -- Data: keyword.kwlist
     Sequence containing all the keywords defined for the interpreter.
     If any keywords are defined to only be active when particular
     *note __future__: 1.  statements are in effect, these will be
     included as well.

See also
........

Latest version of the keyword module Python source code(1)

  ---------- Footnotes ----------

  (1)
http://svn.python.org/view/python/branches/release27-maint/Lib/keyword.py?view=markup


File: python.info,  Node: tokenize --- Tokenizer for Python source,  Next: tabnanny --- Detection of ambiguous indentation,  Prev: keyword --- Testing for Python keywords,  Up: Python Language Services

5.31.7 `tokenize' -- Tokenizer for Python source
------------------------------------------------

The *note tokenize: 180. module provides a lexical scanner for Python
source code, implemented in Python.  The scanner in this module returns
comments as tokens as well, making it useful for implementing
"pretty-printers," including colorizers for on-screen displays.

See also
........

Latest version of the tokenize module Python source code(1)

  The primary entry point is a *note generator: 5bb.:

 -- Function: tokenize.generate_tokens (readline)
     The *note generate_tokens(): 251c. generator requires one
     argument, _readline_, which must be a callable object which
     provides the same interface as the *note readline(): 145. method
     of built-in file objects (see section *note File Objects: 61c.).
     Each call to the function should return one line of input as a
     string.

     The generator produces 5-tuples with these members: the token
     type; the token string; a 2-tuple `(srow, scol)' of ints
     specifying the row and column where the token begins in the
     source; a 2-tuple `(erow, ecol)' of ints specifying the row and
     column where the token ends in the source; and the line on which
     the token was found.  The line passed (the last tuple item) is the
     _logical_ line; continuation lines are included.

     New in version 2.2.

  An older entry point is retained for backward compatibility:

 -- Function: tokenize.tokenize (readline[, tokeneater])
     The *note tokenize(): 180. function accepts two parameters: one
     representing the input stream, and one providing an output
     mechanism for *note tokenize(): 180.

     The first parameter, _readline_, must be a callable object which
     provides the same interface as the *note readline(): 145. method
     of built-in file objects (see section *note File Objects: 61c.).
     Each call to the function should return one line of input as a
     string. Alternately, _readline_ may be a callable object that
     signals completion by raising *note StopIteration: 322.

     Changed in version 2.5: Added *note StopIteration: 322. support.

     The second parameter, _tokeneater_, must also be a callable
     object.  It is called once for each token, with five arguments,
     corresponding to the tuples generated by *note generate_tokens():
     251c.

  All constants from the *note token: 17f. module are also exported from
*note tokenize: 180, as are two additional token type values that might
be passed to the _tokeneater_ function by *note tokenize(): 180.:

 -- Data: tokenize.COMMENT
     Token value used to indicate a comment.

 -- Data: tokenize.NL
     Token value used to indicate a non-terminating newline.  The
     NEWLINE token indicates the end of a logical line of Python code;
     NL tokens are generated when a logical line of code is continued
     over multiple physical lines.

  Another function is provided to reverse the tokenization process.
This is useful for creating tools that tokenize a script, modify the
token stream, and write back the modified script.

 -- Function: tokenize.untokenize (iterable)
     Converts tokens back into Python source code.  The _iterable_ must
     return sequences with at least two elements, the token type and
     the token string.  Any additional sequence elements are ignored.

     The reconstructed script is returned as a single string.  The
     result is guaranteed to tokenize back to match the input so that
     the conversion is lossless and round-trips are assured.  The
     guarantee applies only to the token type and token string as the
     spacing between tokens (column positions) may change.

     New in version 2.5.

  Example of a script re-writer that transforms float literals into
Decimal objects:

    def decistmt(s):
        """Substitute Decimals for floats in a string of statements.

        >>> from decimal import Decimal
        >>> s = 'print +21.3e-5*-.1234/81.7'
        >>> decistmt(s)
        "print +Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7')"

        >>> exec(s)
        -3.21716034272e-007
        >>> exec(decistmt(s))
        -3.217160342717258261933904529E-7

        """
        result = []
        g = generate_tokens(StringIO(s).readline)   # tokenize the string
        for toknum, tokval, _, _, _  in g:
            if toknum == NUMBER and '.' in tokval:  # replace NUMBER tokens
                result.extend([
                    (NAME, 'Decimal'),
                    (OP, '('),
                    (STRING, repr(tokval)),
                    (OP, ')')
                ])
            else:
                result.append((toknum, tokval))
        return untokenize(result)


  ---------- Footnotes ----------

  (1)
http://svn.python.org/view/python/branches/release27-maint/Lib/tokenize.py?view=markup


File: python.info,  Node: tabnanny --- Detection of ambiguous indentation,  Next: pyclbr --- Python class browser support,  Prev: tokenize --- Tokenizer for Python source,  Up: Python Language Services

5.31.8 `tabnanny' -- Detection of ambiguous indentation
-------------------------------------------------------

For the time being this module is intended to be called as a script.
However it is possible to import it into an IDE and use the function
*note check(): 2523.  described below.

     Note: The API provided by this module is likely to change in
     future releases; such changes may not be backward compatible.

 -- Function: tabnanny.check (file_or_dir)
     If _file_or_dir_ is a directory and not a symbolic link, then
     recursively descend the directory tree named by _file_or_dir_,
     checking all `.py' files along the way.  If _file_or_dir_ is an
     ordinary Python source file, it is checked for whitespace related
     problems.  The diagnostic messages are written to standard output
     using the print statement.

 -- Data: tabnanny.verbose
     Flag indicating whether to print verbose messages. This is
     incremented by the `-v' option if called as a script.

 -- Data: tabnanny.filename_only
     Flag indicating whether to print only the filenames of files
     containing whitespace related problems.  This is set to true by
     the `-q' option if called as a script.

 -- Exception: tabnanny.NannyNag
     Raised by *note tokeneater(): 2527. if detecting an ambiguous
     indent. Captured and handled in *note check(): 2523.

 -- Function: tabnanny.tokeneater (type, token, start, end, line)
     This function is used by *note check(): 2523. as a callback
     parameter to the function *note tokenize.tokenize(): 251d.

See also
........

Module *note tokenize: 180.
     Lexical scanner for Python source code.


File: python.info,  Node: pyclbr --- Python class browser support,  Next: py_compile --- Compile Python source files,  Prev: tabnanny --- Detection of ambiguous indentation,  Up: Python Language Services

5.31.9 `pyclbr' -- Python class browser support
-----------------------------------------------

The *note pyclbr: 13f. module can be used to determine some limited
information about the classes, methods and top-level functions defined
in a module.  The information provided is sufficient to implement a
traditional three-pane class browser.  The information is extracted
from the source code rather than by importing the module, so this
module is safe to use with untrusted code.  This restriction makes it
impossible to use this module with modules not implemented in Python,
including all standard and optional extension modules.

 -- Function: pyclbr.readmodule (module[, path=None])
     Read a module and return a dictionary mapping class names to class
     descriptor objects.  The parameter _module_ should be the name of a
     module as a string; it may be the name of a module within a
     package.  The _path_ parameter should be a sequence, and is used
     to augment the value of `sys.path', which is used to locate module
     source code.

 -- Function: pyclbr.readmodule_ex (module[, path=None])
     Like *note readmodule(): 252a, but the returned dictionary, in
     addition to mapping class names to class descriptor objects, also
     maps top-level function names to function descriptor objects.
     Moreover, if the module being read is a package, the key
     `'__path__'' in the returned dictionary has as its value a list
     which contains the package search path.

* Menu:

* Class Objects: Class Objects<2>.
* Function Objects::


File: python.info,  Node: Class Objects<2>,  Next: Function Objects,  Up: pyclbr --- Python class browser support

5.31.9.1 Class Objects
......................

The `Class' objects used as values in the dictionary returned by *note
readmodule(): 252a. and *note readmodule_ex(): 252b. provide the
following data members:

 -- Attribute: Class.module
     The name of the module defining the class described by the class
     descriptor.

 -- Attribute: Class.name
     The name of the class.

 -- Attribute: Class.super
     A list of `Class' objects which describe the immediate base
     classes of the class being described.  Classes which are named as
     superclasses but which are not discoverable by *note readmodule():
     252a. are listed as a string with the class name instead of as
     `Class' objects.

 -- Attribute: Class.methods
     A dictionary mapping method names to line numbers.

 -- Attribute: Class.file
     Name of the file containing the `class' statement defining the
     class.

 -- Attribute: Class.lineno
     The line number of the `class' statement within the file named by
     *note file: 2532.


File: python.info,  Node: Function Objects,  Prev: Class Objects<2>,  Up: pyclbr --- Python class browser support

5.31.9.2 Function Objects
.........................

The `Function' objects used as values in the dictionary returned by
*note readmodule_ex(): 252b. provide the following data members:

 -- Attribute: Function.module
     The name of the module defining the function described by the
     function descriptor.

 -- Attribute: Function.name
     The name of the function.

 -- Attribute: Function.file
     Name of the file containing the `def' statement defining the
     function.

 -- Attribute: Function.lineno
     The line number of the `def' statement within the file named by
     *note file: 2538.


File: python.info,  Node: py_compile --- Compile Python source files,  Next: compileall --- Byte-compile Python libraries,  Prev: pyclbr --- Python class browser support,  Up: Python Language Services

5.31.10 `py_compile' -- Compile Python source files
---------------------------------------------------

The *note py_compile: 13e. module provides a function to generate a
byte-code file from a source file, and another function used when the
module source file is invoked as a script.

  Though not often needed, this function can be useful when installing
modules for shared use, especially if some of the users may not have
permission to write the byte-code cache files in the directory
containing the source code.

 -- Exception: py_compile.PyCompileError
     Exception raised when an error occurs while attempting to compile
     the file.

 -- Function: py_compile.compile (file[, cfile[, dfile[, doraise]]])
     Compile a source file to byte-code and write out the byte-code
     cache  file.  The source code is loaded from the file name _file_.
     The  byte-code is written to _cfile_, which defaults to _file_
     `+' `'c'' (`'o'' if optimization is enabled in the current
     interpreter).  If _dfile_ is specified, it is used as the name of
     the source file in error messages instead of _file_.  If _doraise_
     is true, a *note PyCompileError: 253c. is raised when an error is
     encountered while compiling _file_. If _doraise_ is false (the
     default), an error string is written to `sys.stderr', but no
     exception is raised.

 -- Function: py_compile.main ([args])
     Compile several source files.  The files named in _args_ (or on
     the command line, if _args_ is not specified) are compiled and the
     resulting bytecode is cached in the normal manner.  This function
     does not search a directory structure to locate source files; it
     only compiles files named explicitly.  If `'-'' is the only
     parameter in args, the list of files is taken from standard input.

     Changed in version 2.7: Added support for `'-''.

  When this module is run as a script, the *note main(): 253e. is used
to compile all the files named on the command line.  The exit status is
nonzero if one of the files could not be compiled.

  Changed in version 2.6: Added the nonzero exit status when module is
run as a script.

See also
........

Module *note compileall: 69.
     Utilities to compile all Python source files in a directory tree.


File: python.info,  Node: compileall --- Byte-compile Python libraries,  Next: dis --- Disassembler for Python bytecode,  Prev: py_compile --- Compile Python source files,  Up: Python Language Services

5.31.11 `compileall' -- Byte-compile Python libraries
-----------------------------------------------------

This module provides some utility functions to support installing Python
libraries.  These functions compile Python source files in a directory
tree.  This module can be used to create the cached byte-code files at
library installation time, which makes them available for use even by
users who don't have write permission to the library directories.

* Menu:

* Command-line use::
* Public functions::


File: python.info,  Node: Command-line use,  Next: Public functions,  Up: compileall --- Byte-compile Python libraries

5.31.11.1 Command-line use
..........................

This module can work as a script (using *python -m compileall*) to
compile Python sources.

 -- Program Option: [directory|file]...
     Positional arguments are files to compile or directories that
     contain source files, traversed recursively.  If no argument is
     given, behave as if the command line was `-l <directories from
     sys.path>'.

 -- Program Option: -l
     Do not recurse into subdirectories, only compile source code files
     directly contained in the named or implied directories.

 -- Program Option: -f
     Force rebuild even if timestamps are up-to-date.

 -- Program Option: -q
     Do not print the list of files compiled, print only error messages.

 -- Program Option: -d destdir
     Directory prepended to the path to each file being compiled.  This
     will appear in compilation time tracebacks, and is also compiled
     in to the byte-code file, where it will be used in tracebacks and
     other messages in cases where the source file does not exist at
     the time the byte-code file is executed.

 -- Program Option: -x regex
     regex is used to search the full path to each file considered for
     compilation, and if the regex produces a match, the file is
     skipped.

 -- Program Option: -i list
     Read the file `list' and add each line that it contains to the
     list of files and directories to compile.  If `list' is `-', read
     lines from `stdin'.

  Changed in version 2.7: Added the `-i'  option.


File: python.info,  Node: Public functions,  Prev: Command-line use,  Up: compileall --- Byte-compile Python libraries

5.31.11.2 Public functions
..........................

 -- Function: compileall.compile_dir (dir[, maxlevels[, ddir[, force[,
          rx[, quiet]]]]])
     Recursively descend the directory tree named by _dir_, compiling
     all `.py' files along the way.

     The _maxlevels_ parameter is used to limit the depth of the
     recursion; it defaults to `10'.

     If _ddir_ is given, it is prepended to the path to each file being
     compiled for use in compilation time tracebacks, and is also
     compiled in to the byte-code file, where it will be used in
     tracebacks and other messages in cases where the source file does
     not exist at the time the byte-code file is executed.

     If _force_ is true, modules are re-compiled even if the timestamps
     are up to date.

     If _rx_ is given, its search method is called on the complete path
     to each file considered for compilation, and if it returns a true
     value, the file is skipped.

     If _quiet_ is true, nothing is printed to the standard output
     unless errors occur.

 -- Function: compileall.compile_file (fullname[, ddir[, force[, rx[,
          quiet]]]])
     Compile the file with path _fullname_.

     If _ddir_ is given, it is prepended to the path to the file being
     compiled for use in compilation time tracebacks, and is also
     compiled in to the byte-code file, where it will be used in
     tracebacks and other messages in cases where the source file does
     not exist at the time the byte-code file is executed.

     If _rx_ is given, its search method is passed the full path name
     to the file being compiled, and if it returns a true value, the
     file is not compiled and `True' is returned.

     If _quiet_ is true, nothing is printed to the standard output
     unless errors occur.

     New in version 2.7.

 -- Function: compileall.compile_path ([skip_curdir[, maxlevels[,
          force]]])
     Byte-compile all the `.py' files found along `sys.path'. If
     _skip_curdir_ is true (the default), the current directory is not
     included in the search.  All other parameters are passed to the
     *note compile_dir(): 2549.  function.  Note that unlike the other
     compile functions, `maxlevels' defaults to `0'.

  To force a recompile of all the `.py' files in the `Lib/'
subdirectory and all its subdirectories:

    import compileall

    compileall.compile_dir('Lib/', force=True)

    # Perform same compilation, excluding files in .svn directories.
    import re
    compileall.compile_dir('Lib/', rx=re.compile('/[.]svn'), force=True)


See also
........

Module *note py_compile: 13e.
     Byte-compile a single source file.


File: python.info,  Node: dis --- Disassembler for Python bytecode,  Next: pickletools --- Tools for pickle developers,  Prev: compileall --- Byte-compile Python libraries,  Up: Python Language Services

5.31.12 `dis' -- Disassembler for Python bytecode
-------------------------------------------------

The *note dis: 85. module supports the analysis of CPython *note
bytecode: 567. by disassembling it. The CPython bytecode which this
module takes as an input is defined in the file `Include/opcode.h' and
used by the compiler and the interpreter.

See also
........

Latest version of the dis module Python source code(1)

*CPython implementation detail:* Bytecode is an implementation detail
of the CPython interpreter!  No guarantees are made that bytecode will
not be added, removed, or changed between versions of Python.  Use of
this module should not be considered to work across Python VMs or
Python releases.

  Example: Given the function `myfunc()':

    def myfunc(alist):
        return len(alist)

the following command can be used to get the disassembly of `myfunc()':

    >>> dis.dis(myfunc)
      2           0 LOAD_GLOBAL              0 (len)
                  3 LOAD_FAST                0 (alist)
                  6 CALL_FUNCTION            1
                  9 RETURN_VALUE

(The "2" is a line number).

  The *note dis: 85. module defines the following functions and
constants:

 -- Function: dis.dis ([bytesource])
     Disassemble the _bytesource_ object. _bytesource_ can denote
     either a module, a class, a method, a function, or a code object.
     For a module, it disassembles all functions.  For a class, it
     disassembles all methods.  For a single code sequence, it prints
     one line per bytecode instruction.  If no object is provided, it
     disassembles the last traceback.

 -- Function: dis.distb ([tb])
     Disassembles the top-of-stack function of a traceback, using the
     last traceback if none was passed.  The instruction causing the
     exception is indicated.

 -- Function: dis.disassemble (code[, lasti])
     Disassembles a code object, indicating the last instruction if
     _lasti_ was provided.  The output is divided in the following
     columns:

       1. the line number, for the first instruction of each line

       2. the current instruction, indicated as `-->',

       3. a labelled instruction, indicated with `>>',

       4. the address of the instruction,

       5. the operation code name,

       6. operation parameters, and

       7. interpretation of the parameters in parentheses.

     The parameter interpretation recognizes local and global variable
     names, constant values, branch targets, and compare operators.

 -- Function: dis.disco (code[, lasti])
     A synonym for *note disassemble(): 2550.  It is more convenient to
     type, and kept for compatibility with earlier Python releases.

 -- Function: dis.findlinestarts (code)
     This generator function uses the `co_firstlineno' and `co_lnotab'
     attributes of the code object _code_ to find the offsets which are
     starts of lines in the source code.  They are generated as
     `(offset, lineno)' pairs.

 -- Function: dis.findlabels (code)
     Detect all offsets in the code object _code_ which are jump
     targets, and return a list of these offsets.

 -- Data: dis.opname
     Sequence of operation names, indexable using the bytecode.

 -- Data: dis.opmap
     Dictionary mapping operation names to bytecodes.

 -- Data: dis.cmp_op
     Sequence of all compare operation names.

 -- Data: dis.hasconst
     Sequence of bytecodes that have a constant parameter.

 -- Data: dis.hasfree
     Sequence of bytecodes that access a free variable.

 -- Data: dis.hasname
     Sequence of bytecodes that access an attribute by name.

 -- Data: dis.hasjrel
     Sequence of bytecodes that have a relative jump target.

 -- Data: dis.hasjabs
     Sequence of bytecodes that have an absolute jump target.

 -- Data: dis.haslocal
     Sequence of bytecodes that access a local variable.

 -- Data: dis.hascompare
     Sequence of bytecodes of Boolean operations.

* Menu:

* Python Bytecode Instructions::

  ---------- Footnotes ----------

  (1)
http://svn.python.org/view/python/branches/release27-maint/Lib/dis.py?view=markup


File: python.info,  Node: Python Bytecode Instructions,  Up: dis --- Disassembler for Python bytecode

5.31.12.1 Python Bytecode Instructions
......................................

The Python compiler currently generates the following bytecode
instructions.

 -- Opcode: STOP_CODE ()
     Indicates end-of-code to the compiler, not used by the interpreter.

 -- Opcode: NOP ()
     Do nothing code.  Used as a placeholder by the bytecode optimizer.

 -- Opcode: POP_TOP ()
     Removes the top-of-stack (TOS) item.

 -- Opcode: ROT_TWO ()
     Swaps the two top-most stack items.

 -- Opcode: ROT_THREE ()
     Lifts second and third stack item one position up, moves top down
     to position three.

 -- Opcode: ROT_FOUR ()
     Lifts second, third and forth stack item one position up, moves
     top down to position four.

 -- Opcode: DUP_TOP ()
     Duplicates the reference on top of the stack.

  Unary Operations take the top of the stack, apply the operation, and
push the result back on the stack.

 -- Opcode: UNARY_POSITIVE ()
     Implements `TOS = +TOS'.

 -- Opcode: UNARY_NEGATIVE ()
     Implements `TOS = -TOS'.

 -- Opcode: UNARY_NOT ()
     Implements `TOS = not TOS'.

 -- Opcode: UNARY_CONVERT ()
     Implements `TOS = `TOS`'.

 -- Opcode: UNARY_INVERT ()
     Implements `TOS = ~TOS'.

 -- Opcode: GET_ITER ()
     Implements `TOS = iter(TOS)'.

  Binary operations remove the top of the stack (TOS) and the second
top-most stack item (TOS1) from the stack.  They perform the operation,
and put the result back on the stack.

 -- Opcode: BINARY_POWER ()
     Implements `TOS = TOS1 ** TOS'.

 -- Opcode: BINARY_MULTIPLY ()
     Implements `TOS = TOS1 * TOS'.

 -- Opcode: BINARY_DIVIDE ()
     Implements `TOS = TOS1 / TOS' when `from __future__ import
     division' is not in effect.

 -- Opcode: BINARY_FLOOR_DIVIDE ()
     Implements `TOS = TOS1 // TOS'.

 -- Opcode: BINARY_TRUE_DIVIDE ()
     Implements `TOS = TOS1 / TOS' when `from __future__ import
     division' is in effect.

 -- Opcode: BINARY_MODULO ()
     Implements `TOS = TOS1 % TOS'.

 -- Opcode: BINARY_ADD ()
     Implements `TOS = TOS1 + TOS'.

 -- Opcode: BINARY_SUBTRACT ()
     Implements `TOS = TOS1 - TOS'.

 -- Opcode: BINARY_SUBSCR ()
     Implements `TOS = TOS1[TOS]'.

 -- Opcode: BINARY_LSHIFT ()
     Implements `TOS = TOS1 << TOS'.

 -- Opcode: BINARY_RSHIFT ()
     Implements `TOS = TOS1 >> TOS'.

 -- Opcode: BINARY_AND ()
     Implements `TOS = TOS1 & TOS'.

 -- Opcode: BINARY_XOR ()
     Implements `TOS = TOS1 ^ TOS'.

 -- Opcode: BINARY_OR ()
     Implements `TOS = TOS1 | TOS'.

  In-place operations are like binary operations, in that they remove
TOS and TOS1, and push the result back on the stack, but the operation
is done in-place when TOS1 supports it, and the resulting TOS may be
(but does not have to be) the original TOS1.

 -- Opcode: INPLACE_POWER ()
     Implements in-place `TOS = TOS1 ** TOS'.

 -- Opcode: INPLACE_MULTIPLY ()
     Implements in-place `TOS = TOS1 * TOS'.

 -- Opcode: INPLACE_DIVIDE ()
     Implements in-place `TOS = TOS1 / TOS' when `from __future__ import
     division' is not in effect.

 -- Opcode: INPLACE_FLOOR_DIVIDE ()
     Implements in-place `TOS = TOS1 // TOS'.

 -- Opcode: INPLACE_TRUE_DIVIDE ()
     Implements in-place `TOS = TOS1 / TOS' when `from __future__ import
     division' is in effect.

 -- Opcode: INPLACE_MODULO ()
     Implements in-place `TOS = TOS1 % TOS'.

 -- Opcode: INPLACE_ADD ()
     Implements in-place `TOS = TOS1 + TOS'.

 -- Opcode: INPLACE_SUBTRACT ()
     Implements in-place `TOS = TOS1 - TOS'.

 -- Opcode: INPLACE_LSHIFT ()
     Implements in-place `TOS = TOS1 << TOS'.

 -- Opcode: INPLACE_RSHIFT ()
     Implements in-place `TOS = TOS1 >> TOS'.

 -- Opcode: INPLACE_AND ()
     Implements in-place `TOS = TOS1 & TOS'.

 -- Opcode: INPLACE_XOR ()
     Implements in-place `TOS = TOS1 ^ TOS'.

 -- Opcode: INPLACE_OR ()
     Implements in-place `TOS = TOS1 | TOS'.

  The slice opcodes take up to three parameters.

 -- Opcode: SLICE+0 ()
     Implements `TOS = TOS[:]'.

 -- Opcode: SLICE+1 ()
     Implements `TOS = TOS1[TOS:]'.

 -- Opcode: SLICE+2 ()
     Implements `TOS = TOS1[:TOS]'.

 -- Opcode: SLICE+3 ()
     Implements `TOS = TOS2[TOS1:TOS]'.

  Slice assignment needs even an additional parameter.  As any
statement, they put nothing on the stack.

 -- Opcode: STORE_SLICE+0 ()
     Implements `TOS[:] = TOS1'.

 -- Opcode: STORE_SLICE+1 ()
     Implements `TOS1[TOS:] = TOS2'.

 -- Opcode: STORE_SLICE+2 ()
     Implements `TOS1[:TOS] = TOS2'.

 -- Opcode: STORE_SLICE+3 ()
     Implements `TOS2[TOS1:TOS] = TOS3'.

 -- Opcode: DELETE_SLICE+0 ()
     Implements `del TOS[:]'.

 -- Opcode: DELETE_SLICE+1 ()
     Implements `del TOS1[TOS:]'.

 -- Opcode: DELETE_SLICE+2 ()
     Implements `del TOS1[:TOS]'.

 -- Opcode: DELETE_SLICE+3 ()
     Implements `del TOS2[TOS1:TOS]'.

 -- Opcode: STORE_SUBSCR ()
     Implements `TOS1[TOS] = TOS2'.

 -- Opcode: DELETE_SUBSCR ()
     Implements `del TOS1[TOS]'.

  Miscellaneous opcodes.

 -- Opcode: PRINT_EXPR ()
     Implements the expression statement for the interactive mode.  TOS
     is removed from the stack and printed.  In non-interactive mode,
     an expression statement is terminated with `POP_STACK'.

 -- Opcode: PRINT_ITEM ()
     Prints TOS to the file-like object bound to `sys.stdout'.  There
     is one such instruction for each item in the *note print: 4cd.
     statement.

 -- Opcode: PRINT_ITEM_TO ()
     Like `PRINT_ITEM', but prints the item second from TOS to the
     file-like object at TOS.  This is used by the extended print
     statement.

 -- Opcode: PRINT_NEWLINE ()
     Prints a new line on `sys.stdout'.  This is generated as the last
     operation of a *note print: 4cd. statement, unless the statement
     ends with a comma.

 -- Opcode: PRINT_NEWLINE_TO ()
     Like `PRINT_NEWLINE', but prints the new line on the file-like
     object on the TOS.  This is used by the extended print statement.

 -- Opcode: BREAK_LOOP ()
     Terminates a loop due to a *note break: 524. statement.

 -- Opcode: CONTINUE_LOOP (target)
     Continues a loop due to a *note continue: 525. statement.
     _target_ is the address to jump to (which should be a `FOR_ITER'
     instruction).

 -- Opcode: LIST_APPEND (i)
     Calls `list.append(TOS[-i], TOS)'.  Used to implement list
     comprehensions.  While the appended value is popped off, the list
     object remains on the stack so that it is available for further
     iterations of the loop.

 -- Opcode: LOAD_LOCALS ()
     Pushes a reference to the locals of the current scope on the
     stack. This is used in the code for a class definition: After the
     class body is evaluated, the locals are passed to the class
     definition.

 -- Opcode: RETURN_VALUE ()
     Returns with TOS to the caller of the function.

 -- Opcode: YIELD_VALUE ()
     Pops `TOS' and yields it from a *note generator: 5bb.

 -- Opcode: IMPORT_STAR ()
     Loads all symbols not starting with `'_'' directly from the module
     TOS to the local namespace. The module is popped after loading all
     names. This opcode implements `from module import *'.

 -- Opcode: EXEC_STMT ()
     Implements `exec TOS2,TOS1,TOS'.  The compiler fills missing
     optional parameters with `None'.

 -- Opcode: POP_BLOCK ()
     Removes one block from the block stack.  Per frame, there is a
     stack of blocks, denoting nested loops, try statements, and such.

 -- Opcode: END_FINALLY ()
     Terminates a *note finally: 385. clause.  The interpreter recalls
     whether the exception has to be re-raised, or whether the function
     returns, and continues with the outer-next block.

 -- Opcode: BUILD_CLASS ()
     Creates a new class object.  TOS is the methods dictionary, TOS1
     the tuple of the names of the base classes, and TOS2 the class
     name.

 -- Opcode: SETUP_WITH (delta)
     This opcode performs several operations before a with block
     starts.  First, it loads *note __exit__(): 1fd. from the context
     manager and pushes it onto the stack for later use by *note
     WITH_CLEANUP: 25a7.  Then, *note __enter__(): 1fc. is called, and
     a finally block pointing to _delta_ is pushed.  Finally, the
     result of calling the enter method is pushed onto the stack.  The
     next opcode will either ignore it (*note POP_TOP: 2562.), or store
     it in (a) variable(s) (*note STORE_FAST: 25a8, *note STORE_NAME:
     25a9, or *note UNPACK_SEQUENCE: 25aa.).

 -- Opcode: WITH_CLEANUP ()
     Cleans up the stack when a *note with: 1bd. statement block exits.
     On top of the stack are 1-3 values indicating how/why the finally
     clause was entered:

        * TOP = `None'

        * (TOP, SECOND) = (`WHY_{RETURN,CONTINUE}'), retval

        * TOP = `WHY_*'; no retval below it

        * (TOP, SECOND, THIRD) = exc_info()

     Under them is EXIT, the context manager's *note __exit__(): 1fd.
     bound method.

     In the last case, `EXIT(TOP, SECOND, THIRD)' is called, otherwise
     `EXIT(None, None, None)'.

     EXIT is removed from the stack, leaving the values above it in the
     same order. In addition, if the stack represents an exception,
     _and_ the function call returns a 'true' value, this information
     is "zapped", to prevent `END_FINALLY' from re-raising the
     exception.  (But non-local gotos should still be resumed.)


  All of the following opcodes expect arguments.  An argument is two
bytes, with the more significant byte last.

 -- Opcode: STORE_NAME (namei)
     Implements `name = TOS'. _namei_ is the index of _name_ in the
     attribute `co_names' of the code object. The compiler tries to use
     `STORE_FAST' or `STORE_GLOBAL' if possible.

 -- Opcode: DELETE_NAME (namei)
     Implements `del name', where _namei_ is the index into `co_names'
     attribute of the code object.

 -- Opcode: UNPACK_SEQUENCE (count)
     Unpacks TOS into _count_ individual values, which are put onto the
     stack right-to-left.

 -- Opcode: DUP_TOPX (count)
     Duplicate _count_ items, keeping them in the same order. Due to
     implementation limits, _count_ should be between 1 and 5 inclusive.

 -- Opcode: STORE_ATTR (namei)
     Implements `TOS.name = TOS1', where _namei_ is the index of name in
     `co_names'.

 -- Opcode: DELETE_ATTR (namei)
     Implements `del TOS.name', using _namei_ as index into `co_names'.

 -- Opcode: STORE_GLOBAL (namei)
     Works as `STORE_NAME', but stores the name as a global.

 -- Opcode: DELETE_GLOBAL (namei)
     Works as `DELETE_NAME', but deletes a global name.

 -- Opcode: LOAD_CONST (consti)
     Pushes `co_consts[consti]' onto the stack.

 -- Opcode: LOAD_NAME (namei)
     Pushes the value associated with `co_names[namei]' onto the stack.

 -- Opcode: BUILD_TUPLE (count)
     Creates a tuple consuming _count_ items from the stack, and pushes
     the resulting tuple onto the stack.

 -- Opcode: BUILD_LIST (count)
     Works as `BUILD_TUPLE', but creates a list.

 -- Opcode: BUILD_MAP (count)
     Pushes a new dictionary object onto the stack.  The dictionary is
     pre-sized to hold _count_ entries.

 -- Opcode: LOAD_ATTR (namei)
     Replaces TOS with `getattr(TOS, co_names[namei])'.

 -- Opcode: COMPARE_OP (opname)
     Performs a Boolean operation.  The operation name can be found in
     `cmp_op[opname]'.

 -- Opcode: IMPORT_NAME (namei)
     Imports the module `co_names[namei]'.  TOS and TOS1 are popped and
     provide the _fromlist_ and _level_ arguments of *note
     __import__(): 36d.  The module object is pushed onto the stack.
     The current namespace is not affected: for a proper import
     statement, a subsequent `STORE_FAST' instruction modifies the
     namespace.

 -- Opcode: IMPORT_FROM (namei)
     Loads the attribute `co_names[namei]' from the module found in
     TOS. The resulting object is pushed onto the stack, to be
     subsequently stored by a `STORE_FAST' instruction.

 -- Opcode: JUMP_FORWARD (delta)
     Increments bytecode counter by _delta_.

 -- Opcode: POP_JUMP_IF_TRUE (target)
     If TOS is true, sets the bytecode counter to _target_.  TOS is
     popped.

 -- Opcode: POP_JUMP_IF_FALSE (target)
     If TOS is false, sets the bytecode counter to _target_.  TOS is
     popped.

 -- Opcode: JUMP_IF_TRUE_OR_POP (target)
     If TOS is true, sets the bytecode counter to _target_ and leaves
     TOS on the stack.  Otherwise (TOS is false), TOS is popped.

 -- Opcode: JUMP_IF_FALSE_OR_POP (target)
     If TOS is false, sets the bytecode counter to _target_ and leaves
     TOS on the stack.  Otherwise (TOS is true), TOS is popped.

 -- Opcode: JUMP_ABSOLUTE (target)
     Set bytecode counter to _target_.

 -- Opcode: FOR_ITER (delta)
     `TOS' is an *note iterator: 84a.  Call its `next()' method.  If
     this yields a new value, push it on the stack (leaving the
     iterator below it).  If the iterator indicates it is exhausted
     `TOS' is popped, and the bytecode counter is incremented by
     _delta_.

 -- Opcode: LOAD_GLOBAL (namei)
     Loads the global named `co_names[namei]' onto the stack.

 -- Opcode: SETUP_LOOP (delta)
     Pushes a block for a loop onto the block stack.  The block spans
     from the current instruction with a size of _delta_ bytes.

 -- Opcode: SETUP_EXCEPT (delta)
     Pushes a try block from a try-except clause onto the block stack.
     _delta_ points to the first except block.

 -- Opcode: SETUP_FINALLY (delta)
     Pushes a try block from a try-except clause onto the block stack.
     _delta_ points to the finally block.

 -- Opcode: STORE_MAP ()
     Store a key and value pair in a dictionary.  Pops the key and
     value while leaving the dictionary on the stack.

 -- Opcode: LOAD_FAST (var_num)
     Pushes a reference to the local `co_varnames[var_num]' onto the
     stack.

 -- Opcode: STORE_FAST (var_num)
     Stores TOS into the local `co_varnames[var_num]'.

 -- Opcode: DELETE_FAST (var_num)
     Deletes local `co_varnames[var_num]'.

 -- Opcode: LOAD_CLOSURE (i)
     Pushes a reference to the cell contained in slot _i_ of the cell
     and free variable storage.  The name of the variable is
     `co_cellvars[i]' if _i_ is less than the length of _co_cellvars_.
     Otherwise it is  `co_freevars[i - len(co_cellvars)]'.

 -- Opcode: LOAD_DEREF (i)
     Loads the cell contained in slot _i_ of the cell and free variable
     storage.  Pushes a reference to the object the cell contains on
     the stack.

 -- Opcode: STORE_DEREF (i)
     Stores TOS into the cell contained in slot _i_ of the cell and
     free variable storage.

 -- Opcode: SET_LINENO (lineno)
     This opcode is obsolete.

 -- Opcode: RAISE_VARARGS (argc)
     Raises an exception. _argc_ indicates the number of parameters to
     the raise statement, ranging from 0 to 3.  The handler will find
     the traceback as TOS2, the parameter as TOS1, and the exception as
     TOS.

 -- Opcode: CALL_FUNCTION (argc)
     Calls a function.  The low byte of _argc_ indicates the number of
     positional parameters, the high byte the number of keyword
     parameters. On the stack, the opcode finds the keyword parameters
     first.  For each keyword argument, the value is on top of the key.
     Below the keyword parameters, the positional parameters are on
     the stack, with the right-most parameter on top.  Below the
     parameters, the function object to call is on the stack.  Pops all
     function arguments, and the function itself off the stack, and
     pushes the return value.

 -- Opcode: MAKE_FUNCTION (argc)
     Pushes a new function object on the stack.  TOS is the code
     associated with the function.  The function object is defined to
     have _argc_ default parameters, which are found below TOS.

 -- Opcode: MAKE_CLOSURE (argc)
     Creates a new function object, sets its _func_closure_ slot, and
     pushes it on the stack.  TOS is the code associated with the
     function, TOS1 the tuple containing cells for the closure's free
     variables.  The function also has _argc_ default parameters, which
     are found below the cells.

 -- Opcode: BUILD_SLICE (argc)
     Pushes a slice object on the stack.  _argc_ must be 2 or 3.  If it
     is 2, `slice(TOS1, TOS)' is pushed; if it is 3, `slice(TOS2, TOS1,
     TOS)' is pushed. See the *note slice(): 43f. built-in function for
     more information.

 -- Opcode: EXTENDED_ARG (ext)
     Prefixes any opcode which has an argument too big to fit into the
     default two bytes.  _ext_ holds two additional bytes which, taken
     together with the subsequent opcode's argument, comprise a
     four-byte argument, _ext_ being the two most-significant bytes.

 -- Opcode: CALL_FUNCTION_VAR (argc)
     Calls a function. _argc_ is interpreted as in `CALL_FUNCTION'. The
     top element on the stack contains the variable argument list,
     followed by keyword and positional arguments.

 -- Opcode: CALL_FUNCTION_KW (argc)
     Calls a function. _argc_ is interpreted as in `CALL_FUNCTION'. The
     top element on the stack contains the keyword arguments
     dictionary,  followed by explicit keyword and positional arguments.

 -- Opcode: CALL_FUNCTION_VAR_KW (argc)
     Calls a function. _argc_ is interpreted as in `CALL_FUNCTION'.
     The top element on the stack contains the keyword arguments
     dictionary, followed by the variable-arguments tuple, followed by
     explicit keyword and positional arguments.

 -- Opcode: HAVE_ARGUMENT ()
     This is not really an opcode.  It identifies the dividing line
     between opcodes which don't take arguments `< HAVE_ARGUMENT' and
     those which do `>= HAVE_ARGUMENT'.


File: python.info,  Node: pickletools --- Tools for pickle developers,  Prev: dis --- Disassembler for Python bytecode,  Up: Python Language Services

5.31.13 `pickletools' -- Tools for pickle developers
----------------------------------------------------

New in version 2.3.

  This module contains various constants relating to the intimate
details of the *note pickle: 12e. module, some lengthy comments about
the implementation, and a few useful functions for analyzing pickled
data.  The contents of this module are useful for Python core
developers who are working on the *note pickle: 12e. and *note cPickle:
73. implementations; ordinary users of the *note pickle: 12e. module
probably won't find the *note pickletools: 12f. module relevant.

 -- Function: pickletools.dis (pickle[, out=None, memo=None,
          indentlevel=4])
     Outputs a symbolic disassembly of the pickle to the file-like
     object _out_, defaulting to `sys.stdout'.  _pickle_ can be a
     string or a file-like object.  _memo_ can be a Python dictionary
     that will be used as the pickle's memo; it can be used to perform
     disassemblies across multiple pickles created by the same pickler.
     Successive levels, indicated by `MARK' opcodes in the stream, are
     indented by _indentlevel_ spaces.

 -- Function: pickletools.genops (pickle)
     Provides an *note iterator: 84a. over all of the opcodes in a
     pickle, returning a sequence of `(opcode, arg, pos)' triples.
     _opcode_ is an instance of an `OpcodeInfo' class; _arg_ is the
     decoded value, as a Python object, of the opcode's argument; _pos_
     is the position at which this opcode is located.  _pickle_ can be
     a string or a file-like object.

 -- Function: pickletools.optimize (picklestring)
     Returns a new equivalent pickle string after eliminating unused
     `PUT' opcodes. The optimized pickle is shorter, takes less
     transmission time, requires less storage space, and unpickles more
     efficiently.

     New in version 2.6.


File: python.info,  Node: Python compiler package,  Next: Miscellaneous Services,  Prev: Python Language Services,  Up: The Python Standard Library

5.32 Python compiler package
============================

Deprecated since version 2.6: The *note compiler: 6a. package has been
removed in Python 3.0.

  The Python compiler package is a tool for analyzing Python source
code and generating Python bytecode.  The compiler contains libraries
to generate an abstract syntax tree from Python source code and to
generate Python *note bytecode: 567. from the tree.

  The *note compiler: 6a. package is a Python source to bytecode
translator written in Python.  It uses the built-in parser and standard
*note parser: 12c. module to generate a concrete syntax tree.  This
tree is used to generate an abstract syntax tree (AST) and then Python
bytecode.

  The full functionality of the package duplicates the built-in
compiler provided with the Python interpreter.  It is intended to match
its behavior almost exactly.  Why implement another compiler that does
the same thing?  The package is useful for a variety of purposes.  It
can be modified more easily than the built-in compiler.  The AST it
generates is useful for analyzing Python source code.

  This chapter explains how the various components of the *note
compiler: 6a. package work.  It blends reference material with a
tutorial.

* Menu:

* The basic interface::
* Limitations: Limitations<2>.
* Python Abstract Syntax::
* Using Visitors to Walk ASTs::
* Bytecode Generation::


File: python.info,  Node: The basic interface,  Next: Limitations<2>,  Up: Python compiler package

5.32.1 The basic interface
--------------------------

The top-level of the package defines four functions.  If you import
*note compiler: 6a, you will get these functions and a collection of
modules contained in the package.

 -- Function: compiler.parse (buf)
     Returns an abstract syntax tree for the Python source code in
     _buf_. The function raises *note SyntaxError: 485. if there is an
     error in the source code.  The return value is a
     `compiler.ast.Module' instance that contains the tree.

 -- Function: compiler.parseFile (path)
     Return an abstract syntax tree for the Python source code in the
     file specified by _path_.  It is equivalent to
     `parse(open(path).read())'.

 -- Function: compiler.walk (ast, visitor[, verbose])
     Do a pre-order walk over the abstract syntax tree _ast_.  Call the
     appropriate method on the _visitor_ instance for each node
     encountered.

 -- Function: compiler.compile (source, filename, mode, flags=None,
          dont_inherit=None)
     Compile the string _source_, a Python module, statement or
     expression, into a code object that can be executed by the exec
     statement or *note eval(): 34f. This function is a replacement for
     the built-in *note compile(): 1f8. function.

     The _filename_ will be used for run-time error messages.

     The _mode_ must be 'exec' to compile a module, 'single' to compile
     a single (interactive) statement, or 'eval' to compile an
     expression.

     The _flags_ and _dont_inherit_ arguments affect future-related
     statements, but are not supported yet.

 -- Function: compiler.compileFile (source)
     Compiles the file _source_ and generates a .pyc file.

  The *note compiler: 6a. package contains the following modules: *note
ast: f, `consts', `future', `misc', `pyassem', `pycodegen', `symbols',
`transformer', and `visitor'.


File: python.info,  Node: Limitations<2>,  Next: Python Abstract Syntax,  Prev: The basic interface,  Up: Python compiler package

5.32.2 Limitations
------------------

There are some problems with the error checking of the compiler
package.  The interpreter detects syntax errors in two distinct phases.
One set of errors is detected by the interpreter's parser, the other
set by the compiler.  The compiler package relies on the interpreter's
parser, so it get the first phases of error checking for free.  It
implements the second phase itself, and that implementation is
incomplete.  For example, the compiler package does not raise an error
if a name appears more than once in an argument list:  `def f(x, x):
...'

  A future version of the compiler should fix these problems.


File: python.info,  Node: Python Abstract Syntax,  Next: Using Visitors to Walk ASTs,  Prev: Limitations<2>,  Up: Python compiler package

5.32.3 Python Abstract Syntax
-----------------------------

The *note compiler.ast: 6b. module defines an abstract syntax for
Python.  In the abstract syntax tree, each node represents a syntactic
construct.  The root of the tree is `Module' object.

  The abstract syntax offers a higher level interface to parsed Python
source code.  The *note parser: 12c. module and the compiler written in
C for the Python interpreter use a concrete syntax tree.  The concrete
syntax is tied closely to the grammar description used for the Python
parser.  Instead of a single node for a construct, there are often
several levels of nested nodes that are introduced by Python's
precedence rules.

  The abstract syntax tree is created by the `compiler.transformer'
module.  The transformer relies on the built-in Python parser to
generate a concrete syntax tree.  It generates an abstract syntax tree
from the concrete tree.

  The `transformer' module was created by Greg Stein and Bill Tutt for
an experimental Python-to-C compiler.  The current version contains a
number of modifications and improvements, but the basic form of the
abstract syntax and of the transformer are due to Stein and Tutt.

* Menu:

* AST Nodes::
* Assignment nodes::
* Examples: Examples<20>.


File: python.info,  Node: AST Nodes,  Next: Assignment nodes,  Up: Python Abstract Syntax

5.32.3.1 AST Nodes
..................

The *note compiler.ast: 6b. module is generated from a text file that
describes each node type and its elements.  Each node type is
represented as a class that inherits from the abstract base class *note
compiler.ast.Node: 25e7. and defines a set of named attributes for
child nodes.

 -- Class: compiler.ast.Node
     The *note Node: 25e7. instances are created automatically by the
     parser generator.  The recommended interface for specific *note
     Node: 25e7. instances is to use the public attributes to access
     child nodes.  A public attribute may be bound to a single node or
     to a sequence of nodes, depending on the *note Node: 25e7. type.
     For example, the `bases' attribute of the `Class' node, is bound
     to a list of base class nodes, and the `doc' attribute is bound to
     a single node.

     Each *note Node: 25e7. instance has a `lineno' attribute which may
     be `None'.  XXX Not sure what the rules are for which nodes will
     have a useful lineno.

     All *note Node: 25e7. objects offer the following methods:

      -- Method: getChildren ()
          Returns a flattened list of the child nodes and objects in
          the order they occur.  Specifically, the order of the nodes
          is the order in which they appear in the Python grammar.  Not
          all of the children are *note Node: 25e7.  instances.  The
          names of functions and classes, for example, are plain
          strings.

      -- Method: getChildNodes ()
          Returns a flattened list of the child nodes in the order they
          occur.  This method is like *note getChildren(): 25e8, except
          that it only returns those children that are *note Node:
          25e7. instances.

  Two examples illustrate the general structure of *note Node: 25e7.
classes.  The *note while: 515. statement is defined by the following
grammar production:

    while_stmt:     "while" expression ":" suite
                   ["else" ":" suite]

The `While' node has three attributes: *note test: 176, `body', and
`else_'.  (If the natural name for an attribute is also a Python
reserved word, it can't be used as an attribute name.  An underscore is
appended to the word to make it a legal identifier, hence `else_'
instead of *note else: 51c.)

  The *note if: 41b. statement is more complicated because it can
include several tests.

    if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]

The `If' node only defines two attributes: `tests' and `else_'.  The
`tests' attribute is a sequence of test expression, consequent body
pairs.  There is one pair for each *note if: 41b./*note elif: 51b.
clause.  The first element of the pair is the test expression.  The
second elements is a `Stmt' node that contains the code to execute if
the test is true.

  The `getChildren()' method of `If' returns a flat list of child
nodes.  If there are three *note if: 41b./*note elif: 51b. clauses and
no *note else: 51c. clause, then `getChildren()' will return a list of
six elements: the first test expression, the first `Stmt', the second
text expression, etc.

  The following table lists each of the *note Node: 25e7. subclasses
defined in *note compiler.ast: 6b. and each of the public attributes
available on their instances.  The values of most of the attributes are
themselves *note Node: 25e7.  instances or sequences of instances.
When the value is something other than an instance, the type is noted
in the comment.  The attributes are listed in the order in which they
are returned by `getChildren()' and `getChildNodes()'.

Node type                   Attribute                Value
------------------------------------------------------------------------------------------- 
`Add'                       `left'                   left operand
                            `right'                  right operand
`And'                       `nodes'                  list of operands
`AssAttr'                                            _attribute as target of assignment_
                            `expr'                   expression on the left-hand side of
                                                     the dot
                            `attrname'               the attribute name, a string
                            `flags'                  XXX
`AssList'                   `nodes'                  list of list elements being assigned
                                                     to
`AssName'                   `name'                   name being assigned to
                            `flags'                  XXX
`AssTuple'                  `nodes'                  list of tuple elements being
                                                     assigned to
`Assert'                    *note test: 176.         the expression to be tested
                            `fail'                   the value of the *note
                                                     AssertionError: 7dd.
`Assign'                    `nodes'                  a list of assignment targets, one
                                                     per equal sign
                            `expr'                   the value being assigned
`AugAssign'                 `node'                   
                            `op'                     
                            `expr'                   
`Backquote'                 `expr'                   
`Bitand'                    `nodes'                  
`Bitor'                     `nodes'                  
`Bitxor'                    `nodes'                  
`Break'                                              
`CallFunc'                  `node'                   expression for the callee
                            `args'                   a list of arguments
                            `star_args'              the extended *-arg value
                            `dstar_args'             the extended **-arg value
`Class'                     `name'                   the name of the class, a string
                            `bases'                  a list of base classes
                            `doc'                    doc string, a string or `None'
                            *note code: 62.          the body of the class statement
`Compare'                   `expr'                   
                            `ops'                    
`Const'                     `value'                  
`Continue'                                           
`Decorators'                `nodes'                  List of function decorator
                                                     expressions
`Dict'                      `items'                  
`Discard'                   `expr'                   
`Div'                       `left'                   
                            `right'                  
*note Ellipsis: 85f.                                 
`Expression'                `node'                   
`Exec'                      `expr'                   
                            *note locals: 32b.       
                            *note globals: 806.      
`FloorDiv'                  `left'                   
                            `right'                  
`For'                       `assign'                 
                            *note list: 3ab.         
                            `body'                   
                            `else_'                  
`From'                      `modname'                
                            `names'                  
`Function'                  `decorators'             `Decorators' or `None'
                            `name'                   name used in def, a string
                            `argnames'               list of argument names, as strings
                            `defaults'               list of default values
                            `flags'                  xxx
                            `doc'                    doc string, a string or `None'
                            *note code: 62.          the body of the function
`GenExpr'                   *note code: 62.          
`GenExprFor'                `assign'                 
                            *note iter: 2a8.         
                            `ifs'                    
`GenExprIf'                 *note test: 176.         
`GenExprInner'              `expr'                   
                            `quals'                  
`Getattr'                   `expr'                   
                            `attrname'               
`Global'                    `names'                  
`If'                        `tests'                  
                            `else_'                  
`Import'                    `names'                  
`Invert'                    `expr'                   
`Keyword'                   `name'                   
                            `expr'                   
`Lambda'                    `argnames'               
                            `defaults'               
                            `flags'                  
                            *note code: 62.          
`LeftShift'                 `left'                   
                            `right'                  
`List'                      `nodes'                  
`ListComp'                  `expr'                   
                            `quals'                  
`ListCompFor'               `assign'                 
                            *note list: 3ab.         
                            `ifs'                    
`ListCompIf'                *note test: 176.         
`Mod'                       `left'                   
                            `right'                  
`Module'                    `doc'                    doc string, a string or `None'
                            `node'                   body of the module, a `Stmt'
`Mul'                       `left'                   
                            `right'                  
`Name'                      `name'                   
`Not'                       `expr'                   
`Or'                        `nodes'                  
`Pass'                                               
`Power'                     `left'                   
                            `right'                  
`Print'                     `nodes'                  
                            `dest'                   
`Printnl'                   `nodes'                  
                            `dest'                   
`Raise'                     `expr1'                  
                            `expr2'                  
                            `expr3'                  
`Return'                    `value'                  
`RightShift'                `left'                   
                            `right'                  
`Slice'                     `expr'                   
                            `flags'                  
                            `lower'                  
                            `upper'                  
`Sliceobj'                  `nodes'                  list of statements
`Stmt'                      `nodes'                  
`Sub'                       `left'                   
                            `right'                  
`Subscript'                 `expr'                   
                            `flags'                  
                            `subs'                   
`TryExcept'                 `body'                   
                            `handlers'               
                            `else_'                  
`TryFinally'                `body'                   
                            `final'                  
`Tuple'                     `nodes'                  
`UnaryAdd'                  `expr'                   
`UnarySub'                  `expr'                   
`While'                     *note test: 176.         
                            `body'                   
                            `else_'                  
`With'                      `expr'                   
                            *note vars: 57c.         
                            `body'                   
`Yield'                     `value'                  


File: python.info,  Node: Assignment nodes,  Next: Examples<20>,  Prev: AST Nodes,  Up: Python Abstract Syntax

5.32.3.2 Assignment nodes
.........................

There is a collection of nodes used to represent assignments.  Each
assignment statement in the source code becomes a single `Assign' node
in the AST.  The `nodes' attribute is a list that contains a node for
each assignment target.  This is necessary because assignment can be
chained, e.g. `a = b = 2'. Each *note Node: 25e7. in the list will be
one of the following classes: `AssAttr', `AssList', `AssName', or
`AssTuple'.

  Each target assignment node will describe the kind of object being
assigned to: `AssName' for a simple name, e.g. `a = 1'. `AssAttr' for an
attribute assigned, e.g. `a.x = 1'. `AssList' and `AssTuple' for list
and tuple expansion respectively, e.g. `a, b, c = a_tuple'.

  The target assignment nodes also have a `flags' attribute that
indicates whether the node is being used for assignment or in a delete
statement.  The `AssName' is also used to represent a delete statement,
e.g. `del x'.

  When an expression contains several attribute references, an
assignment or delete statement will contain only one `AssAttr' node -
for the final attribute reference.  The other attribute references will
be represented as `Getattr' nodes in the `expr' attribute of the
`AssAttr' instance.


File: python.info,  Node: Examples<20>,  Prev: Assignment nodes,  Up: Python Abstract Syntax

5.32.3.3 Examples
.................

This section shows several simple examples of ASTs for Python source
code.  The examples demonstrate how to use the `parse()' function, what
the repr of an AST looks like, and how to access attributes of an AST
node.

  The first module defines a single function.  Assume it is stored in
`/tmp/doublelib.py'.

    """This is an example module.

    This is the docstring.
    """

    def double(x):
        "Return twice the argument"
        return x * 2

In the interactive interpreter session below, I have reformatted the
long AST reprs for readability.  The AST reprs use unqualified class
names.  If you want to create an instance from a repr, you must import
the class names from the *note compiler.ast: 6b. module.

    >>> import compiler
    >>> mod = compiler.parseFile("/tmp/doublelib.py")
    >>> mod
    Module('This is an example module.\n\nThis is the docstring.\n',
           Stmt([Function(None, 'double', ['x'], [], 0,
                          'Return twice the argument',
                          Stmt([Return(Mul((Name('x'), Const(2))))]))]))
    >>> from compiler.ast import *
    >>> Module('This is an example module.\n\nThis is the docstring.\n',
    ...    Stmt([Function(None, 'double', ['x'], [], 0,
    ...                   'Return twice the argument',
    ...                   Stmt([Return(Mul((Name('x'), Const(2))))]))]))
    Module('This is an example module.\n\nThis is the docstring.\n',
           Stmt([Function(None, 'double', ['x'], [], 0,
                          'Return twice the argument',
                          Stmt([Return(Mul((Name('x'), Const(2))))]))]))
    >>> mod.doc
    'This is an example module.\n\nThis is the docstring.\n'
    >>> for node in mod.node.nodes:
    ...     print node
    ...
    Function(None, 'double', ['x'], [], 0, 'Return twice the argument',
             Stmt([Return(Mul((Name('x'), Const(2))))]))
    >>> func = mod.node.nodes[0]
    >>> func.code
    Stmt([Return(Mul((Name('x'), Const(2))))])



File: python.info,  Node: Using Visitors to Walk ASTs,  Next: Bytecode Generation,  Prev: Python Abstract Syntax,  Up: Python compiler package

5.32.4 Using Visitors to Walk ASTs
----------------------------------

The visitor pattern is ...  The *note compiler: 6a. package uses a
variant on the visitor pattern that takes advantage of Python's
introspection features to eliminate the need for much of the visitor's
infrastructure.

  The classes being visited do not need to be programmed to accept
visitors.  The visitor need only define visit methods for classes it is
specifically interested in; a default visit method can handle the rest.

  XXX The magic `visit()' method for visitors.

 -- Function: compiler.visitor.walk (tree, visitor[, verbose])

 -- Class: compiler.visitor.ASTVisitor
     The *note ASTVisitor: 25ee. is responsible for walking over the
     tree in the correct order.  A walk begins with a call to *note
     preorder(): 25ef.  For each node, it checks the _visitor_ argument
     to *note preorder(): 25ef. for a method named 'visitNodeType,'
     where NodeType is the name of the node's class, e.g. for a `While'
     node a `visitWhile()' would be called.  If the method exists, it
     is called with the node as its first argument.

     The visitor method for a particular node type can control how
     child nodes are visited during the walk.  The *note ASTVisitor:
     25ee. modifies the visitor argument by adding a visit method to
     the visitor; this method can be used to visit a particular child
     node.  If no visitor is found for a particular node type, the
     *note default(): 25f0. method is called.

     *note ASTVisitor: 25ee. objects have the following methods:

     XXX describe extra arguments

      -- Method: default (node[, ...])

      -- Method: dispatch (node[, ...])

      -- Method: preorder (tree, visitor)


File: python.info,  Node: Bytecode Generation,  Prev: Using Visitors to Walk ASTs,  Up: Python compiler package

5.32.5 Bytecode Generation
--------------------------

The code generator is a visitor that emits bytecodes.  Each visit
method can call the `emit()' method to emit a new bytecode.  The basic
code generator is specialized for modules, classes, and functions.  An
assembler converts that emitted instructions to the low-level bytecode
format.  It handles things like generation of constant lists of code
objects and calculation of jump offsets.


File: python.info,  Node: Miscellaneous Services,  Next: MS Windows Specific Services,  Prev: Python compiler package,  Up: The Python Standard Library

5.33 Miscellaneous Services
===========================

The modules described in this chapter provide miscellaneous services
that are available in all Python versions.  Here's an overview:

* Menu:

* formatter: formatter --- Generic output formatting. Generic output formatting

formatter --- Generic output formatting

* The Formatter Interface::
* Formatter Implementations::
* The Writer Interface::
* Writer Implementations::


File: python.info,  Node: formatter --- Generic output formatting,  Up: Miscellaneous Services

5.33.1 `formatter' -- Generic output formatting
-----------------------------------------------

This module supports two interface definitions, each with multiple
implementations.  The _formatter_ interface is used by the *note
HTMLParser: ee.  class of the *note htmllib: ed. module, and the
_writer_ interface is required by the formatter interface.

  Formatter objects transform an abstract flow of formatting events
into specific output events on writer objects.  Formatters manage
several stack structures to allow various properties of a writer object
to be changed and restored; writers need not be able to handle relative
changes nor any sort of "change back" operation.  Specific writer
properties which may be controlled via formatter objects are horizontal
alignment, font, and left margin indentations.  A mechanism is provided
which supports providing arbitrary, non-exclusive style settings to a
writer as well.  Additional interfaces facilitate formatting events
which are not reversible, such as paragraph separation.

  Writer objects encapsulate device interfaces.  Abstract devices, such
as file formats, are supported as well as physical devices.  The
provided implementations all work with abstract devices.  The interface
makes available mechanisms for setting the properties which formatter
objects manage and inserting data into the output.

* Menu:

* The Formatter Interface::
* Formatter Implementations::
* The Writer Interface::
* Writer Implementations::


File: python.info,  Node: The Formatter Interface,  Next: Formatter Implementations,  Up: formatter --- Generic output formatting

5.33.1.1 The Formatter Interface
................................

Interfaces to create formatters are dependent on the specific formatter
class being instantiated.  The interfaces described below are the
required interfaces which all formatters must support once initialized.

  One data element is defined at the module level:

 -- Data: formatter.AS_IS
     Value which can be used in the font specification passed to the
     `push_font()' method described below, or as the new value to any
     other `push_property()' method.  Pushing the `AS_IS' value allows
     the corresponding `pop_property()' method to be called without
     having to track whether the property was changed.

  The following attributes are defined for formatter instance objects:

 -- Attribute: formatter.writer
     The writer instance with which the formatter interacts.

 -- Method: formatter.end_paragraph (blanklines)
     Close any open paragraphs and insert at least _blanklines_ before
     the next paragraph.

 -- Method: formatter.add_line_break ()
     Add a hard line break if one does not already exist.  This does
     not break the logical paragraph.

 -- Method: formatter.add_hor_rule (*args, **kw)
     Insert a horizontal rule in the output.  A hard break is inserted
     if there is data in the current paragraph, but the logical
     paragraph is not broken.  The arguments and keywords are passed on
     to the writer's `send_line_break()' method.

 -- Method: formatter.add_flowing_data (data)
     Provide data which should be formatted with collapsed whitespace.
     Whitespace from preceding and successive calls to *note
     add_flowing_data(): 25ff. is considered as well when the
     whitespace collapse is performed.  The data which is passed to
     this method is expected to be word-wrapped by the output device.
     Note that any word-wrapping still must be performed by the writer
     object due to the need to rely on device and font information.

 -- Method: formatter.add_literal_data (data)
     Provide data which should be passed to the writer unchanged.
     Whitespace, including newline and tab characters, are considered
     legal in the value of _data_.

 -- Method: formatter.add_label_data (format, counter)
     Insert a label which should be placed to the left of the current
     left margin.  This should be used for constructing bulleted or
     numbered lists.  If the _format_ value is a string, it is
     interpreted as a format specification for _counter_, which should
     be an integer. The result of this formatting becomes the value of
     the label; if _format_ is not a string it is used as the label
     value directly. The label value is passed as the only argument to
     the writer's `send_label_data()' method.  Interpretation of
     non-string label values is dependent on the associated writer.

     Format specifications are strings which, in combination with a
     counter value, are used to compute label values.  Each character
     in the format string is copied to the label value, with some
     characters recognized to indicate a transform on the counter
     value.  Specifically, the character `'1'' represents the counter
     value formatter as an Arabic number, the characters `'A'' and `'a''
     represent alphabetic representations of the counter value in upper
     and lower case, respectively, and `'I'' and `'i'' represent the
     counter value in Roman numerals, in upper and lower case.  Note
     that the alphabetic and roman transforms require that the counter
     value be greater than zero.

 -- Method: formatter.flush_softspace ()
     Send any pending whitespace buffered from a previous call to *note
     add_flowing_data(): 25ff. to the associated writer object.  This
     should be called before any direct manipulation of the writer
     object.

 -- Method: formatter.push_alignment (align)
     Push a new alignment setting onto the alignment stack.  This may be
     *note AS_IS: 25fa. if no change is desired.  If the alignment
     value is changed from the previous setting, the writer's
     `new_alignment()' method is called with the _align_ value.

 -- Method: formatter.pop_alignment ()
     Restore the previous alignment.

 -- Method: formatter.push_font ((size, italic, bold, teletype))
     Change some or all font properties of the writer object.
     Properties which are not set to *note AS_IS: 25fa. are set to the
     values passed in while others are maintained at their current
     settings.  The writer's `new_font()' method is called with the
     fully resolved font specification.

 -- Method: formatter.pop_font ()
     Restore the previous font.

 -- Method: formatter.push_margin (margin)
     Increase the number of left margin indentations by one,
     associating the logical tag _margin_ with the new indentation.
     The initial margin level is `0'.  Changed values of the logical
     tag must be true values; false values other than *note AS_IS:
     25fa. are not sufficient to change the margin.

 -- Method: formatter.pop_margin ()
     Restore the previous margin.

 -- Method: formatter.push_style (*styles)
     Push any number of arbitrary style specifications.  All styles are
     pushed onto the styles stack in order.  A tuple representing the
     entire stack, including *note AS_IS: 25fa. values, is passed to
     the writer's `new_styles()' method.

 -- Method: formatter.pop_style ([n=1])
     Pop the last _n_ style specifications passed to *note
     push_style(): 2609.  A tuple representing the revised stack,
     including *note AS_IS: 25fa. values, is passed to the writer's
     `new_styles()' method.

 -- Method: formatter.set_spacing (spacing)
     Set the spacing style for the writer.

 -- Method: formatter.assert_line_data ([flag=1])
     Inform the formatter that data has been added to the current
     paragraph out-of-band.  This should be used when the writer has
     been manipulated directly.  The optional _flag_ argument can be
     set to false if the writer manipulations produced a hard line
     break at the end of the output.


File: python.info,  Node: Formatter Implementations,  Next: The Writer Interface,  Prev: The Formatter Interface,  Up: formatter --- Generic output formatting

5.33.1.2 Formatter Implementations
..................................

Two implementations of formatter objects are provided by this module.
Most applications may use one of these classes without modification or
subclassing.

 -- Class: formatter.NullFormatter ([writer])
     A formatter which does nothing.  If _writer_ is omitted, a *note
     NullWriter: 2610.  instance is created.  No methods of the writer
     are called by *note NullFormatter: 260f. instances.
     Implementations should inherit from this class if implementing a
     writer interface but don't need to inherit any implementation.

 -- Class: formatter.AbstractFormatter (writer)
     The standard formatter.  This implementation has demonstrated wide
     applicability to many writers, and may be used directly in most
     circumstances.  It has been used to implement a full-featured
     World Wide Web browser.


File: python.info,  Node: The Writer Interface,  Next: Writer Implementations,  Prev: Formatter Implementations,  Up: formatter --- Generic output formatting

5.33.1.3 The Writer Interface
.............................

Interfaces to create writers are dependent on the specific writer class
being instantiated.  The interfaces described below are the required
interfaces which all writers must support once initialized. Note that
while most applications can use the *note AbstractFormatter: 2611.
class as a formatter, the writer must typically be provided by the
application.

 -- Method: writer.flush ()
     Flush any buffered output or device control events.

 -- Method: writer.new_alignment (align)
     Set the alignment style.  The _align_ value can be any object, but
     by convention is a string or `None', where `None' indicates that
     the writer's "preferred" alignment should be used. Conventional
     _align_ values are `'left'', `'center'', `'right'', and
     `'justify''.

 -- Method: writer.new_font (font)
     Set the font style.  The value of _font_ will be `None',
     indicating that the device's default font should be used, or a
     tuple of the form `(size, italic, bold, teletype)'.  Size will be
     a string indicating the size of font that should be used; specific
     strings and their interpretation must be defined by the
     application.  The _italic_, _bold_, and _teletype_ values are
     Boolean values specifying which of those font attributes should be
     used.

 -- Method: writer.new_margin (margin, level)
     Set the margin level to the integer _level_ and the logical tag to
     _margin_.  Interpretation of the logical tag is at the writer's
     discretion; the only restriction on the value of the logical tag
     is that it not be a false value for non-zero values of _level_.

 -- Method: writer.new_spacing (spacing)
     Set the spacing style to _spacing_.

 -- Method: writer.new_styles (styles)
     Set additional styles.  The _styles_ value is a tuple of arbitrary
     values; the value *note AS_IS: 25fa. should be ignored.  The
     _styles_ tuple may be interpreted either as a set or as a stack
     depending on the requirements of the application and writer
     implementation.

 -- Method: writer.send_line_break ()
     Break the current line.

 -- Method: writer.send_paragraph (blankline)
     Produce a paragraph separation of at least _blankline_ blank
     lines, or the equivalent.  The _blankline_ value will be an
     integer.  Note that the implementation will receive a call to
     *note send_line_break(): 261a. before this call if a line break is
     needed;  this method should not include ending the last line of
     the paragraph. It is only responsible for vertical spacing between
     paragraphs.

 -- Method: writer.send_hor_rule (*args, **kw)
     Display a horizontal rule on the output device.  The arguments to
     this method are entirely application- and writer-specific, and
     should be interpreted with care.  The method implementation may
     assume that a line break has already been issued via *note
     send_line_break(): 261a.

 -- Method: writer.send_flowing_data (data)
     Output character data which may be word-wrapped and re-flowed as
     needed.  Within any sequence of calls to this method, the writer
     may assume that spans of multiple whitespace characters have been
     collapsed to single space characters.

 -- Method: writer.send_literal_data (data)
     Output character data which has already been formatted for
     display.  Generally, this should be interpreted to mean that line
     breaks indicated by newline characters should be preserved and no
     new line breaks should be introduced.  The data may contain
     embedded newline and tab characters, unlike data provided to the
     `send_formatted_data()' interface.

 -- Method: writer.send_label_data (data)
     Set _data_ to the left of the current left margin, if possible.
     The value of _data_ is not restricted; treatment of non-string
     values is entirely application- and writer-dependent.  This method
     will only be called at the beginning of a line.


File: python.info,  Node: Writer Implementations,  Prev: The Writer Interface,  Up: formatter --- Generic output formatting

5.33.1.4 Writer Implementations
...............................

Three implementations of the writer object interface are provided as
examples by this module.  Most applications will need to derive new
writer classes from the *note NullWriter: 2610. class.

 -- Class: formatter.NullWriter
     A writer which only provides the interface definition; no actions
     are taken on any methods.  This should be the base class for all
     writers which do not need to inherit any implementation methods.

 -- Class: formatter.AbstractWriter
     A writer which can be used in debugging formatters, but not much
     else.  Each method simply announces itself by printing its name
     and arguments on standard output.

 -- Class: formatter.DumbWriter ([file[, maxcol=72]])
     Simple writer class which writes output on the file object passed
     in as _file_ or, if _file_ is omitted, on standard output.  The
     output is simply word-wrapped to the number of columns specified
     by _maxcol_.  This class is suitable for reflowing a sequence of
     paragraphs.


File: python.info,  Node: MS Windows Specific Services,  Next: Unix Specific Services,  Prev: Miscellaneous Services,  Up: The Python Standard Library

5.34 MS Windows Specific Services
=================================

This chapter describes modules that are only available on MS Windows
platforms.

* Menu:

* msilib: msilib --- Read and write Microsoft Installer files. Read and write Microsoft Installer files
* msvcrt: msvcrt -- Useful routines from the MS VC++ runtime. Useful routines from the MS VC++ runtime
* _winreg: _winreg -- Windows registry access. Windows registry access
* winsound: winsound --- Sound-playing interface for Windows. Sound-playing interface for Windows

msilib --- Read and write Microsoft Installer files

* Database Objects: Database Objects<2>.
* View Objects::
* Summary Information Objects::
* Record Objects::
* Errors::
* CAB Objects::
* Directory Objects::
* Features::
* GUI classes::
* Precomputed tables::

msvcrt -- Useful routines from the MS VC++ runtime

* File Operations::
* Console I/O::
* Other Functions::

_winreg -- Windows registry access

* Constants: Constants<5>.
* Registry Handle Objects::

Constants

* HKEY_* Constants::
* Access Rights::
* Value Types::

Access Rights

* 64-bit Specific::


File: python.info,  Node: msilib --- Read and write Microsoft Installer files,  Next: msvcrt -- Useful routines from the MS VC++ runtime,  Up: MS Windows Specific Services

5.34.1 `msilib' -- Read and write Microsoft Installer files
-----------------------------------------------------------

New in version 2.5.

  The *note msilib: 117. supports the creation of Microsoft Installer
(`.msi') files.  Because these files often contain an embedded
"cabinet" file (`.cab'), it also exposes an API to create CAB files.
Support for reading `.cab' files is currently not implemented; read
support for the `.msi' database is possible.

  This package aims to provide complete access to all tables in an
`.msi' file, therefore, it is a fairly low-level API. Two primary
applications of this package are the *note distutils: 86. command
`bdist_msi', and the creation of Python installer package itself
(although that currently uses a different version of `msilib').

  The package contents can be roughly split into four parts: low-level
CAB routines, low-level MSI routines, higher-level MSI routines, and
standard table structures.

 -- Function: msilib.FCICreate (cabname, files)
     Create a new CAB file named _cabname_. _files_ must be a list of
     tuples, each containing the name of the file on disk, and the name
     of the file inside the CAB file.

     The files are added to the CAB file in the order they appear in
     the list. All files are added into a single CAB file, using the
     MSZIP compression algorithm.

     Callbacks to Python for the various steps of MSI creation are
     currently not exposed.

 -- Function: msilib.UuidCreate ()
     Return the string representation of a new unique identifier. This
     wraps the Windows API functions `UuidCreate()' and
     `UuidToString()'.

 -- Function: msilib.OpenDatabase (path, persist)
     Return a new database object by calling MsiOpenDatabase.   _path_
     is the file name of the MSI file; _persist_ can be one of the
     constants `MSIDBOPEN_CREATEDIRECT', `MSIDBOPEN_CREATE',
     `MSIDBOPEN_DIRECT', `MSIDBOPEN_READONLY', or `MSIDBOPEN_TRANSACT',
     and may include the flag `MSIDBOPEN_PATCHFILE'. See the Microsoft
     documentation for the meaning of these flags; depending on the
     flags, an existing database is opened, or a new one created.

 -- Function: msilib.CreateRecord (count)
     Return a new record object by calling `MSICreateRecord()'. _count_
     is the number of fields of the record.

 -- Function: msilib.init_database (name, schema, ProductName,
          ProductCode, ProductVersion, Manufacturer)
     Create and return a new database _name_, initialize it with
     _schema_, and set the properties _ProductName_, _ProductCode_,
     _ProductVersion_, and _Manufacturer_.

     _schema_ must be a module object containing `tables' and
     `_Validation_records' attributes; typically, *note msilib.schema:
     262d. should be used.

     The database will contain just the schema and the validation
     records when this function returns.

 -- Function: msilib.add_data (database, table, records)
     Add all _records_ to the table named _table_ in _database_.

     The _table_ argument must be one of the predefined tables in the
     MSI schema, e.g. `'Feature'', `'File'', `'Component'', `'Dialog'',
     `'Control'', etc.

     _records_ should be a list of tuples, each one containing all
     fields of a record according to the schema of the table.  For
     optional fields, `None' can be passed.

     Field values can be int or long numbers, strings, or instances of
     the Binary class.

 -- Class: msilib.Binary (filename)
     Represents entries in the Binary table; inserting such an object
     using *note add_data(): 262e. reads the file named _filename_ into
     the table.

 -- Function: msilib.add_tables (database, module)
     Add all table content from _module_ to _database_. _module_ must
     contain an attribute _tables_ listing all tables for which content
     should be added, and one attribute per table that has the actual
     content.

     This is typically used to install the sequence tables.

 -- Function: msilib.add_stream (database, name, path)
     Add the file _path_ into the `_Stream' table of _database_, with
     the stream name _name_.

 -- Function: msilib.gen_uuid ()
     Return a new UUID, in the format that MSI typically requires (i.e.
     in curly braces, and with all hexdigits in upper-case).

See also
........

FCICreateFile(1) UuidCreate(2) UuidToString(3)

* Menu:

* Database Objects: Database Objects<2>.
* View Objects::
* Summary Information Objects::
* Record Objects::
* Errors::
* CAB Objects::
* Directory Objects::
* Features::
* GUI classes::
* Precomputed tables::

  ---------- Footnotes ----------

  (1)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/devnotes/winprog/fcicreate.asp

  (2)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/rpc/rpc/uuidcreate.asp

  (3)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/rpc/rpc/uuidtostring.asp


File: python.info,  Node: Database Objects<2>,  Next: View Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.1 Database Objects
.........................

 -- Method: Database.OpenView (sql)
     Return a view object, by calling `MSIDatabaseOpenView()'. _sql_ is
     the SQL statement to execute.

 -- Method: Database.Commit ()
     Commit the changes pending in the current transaction, by calling
     `MSIDatabaseCommit()'.

 -- Method: Database.GetSummaryInformation (count)
     Return a new summary information object, by calling
     `MsiGetSummaryInformation()'.  _count_ is the maximum number of
     updated values.

See also
........

MSIDatabaseOpenView(1) MSIDatabaseCommit(2) MSIGetSummaryInformation(3)

  ---------- Footnotes ----------

  (1)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msidatabaseopenview.asp

  (2)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msidatabasecommit.asp

  (3)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msigetsummaryinformation.asp


File: python.info,  Node: View Objects,  Next: Summary Information Objects,  Prev: Database Objects<2>,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.2 View Objects
.....................

 -- Method: View.Execute (params)
     Execute the SQL query of the view, through `MSIViewExecute()'. If
     _params_ is not `None', it is a record describing actual values of
     the parameter tokens in the query.

 -- Method: View.GetColumnInfo (kind)
     Return a record describing the columns of the view, through calling
     `MsiViewGetColumnInfo()'. _kind_ can be either `MSICOLINFO_NAMES'
     or `MSICOLINFO_TYPES'.

 -- Method: View.Fetch ()
     Return a result record of the query, through calling
     `MsiViewFetch()'.

 -- Method: View.Modify (kind, data)
     Modify the view, by calling `MsiViewModify()'. _kind_ can be one of
     `MSIMODIFY_SEEK', `MSIMODIFY_REFRESH', `MSIMODIFY_INSERT',
     `MSIMODIFY_UPDATE', `MSIMODIFY_ASSIGN', `MSIMODIFY_REPLACE',
     `MSIMODIFY_MERGE', `MSIMODIFY_DELETE',
     `MSIMODIFY_INSERT_TEMPORARY', `MSIMODIFY_VALIDATE',
     `MSIMODIFY_VALIDATE_NEW', `MSIMODIFY_VALIDATE_FIELD', or
     `MSIMODIFY_VALIDATE_DELETE'.

     _data_ must be a record describing the new data.

 -- Method: View.Close ()
     Close the view, through `MsiViewClose()'.

See also
........

MsiViewExecute(1) MSIViewGetColumnInfo(2) MsiViewFetch(3)
MsiViewModify(4) MsiViewClose(5)

  ---------- Footnotes ----------

  (1)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewexecute.asp

  (2)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewgetcolumninfo.asp

  (3)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewfetch.asp

  (4)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewmodify.asp

  (5)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewclose.asp


File: python.info,  Node: Summary Information Objects,  Next: Record Objects,  Prev: View Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.3 Summary Information Objects
....................................

 -- Method: SummaryInformation.GetProperty (field)
     Return a property of the summary, through
     `MsiSummaryInfoGetProperty()'.  _field_ is the name of the
     property, and can be one of the constants `PID_CODEPAGE',
     `PID_TITLE', `PID_SUBJECT', `PID_AUTHOR', `PID_KEYWORDS',
     `PID_COMMENTS', `PID_TEMPLATE', `PID_LASTAUTHOR', `PID_REVNUMBER',
     `PID_LASTPRINTED', `PID_CREATE_DTM', `PID_LASTSAVE_DTM',
     `PID_PAGECOUNT', `PID_WORDCOUNT', `PID_CHARCOUNT', `PID_APPNAME',
     or `PID_SECURITY'.

 -- Method: SummaryInformation.GetPropertyCount ()
     Return the number of summary properties, through
     `MsiSummaryInfoGetPropertyCount()'.

 -- Method: SummaryInformation.SetProperty (field, value)
     Set a property through `MsiSummaryInfoSetProperty()'. _field_ can
     have the same values as in *note GetProperty(): 2641, _value_ is
     the new value of the property.  Possible value types are integer
     and string.

 -- Method: SummaryInformation.Persist ()
     Write the modified properties to the summary information stream,
     using `MsiSummaryInfoPersist()'.

See also
........

MsiSummaryInfoGetProperty(1) MsiSummaryInfoGetPropertyCount(2)
MsiSummaryInfoSetProperty(3) MsiSummaryInfoPersist(4)

  ---------- Footnotes ----------

  (1)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfogetproperty.asp

  (2)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfogetpropertycount.asp

  (3)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfosetproperty.asp

  (4)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfopersist.asp


File: python.info,  Node: Record Objects,  Next: Errors,  Prev: Summary Information Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.4 Record Objects
.......................

 -- Method: Record.GetFieldCount ()
     Return the number of fields of the record, through
     `MsiRecordGetFieldCount()'.

 -- Method: Record.GetInteger (field)
     Return the value of _field_ as an integer where possible.  _field_
     must be an integer.

 -- Method: Record.GetString (field)
     Return the value of _field_ as a string where possible.  _field_
     must be an integer.

 -- Method: Record.SetString (field, value)
     Set _field_ to _value_ through `MsiRecordSetString()'. _field_
     must be an integer; _value_ a string.

 -- Method: Record.SetStream (field, value)
     Set _field_ to the contents of the file named _value_, through
     `MsiRecordSetStream()'. _field_ must be an integer; _value_ a
     string.

 -- Method: Record.SetInteger (field, value)
     Set _field_ to _value_ through `MsiRecordSetInteger()'. Both
     _field_ and _value_ must be an integer.

 -- Method: Record.ClearData ()
     Set all fields of the record to 0, through `MsiRecordClearData()'.

See also
........

MsiRecordGetFieldCount(1) MsiRecordSetString(2) MsiRecordSetStream(3)
MsiRecordSetInteger(4) MsiRecordClear(5)

  ---------- Footnotes ----------

  (1)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordgetfieldcount.asp

  (2)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordsetstring.asp

  (3)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordsetstream.asp

  (4)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordsetinteger.asp

  (5)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordclear.asp


File: python.info,  Node: Errors,  Next: CAB Objects,  Prev: Record Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.5 Errors
...............

All wrappers around MSI functions raise `MsiError'; the string inside
the exception will contain more detail.


File: python.info,  Node: CAB Objects,  Next: Directory Objects,  Prev: Errors,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.6 CAB Objects
....................

 -- Class: msilib.CAB (name)
     The class *note CAB: 2652. represents a CAB file. During MSI
     construction, files will be added simultaneously to the `Files'
     table, and to a CAB file. Then, when all files have been added,
     the CAB file can be written, then added to the MSI file.

     _name_ is the name of the CAB file in the MSI file.

      -- Method: append (full, file, logical)
          Add the file with the pathname _full_ to the CAB file, under
          the name _logical_.  If there is already a file named
          _logical_, a new file name is created.

          Return the index of the file in the CAB file, and the new
          name of the file inside the CAB file.

      -- Method: commit (database)
          Generate a CAB file, add it as a stream to the MSI file, put
          it into the `Media' table, and remove the generated file from
          the disk.


File: python.info,  Node: Directory Objects,  Next: Features,  Prev: CAB Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.7 Directory Objects
..........................

 -- Class: msilib.Directory (database, cab, basedir, physical, logical,
          default[, componentflags])
     Create a new directory in the Directory table. There is a current
     component at each point in time for the directory, which is either
     explicitly created through *note start_component(): 2658, or
     implicitly when files are added for the first time.  Files are
     added into the current component, and into the cab file.  To
     create a directory, a base directory object needs to be specified
     (can be `None'), the path to the physical directory, and a logical
     directory name.  _default_ specifies the DefaultDir slot in the
     directory table. _componentflags_ specifies the default flags that
     new components get.

      -- Method: start_component ([component[, feature[, flags[,
               keyfile[, uuid]]]]])
          Add an entry to the Component table, and make this component
          the current component for this directory. If no component
          name is given, the directory name is used. If no _feature_ is
          given, the current feature is used. If no _flags_ are given,
          the directory's default flags are used. If no _keyfile_ is
          given, the KeyPath is left null in the Component table.

      -- Method: add_file (file[, src[, version[, language]]])
          Add a file to the current component of the directory,
          starting a new one if there is no current component. By
          default, the file name in the source and the file table will
          be identical. If the _src_ file is specified, it is
          interpreted relative to the current directory. Optionally, a
          _version_ and a _language_ can be specified for the entry in
          the File table.

      -- Method: glob (pattern[, exclude])
          Add a list of files to the current component as specified in
          the glob pattern.  Individual files can be excluded in the
          _exclude_ list.

      -- Method: remove_pyc ()
          Remove `.pyc'/`.pyo' files on uninstall.

See also
........

Directory Table(1) File Table(2) Component Table(3) FeatureComponents
Table(4)

  ---------- Footnotes ----------

  (1)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/directory_table.asp

  (2)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/file_table.asp

  (3)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/component_table.asp

  (4)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/featurecomponents_table.asp


File: python.info,  Node: Features,  Next: GUI classes,  Prev: Directory Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.8 Features
.................

 -- Class: msilib.Feature (database, id, title, desc, display[,
          level=1[, parent[, directory[, attributes=0]]]])
     Add a new record to the `Feature' table, using the values _id_,
     _parent.id_, _title_, _desc_, _display_, _level_, _directory_, and
     _attributes_. The resulting feature object can be passed to the
     `start_component()' method of *note Directory: 2657.

      -- Method: set_current ()
          Make this feature the current feature of *note msilib: 117.
          New components are automatically added to the default
          feature, unless a feature is explicitly specified.

See also
........

Feature Table(1)

  ---------- Footnotes ----------

  (1)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/feature_table.asp


File: python.info,  Node: GUI classes,  Next: Precomputed tables,  Prev: Features,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.9 GUI classes
....................

*note msilib: 117. provides several classes that wrap the GUI tables in
an MSI database. However, no standard user interface is provided; use
`bdist_msi' to create MSI files with a user-interface for installing
Python packages.

 -- Class: msilib.Control (dlg, name)
     Base class of the dialog controls. _dlg_ is the dialog object the
     control belongs to, and _name_ is the control's name.

      -- Method: event (event, argument[, condition=1[, ordering]])
          Make an entry into the `ControlEvent' table for this control.

      -- Method: mapping (event, attribute)
          Make an entry into the `EventMapping' table for this control.

      -- Method: condition (action, condition)
          Make an entry into the `ControlCondition' table for this
          control.

 -- Class: msilib.RadioButtonGroup (dlg, name, property)
     Create a radio button control named _name_. _property_ is the
     installer property that gets set when a radio button is selected.

      -- Method: add (name, x, y, width, height, text[, value])
          Add a radio button named _name_ to the group, at the
          coordinates _x_, _y_, _width_, _height_, and with the label
          _text_. If _value_ is omitted, it defaults to _name_.

 -- Class: msilib.Dialog (db, name, x, y, w, h, attr, title, first,
          default, cancel)
     Return a new *note Dialog: 2668. object. An entry in the `Dialog'
     table is made, with the specified coordinates, dialog attributes,
     title, name of the first, default, and cancel controls.

      -- Method: control (name, type, x, y, width, height, attributes,
               property, text, control_next, help)
          Return a new *note Control: 2662. object. An entry in the
          `Control' table is made with the specified parameters.

          This is a generic method; for specific types, specialized
          methods are provided.

      -- Method: text (name, x, y, width, height, attributes, text)
          Add and return a `Text' control.

      -- Method: bitmap (name, x, y, width, height, text)
          Add and return a `Bitmap' control.

      -- Method: line (name, x, y, width, height)
          Add and return a `Line' control.

      -- Method: pushbutton (name, x, y, width, height, attributes,
               text, next_control)
          Add and return a `PushButton' control.

      -- Method: radiogroup (name, x, y, width, height, attributes,
               property, text, next_control)
          Add and return a `RadioButtonGroup' control.

      -- Method: checkbox (name, x, y, width, height, attributes,
               property, text, next_control)
          Add and return a `CheckBox' control.

See also
........

Dialog Table(1) Control Table(2) Control Types(3) ControlCondition
Table(4) ControlEvent Table(5) EventMapping Table(6) RadioButton
Table(7)

  ---------- Footnotes ----------

  (1)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/dialog_table.asp

  (2)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/control_table.asp

  (3)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/controls.asp

  (4)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/controlcondition_table.asp

  (5)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/controlevent_table.asp

  (6)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/eventmapping_table.asp

  (7)
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/radiobutton_table.asp


File: python.info,  Node: Precomputed tables,  Prev: GUI classes,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.10 Precomputed tables
............................

*note msilib: 117. provides a few subpackages that contain only schema
and table definitions. Currently, these definitions are based on MSI
version 2.0.

 -- Data: msilib.schema
     This is the standard MSI schema for MSI 2.0, with the _tables_
     variable providing a list of table definitions, and
     __Validation_records_ providing the data for MSI validation.

 -- Data: msilib.sequence
     This module contains table contents for the standard sequence
     tables: _AdminExecuteSequence_, _AdminUISequence_,
     _AdvtExecuteSequence_, _InstallExecuteSequence_, and
     _InstallUISequence_.

 -- Data: msilib.text
     This module contains definitions for the UIText and ActionText
     tables, for the standard installer actions.


File: python.info,  Node: msvcrt -- Useful routines from the MS VC++ runtime,  Next: _winreg -- Windows registry access,  Prev: msilib --- Read and write Microsoft Installer files,  Up: MS Windows Specific Services

5.34.2 `msvcrt' - Useful routines from the MS VC++ runtime
----------------------------------------------------------

These functions provide access to some useful capabilities on Windows
platforms.  Some higher-level modules use these functions to build the
Windows implementations of their services.  For example, the *note
getpass: e0. module uses this in the implementation of the *note
getpass(): e0. function.

  Further documentation on these functions can be found in the Platform
API documentation.

  The module implements both the normal and wide char variants of the
console I/O api. The normal API deals only with ASCII characters and is
of limited use for internationalized applications. The wide char API
should be used where ever possible

* Menu:

* File Operations::
* Console I/O::
* Other Functions::


File: python.info,  Node: File Operations,  Next: Console I/O,  Up: msvcrt -- Useful routines from the MS VC++ runtime

5.34.2.1 File Operations
........................

 -- Function: msvcrt.locking (fd, mode, nbytes)
     Lock part of a file based on file descriptor _fd_ from the C
     runtime.  Raises *note IOError: 1f7. on failure.  The locked
     region of the file extends from the current file position for
     _nbytes_ bytes, and may continue beyond the end of the file.
     _mode_ must be one of the `LK_*' constants listed below. Multiple
     regions in a file may be locked at the same time, but may not
     overlap.  Adjacent regions are not merged; they must be unlocked
     individually.

 -- Data: msvcrt.LK_LOCK
 -- Data: msvcrt.LK_RLCK
     Locks the specified bytes. If the bytes cannot be locked, the
     program immediately tries again after 1 second.  If, after 10
     attempts, the bytes cannot be locked, *note IOError: 1f7. is
     raised.

 -- Data: msvcrt.LK_NBLCK
 -- Data: msvcrt.LK_NBRLCK
     Locks the specified bytes. If the bytes cannot be locked, *note
     IOError: 1f7. is raised.

 -- Data: msvcrt.LK_UNLCK
     Unlocks the specified bytes, which must have been previously
     locked.

 -- Function: msvcrt.setmode (fd, flags)
     Set the line-end translation mode for the file descriptor _fd_. To
     set it to text mode, _flags_ should be *note os.O_TEXT: 10da.; for
     binary, it should be *note os.O_BINARY: 10c4.

 -- Function: msvcrt.open_osfhandle (handle, flags)
     Create a C runtime file descriptor from the file handle _handle_.
     The _flags_ parameter should be a bitwise OR of *note os.O_APPEND:
     10cc, *note os.O_RDONLY: 10c1, and *note os.O_TEXT: 10da.  The
     returned file descriptor may be used as a parameter to *note
     os.fdopen(): 6d8. to create a file object.

 -- Function: msvcrt.get_osfhandle (fd)
     Return the file handle for the file descriptor _fd_.  Raises *note
     IOError: 1f7. if _fd_ is not recognized.


File: python.info,  Node: Console I/O,  Next: Other Functions,  Prev: File Operations,  Up: msvcrt -- Useful routines from the MS VC++ runtime

5.34.2.2 Console I/O
....................

 -- Function: msvcrt.kbhit ()
     Return true if a keypress is waiting to be read.

 -- Function: msvcrt.getch ()
     Read a keypress and return the resulting character.  Nothing is
     echoed to the console.  This call will block if a keypress is not
     already available, but will not wait for `Enter' to be pressed. If
     the pressed key was a special function key, this will return
     `'\000'' or `'\xe0''; the next call will return the keycode.  The
     `Control-C' keypress cannot be read with this function.

 -- Function: msvcrt.getwch ()
     Wide char variant of *note getch(): 2684, returning a Unicode
     value.

     New in version 2.6.

 -- Function: msvcrt.getche ()
     Similar to *note getch(): 2684, but the keypress will be echoed if
     it  represents a printable character.

 -- Function: msvcrt.getwche ()
     Wide char variant of *note getche(): 2686, returning a Unicode
     value.

     New in version 2.6.

 -- Function: msvcrt.putch (char)
     Print the character _char_ to the console without buffering.

 -- Function: msvcrt.putwch (unicode_char)
     Wide char variant of *note putch(): 2688, accepting a Unicode
     value.

     New in version 2.6.

 -- Function: msvcrt.ungetch (char)
     Cause the character _char_ to be "pushed back" into the console
     buffer; it will be the next character read by *note getch(): 2684.
     or *note getche(): 2686.

 -- Function: msvcrt.ungetwch (unicode_char)
     Wide char variant of *note ungetch(): 268a, accepting a Unicode
     value.

     New in version 2.6.


File: python.info,  Node: Other Functions,  Prev: Console I/O,  Up: msvcrt -- Useful routines from the MS VC++ runtime

5.34.2.3 Other Functions
........................

 -- Function: msvcrt.heapmin ()
     Force the `malloc()' heap to clean itself up and return unused
     blocks to the operating system.  On failure, this raises *note
     IOError: 1f7.


File: python.info,  Node: _winreg -- Windows registry access,  Next: winsound --- Sound-playing interface for Windows,  Prev: msvcrt -- Useful routines from the MS VC++ runtime,  Up: MS Windows Specific Services

5.34.3 `_winreg' - Windows registry access
------------------------------------------

     Note: The *note _winreg: 3. module has been renamed to `winreg' in
     Python 3.0.  The *note 2to3: bbf. tool will automatically adapt
     imports when converting your sources to 3.0.

New in version 2.0.

  These functions expose the Windows registry API to Python.  Instead
of using an integer as the registry handle, a *note handle object:
2691. is used to ensure that the handles are closed correctly, even if
the programmer neglects to explicitly close them.

  This module offers the following functions:

 -- Function: _winreg.CloseKey (hkey)
     Closes a previously opened registry key.  The _hkey_ argument
     specifies a previously opened key.

          Note: If _hkey_ is not closed using this method (or via *note
          hkey.Close(): 2693.), it is closed when the _hkey_ object is
          destroyed by Python.

 -- Function: _winreg.ConnectRegistry (computer_name, key)
     Establishes a connection to a predefined registry handle on
     another computer, and returns a *note handle object: 2691.

     _computer_name_ is the name of the remote computer, of the form
     `r"\\computername"'.  If `None', the local computer is used.

     _key_ is the predefined handle to connect to.

     The return value is the handle of the opened key. If the function
     fails, a *note WindowsError: 921. exception is raised.

 -- Function: _winreg.CreateKey (key, sub_key)
     Creates or opens the specified key, returning a *note handle
     object: 2691.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     _sub_key_ is a string that names the key this method opens or
     creates.

     If _key_ is one of the predefined keys, _sub_key_ may be `None'.
     In that case, the handle returned is the same key handle passed in
     to the function.

     If the key already exists, this function opens the existing key.

     The return value is the handle of the opened key. If the function
     fails, a *note WindowsError: 921. exception is raised.

 -- Function: _winreg.CreateKeyEx (key, sub_key[, res[, sam]])
     Creates or opens the specified key, returning a *note handle
     object: 2691.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     _sub_key_ is a string that names the key this method opens or
     creates.

     _res_ is a reserved integer, and must be zero. The default is zero.

     _sam_ is an integer that specifies an access mask that describes
     the desired security access for the key.  Default is *note
     KEY_ALL_ACCESS: 2697.  See *note Access Rights: 2698. for other
     allowed values.

     If _key_ is one of the predefined keys, _sub_key_ may be `None'.
     In that case, the handle returned is the same key handle passed in
     to the function.

     If the key already exists, this function opens the existing key.

     The return value is the handle of the opened key. If the function
     fails, a *note WindowsError: 921. exception is raised.

  New in version 2.7.

 -- Function: _winreg.DeleteKey (key, sub_key)
     Deletes the specified key.

     _key_ is an already open key, or any one of the predefined *note
     HKEY_* constants: 2696.

     _sub_key_ is a string that must be a subkey of the key identified
     by the _key_ parameter.  This value must not be `None', and the
     key may not have subkeys.

     _This method can not delete keys with subkeys._

     If the method succeeds, the entire key, including all of its
     values, is removed.  If the method fails, a *note WindowsError:
     921. exception is raised.

 -- Function: _winreg.DeleteKeyEx (key, sub_key[, sam[, res]])
     Deletes the specified key.

          Note: The *note DeleteKeyEx(): 2c2. function is implemented
          with the RegDeleteKeyEx Windows API function, which is
          specific to 64-bit versions of Windows.  See the
          RegDeleteKeyEx documentation(1).

     _key_ is an already open key, or any one of the predefined *note
     HKEY_* constants: 2696.

     _sub_key_ is a string that must be a subkey of the key identified
     by the _key_ parameter. This value must not be `None', and the key
     may not have subkeys.

     _res_ is a reserved integer, and must be zero. The default is zero.

     _sam_ is an integer that specifies an access mask that describes
     the desired security access for the key.  Default is *note
     KEY_WOW64_64KEY: 269a.  See *note Access Rights: 2698. for other
     allowed values.

     _This method can not delete keys with subkeys._

     If the method succeeds, the entire key, including all of its
     values, is removed. If the method fails, a *note WindowsError:
     921. exception is raised.

     On unsupported Windows versions, *note NotImplementedError: 919.
     is raised.

  New in version 2.7.

 -- Function: _winreg.DeleteValue (key, value)
     Removes a named value from a registry key.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     _value_ is a string that identifies the value to remove.

 -- Function: _winreg.EnumKey (key, index)
     Enumerates subkeys of an open registry key, returning a string.

     _key_ is an already open key, or any one of the predefined *note
     HKEY_* constants: 2696.

     _index_ is an integer that identifies the index of the key to
     retrieve.

     The function retrieves the name of one subkey each time it is
     called.  It is typically called repeatedly until a *note
     WindowsError: 921. exception is raised, indicating, no more values
     are available.

 -- Function: _winreg.EnumValue (key, index)
     Enumerates values of an open registry key, returning a tuple.

     _key_ is an already open key, or any one of the predefined *note
     HKEY_* constants: 2696.

     _index_ is an integer that identifies the index of the value to
     retrieve.

     The function retrieves the name of one subkey each time it is
     called. It is typically called repeatedly, until a *note
     WindowsError: 921. exception is raised, indicating no more values.

     The result is a tuple of 3 items:

     Index       Meaning
     ------------------------------------------------------------- 
     `0'         A string that identifies the value name
     `1'         An object that holds the value data, and whose
                 type depends on the underlying registry type
     `2'         An integer that identifies the type of the
                 value data (see table in docs for *note
                 SetValueEx(): 269e.)


 -- Function: _winreg.ExpandEnvironmentStrings (unicode)
     Expands environment variable placeholders `%NAME%' in unicode
     strings like *note REG_EXPAND_SZ: 26a0.:

         >>> ExpandEnvironmentStrings(u"%windir%")
         u"C:\\Windows"

     New in version 2.6.

 -- Function: _winreg.FlushKey (key)
     Writes all the attributes of a key to the registry.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     It is not necessary to call *note FlushKey(): 26a1. to change a
     key. Registry changes are flushed to disk by the registry using
     its lazy flusher.  Registry changes are also flushed to disk at
     system shutdown.  Unlike *note CloseKey(): 2692, the *note
     FlushKey(): 26a1. method returns only when all the data has been
     written to the registry. An application should only call *note
     FlushKey(): 26a1. if it requires absolute certainty that registry
     changes are on disk.

          Note: If you don't know whether a *note FlushKey(): 26a1.
          call is required, it probably isn't.

 -- Function: _winreg.LoadKey (key, sub_key, file_name)
     Creates a subkey under the specified key and stores registration
     information from a specified file into that subkey.

     _key_ is a handle returned by *note ConnectRegistry(): 2694. or
     one of the constants *note HKEY_USERS: 26a3. or *note
     HKEY_LOCAL_MACHINE: 26a4.

     _sub_key_ is a string that identifies the subkey to load.

     _file_name_ is the name of the file to load registry data from.
     This file must have been created with the *note SaveKey(): 26a5.
     function. Under the file allocation table (FAT) file system, the
     filename may not have an extension.

     A call to *note LoadKey(): 26a2. fails if the calling process does
     not have the `SE_RESTORE_PRIVILEGE' privilege.  Note that
     privileges are different from permissions - see the RegLoadKey
     documentation(2) for more details.

     If _key_ is a handle returned by *note ConnectRegistry(): 2694,
     then the path specified in _file_name_ is relative to the remote
     computer.

 -- Function: _winreg.OpenKey (key, sub_key[, res[, sam]])
     Opens the specified key, returning a *note handle object: 2691.

     _key_ is an already open key, or any one of the predefined *note
     HKEY_* constants: 2696.

     _sub_key_ is a string that identifies the sub_key to open.

     _res_ is a reserved integer, and must be zero.  The default is
     zero.

     _sam_ is an integer that specifies an access mask that describes
     the desired security access for the key.  Default is *note
     KEY_READ: 26a7.  See *note Access Rights: 2698. for other allowed
     values.

     The result is a new handle to the specified key.

     If the function fails, *note WindowsError: 921. is raised.

 -- Function: _winreg.OpenKeyEx ()
     The functionality of *note OpenKeyEx(): 26a8. is provided via
     *note OpenKey(): 26a6, by the use of default arguments.

 -- Function: _winreg.QueryInfoKey (key)
     Returns information about a key, as a tuple.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     The result is a tuple of 3 items:

     Index       Meaning
     -------------------------------------------------------------- 
     `0'         An integer giving the number of sub keys this
                 key has.
     `1'         An integer giving the number of values this key
                 has.
     `2'         A long integer giving when the key was last
                 modified (if available) as 100's of nanoseconds
                 since Jan 1, 1600.


 -- Function: _winreg.QueryValue (key, sub_key)
     Retrieves the unnamed value for a key, as a string.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     _sub_key_ is a string that holds the name of the subkey with which
     the value is associated.  If this parameter is `None' or empty,
     the function retrieves the value set by the *note SetValue():
     26ab. method for the key identified by _key_.

     Values in the registry have name, type, and data components. This
     method retrieves the data for a key's first value that has a NULL
     name. But the underlying API call doesn't return the type, so
     always use *note QueryValueEx(): 26ac. if possible.

 -- Function: _winreg.QueryValueEx (key, value_name)
     Retrieves the type and data for a specified value name associated
     with an open registry key.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     _value_name_ is a string indicating the value to query.

     The result is a tuple of 2 items:

     Index       Meaning
     ---------------------------------------------------------- 
     `0'         The value of the registry item.
     `1'         An integer giving the registry type for this
                 value (see table in docs for *note
                 SetValueEx(): 269e.)


 -- Function: _winreg.SaveKey (key, file_name)
     Saves the specified key, and all its subkeys to the specified file.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     _file_name_ is the name of the file to save registry data to.
     This file cannot already exist. If this filename includes an
     extension, it cannot be used on file allocation table (FAT) file
     systems by the *note LoadKey(): 26a2.  method.

     If _key_ represents a key on a remote computer, the path described
     by _file_name_ is relative to the remote computer. The caller of
     this method must possess the `SeBackupPrivilege' security
     privilege.  Note that privileges are different than permissions -
     see the Conflicts Between User Rights and Permissions
     documentation(3) for more details.

     This function passes NULL for _security_attributes_ to the API.

 -- Function: _winreg.SetValue (key, sub_key, type, value)
     Associates a value with a specified key.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     _sub_key_ is a string that names the subkey with which the value
     is associated.

     _type_ is an integer that specifies the type of the data.
     Currently this must be *note REG_SZ: 26ad, meaning only strings
     are supported.  Use the *note SetValueEx(): 269e.  function for
     support for other data types.

     _value_ is a string that specifies the new value.

     If the key specified by the _sub_key_ parameter does not exist,
     the SetValue function creates it.

     Value lengths are limited by available memory. Long values (more
     than 2048 bytes) should be stored as files with the filenames
     stored in the configuration registry.  This helps the registry
     perform efficiently.

     The key identified by the _key_ parameter must have been opened
     with *note KEY_SET_VALUE: 26ae. access.

 -- Function: _winreg.SetValueEx (key, value_name, reserved, type,
          value)
     Stores data in the value field of an open registry key.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     _value_name_ is a string that names the subkey with which the
     value is associated.

     _type_ is an integer that specifies the type of the data. See
     *note Value Types: 26af. for the available types.

     _reserved_ can be anything - zero is always passed to the API.

     _value_ is a string that specifies the new value.

     This method can also set additional value and type information for
     the specified key.  The key identified by the key parameter must
     have been opened with *note KEY_SET_VALUE: 26ae. access.

     To open the key, use the *note CreateKey(): 2695. or *note
     OpenKey(): 26a6. methods.

     Value lengths are limited by available memory. Long values (more
     than 2048 bytes) should be stored as files with the filenames
     stored in the configuration registry.  This helps the registry
     perform efficiently.

 -- Function: _winreg.DisableReflectionKey (key)
     Disables registry reflection for 32-bit processes running on a
     64-bit operating system.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     Will generally raise *note NotImplemented: 20b. if executed on a
     32-bit operating system.

     If the key is not on the reflection list, the function succeeds
     but has no effect. Disabling reflection for a key does not affect
     reflection of any subkeys.

 -- Function: _winreg.EnableReflectionKey (key)
     Restores registry reflection for the specified disabled key.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     Will generally raise *note NotImplemented: 20b. if executed on a
     32-bit operating system.

     Restoring reflection for a key does not affect reflection of any
     subkeys.

 -- Function: _winreg.QueryReflectionKey (key)
     Determines the reflection state for the specified key.

     _key_ is an already open key, or one of the predefined *note
     HKEY_* constants: 2696.

     Returns `True' if reflection is disabled.

     Will generally raise *note NotImplemented: 20b. if executed on a
     32-bit operating system.

* Menu:

* Constants: Constants<5>.
* Registry Handle Objects::

Constants

* HKEY_* Constants::
* Access Rights::
* Value Types::

Access Rights

* 64-bit Specific::

  ---------- Footnotes ----------

  (1) http://msdn.microsoft.com/en-us/library/ms724847%28VS.85%29.aspx

  (2) http://msdn.microsoft.com/en-us/library/ms724889%28v=VS.85%29.aspx

  (3) http://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx

