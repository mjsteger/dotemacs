This is python.info, produced by makeinfo version 4.8 from
build/texinfo/python.texi.

Generated by Sphinx 1.1pre.
INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY

     Python 2.7.2, April 02, 2012

     Georg Brandl

     Copyright (C) 1990-2012, Python Software Foundation


File: python.info,  Node: IMAP4 Example,  Prev: IMAP4 Objects,  Up: imaplib --- IMAP4 protocol client

5.20.10.2 IMAP4 Example
.......................

Here is a minimal example (without error checking) that opens a mailbox
and retrieves and prints all messages:

    import getpass, imaplib

    M = imaplib.IMAP4()
    M.login(getpass.getuser(), getpass.getpass())
    M.select()
    typ, data = M.search(None, 'ALL')
    for num in data[0].split():
        typ, data = M.fetch(num, '(RFC822)')
        print 'Message %s\n%s\n' % (num, data[0][1])
    M.close()
    M.logout()



File: python.info,  Node: nntplib --- NNTP protocol client,  Next: smtplib --- SMTP protocol client,  Prev: imaplib --- IMAP4 protocol client,  Up: Internet Protocols and Support

5.20.11 `nntplib' -- NNTP protocol client
-----------------------------------------

This module defines the class *note NNTP: 1cf5. which implements the
client side of the NNTP protocol.  It can be used to implement a news
reader or poster, or automated news processors.  For more information
on NNTP (Network News Transfer Protocol), see Internet RFC 977(1).

  Here are two small examples of how it can be used.  To list some
statistics about a newsgroup and print the subjects of the last 10
articles:

    >>> s = NNTP('news.gmane.org')
    >>> resp, count, first, last, name = s.group('gmane.comp.python.committers')
    >>> print 'Group', name, 'has', count, 'articles, range', first, 'to', last
    Group gmane.comp.python.committers has 1071 articles, range 1 to 1071
    >>> resp, subs = s.xhdr('subject', first + '-' + last)
    >>> for id, sub in subs[-10:]: print id, sub
    ...
    1062 Re: Mercurial Status?
    1063 Re: [python-committers]  (Windows) buildbots on 3.x
    1064 Re: Mercurial Status?
    1065 Re: Mercurial Status?
    1066 Python 2.6.6 status
    1067 Commit Privileges for Ask Solem
    1068 Re: Commit Privileges for Ask Solem
    1069 Re: Commit Privileges for Ask Solem
    1070 Re: Commit Privileges for Ask Solem
    1071 2.6.6 rc 2
    >>> s.quit()
    '205 Bye!'

To post an article from a file (this assumes that the article has valid
headers, and that you have right to post on the particular newsgroup):

    >>> s = NNTP('news.gmane.org')
    >>> f = open('/tmp/article')
    >>> s.post(f)
    '240 Article posted successfully.'
    >>> s.quit()
    '205 Bye!'

The module itself defines the following items:

 -- Class: nntplib.NNTP (host[, port [, user[, password [, readermode]
          [, usenetrc]]]])
     Return a new instance of the *note NNTP: 1cf5. class, representing
     a connection to the NNTP server running on host _host_, listening
     at port _port_.  The default _port_ is 119.  If the optional
     _user_ and _password_ are provided, or if suitable credentials are
     present in `/.netrc' and the optional flag _usenetrc_ is true (the
     default), the `AUTHINFO USER' and `AUTHINFO PASS' commands are
     used to identify and authenticate the user to the server.  If the
     optional flag _readermode_ is true, then a `mode reader' command is
     sent before authentication is performed.  Reader mode is sometimes
     necessary if you are connecting to an NNTP server on the local
     machine and intend to call reader-specific commands, such as
     `group'.  If you get unexpected *note NNTPPermanentError: 1cf6.s,
     you might need to set _readermode_.  _readermode_ defaults to
     `None'. _usenetrc_ defaults to `True'.

     Changed in version 2.4: _usenetrc_ argument added.

 -- Exception: nntplib.NNTPError
     Derived from the standard exception *note Exception: 328, this is
     the base class for all exceptions raised by the *note nntplib:
     125. module.

 -- Exception: nntplib.NNTPReplyError
     Exception raised when an unexpected reply is received from the
     server.  For backwards compatibility, the exception `error_reply'
     is equivalent to this class.

 -- Exception: nntplib.NNTPTemporaryError
     Exception raised when an error code in the range 400-499 is
     received.  For backwards compatibility, the exception `error_temp'
     is equivalent to this class.

 -- Exception: nntplib.NNTPPermanentError
     Exception raised when an error code in the range 500-599 is
     received.  For backwards compatibility, the exception `error_perm'
     is equivalent to this class.

 -- Exception: nntplib.NNTPProtocolError
     Exception raised when a reply is received from the server that
     does not begin with a digit in the range 1-5.  For backwards
     compatibility, the exception `error_proto' is equivalent to this
     class.

 -- Exception: nntplib.NNTPDataError
     Exception raised when there is some error in the response data.
     For backwards compatibility, the exception `error_data' is
     equivalent to this class.

* Menu:

* NNTP Objects::

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc977.html


File: python.info,  Node: NNTP Objects,  Up: nntplib --- NNTP protocol client

5.20.11.1 NNTP Objects
......................

NNTP instances have the following methods.  The _response_ that is
returned as the first item in the return tuple of almost all methods is
the server's response: a string beginning with a three-digit code. If
the server's response indicates an error, the method raises one of the
above exceptions.

 -- Method: NNTP.getwelcome ()
     Return the welcome message sent by the server in reply to the
     initial connection.  (This message sometimes contains disclaimers
     or help information that may be relevant to the user.)

 -- Method: NNTP.set_debuglevel (level)
     Set the instance's debugging level.  This controls the amount of
     debugging output printed.  The default, `0', produces no debugging
     output.  A value of `1' produces a moderate amount of debugging
     output, generally a single line per request or response.  A value
     of `2' or higher produces the maximum amount of debugging output,
     logging each line sent and received on the connection (including
     message text).

 -- Method: NNTP.newgroups (date, time[, file])
     Send a `NEWGROUPS' command.  The _date_ argument should be a
     string of the form `'yymmdd'' indicating the date, and _time_
     should be a string of the form `'hhmmss'' indicating the time.
     Return a pair `(response, groups)' where _groups_ is a list of
     group names that are new since the given date and time. If the
     _file_ parameter is supplied, then the output of the  `NEWGROUPS'
     command is stored in a file.  If _file_ is a string,  then the
     method will open a file object with that name, write to it  then
     close it.  If _file_ is a file object, then it will start calling
     `write()' on it to store the lines of the command output. If
     _file_ is supplied, then the returned _list_ is an empty list.

 -- Method: NNTP.newnews (group, date, time[, file])
     Send a `NEWNEWS' command.  Here, _group_ is a group name or `'*'',
     and _date_ and _time_ have the same meaning as for *note
     newgroups(): 1d00.  Return a pair `(response, articles)' where
     _articles_ is a list of message ids. If the _file_ parameter is
     supplied, then the output of the  `NEWNEWS' command is stored in a
     file.  If _file_ is a string,  then the method will open a file
     object with that name, write to it  then close it.  If _file_ is a
     file object, then it will start calling `write()' on it to store
     the lines of the command output. If _file_ is supplied, then the
     returned _list_ is an empty list.

 -- Method: NNTP.list ([file])
     Send a `LIST' command.  Return a pair `(response, list)' where
     _list_ is a list of tuples.  Each tuple has the form `(group,
     last, first, flag)', where _group_ is a group name, _last_ and
     _first_ are the last and first article numbers (as strings), and
     _flag_ is `'y'' if posting is allowed, `'n'' if not, and `'m'' if
     the newsgroup is moderated.  (Note the ordering: _last_, _first_.)
     If the _file_ parameter is supplied, then the output of the  `LIST'
     command is stored in a file.  If _file_ is a string,  then the
     method will open a file object with that name, write to it  then
     close it.  If _file_ is a file object, then it will start calling
     `write()' on it to store the lines of the command output. If
     _file_ is supplied, then the returned _list_ is an empty list.

 -- Method: NNTP.descriptions (grouppattern)
     Send a `LIST NEWSGROUPS' command, where _grouppattern_ is a
     wildmat string as specified in RFC2980 (it's essentially the same
     as DOS or UNIX shell wildcard strings).  Return a pair `(response,
     list)', where _list_ is a list of tuples containing `(name,
     title)'.

     New in version 2.4.

 -- Method: NNTP.description (group)
     Get a description for a single group _group_.  If more than one
     group matches (if 'group' is a real wildmat string), return the
     first match.   If no group matches, return an empty string.

     This elides the response code from the server.  If the response
     code is needed, use *note descriptions(): 1d03.

     New in version 2.4.

 -- Method: NNTP.group (name)
     Send a `GROUP' command, where _name_ is the group name. Return a
     tuple `(response, count, first, last, name)' where _count_ is the
     (estimated) number of articles in the group, _first_ is the first
     article number in the group, _last_ is the last article number in
     the group, and _name_ is the group name.  The numbers are returned
     as strings.

 -- Method: NNTP.help ([file])
     Send a `HELP' command.  Return a pair `(response, list)' where
     _list_ is a list of help strings. If the _file_ parameter is
     supplied, then the output of the  `HELP' command is stored in a
     file.  If _file_ is a string,  then the method will open a file
     object with that name, write to it  then close it.  If _file_ is a
     file object, then it will start calling `write()' on it to store
     the lines of the command output. If _file_ is supplied, then the
     returned _list_ is an empty list.

 -- Method: NNTP.stat (id)
     Send a `STAT' command, where _id_ is the message id (enclosed in
     `'<'' and `'>'') or an article number (as a string). Return a
     triple `(response, number, id)' where _number_ is the article
     number (as a string) and _id_ is the message id  (enclosed in
     `'<'' and `'>'').

 -- Method: NNTP.next ()
     Send a `NEXT' command.  Return as for *note stat(): 162.

 -- Method: NNTP.last ()
     Send a `LAST' command.  Return as for *note stat(): 162.

 -- Method: NNTP.head (id)
     Send a `HEAD' command, where _id_ has the same meaning as for
     *note stat(): 162.  Return a tuple `(response, number, id, list)'
     where the first three are the same as for *note stat(): 162, and
     _list_ is a list of the article's headers (an uninterpreted list
     of lines, without trailing newlines).

 -- Method: NNTP.body (id[, file])
     Send a `BODY' command, where _id_ has the same meaning as for
     *note stat(): 162.  If the _file_ parameter is supplied, then the
     body is stored in a file.  If _file_ is a string, then the method
     will open a file object with that name, write to it then close it.
     If _file_ is a file object, then it will start calling `write()'
     on it to store the lines of the body. Return as for *note head():
     1d0a.  If _file_ is supplied, then the returned _list_ is an empty
     list.

 -- Method: NNTP.article (id)
     Send an `ARTICLE' command, where _id_ has the same meaning as for
     *note stat(): 162.  Return as for *note head(): 1d0a.

 -- Method: NNTP.slave ()
     Send a `SLAVE' command.  Return the server's _response_.

 -- Method: NNTP.xhdr (header, string[, file])
     Send an `XHDR' command.  This command is not defined in the RFC
     but is a common extension.  The _header_ argument is a header
     keyword, e.g.  `'subject''.  The _string_ argument should have the
     form `'first-last'' where _first_ and _last_ are the first and
     last article numbers to search.  Return a pair `(response, list)',
     where _list_ is a list of pairs `(id, text)', where _id_ is an
     article number (as a string) and _text_ is the text of the
     requested header for that article. If the _file_ parameter is
     supplied, then the output of the  `XHDR' command is stored in a
     file.  If _file_ is a string, then the method will open a file
     object with that name, write to it  then close it.  If _file_ is a
     file object, then it will start calling `write()' on it to store
     the lines of the command output. If _file_ is supplied, then the
     returned _list_ is an empty list.

 -- Method: NNTP.post (file)
     Post an article using the `POST' command.  The _file_ argument is
     an open file object which is read until EOF using its *note
     readline(): 145. method.  It should be a well-formed news article,
     including the required headers.  The *note post(): 1d0f.  method
     automatically escapes lines beginning with `.'.

 -- Method: NNTP.ihave (id, file)
     Send an `IHAVE' command. _id_ is a message id (enclosed in  `'<''
     and `'>''). If the response is not an error, treat _file_ exactly
     as for the *note post(): 1d0f. method.

 -- Method: NNTP.date ()
     Return a triple `(response, date, time)', containing the current
     date and time in a form suitable for the *note newnews(): 1d01.
     and *note newgroups(): 1d00. methods. This is an optional NNTP
     extension, and may not be supported by all servers.

 -- Method: NNTP.xgtitle (name[, file])
     Process an `XGTITLE' command, returning a pair `(response, list)',
     where _list_ is a list of tuples containing `(name, title)'. If
     the _file_ parameter is supplied, then the output of the
     `XGTITLE' command is stored in a file.  If _file_ is a string,
     then the method will open a file object with that name, write to
     it  then close it.  If _file_ is a file object, then it will start
     calling `write()' on it to store the lines of the command output.
     If _file_ is supplied, then the returned _list_ is an empty list.
     This is an optional NNTP extension, and may not be supported by
     all servers.

     RFC2980 says "It is suggested that this extension be deprecated".
     Use *note descriptions(): 1d03. or *note description(): 1d04.
     instead.

 -- Method: NNTP.xover (start, end[, file])
     Return a pair `(resp, list)'.  _list_ is a list of tuples, one for
     each article in the range delimited by the _start_ and _end_
     article numbers.  Each tuple is of the form `(article number,
     subject, poster, date, id, references, size, lines)'. If the
     _file_ parameter is supplied, then the output of the `XOVER'
     command is stored in a file.  If _file_ is a string,  then the
     method will open a file object with that name, write to it  then
     close it.  If _file_ is a file object, then it will start calling
     `write()' on it to store the lines of the command output. If
     _file_ is supplied, then the returned _list_ is an empty list.
     This is an optional NNTP extension, and may not be supported by
     all servers.

 -- Method: NNTP.xpath (id)
     Return a pair `(resp, path)', where _path_ is the directory path
     to the article with message ID _id_.  This is an optional NNTP
     extension, and may not be supported by all servers.

 -- Method: NNTP.quit ()
     Send a `QUIT' command and close the connection.  Once this method
     has been called, no other methods of the NNTP object should be
     called.


File: python.info,  Node: smtplib --- SMTP protocol client,  Next: smtpd --- SMTP Server,  Prev: nntplib --- NNTP protocol client,  Up: Internet Protocols and Support

5.20.12 `smtplib' -- SMTP protocol client
-----------------------------------------

The *note smtplib: 15b. module defines an SMTP client session object
that can be used to send mail to any Internet machine with an SMTP or
ESMTP listener daemon.  For details of SMTP and ESMTP operation, consult RFC
821(1) (Simple Mail Transfer Protocol) and RFC 1869(2) (SMTP Service
Extensions).

 -- Class: smtplib.SMTP ([host[, port[, local_hostname[, timeout]]]])
     A *note SMTP: 1d18. instance encapsulates an SMTP connection.  It
     has methods that support a full repertoire of SMTP and ESMTP
     operations. If the optional host and port parameters are given,
     the SMTP *note connect(): 1d19. method is called with those
     parameters during initialization.  An *note SMTPConnectError:
     1d1a. is raised if the specified host doesn't respond correctly.
     The optional _timeout_ parameter specifies a timeout in seconds
     for blocking operations like the connection attempt (if not
     specified, the global default timeout setting will be used).

     For normal use, you should only require the initialization/connect,
     *note sendmail(): 1d1b, and *note quit(): 861. methods.  An
     example is included below.

     Changed in version 2.6: _timeout_ was added.

 -- Class: smtplib.SMTP_SSL ([host[, port[, local_hostname[, keyfile[,
          certfile[, timeout]]]]]])
     A *note SMTP_SSL: 1d1c. instance behaves exactly the same as
     instances of *note SMTP: 1d18. *note SMTP_SSL: 1d1c. should be
     used for situations where SSL is required from the beginning of
     the connection and using `starttls()' is not appropriate. If
     _host_ is not specified, the local host is used. If _port_ is
     omitted, the standard SMTP-over-SSL port (465) is used. _keyfile_
     and _certfile_ are also optional, and can contain a PEM formatted
     private key and certificate chain file for the SSL connection. The
     optional _timeout_ parameter specifies a timeout in seconds for
     blocking operations like the connection attempt (if not specified,
     the global default timeout setting will be used).

     New in version 2.6.

 -- Class: smtplib.LMTP ([host[, port[, local_hostname]]])
     The LMTP protocol, which is very similar to ESMTP, is heavily
     based on the standard SMTP client. It's common to use Unix sockets
     for LMTP, so our `connect()' method must support that as well as a
     regular host:port server. To specify a Unix socket, you must use
     an absolute path for _host_, starting with a '/'.

     Authentication is supported, using the regular SMTP mechanism.
     When using a Unix socket, LMTP generally don't support or require
     any authentication, but your mileage might vary.

     New in version 2.6.

  A nice selection of exceptions is defined as well:

 -- Exception: smtplib.SMTPException
     Base exception class for all exceptions raised by this module.

 -- Exception: smtplib.SMTPServerDisconnected
     This exception is raised when the server unexpectedly disconnects,
     or when an attempt is made to use the *note SMTP: 1d18. instance
     before connecting it to a server.

 -- Exception: smtplib.SMTPResponseException
     Base class for all exceptions that include an SMTP error code.
     These exceptions are generated in some instances when the SMTP
     server returns an error code.  The error code is stored in the
     `smtp_code' attribute of the error, and the `smtp_error' attribute
     is set to the error message.

 -- Exception: smtplib.SMTPSenderRefused
     Sender address refused.  In addition to the attributes set by on
     all *note SMTPResponseException: 1d20. exceptions, this sets
     'sender' to the string that the SMTP server refused.

 -- Exception: smtplib.SMTPRecipientsRefused
     All recipient addresses refused.  The errors for each recipient
     are accessible through the attribute `recipients', which is a
     dictionary of exactly the same sort as *note SMTP.sendmail():
     1d1b. returns.

 -- Exception: smtplib.SMTPDataError
     The SMTP server refused to accept the message data.

 -- Exception: smtplib.SMTPConnectError
     Error occurred during establishment of a connection  with the
     server.

 -- Exception: smtplib.SMTPHeloError
     The server refused our `HELO' message.

 -- Exception: smtplib.SMTPAuthenticationError
     SMTP authentication went wrong.  Most probably the server didn't
     accept the username/password combination provided.

See also
........

RFC 821(3) - Simple Mail Transfer Protocol
     Protocol definition for SMTP.  This document covers the model,
     operating procedure, and protocol details for SMTP.

RFC 1869(4) - SMTP Service Extensions
     Definition of the ESMTP extensions for SMTP.  This describes a
     framework for extending SMTP with new commands, supporting dynamic
     discovery of the commands provided by the server, and defines a
     few additional commands.

* Menu:

* SMTP Objects::
* SMTP Example::

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc821.html

  (2) http://tools.ietf.org/html/rfc1869.html

  (3) http://tools.ietf.org/html/rfc821.html

  (4) http://tools.ietf.org/html/rfc1869.html


File: python.info,  Node: SMTP Objects,  Next: SMTP Example,  Up: smtplib --- SMTP protocol client

5.20.12.1 SMTP Objects
......................

An *note SMTP: 1d18. instance has the following methods:

 -- Method: SMTP.set_debuglevel (level)
     Set the debug output level.  A true value for _level_ results in
     debug messages for connection and for all messages sent to and
     received from the server.

 -- Method: SMTP.connect ([host[, port]])
     Connect to a host on a given port.  The defaults are to connect to
     the local host at the standard SMTP port (25). If the hostname
     ends with a colon (`':'') followed by a number, that suffix will
     be stripped off and the number interpreted as the port number to
     use. This method is automatically invoked by the constructor if a
     host is specified during instantiation.

 -- Method: SMTP.docmd (cmd[, argstring])
     Send a command _cmd_ to the server.  The optional argument
     _argstring_ is simply concatenated to the command, separated by a
     space.

     This returns a 2-tuple composed of a numeric response code and the
     actual response line (multiline responses are joined into one long
     line.)

     In normal operation it should not be necessary to call this method
     explicitly.  It is used to implement other methods and may be
     useful for testing private extensions.

     If the connection to the server is lost while waiting for the
     reply, *note SMTPServerDisconnected: 1d1f. will be raised.

 -- Method: SMTP.helo ([hostname])
     Identify yourself to the SMTP server using `HELO'.  The hostname
     argument defaults to the fully qualified domain name of the local
     host.  The message returned by the server is stored as the
     `helo_resp' attribute of the object.

     In normal operation it should not be necessary to call this method
     explicitly.  It will be implicitly called by the *note sendmail():
     1d1b. when necessary.

 -- Method: SMTP.ehlo ([hostname])
     Identify yourself to an ESMTP server using `EHLO'.  The hostname
     argument defaults to the fully qualified domain name of the local
     host.  Examine the response for ESMTP option and store them for
     use by *note has_extn(): 1d2c.  Also sets several informational
     attributes: the message returned by the server is stored as the
     `ehlo_resp' attribute, `does_esmtp' is set to true or false
     depending on whether the server supports ESMTP, and
     `esmtp_features' will be a dictionary containing the names of the
     SMTP service extensions this server supports, and their parameters
     (if any).

     Unless you wish to use *note has_extn(): 1d2c. before sending
     mail, it should not be necessary to call this method explicitly.
     It will be implicitly called by *note sendmail(): 1d1b. when
     necessary.

 -- Method: SMTP.ehlo_or_helo_if_needed ()
     This method call *note ehlo(): 1d2b. and or *note helo(): 1d2a. if
     there has been no previous `EHLO' or `HELO' command this session.
     It tries ESMTP `EHLO' first.

    *note SMTPHeloError: 1d24.
          The server didn't reply properly to the `HELO' greeting.

     New in version 2.6.

 -- Method: SMTP.has_extn (name)
     Return *note True: 39f. if _name_ is in the set of SMTP service
     extensions returned by the server, *note False: 3a0. otherwise.
     Case is ignored.

 -- Method: SMTP.verify (address)
     Check the validity of an address on this server using SMTP `VRFY'.
     Returns a tuple consisting of code 250 and a full RFC 822(1)
     address (including human name) if the user address is valid.
     Otherwise returns an SMTP error code of 400 or greater and an
     error string.

          Note: Many sites disable SMTP `VRFY' in order to foil
          spammers.

 -- Method: SMTP.login (user, password)
     Log in on an SMTP server that requires authentication. The
     arguments are the username and the password to authenticate with.
     If there has been no previous `EHLO' or `HELO' command this
     session, this method tries ESMTP `EHLO' first. This method will
     return normally if the authentication was successful, or may raise
     the following exceptions:

    *note SMTPHeloError: 1d24.
          The server didn't reply properly to the `HELO' greeting.

    *note SMTPAuthenticationError: 1d25.
          The server didn't accept the username/password combination.

    *note SMTPException: 1d1e.
          No suitable authentication method was found.

 -- Method: SMTP.starttls ([keyfile[, certfile]])
     Put the SMTP connection in TLS (Transport Layer Security) mode.
     All SMTP commands that follow will be encrypted.  You should then
     call *note ehlo(): 1d2b.  again.

     If _keyfile_ and _certfile_ are provided, these are passed to the
     *note socket: 15d.  module's *note ssl(): 161. function.

     If there has been no previous `EHLO' or `HELO' command this
     session, this method tries ESMTP `EHLO' first.

     Changed in version 2.6.

    *note SMTPHeloError: 1d24.
          The server didn't reply properly to the `HELO' greeting.

    *note SMTPException: 1d1e.
          The server does not support the STARTTLS extension.

     Changed in version 2.6.

    *note RuntimeError: 38a.
          SSL/TLS support is not available to your Python interpreter.

 -- Method: SMTP.sendmail (from_addr, to_addrs, msg[, mail_options,
          rcpt_options])
     Send mail.  The required arguments are an RFC 822(2) from-address
     string, a list of RFC 822(3) to-address strings (a bare string
     will be treated as a list with 1 address), and a message string.
     The caller may pass a list of ESMTP options (such as `8bitmime')
     to be used in `MAIL FROM' commands as _mail_options_.  ESMTP
     options (such as `DSN' commands) that should be used with all
     `RCPT' commands can be passed as _rcpt_options_.  (If you need to
     use different ESMTP options to different recipients you have to
     use the low-level methods such as `mail()', `rcpt()' and `data()'
     to send the message.)

          Note: The _from_addr_ and _to_addrs_ parameters are used to
          construct the message envelope used by the transport agents.
          The *note SMTP: 1d18. does not modify the message headers in
          any way.

     If there has been no previous `EHLO' or `HELO' command this
     session, this method tries ESMTP `EHLO' first. If the server does
     ESMTP, message size and each of the specified options will be
     passed to it (if the option is in the feature set the server
     advertises).  If `EHLO' fails, `HELO' will be tried and ESMTP
     options suppressed.

     This method will return normally if the mail is accepted for at
     least one recipient. Otherwise it will raise an exception.  That
     is, if this method does not raise an exception, then someone
     should get your mail. If this method does not raise an exception,
     it returns a dictionary, with one entry for each recipient that
     was refused.  Each entry contains a tuple of the SMTP error code
     and the accompanying error message sent by the server.

     This method may raise the following exceptions:

    *note SMTPRecipientsRefused: 1d22.
          All recipients were refused.  Nobody got the mail.  The
          `recipients' attribute of the exception object is a
          dictionary with information about the refused recipients
          (like the one returned when at least one recipient was
          accepted).

    *note SMTPHeloError: 1d24.
          The server didn't reply properly to the `HELO' greeting.

    *note SMTPSenderRefused: 1d21.
          The server didn't accept the _from_addr_.

    *note SMTPDataError: 1d23.
          The server replied with an unexpected error code (other than
          a refusal of a recipient).

     Unless otherwise noted, the connection will be open even after an
     exception is raised.

 -- Method: SMTP.quit ()
     Terminate the SMTP session and close the connection.  Return the
     result of the SMTP `QUIT' command.

     Changed in version 2.6: Return a value.

  Low-level methods corresponding to the standard SMTP/ESMTP commands
`HELP', `RSET', `NOOP', `MAIL', `RCPT', and `DATA' are also supported.
Normally these do not need to be called directly, so they are not
documented here.  For details, consult the module code.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc822.html

  (2) http://tools.ietf.org/html/rfc822.html

  (3) http://tools.ietf.org/html/rfc822.html


File: python.info,  Node: SMTP Example,  Prev: SMTP Objects,  Up: smtplib --- SMTP protocol client

5.20.12.2 SMTP Example
......................

This example prompts the user for addresses needed in the message
envelope ('To' and 'From' addresses), and the message to be delivered.
Note that the headers to be included with the message must be included
in the message as entered; this example doesn't do any processing of the RFC
822(1) headers.  In particular, the 'To' and 'From' addresses must be
included in the message headers explicitly.

    import smtplib

    def prompt(prompt):
        return raw_input(prompt).strip()

    fromaddr = prompt("From: ")
    toaddrs  = prompt("To: ").split()
    print "Enter message, end with ^D (Unix) or ^Z (Windows):"

    # Add the From: and To: headers at the start!
    msg = ("From: %s\r\nTo: %s\r\n\r\n"
           % (fromaddr, ", ".join(toaddrs)))
    while 1:
        try:
            line = raw_input()
        except EOFError:
            break
        if not line:
            break
        msg = msg + line

    print "Message length is " + repr(len(msg))

    server = smtplib.SMTP('localhost')
    server.set_debuglevel(1)
    server.sendmail(fromaddr, toaddrs, msg)
    server.quit()


     Note: In general, you will want to use the *note email: bc.
     package's features to construct an email message, which you can
     then convert to a string and send via `sendmail()'; see *note
     email; Examples: 17e7.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc822.html


File: python.info,  Node: smtpd --- SMTP Server,  Next: telnetlib --- Telnet client,  Prev: smtplib --- SMTP protocol client,  Up: Internet Protocols and Support

5.20.13 `smtpd' -- SMTP Server
------------------------------

This module offers several classes to implement SMTP servers.  One is a
generic do-nothing implementation, which can be overridden, while the
other two offer specific mail-sending strategies.

* Menu:

* SMTPServer Objects::
* DebuggingServer Objects::
* PureProxy Objects::
* MailmanProxy Objects::


File: python.info,  Node: SMTPServer Objects,  Next: DebuggingServer Objects,  Up: smtpd --- SMTP Server

5.20.13.1 SMTPServer Objects
............................

 -- Class: smtpd.SMTPServer (localaddr, remoteaddr)
     Create a new *note SMTPServer: 1d37. object, which binds to local
     address _localaddr_.  It will treat _remoteaddr_ as an upstream
     SMTP relayer.  It inherits from *note asyncore.dispatcher: 1725,
     and so will insert itself into *note asyncore: 11.'s event loop on
     instantiation.

      -- Method: process_message (peer, mailfrom, rcpttos, data)
          Raise *note NotImplementedError: 919. exception. Override
          this in subclasses to do something useful with this message.
          Whatever was passed in the constructor as _remoteaddr_ will
          be available as the `_remoteaddr' attribute. _peer_ is the
          remote host's address, _mailfrom_ is the envelope originator,
          _rcpttos_ are the envelope recipients and _data_ is a string
          containing the contents of the e-mail (which should be in RFC
          2822(1) format).

---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2822.html


File: python.info,  Node: DebuggingServer Objects,  Next: PureProxy Objects,  Prev: SMTPServer Objects,  Up: smtpd --- SMTP Server

5.20.13.2 DebuggingServer Objects
.................................

 -- Class: smtpd.DebuggingServer (localaddr, remoteaddr)
     Create a new debugging server.  Arguments are as per *note
     SMTPServer: 1d37.  Messages will be discarded, and printed on
     stdout.


File: python.info,  Node: PureProxy Objects,  Next: MailmanProxy Objects,  Prev: DebuggingServer Objects,  Up: smtpd --- SMTP Server

5.20.13.3 PureProxy Objects
...........................

 -- Class: smtpd.PureProxy (localaddr, remoteaddr)
     Create a new pure proxy server. Arguments are as per *note
     SMTPServer: 1d37.  Everything will be relayed to _remoteaddr_.
     Note that running this has a good chance to make you into an open
     relay, so please be careful.


File: python.info,  Node: MailmanProxy Objects,  Prev: PureProxy Objects,  Up: smtpd --- SMTP Server

5.20.13.4 MailmanProxy Objects
..............................

 -- Class: smtpd.MailmanProxy (localaddr, remoteaddr)
     Create a new pure proxy server. Arguments are as per *note
     SMTPServer: 1d37.  Everything will be relayed to _remoteaddr_,
     unless local mailman configurations knows about an address, in
     which case it will be handled via mailman.  Note that running this
     has a good chance to make you into an open relay, so please be
     careful.


File: python.info,  Node: telnetlib --- Telnet client,  Next: uuid --- UUID objects according to RFC 4122,  Prev: smtpd --- SMTP Server,  Up: Internet Protocols and Support

5.20.14 `telnetlib' -- Telnet client
------------------------------------

The *note telnetlib: 173. module provides a *note Telnet: 348. class
that implements the Telnet protocol.  See RFC 854(1) for details about
the protocol. In addition, it provides symbolic constants for the
protocol characters (see below), and for the telnet options. The
symbolic names of the telnet options follow the definitions in
`arpa/telnet.h', with the leading `TELOPT_' removed. For symbolic names
of options which are traditionally not included in `arpa/telnet.h', see
the module source itself.

  The symbolic constants for the telnet commands are: IAC, DONT, DO,
WONT, WILL, SE (Subnegotiation End), NOP (No Operation), DM (Data
Mark), BRK (Break), IP (Interrupt process), AO (Abort output), AYT (Are
You There), EC (Erase Character), EL (Erase Line), GA (Go Ahead), SB
(Subnegotiation Begin).

 -- Class: telnetlib.Telnet ([host[, port[, timeout]]])
     *note Telnet: 348. represents a connection to a Telnet server. The
     instance is initially not connected by default; the *note open():
     2cb. method must be used to establish a connection.
     Alternatively, the host name and optional port number can be
     passed to the constructor, to, in which case the connection to the
     server will be established before the constructor returns.  The
     optional _timeout_ parameter specifies a timeout in seconds for
     blocking operations like the connection attempt (if not specified,
     the global default timeout setting will be used).

     Do not reopen an already connected instance.

     This class has many `read_*()' methods.  Note that some of them
     raise *note EOFError: 854. when the end of the connection is read,
     because they can return an empty string for other reasons.  See
     the individual descriptions below.

     Changed in version 2.6: _timeout_ was added.

See also
........

RFC 854(2) - Telnet Protocol Specification
     Definition of the Telnet protocol.

* Menu:

* Telnet Objects::
* Telnet Example::

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc854.html

  (2) http://tools.ietf.org/html/rfc854.html


File: python.info,  Node: Telnet Objects,  Next: Telnet Example,  Up: telnetlib --- Telnet client

5.20.14.1 Telnet Objects
........................

*note Telnet: 348. instances have the following methods:

 -- Method: Telnet.read_until (expected[, timeout])
     Read until a given string, _expected_, is encountered or until
     _timeout_ seconds have passed.

     When no match is found, return whatever is available instead,
     possibly the empty string.  Raise *note EOFError: 854. if the
     connection is closed and no cooked data is available.

 -- Method: Telnet.read_all ()
     Read all data until EOF; block until connection closed.

 -- Method: Telnet.read_some ()
     Read at least one byte of cooked data unless EOF is hit. Return
     `''' if EOF is hit.  Block if no data is immediately available.

 -- Method: Telnet.read_very_eager ()
     Read everything that can be without blocking in I/O (eager).

     Raise *note EOFError: 854. if connection closed and no cooked data
     available.  Return `''' if no cooked data available otherwise. Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_eager ()
     Read readily available data.

     Raise *note EOFError: 854. if connection closed and no cooked data
     available.  Return `''' if no cooked data available otherwise. Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_lazy ()
     Process and return data already in the queues (lazy).

     Raise *note EOFError: 854. if connection closed and no data
     available. Return `''' if no cooked data available otherwise.  Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_very_lazy ()
     Return any data available in the cooked queue (very lazy).

     Raise *note EOFError: 854. if connection closed and no data
     available. Return `''' if no cooked data available otherwise.
     This method never blocks.

 -- Method: Telnet.read_sb_data ()
     Return the data collected between a SB/SE pair (suboption
     begin/end). The callback should access these data when it was
     invoked with a `SE' command.  This method never blocks.

     New in version 2.3.

 -- Method: Telnet.open (host[, port[, timeout]])
     Connect to a host. The optional second argument is the port
     number, which defaults to the standard Telnet port (23). The
     optional _timeout_ parameter specifies a timeout in seconds for
     blocking operations like the connection attempt (if not specified,
     the global default timeout setting will be used).

     Do not try to reopen an already connected instance.

     Changed in version 2.6: _timeout_ was added.

 -- Method: Telnet.msg (msg[, *args])
     Print a debug message when the debug level is `>' 0. If extra
     arguments are present, they are substituted in the message using
     the standard string formatting operator.

 -- Method: Telnet.set_debuglevel (debuglevel)
     Set the debug level.  The higher the value of _debuglevel_, the
     more debug output you get (on `sys.stdout').

 -- Method: Telnet.close ()
     Close the connection.

 -- Method: Telnet.get_socket ()
     Return the socket object used internally.

 -- Method: Telnet.fileno ()
     Return the file descriptor of the socket object used internally.

 -- Method: Telnet.write (buffer)
     Write a string to the socket, doubling any IAC characters. This
     can block if the connection is blocked.  May raise *note
     socket.error: 370. if the connection is closed.

 -- Method: Telnet.interact ()
     Interaction function, emulates a very dumb Telnet client.

 -- Method: Telnet.mt_interact ()
     Multithreaded version of *note interact(): 1d52.

 -- Method: Telnet.expect (list[, timeout])
     Read until one from a list of a regular expressions matches.

     The first argument is a list of regular expressions, either
     compiled (*note re.RegexObject: 978. instances) or uncompiled
     (strings). The optional second argument is a timeout, in seconds;
     the default is to block indefinitely.

     Return a tuple of three items: the index in the list of the first
     regular expression that matches; the match object returned; and
     the text read up till and including the match.

     If end of file is found and no text was read, raise *note
     EOFError: 854.  Otherwise, when nothing matches, return `(-1,
     None, text)' where _text_ is the text received so far (may be the
     empty string if a timeout happened).

     If a regular expression ends with a greedy match (such as `.*') or
     if more than one expression can match the same input, the results
     are non-deterministic, and may depend on the I/O timing.

 -- Method: Telnet.set_option_negotiation_callback (callback)
     Each time a telnet option is read on the input flow, this
     _callback_ (if set) is called with the following parameters :
     callback(telnet socket, command (DO/DONT/WILL/WONT), option).  No
     other action is done afterwards by telnetlib.


File: python.info,  Node: Telnet Example,  Prev: Telnet Objects,  Up: telnetlib --- Telnet client

5.20.14.2 Telnet Example
........................

A simple example illustrating typical use:

    import getpass
    import sys
    import telnetlib

    HOST = "localhost"
    user = raw_input("Enter your remote account: ")
    password = getpass.getpass()

    tn = telnetlib.Telnet(HOST)

    tn.read_until("login: ")
    tn.write(user + "\n")
    if password:
        tn.read_until("Password: ")
        tn.write(password + "\n")

    tn.write("ls\n")
    tn.write("exit\n")

    print tn.read_all()



File: python.info,  Node: uuid --- UUID objects according to RFC 4122,  Next: urlparse --- Parse URLs into components,  Prev: telnetlib --- Telnet client,  Up: Internet Protocols and Support

5.20.15 `uuid' -- UUID objects according to RFC 4122
----------------------------------------------------

New in version 2.5.

  This module provides immutable *note UUID: 1d5a. objects (the *note
UUID: 1d5a. class) and the functions *note uuid1(): 1d5b, *note
uuid3(): 1d5c, *note uuid4(): 1d5d, *note uuid5(): 1d5e. for generating
version 1, 3, 4, and 5 UUIDs as specified in RFC 4122(1).

  If all you want is a unique ID, you should probably call *note
uuid1(): 1d5b. or *note uuid4(): 1d5d.  Note that *note uuid1(): 1d5b.
may compromise privacy since it creates a UUID containing the
computer's network address.  *note uuid4(): 1d5d. creates a random UUID.

 -- Class: uuid.UUID ([hex[, bytes[, bytes_le[, fields[, int[,
          version]]]]]])
     Create a UUID from either a string of 32 hexadecimal digits, a
     string of 16 bytes as the _bytes_ argument, a string of 16 bytes
     in little-endian order as the _bytes_le_ argument, a tuple of six
     integers (32-bit _time_low_, 16-bit _time_mid_, 16-bit
     _time_hi_version_, 8-bit _clock_seq_hi_variant_, 8-bit
     _clock_seq_low_, 48-bit _node_) as the _fields_ argument, or a
     single 128-bit integer as the _int_ argument.  When a string of
     hex digits is given, curly braces, hyphens, and a URN prefix are
     all optional.  For example, these expressions all yield the same
     UUID:

         UUID('{12345678-1234-5678-1234-567812345678}')
         UUID('12345678123456781234567812345678')
         UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
         UUID(bytes='\x12\x34\x56\x78'*4)
         UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
                       '\x12\x34\x56\x78\x12\x34\x56\x78')
         UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
         UUID(int=0x12345678123456781234567812345678)

     Exactly one of _hex_, _bytes_, _bytes_le_, _fields_, or _int_ must
     be given.  The _version_ argument is optional; if given, the
     resulting UUID will have its variant and version number set
     according to RFC 4122, overriding bits in the given _hex_,
     _bytes_, _bytes_le_, _fields_, or _int_.

  *note UUID: 1d5a. instances have these read-only attributes:

 -- Attribute: UUID.bytes
     The UUID as a 16-byte string (containing the six integer fields in
     big-endian byte order).

 -- Attribute: UUID.bytes_le
     The UUID as a 16-byte string (with _time_low_, _time_mid_, and
     _time_hi_version_ in little-endian byte order).

 -- Attribute: UUID.fields
     A tuple of the six integer fields of the UUID, which are also
     available as six individual attributes and two derived attributes:

     Field                              Meaning
     ----------------------------------------------------------------------- 
     `time_low'                         the first 32 bits of the UUID
     `time_mid'                         the next 16 bits of the UUID
     `time_hi_version'                  the next 16 bits of the UUID
     `clock_seq_hi_variant'             the next 8 bits of the UUID
     `clock_seq_low'                    the next 8 bits of the UUID
     `node'                             the last 48 bits of the UUID
     *note time: 17b.                   the 60-bit timestamp
     `clock_seq'                        the 14-bit sequence number


 -- Attribute: UUID.hex
     The UUID as a 32-character hexadecimal string.

 -- Attribute: UUID.int
     The UUID as a 128-bit integer.

 -- Attribute: UUID.urn
     The UUID as a URN as specified in RFC 4122.

 -- Attribute: UUID.variant
     The UUID variant, which determines the internal layout of the
     UUID. This will be one of the integer constants *note
     RESERVED_NCS: 1d66, *note RFC_4122: 1d67, *note
     RESERVED_MICROSOFT: 1d68, or *note RESERVED_FUTURE: 1d69.

 -- Attribute: UUID.version
     The UUID version number (1 through 5, meaningful only when the
     variant is *note RFC_4122: 1d67.).

  The *note uuid: 191. module defines the following functions:

 -- Function: uuid.getnode ()
     Get the hardware address as a 48-bit positive integer.  The first
     time this runs, it may launch a separate program, which could be
     quite slow.  If all attempts to obtain the hardware address fail,
     we choose a random 48-bit number with its eighth bit set to 1 as
     recommended in RFC 4122.  "Hardware address" means the MAC address
     of a network interface, and on a machine with multiple network
     interfaces the MAC address of any one of them may be returned.

 -- Function: uuid.uuid1 ([node[, clock_seq]])
     Generate a UUID from a host ID, sequence number, and the current
     time. If _node_ is not given, *note getnode(): 1d6b. is used to
     obtain the hardware address. If _clock_seq_ is given, it is used
     as the sequence number; otherwise a random 14-bit sequence number
     is chosen.

 -- Function: uuid.uuid3 (namespace, name)
     Generate a UUID based on the MD5 hash of a namespace identifier
     (which is a UUID) and a name (which is a string).

 -- Function: uuid.uuid4 ()
     Generate a random UUID.

 -- Function: uuid.uuid5 (namespace, name)
     Generate a UUID based on the SHA-1 hash of a namespace identifier
     (which is a UUID) and a name (which is a string).

  The *note uuid: 191. module defines the following namespace
identifiers for use with *note uuid3(): 1d5c. or *note uuid5(): 1d5e.

 -- Data: uuid.NAMESPACE_DNS
     When this namespace is specified, the _name_ string is a
     fully-qualified domain name.

 -- Data: uuid.NAMESPACE_URL
     When this namespace is specified, the _name_ string is a URL.

 -- Data: uuid.NAMESPACE_OID
     When this namespace is specified, the _name_ string is an ISO OID.

 -- Data: uuid.NAMESPACE_X500
     When this namespace is specified, the _name_ string is an X.500 DN
     in DER or a text output format.

  The *note uuid: 191. module defines the following constants for the
possible values of the `variant' attribute:

 -- Data: uuid.RESERVED_NCS
     Reserved for NCS compatibility.

 -- Data: uuid.RFC_4122
     Specifies the UUID layout given in RFC 4122(2).

 -- Data: uuid.RESERVED_MICROSOFT
     Reserved for Microsoft compatibility.

 -- Data: uuid.RESERVED_FUTURE
     Reserved for future definition.

See also
........

RFC 4122(3) - A Universally Unique IDentifier (UUID) URN Namespace
     This specification defines a Uniform Resource Name namespace for
     UUIDs, the internal format of UUIDs, and methods of generating
     UUIDs.

* Menu:

* Example: Example<10>.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc4122.html

  (2) http://tools.ietf.org/html/rfc4122.html

  (3) http://tools.ietf.org/html/rfc4122.html


File: python.info,  Node: Example<10>,  Up: uuid --- UUID objects according to RFC 4122

5.20.15.1 Example
.................

Here are some examples of typical usage of the *note uuid: 191. module:

    >>> import uuid

    # make a UUID based on the host ID and current time
    >>> uuid.uuid1()
    UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

    # make a UUID using an MD5 hash of a namespace UUID and a name
    >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
    UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

    # make a random UUID
    >>> uuid.uuid4()
    UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

    # make a UUID using a SHA-1 hash of a namespace UUID and a name
    >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
    UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

    # make a UUID from a string of hex digits (braces and hyphens ignored)
    >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')

    # convert a UUID to a string of hex digits in standard form
    >>> str(x)
    '00010203-0405-0607-0809-0a0b0c0d0e0f'

    # get the raw 16 bytes of the UUID
    >>> x.bytes
    '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'

    # make a UUID from a 16-byte string
    >>> uuid.UUID(bytes=x.bytes)
    UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')



File: python.info,  Node: urlparse --- Parse URLs into components,  Next: SocketServer --- A framework for network servers,  Prev: uuid --- UUID objects according to RFC 4122,  Up: Internet Protocols and Support

5.20.16 `urlparse' -- Parse URLs into components
------------------------------------------------

     Note: The *note urlparse: 18b. module is renamed to `urllib.parse'
     in Python 3.0.  The *note 2to3: bbf. tool will automatically adapt
     imports when converting your sources to 3.0.

This module defines a standard interface to break Uniform Resource
Locator (URL) strings up in components (addressing scheme, network
location, path etc.), to combine the components back into a URL string,
and to convert a "relative URL" to an absolute URL given a "base URL."

  The module has been designed to match the Internet RFC on Relative
Uniform Resource Locators (and discovered a bug in an earlier draft!).
It supports the following URL schemes: `file', `ftp', `gopher', `hdl',
`http', `https', `imap', `mailto', `mms', `news',  `nntp', `prospero',
`rsync', `rtsp', `rtspu',  `sftp', `shttp', `sip', `sips', `snews',
`svn',  `svn+ssh', `telnet', `wais'.

  New in version 2.5: Support for the `sftp' and `sips' schemes.

See also
........

Latest version of the urlparse module Python source code(1)

  The *note urlparse: 18b. module defines the following functions:

 -- Function: urlparse.urlparse (urlstring[, scheme[, allow_fragments]])
     Parse a URL into six components, returning a 6-tuple.  This
     corresponds to the general structure of a URL:
     `scheme://netloc/path;parameters?query#fragment'.  Each tuple item
     is a string, possibly empty. The components are not broken up in
     smaller parts (for example, the network location is a single
     string), and % escapes are not expanded. The delimiters as shown
     above are not part of the result, except for a leading slash in
     the _path_ component, which is retained if present.  For example:

         >>> from urlparse import urlparse
         >>> o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')
         >>> o   # doctest: +NORMALIZE_WHITESPACE
         ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
                     params='', query='', fragment='')
         >>> o.scheme
         'http'
         >>> o.port
         80
         >>> o.geturl()
         'http://www.cwi.nl:80/%7Eguido/Python.html'

     Following the syntax specifications in RFC 1808(2), urlparse
     recognizes a netloc only if it is properly introduced by '//'.
     Otherwise the input is presumed to be a relative URL and thus to
     start with a path component.

         >>> from urlparse import urlparse
         >>> urlparse('//www.cwi.nl:80/%7Eguido/Python.html')
         ParseResult(scheme='', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
                    params='', query='', fragment='')
         >>> urlparse('www.cwi.nl:80/%7Eguido/Python.html')
         ParseResult(scheme='', netloc='', path='www.cwi.nl:80/%7Eguido/Python.html',
                    params='', query='', fragment='')
         >>> urlparse('help/Python.html')
         ParseResult(scheme='', netloc='', path='help/Python.html', params='',
                    query='', fragment='')

     If the _scheme_ argument is specified, it gives the default
     addressing scheme, to be used only if the URL does not specify
     one.  The default value for this argument is the empty string.

     If the _allow_fragments_ argument is false, fragment identifiers
     are not allowed, even if the URL's addressing scheme normally does
     support them.  The default value for this argument is *note True:
     39f.

     The return value is actually an instance of a subclass of *note
     tuple: 3f7.  This class has the following additional read-only
     convenience attributes:

     Attribute              Index       Value                          Value if not present
     --------------------------------------------------------------------------------------------- 
     `scheme'               0           URL scheme specifier           empty string
     `netloc'               1           Network location part          empty string
     `path'                 2           Hierarchical path              empty string
     `params'               3           Parameters for last path       empty string
                                        element                        
     `query'                4           Query component                empty string
     `fragment'             5           Fragment identifier            empty string
     `username'                         User name                      *note None: 389.
     `password'                         Password                       *note None: 389.
     `hostname'                         Host name (lower case)         *note None: 389.
     `port'                             Port number as integer, if     *note None: 389.
                                        present                        

     See section *note Results of urlparse() and urlsplit(): 1d75. for
     more information on the result object.

     Changed in version 2.5: Added attributes to return value.

     Changed in version 2.7: Added IPv6 URL parsing capabilities.

 -- Function: urlparse.parse_qs (qs[, keep_blank_values[,
          strict_parsing]])
     Parse a query string given as a string argument (data of type
     `application/x-www-form-urlencoded').  Data are returned as a
     dictionary.  The dictionary keys are the unique query variable
     names and the values are lists of values for each name.

     The optional argument _keep_blank_values_ is a flag indicating
     whether blank values in percent-encoded queries should be treated
     as blank strings.   A true value indicates that blanks should be
     retained as  blank strings.  The default false value indicates
     that blank values are to be ignored and treated as if they were
     not included.

     The optional argument _strict_parsing_ is a flag indicating what
     to do with parsing errors.  If false (the default), errors are
     silently ignored.  If true, errors raise a *note ValueError: 233.
     exception.

     Use the *note urllib.urlencode(): 1bbb. function to convert such
     dictionaries into query strings.

     New in version 2.6: Copied from the *note cgi: 5c. module.

 -- Function: urlparse.parse_qsl (qs[, keep_blank_values[,
          strict_parsing]])
     Parse a query string given as a string argument (data of type
     `application/x-www-form-urlencoded').  Data are returned as a list
     of name, value pairs.

     The optional argument _keep_blank_values_ is a flag indicating
     whether blank values in percent-encoded queries should be treated
     as blank strings.   A true value indicates that blanks should be
     retained as  blank strings.  The default false value indicates
     that blank values are to be ignored and treated as if they were
     not included.

     The optional argument _strict_parsing_ is a flag indicating what
     to do with parsing errors.  If false (the default), errors are
     silently ignored.  If true, errors raise a *note ValueError: 233.
     exception.

     Use the *note urllib.urlencode(): 1bbb. function to convert such
     lists of pairs into query strings.

     New in version 2.6: Copied from the *note cgi: 5c. module.

 -- Function: urlparse.urlunparse (parts)
     Construct a URL from a tuple as returned by `urlparse()'. The
     _parts_ argument can be any six-item iterable. This may result in
     a slightly different, but equivalent URL, if the URL that was
     parsed originally had unnecessary delimiters (for example, a ?
     with an empty query; the RFC states that these are equivalent).

 -- Function: urlparse.urlsplit (urlstring[, scheme[, allow_fragments]])
     This is similar to *note urlparse(): 18b, but does not split the
     params from the URL.  This should generally be used instead of
     *note urlparse(): 18b. if the more recent URL syntax allowing
     parameters to be applied to each segment of the _path_ portion of
     the URL (see RFC 2396(3)) is wanted.  A separate function is
     needed to separate the path segments and parameters.  This
     function returns a 5-tuple: (addressing scheme, network location,
     path, query, fragment identifier).

     The return value is actually an instance of a subclass of *note
     tuple: 3f7.  This class has the following additional read-only
     convenience attributes:

     Attribute              Index       Value                         Value if not present
     -------------------------------------------------------------------------------------------- 
     `scheme'               0           URL scheme specifier          empty string
     `netloc'               1           Network location part         empty string
     `path'                 2           Hierarchical path             empty string
     `query'                3           Query component               empty string
     `fragment'             4           Fragment identifier           empty string
     `username'                         User name                     *note None: 389.
     `password'                         Password                      *note None: 389.
     `hostname'                         Host name (lower case)        *note None: 389.
     `port'                             Port number as integer, if    *note None: 389.
                                        present                       

     See section *note Results of urlparse() and urlsplit(): 1d75. for
     more information on the result object.

     New in version 2.2.

     Changed in version 2.5: Added attributes to return value.

 -- Function: urlparse.urlunsplit (parts)
     Combine the elements of a tuple as returned by *note urlsplit():
     266. into a complete URL as a string. The _parts_ argument can be
     any five-item iterable. This may result in a slightly different,
     but equivalent URL, if the URL that was parsed originally had
     unnecessary delimiters (for example, a ? with an empty query; the
     RFC states that these are equivalent).

     New in version 2.2.

 -- Function: urlparse.urljoin (base, url[, allow_fragments])
     Construct a full ("absolute") URL by combining a "base URL"
     (_base_) with another URL (_url_).  Informally, this uses
     components of the base URL, in particular the addressing scheme,
     the network location and (part of) the path, to provide missing
     components in the relative URL.  For example:

         >>> from urlparse import urljoin
         >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html', 'FAQ.html')
         'http://www.cwi.nl/%7Eguido/FAQ.html'

     The _allow_fragments_ argument has the same meaning and default as
     for *note urlparse(): 18b.

          Note: If _url_ is an absolute URL (that is, starting with
          `//' or `scheme://'), the _url_'s host name and/or scheme
          will be present in the result.  For example:

         >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html',
         ...         '//www.python.org/%7Eguido')
         'http://www.python.org/%7Eguido'

     If you do not want that behavior, preprocess the _url_ with *note
     urlsplit(): 266. and *note urlunsplit(): 1d77, removing possible
     _scheme_ and _netloc_ parts.

 -- Function: urlparse.urldefrag (url)
     If _url_ contains a fragment identifier, returns a modified
     version of _url_ with no fragment identifier, and the fragment
     identifier as a separate string.  If there is no fragment
     identifier in _url_, returns _url_ unmodified and an empty string.

See also
........

RFC 3986(4) - Uniform Resource Identifiers
     This is the current standard (STD66). Any changes to urlparse
     module should conform to this. Certain deviations could be
     observed, which are mostly due backward compatiblity purposes and
     for certain de-facto parsing requirements as commonly observed in
     major browsers.

RFC 2732(5) - Format for Literal IPv6 Addresses in URL's.
     This specifies the parsing requirements of IPv6 URLs.

RFC 2396(6) - Uniform Resource Identifiers (URI): Generic Syntax
     Document describing the generic syntactic requirements for both
     Uniform Resource Names (URNs) and Uniform Resource Locators (URLs).

RFC 2368(7) - The mailto URL scheme.
     Parsing requirements for mailto url schemes.

RFC 1808(8) - Relative Uniform Resource Locators
     This Request For Comments includes the rules for joining an
     absolute and a relative URL, including a fair number of "Abnormal
     Examples" which govern the treatment of border cases.

RFC 1738(9) - Uniform Resource Locators (URL)
     This specifies the formal syntax and semantics of absolute URLs.

* Menu:

* Results of urlparse() and urlsplit(): Results of urlparse and urlsplit.

  ---------- Footnotes ----------

  (1)
http://svn.python.org/view/python/branches/release27-maint/Lib/urlparse.py?view=markup

  (2) http://tools.ietf.org/html/rfc1808.html

  (3) http://tools.ietf.org/html/rfc2396.html

  (4) http://tools.ietf.org/html/rfc3986.html

  (5) http://tools.ietf.org/html/rfc2732.html

  (6) http://tools.ietf.org/html/rfc2396.html

  (7) http://tools.ietf.org/html/rfc2368.html

  (8) http://tools.ietf.org/html/rfc1808.html

  (9) http://tools.ietf.org/html/rfc1738.html


File: python.info,  Node: Results of urlparse and urlsplit,  Up: urlparse --- Parse URLs into components

5.20.16.1 Results of `urlparse()' and `urlsplit()'
..................................................

The result objects from the *note urlparse(): 18b. and *note
urlsplit(): 266. functions are subclasses of the *note tuple: 3f7.
type.  These subclasses add the attributes described in those
functions, as well as provide an additional method:

 -- Method: ParseResult.geturl ()
     Return the re-combined version of the original URL as a string.
     This may differ from the original URL in that the scheme will
     always be normalized to lower case and empty components may be
     dropped. Specifically, empty parameters, queries, and fragment
     identifiers will be removed.

     The result of this method is a fixpoint if passed back through the
     original parsing function:

         >>> import urlparse
         >>> url = 'HTTP://www.Python.org/doc/#'


         >>> r1 = urlparse.urlsplit(url)
         >>> r1.geturl()
         'http://www.Python.org/doc/'


         >>> r2 = urlparse.urlsplit(r1.geturl())
         >>> r2.geturl()
         'http://www.Python.org/doc/'

     New in version 2.5.

  The following classes provide the implementations of the parse
results:

 -- Class: urlparse.BaseResult
     Base class for the concrete result classes.  This provides most of
     the attribute definitions.  It does not provide a `geturl()'
     method.  It is derived from *note tuple: 3f7, but does not
     override the *note __init__(): 36b. or *note __new__(): 6d3.
     methods.

 -- Class: urlparse.ParseResult (scheme, netloc, path, params, query,
          fragment)
     Concrete class for *note urlparse(): 18b. results.  The *note
     __new__(): 6d3. method is overridden to support checking that the
     right number of arguments are passed.

 -- Class: urlparse.SplitResult (scheme, netloc, path, query, fragment)
     Concrete class for *note urlsplit(): 266. results.  The *note
     __new__(): 6d3. method is overridden to support checking that the
     right number of arguments are passed.


File: python.info,  Node: SocketServer --- A framework for network servers,  Next: BaseHTTPServer --- Basic HTTP server,  Prev: urlparse --- Parse URLs into components,  Up: Internet Protocols and Support

5.20.17 `SocketServer' -- A framework for network servers
---------------------------------------------------------

     Note: The *note SocketServer: 15e. module has been renamed to
     `socketserver' in Python 3.0.  The *note 2to3: bbf. tool will
     automatically adapt imports when converting your sources to 3.0.

The *note SocketServer: 15e. module simplifies the task of writing
network servers.

  There are four basic server classes: `TCPServer' uses the Internet TCP
protocol, which provides for continuous streams of data between the
client and server.  `UDPServer' uses datagrams, which are discrete
packets of information that may arrive out of order or be lost while in
transit.  The more infrequently used `UnixStreamServer' and
`UnixDatagramServer' classes are similar, but use Unix domain sockets;
they're not available on non-Unix platforms.  For more details on
network programming, consult a book such as W. Richard Steven's UNIX
Network Programming or Ralph Davis's Win32 Network Programming.

  These four classes process requests _synchronously_; each request
must be completed before the next request can be started.  This isn't
suitable if each request takes a long time to complete, because it
requires a lot of computation, or because it returns a lot of data
which the client is slow to process.  The solution is to create a
separate process or thread to handle each request; the `ForkingMixIn'
and `ThreadingMixIn' mix-in classes can be used to support asynchronous
behaviour.

  Creating a server requires several steps.  First, you must create a
request handler class by subclassing the `BaseRequestHandler' class and
overriding its `handle()' method; this method will process incoming
requests.  Second, you must instantiate one of the server classes,
passing it the server's address and the request handler class.
Finally, call the `handle_request()' or `serve_forever()' method of the
server object to process one or many requests.

  When inheriting from `ThreadingMixIn' for threaded connection
behavior, you should explicitly declare how you want your threads to
behave on an abrupt shutdown. The `ThreadingMixIn' class defines an
attribute _daemon_threads_, which indicates whether or not the server
should wait for thread termination. You should set the flag explicitly
if you would like threads to behave autonomously; the default is *note
False: 3a0, meaning that Python will not exit until all threads created
by `ThreadingMixIn' have exited.

  Server classes have the same external methods and attributes, no
matter what network protocol they use.

* Menu:

* Server Creation Notes::
* Server Objects::
* RequestHandler Objects::
* Examples: Examples<14>.


File: python.info,  Node: Server Creation Notes,  Next: Server Objects,  Up: SocketServer --- A framework for network servers

5.20.17.1 Server Creation Notes
...............................

There are five classes in an inheritance diagram, four of which
represent synchronous servers of four types:

    +------------+
    | BaseServer |
    +------------+
          |
          v
    +-----------+        +------------------+
    | TCPServer |------->| UnixStreamServer |
    +-----------+        +------------------+
          |
          v
    +-----------+        +--------------------+
    | UDPServer |------->| UnixDatagramServer |
    +-----------+        +--------------------+

Note that `UnixDatagramServer' derives from `UDPServer', not from
`UnixStreamServer' -- the only difference between an IP and a Unix
stream server is the address family, which is simply repeated in both
Unix server classes.

  Forking and threading versions of each type of server can be created
using the `ForkingMixIn' and `ThreadingMixIn' mix-in classes.  For
instance, a threading UDP server class is created as follows:

    class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass

The mix-in class must come first, since it overrides a method defined in
`UDPServer'.  Setting the various member variables also changes the
behavior of the underlying server mechanism.

  To implement a service, you must derive a class from
`BaseRequestHandler' and redefine its `handle()' method.  You can then
run various versions of the service by combining one of the server
classes with your request handler class.  The request handler class
must be different for datagram or stream services.  This can be hidden
by using the handler subclasses `StreamRequestHandler' or
`DatagramRequestHandler'.

  Of course, you still have to use your head!  For instance, it makes
no sense to use a forking server if the service contains state in
memory that can be modified by different requests, since the
modifications in the child process would never reach the initial state
kept in the parent process and passed to each child.  In this case, you
can use a threading server, but you will probably have to use locks to
protect the integrity of the shared data.

  On the other hand, if you are building an HTTP server where all data
is stored externally (for instance, in the file system), a synchronous
class will essentially render the service "deaf" while one request is
being handled - which may be for a very long time if a client is slow
to receive all the data it has requested.  Here a threading or forking
server is appropriate.

  In some cases, it may be appropriate to process part of a request
synchronously, but to finish processing in a forked child depending on
the request data.  This can be implemented by using a synchronous
server and doing an explicit fork in the request handler class
`handle()' method.

  Another approach to handling multiple simultaneous requests in an
environment that supports neither threads nor `fork()' (or where these
are too expensive or inappropriate for the service) is to maintain an
explicit table of partially finished requests and to use *note
select(): 14f. to decide which request to work on next (or whether to
handle a new incoming request).  This is particularly important for
stream services where each client can potentially be connected for a
long time (if threads or subprocesses cannot be used). See *note
asyncore: 11. for another way to manage this.


File: python.info,  Node: Server Objects,  Next: RequestHandler Objects,  Prev: Server Creation Notes,  Up: SocketServer --- A framework for network servers

5.20.17.2 Server Objects
........................

 -- Class: SocketServer.BaseServer
     This is the superclass of all Server objects in the module.  It
     defines the interface, given below, but does not implement most of
     the methods, which is done in subclasses.

 -- Method: BaseServer.fileno ()
     Return an integer file descriptor for the socket on which the
     server is listening.  This function is most commonly passed to
     *note select.select(): 1537, to allow monitoring multiple servers
     in the same process.

 -- Method: BaseServer.handle_request ()
     Process a single request.  This function calls the following
     methods in order: *note get_request(): 1d85, *note
     verify_request(): 1d86, and *note process_request(): 1d87.  If the
     user-provided `handle()' method of the handler class raises an
     exception, the server's *note handle_error(): 1d88. method will be
     called.  If no request is received within `self.timeout' seconds,
     *note handle_timeout(): 253. will be called and *note
     handle_request(): 254.  will return.

 -- Method: BaseServer.serve_forever (poll_interval=0.5)
     Handle requests until an explicit *note shutdown(): 1d8a. request.
     Polls for shutdown every _poll_interval_ seconds.

 -- Method: BaseServer.shutdown ()
     Tells the *note serve_forever(): 1d89. loop to stop and waits
     until it does.

     New in version 2.6.

 -- Attribute: BaseServer.address_family
     The family of protocols to which the server's socket belongs.
     Common examples are *note socket.AF_INET: 16a7. and *note
     socket.AF_UNIX: 16a6.

 -- Attribute: BaseServer.RequestHandlerClass
     The user-provided request handler class; an instance of this class
     is created for each request.

 -- Attribute: BaseServer.server_address
     The address on which the server is listening.  The format of
     addresses varies depending on the protocol family; see the
     documentation for the socket module for details.  For Internet
     protocols, this is a tuple containing a string giving the address,
     and an integer port number: `('127.0.0.1', 80)', for example.

 -- Attribute: BaseServer.socket
     The socket object on which the server will listen for incoming
     requests.

  The server classes support the following class variables:

 -- Attribute: BaseServer.allow_reuse_address
     Whether the server will allow the reuse of an address. This
     defaults to *note False: 3a0, and can be set in subclasses to
     change the policy.

 -- Attribute: BaseServer.request_queue_size
     The size of the request queue.  If it takes a long time to process
     a single request, any requests that arrive while the server is
     busy are placed into a queue, up to *note request_queue_size:
     1d90. requests.  Once the queue is full, further requests from
     clients will get a "Connection denied" error.  The default value
     is usually 5, but this can be overridden by subclasses.

 -- Attribute: BaseServer.socket_type
     The type of socket used by the server; *note socket.SOCK_STREAM:
     1d9. and *note socket.SOCK_DGRAM: 1d8. are two common values.

 -- Attribute: BaseServer.timeout
     Timeout duration, measured in seconds, or *note None: 389. if no
     timeout is desired.  If *note handle_request(): 254. receives no
     incoming requests within the timeout period, the *note
     handle_timeout(): 253. method is called.

  There are various server methods that can be overridden by subclasses
of base server classes like `TCPServer'; these methods aren't useful to
external users of the server object.

 -- Method: BaseServer.finish_request ()
     Actually processes the request by instantiating *note
     RequestHandlerClass: 1d8c. and calling its `handle()' method.

 -- Method: BaseServer.get_request ()
     Must accept a request from the socket, and return a 2-tuple
     containing the _new_ socket object to be used to communicate with
     the client, and the client's address.

 -- Method: BaseServer.handle_error (request, client_address)
     This function is called if the *note RequestHandlerClass: 1d8c.'s
     `handle()' method raises an exception.  The default action is to
     print the traceback to standard output and continue handling
     further requests.

 -- Method: BaseServer.handle_timeout ()
     This function is called when the *note timeout: 252. attribute has
     been set to a value other than *note None: 389. and the timeout
     period has passed with no requests being received.  The default
     action for forking servers is to collect the status of any child
     processes that have exited, while in threading servers this method
     does nothing.

 -- Method: BaseServer.process_request (request, client_address)
     Calls *note finish_request(): 1d92. to create an instance of the
     *note RequestHandlerClass: 1d8c.  If desired, this function can
     create a new process or thread to handle the request; the
     `ForkingMixIn' and `ThreadingMixIn' classes do this.

 -- Method: BaseServer.server_activate ()
     Called by the server's constructor to activate the server.  The
     default behavior just `listen()'s to the server's socket. May be
     overridden.

 -- Method: BaseServer.server_bind ()
     Called by the server's constructor to bind the socket to the
     desired address.  May be overridden.

 -- Method: BaseServer.verify_request (request, client_address)
     Must return a Boolean value; if the value is *note True: 39f, the
     request will be processed, and if it's *note False: 3a0, the
     request will be denied. This function can be overridden to
     implement access controls for a server. The default implementation
     always returns *note True: 39f.


File: python.info,  Node: RequestHandler Objects,  Next: Examples<14>,  Prev: Server Objects,  Up: SocketServer --- A framework for network servers

5.20.17.3 RequestHandler Objects
................................

The request handler class must define a new `handle()' method, and can
override any of the following methods.  A new instance is created for
each request.

 -- Method: RequestHandler.finish ()
     Called after the *note handle(): 1d97. method to perform any
     clean-up actions required.  The default implementation does
     nothing.  If *note setup(): 1d98. or *note handle(): 1d97. raise
     an exception, this function will not be called.

 -- Method: RequestHandler.handle ()
     This function must do all the work required to service a request.
     The default implementation does nothing.  Several instance
     attributes are available to it; the request is available as
     `self.request'; the client address as `self.client_address'; and
     the server instance as `self.server', in case it needs access to
     per-server information.

     The type of `self.request' is different for datagram or stream
     services.  For stream services, `self.request' is a socket object;
     for datagram services, `self.request' is a pair of string and
     socket.  However, this can be hidden by using the request handler
     subclasses `StreamRequestHandler' or `DatagramRequestHandler',
     which override the *note setup(): 1d98. and *note finish(): 1d96.
     methods, and provide `self.rfile' and `self.wfile' attributes.
     `self.rfile' and `self.wfile' can be read or written,
     respectively, to get the request data or return data to the client.

 -- Method: RequestHandler.setup ()
     Called before the *note handle(): 1d97. method to perform any
     initialization actions required.  The default implementation does
     nothing.


File: python.info,  Node: Examples<14>,  Prev: RequestHandler Objects,  Up: SocketServer --- A framework for network servers

5.20.17.4 Examples
..................

* Menu:

* SocketServer.TCPServer Example: SocketServer TCPServer Example.
* SocketServer.UDPServer Example: SocketServer UDPServer Example.
* Asynchronous Mixins::


File: python.info,  Node: SocketServer TCPServer Example,  Next: SocketServer UDPServer Example,  Up: Examples<14>

5.20.17.5 `SocketServer.TCPServer' Example
..........................................

This is the server side:

    import SocketServer

    class MyTCPHandler(SocketServer.BaseRequestHandler):
        """
        The RequestHandler class for our server.

        It is instantiated once per connection to the server, and must
        override the handle() method to implement communication to the
        client.
        """

        def handle(self):
            # self.request is the TCP socket connected to the client
            self.data = self.request.recv(1024).strip()
            print "%s wrote:" % self.client_address[0]
            print self.data
            # just send back the same data, but upper-cased
            self.request.send(self.data.upper())

    if __name__ == "__main__":
        HOST, PORT = "localhost", 9999

        # Create the server, binding to localhost on port 9999
        server = SocketServer.TCPServer((HOST, PORT), MyTCPHandler)

        # Activate the server; this will keep running until you
        # interrupt the program with Ctrl-C
        server.serve_forever()

An alternative request handler class that makes use of streams
(file-like objects that simplify communication by providing the
standard file interface):

    class MyTCPHandler(SocketServer.StreamRequestHandler):

        def handle(self):
            # self.rfile is a file-like object created by the handler;
            # we can now use e.g. readline() instead of raw recv() calls
            self.data = self.rfile.readline().strip()
            print "%s wrote:" % self.client_address[0]
            print self.data
            # Likewise, self.wfile is a file-like object used to write back
            # to the client
            self.wfile.write(self.data.upper())

The difference is that the `readline()' call in the second handler will
call `recv()' multiple times until it encounters a newline character,
while the single `recv()' call in the first handler will just return
what has been sent from the client in one `send()' call.

  This is the client side:

    import socket
    import sys

    HOST, PORT = "localhost", 9999
    data = " ".join(sys.argv[1:])

    # Create a socket (SOCK_STREAM means a TCP socket)
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connect to server and send data
    sock.connect((HOST, PORT))
    sock.send(data + "\n")

    # Receive data from the server and shut down
    received = sock.recv(1024)
    sock.close()

    print "Sent:     %s" % data
    print "Received: %s" % received

The output of the example should look something like this:

  Server:

    $ python TCPServer.py
    127.0.0.1 wrote:
    hello world with TCP
    127.0.0.1 wrote:
    python is nice

Client:

    $ python TCPClient.py hello world with TCP
    Sent:     hello world with TCP
    Received: HELLO WORLD WITH TCP
    $ python TCPClient.py python is nice
    Sent:     python is nice
    Received: PYTHON IS NICE



File: python.info,  Node: SocketServer UDPServer Example,  Next: Asynchronous Mixins,  Prev: SocketServer TCPServer Example,  Up: Examples<14>

5.20.17.6 `SocketServer.UDPServer' Example
..........................................

This is the server side:

    import SocketServer

    class MyUDPHandler(SocketServer.BaseRequestHandler):
        """
        This class works similar to the TCP handler class, except that
        self.request consists of a pair of data and client socket, and since
        there is no connection the client address must be given explicitly
        when sending data back via sendto().
        """

        def handle(self):
            data = self.request[0].strip()
            socket = self.request[1]
            print "%s wrote:" % self.client_address[0]
            print data
            socket.sendto(data.upper(), self.client_address)

    if __name__ == "__main__":
        HOST, PORT = "localhost", 9999
        server = SocketServer.UDPServer((HOST, PORT), MyUDPHandler)
        server.serve_forever()

This is the client side:

    import socket
    import sys

    HOST, PORT = "localhost", 9999
    data = " ".join(sys.argv[1:])

    # SOCK_DGRAM is the socket type to use for UDP sockets
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    # As you can see, there is no connect() call; UDP has no connections.
    # Instead, data is directly sent to the recipient via sendto().
    sock.sendto(data + "\n", (HOST, PORT))
    received = sock.recv(1024)

    print "Sent:     %s" % data
    print "Received: %s" % received

The output of the example should look exactly like for the TCP server
example.


File: python.info,  Node: Asynchronous Mixins,  Prev: SocketServer UDPServer Example,  Up: Examples<14>

5.20.17.7 Asynchronous Mixins
.............................

To build asynchronous handlers, use the `ThreadingMixIn' and
`ForkingMixIn' classes.

  An example for the `ThreadingMixIn' class:

    import socket
    import threading
    import SocketServer

    class ThreadedTCPRequestHandler(SocketServer.BaseRequestHandler):

        def handle(self):
            data = self.request.recv(1024)
            cur_thread = threading.currentThread()
            response = "%s: %s" % (cur_thread.getName(), data)
            self.request.send(response)

    class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
        pass

    def client(ip, port, message):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((ip, port))
        sock.send(message)
        response = sock.recv(1024)
        print "Received: %s" % response
        sock.close()

    if __name__ == "__main__":
        # Port 0 means to select an arbitrary unused port
        HOST, PORT = "localhost", 0

        server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)
        ip, port = server.server_address

        # Start a thread with the server -- that thread will then start one
        # more thread for each request
        server_thread = threading.Thread(target=server.serve_forever)
        # Exit the server thread when the main thread terminates
        server_thread.setDaemon(True)
        server_thread.start()
        print "Server loop running in thread:", server_thread.getName()

        client(ip, port, "Hello World 1")
        client(ip, port, "Hello World 2")
        client(ip, port, "Hello World 3")

        server.shutdown()

The output of the example should look something like this:

    $ python ThreadedTCPServer.py
    Server loop running in thread: Thread-1
    Received: Thread-2: Hello World 1
    Received: Thread-3: Hello World 2
    Received: Thread-4: Hello World 3

The `ForkingMixIn' class is used in the same way, except that the server
will spawn a new process for each request.


File: python.info,  Node: BaseHTTPServer --- Basic HTTP server,  Next: SimpleHTTPServer --- Simple HTTP request handler,  Prev: SocketServer --- A framework for network servers,  Up: Internet Protocols and Support

5.20.18 `BaseHTTPServer' -- Basic HTTP server
---------------------------------------------

     Note: The *note BaseHTTPServer: 16. module has been merged into
     `http.server' in Python 3.0.  The *note 2to3: bbf. tool will
     automatically adapt imports when converting your sources to 3.0.

This module defines two classes for implementing HTTP servers (Web
servers).  Usually, this module isn't used directly, but is used as a
basis for building functioning Web servers. See the *note
SimpleHTTPServer: 157. and *note CGIHTTPServer: 5d. modules.

  The first class, *note HTTPServer: 1b92, is a `SocketServer.TCPServer'
subclass, and therefore implements the *note SocketServer.BaseServer:
1d83.  interface.  It creates and listens at the HTTP socket,
dispatching the requests to a handler.  Code to create and run the
server looks like this:

    def run(server_class=BaseHTTPServer.HTTPServer,
            handler_class=BaseHTTPServer.BaseHTTPRequestHandler):
        server_address = ('', 8000)
        httpd = server_class(server_address, handler_class)
        httpd.serve_forever()


 -- Class: BaseHTTPServer.HTTPServer (server_address,
          RequestHandlerClass)
     This class builds on the `TCPServer' class by storing the server
     address as instance variables named `server_name' and
     `server_port'. The server is accessible by the handler, typically
     through the handler's `server' instance variable.

 -- Class: BaseHTTPServer.BaseHTTPRequestHandler (request,
          client_address, server)
     This class is used to handle the HTTP requests that arrive at the
     server. By itself, it cannot respond to any actual HTTP requests;
     it must be subclassed to handle each request method (e.g. GET or
     POST). *note BaseHTTPRequestHandler: 1b91. provides a number of
     class and instance variables, and methods for use by subclasses.

     The handler will parse the request and the headers, then call a
     method specific to the request type. The method name is
     constructed from the request. For example, for the request method
     `SPAM', the `do_SPAM()' method will be called with no arguments.
     All of the relevant information is stored in instance variables of
     the handler.  Subclasses should not need to override or extend the
     *note __init__(): 36b. method.

     *note BaseHTTPRequestHandler: 1b91. has the following instance
     variables:

      -- Attribute: client_address
          Contains a tuple of the form `(host, port)' referring to the
          client's address.

      -- Attribute: server
          Contains the server instance.

      -- Attribute: command
          Contains the command (request type). For example, `'GET''.

      -- Attribute: path
          Contains the request path.

      -- Attribute: request_version
          Contains the version string from the request. For example,
          `'HTTP/1.0''.

      -- Attribute: headers
          Holds an instance of the class specified by the *note
          MessageClass: 1da5. class variable. This instance parses and
          manages the headers in the HTTP request.

      -- Attribute: rfile
          Contains an input stream, positioned at the start of the
          optional input data.

      -- Attribute: wfile
          Contains the output stream for writing a response back to the
          client. Proper adherence to the HTTP protocol must be used
          when writing to this stream.

     *note BaseHTTPRequestHandler: 1b91. has the following class
     variables:

      -- Attribute: server_version
          Specifies the server software version.  You may want to
          override this. The format is multiple whitespace-separated
          strings, where each string is of the form name[/version]. For
          example, `'BaseHTTP/0.2''.

      -- Attribute: sys_version
          Contains the Python system version, in a form usable by the
          *note version_string: 1daa. method and the *note
          server_version: 1da8. class variable. For example,
          `'Python/1.4''.

      -- Attribute: error_message_format
          Specifies a format string for building an error response to
          the client. It uses parenthesized, keyed format specifiers,
          so the format operand must be a dictionary. The _code_ key
          should be an integer, specifying the numeric HTTP error code
          value. _message_ should be a string containing a (detailed)
          error message of what occurred, and _explain_ should be an
          explanation of the error code number. Default _message_ and
          _explain_ values can found in the _responses_ class variable.

      -- Attribute: error_content_type
          Specifies the Content-Type HTTP header of error responses
          sent to the client.  The default value is `'text/html''.

          New in version 2.6: Previously, the content type was always
          `'text/html''.

      -- Attribute: protocol_version
          This specifies the HTTP protocol version used in responses.
          If set to `'HTTP/1.1'', the server will permit HTTP
          persistent connections; however, your server _must_ then
          include an accurate `Content-Length' header (using *note
          send_header(): 1dae.) in all of its responses to clients.
          For backwards compatibility, the setting defaults to
          `'HTTP/1.0''.

      -- Attribute: MessageClass
          Specifies a *note rfc822.Message: 1826.-like class to parse
          HTTP headers.  Typically, this is not overridden, and it
          defaults to *note mimetools.Message: 189c.

      -- Attribute: responses
          This variable contains a mapping of error code integers to
          two-element tuples containing a short and long message. For
          example, `{code: (shortmessage, longmessage)}'. The
          _shortmessage_ is usually used as the _message_ key in an
          error response, and _longmessage_ as the _explain_ key (see
          the *note error_message_format: 1dab. class variable).

     A *note BaseHTTPRequestHandler: 1b91. instance has the following
     methods:

      -- Method: handle ()
          Calls *note handle_one_request(): 1db0. once (or, if
          persistent connections are enabled, multiple times) to handle
          incoming HTTP requests. You should never need to override it;
          instead, implement appropriate `do_*()' methods.

      -- Method: handle_one_request ()
          This method will parse and dispatch the request to the
          appropriate `do_*()' method.  You should never need to
          override it.

      -- Method: send_error (code[, message])
          Sends and logs a complete error reply to the client. The
          numeric _code_ specifies the HTTP error code, with _message_
          as optional, more specific text. A complete set of headers is
          sent, followed by text composed using the *note
          error_message_format: 1dab. class variable.

      -- Method: send_response (code[, message])
          Sends a response header and logs the accepted request. The
          HTTP response line is sent, followed by _Server_ and _Date_
          headers. The values for these two headers are picked up from
          the *note version_string(): 1daa. and *note
          date_time_string(): 1db3. methods, respectively.

      -- Method: send_header (keyword, value)
          Writes a specific HTTP header to the output stream. _keyword_
          should specify the header keyword, with _value_ specifying
          its value.

      -- Method: end_headers ()
          Sends a blank line, indicating the end of the HTTP headers in
          the response.

      -- Method: log_request ([code[, size]])
          Logs an accepted (successful) request. _code_ should specify
          the numeric HTTP code associated with the response. If a size
          of the response is available, then it should be passed as the
          _size_ parameter.

      -- Method: log_error (...)
          Logs an error when a request cannot be fulfilled. By default,
          it passes the message to *note log_message(): 1db7, so it
          takes the same arguments (_format_ and additional values).

      -- Method: log_message (format, ...)
          Logs an arbitrary message to `sys.stderr'. This is typically
          overridden to create custom error logging mechanisms. The
          _format_ argument is a standard printf-style format string,
          where the additional arguments to *note log_message(): 1db7.
          are applied as inputs to the formatting. The client address
          and current date and time are prefixed to every message
          logged.

      -- Method: version_string ()
          Returns the server software's version string. This is a
          combination of the *note server_version: 1da8. and *note
          sys_version: 1da9. class variables.

      -- Method: date_time_string ([timestamp])
          Returns the date and time given by _timestamp_ (which must be
          in the format returned by *note time.time(): 450.), formatted
          for a message header. If _timestamp_ is omitted, it uses the
          current date and time.

          The result looks like `'Sun, 06 Nov 1994 08:49:37 GMT''.

          New in version 2.5: The _timestamp_ parameter.

      -- Method: log_date_time_string ()
          Returns the current date and time, formatted for logging.

      -- Method: address_string ()
          Returns the client address, formatted for logging. A name
          lookup is performed on the client's IP address.

* Menu:

* More examples::


File: python.info,  Node: More examples,  Up: BaseHTTPServer --- Basic HTTP server

5.20.18.1 More examples
.......................

To create a server that doesn't run forever, but until some condition is
fulfilled:

    def run_while_true(server_class=BaseHTTPServer.HTTPServer,
                       handler_class=BaseHTTPServer.BaseHTTPRequestHandler):
        """
        This assumes that keep_running() is a function of no arguments which
        is tested initially and after each request.  If its return value
        is true, the server continues.
        """
        server_address = ('', 8000)
        httpd = server_class(server_address, handler_class)
        while keep_running():
            httpd.handle_request()


See also
........

Module *note CGIHTTPServer: 5d.
     Extended request handler that supports CGI scripts.

Module *note SimpleHTTPServer: 157.
     Basic request handler that limits response to files actually under
     the document root.


File: python.info,  Node: SimpleHTTPServer --- Simple HTTP request handler,  Next: CGIHTTPServer --- CGI-capable HTTP request handler,  Prev: BaseHTTPServer --- Basic HTTP server,  Up: Internet Protocols and Support

5.20.19 `SimpleHTTPServer' -- Simple HTTP request handler
---------------------------------------------------------

     Note: The *note SimpleHTTPServer: 157. module has been merged into
     `http.server' in Python 3.0.  The *note 2to3: bbf. tool will
     automatically adapt imports when converting your sources to 3.0.

The *note SimpleHTTPServer: 157. module defines a single class, *note
SimpleHTTPRequestHandler: 1dbd, which is interface-compatible with
*note BaseHTTPServer.BaseHTTPRequestHandler: 1b91.

  The *note SimpleHTTPServer: 157. module defines the following class:

 -- Class: SimpleHTTPServer.SimpleHTTPRequestHandler (request,
          client_address, server)
     This class serves files from the current directory and below,
     directly mapping the directory structure to HTTP requests.

     A lot of the work, such as parsing the request, is done by the
     base class *note BaseHTTPServer.BaseHTTPRequestHandler: 1b91.
     This class implements the *note do_GET(): 1dbe. and *note
     do_HEAD(): 1dbf. functions.

     The following are defined as class-level attributes of *note
     SimpleHTTPRequestHandler: 1dbd.:

      -- Attribute: server_version

     This will be `"SimpleHTTP/" + __version__', where `__version__' is
     defined at the module level.

      -- Attribute: extensions_map
          A dictionary mapping suffixes into MIME types. The default is
          signified by an empty string, and is considered to be
          `application/octet-stream'. The mapping is used
          case-insensitively, and so should contain only lower-cased
          keys.

     The *note SimpleHTTPRequestHandler: 1dbd. class defines the
     following methods:

      -- Method: do_HEAD ()
          This method serves the `'HEAD'' request type: it sends the
          headers it would send for the equivalent `GET' request. See
          the *note do_GET(): 1dbe.  method for a more complete
          explanation of the possible headers.

      -- Method: do_GET ()
          The request is mapped to a local file by interpreting the
          request as a path relative to the current working directory.

          If the request was mapped to a directory, the directory is
          checked for a file named `index.html' or `index.htm' (in that
          order). If found, the file's contents are returned; otherwise
          a directory listing is generated by calling the
          `list_directory()' method. This method uses *note
          os.listdir(): 2c7. to scan the directory, and returns a `404'
          error response if the `listdir()' fails.

          If the request was mapped to a file, it is opened and the
          contents are returned.  Any *note IOError: 1f7. exception in
          opening the requested file is mapped to a `404', `'File not
          found'' error. Otherwise, the content type is guessed by
          calling the `guess_type()' method, which in turn uses the
          _extensions_map_ variable.

          A `'Content-type:'' header with the guessed content type is
          output, followed by a `'Content-Length:'' header with the
          file's size and a `'Last-Modified:'' header with the file's
          modification time.

          Then follows a blank line signifying the end of the headers,
          and then the contents of the file are output. If the file's
          MIME type starts with `text/' the file is opened in text
          mode; otherwise binary mode is used.

          The *note test(): 176. function in the *note
          SimpleHTTPServer: 157. module is an example which creates a
          server using the *note SimpleHTTPRequestHandler: 1dbd.  as
          the Handler.

          New in version 2.5: The `'Last-Modified'' header.

  The *note SimpleHTTPServer: 157. module can be used in the following
manner in order to set up a very basic web server serving files
relative to the current directory.

    import SimpleHTTPServer
    import SocketServer

    PORT = 8000

    Handler = SimpleHTTPServer.SimpleHTTPRequestHandler

    httpd = SocketServer.TCPServer(("", PORT), Handler)

    print "serving at port", PORT
    httpd.serve_forever()

The *note SimpleHTTPServer: 157. module can also be invoked directly
using the *note -m: 2ec. switch of the interpreter with a `port number'
argument.  Similar to the previous example, this serves the files
relative to the current directory.

    python -m SimpleHTTPServer 8000


See also
........

Module *note BaseHTTPServer: 16.
     Base class implementation for Web server and request handler.


File: python.info,  Node: CGIHTTPServer --- CGI-capable HTTP request handler,  Next: cookielib --- Cookie handling for HTTP clients,  Prev: SimpleHTTPServer --- Simple HTTP request handler,  Up: Internet Protocols and Support

5.20.20 `CGIHTTPServer' -- CGI-capable HTTP request handler
-----------------------------------------------------------

     Note: The *note CGIHTTPServer: 5d. module has been merged into
     `http.server' in Python 3.0.  The *note 2to3: bbf. tool will
     automatically adapt imports when converting your sources to 3.0.

The *note CGIHTTPServer: 5d. module defines a request-handler class,
interface compatible with *note BaseHTTPServer.BaseHTTPRequestHandler:
1b91. and inherits behavior from *note
SimpleHTTPServer.SimpleHTTPRequestHandler: 1dbd. but can also run CGI
scripts.

     Note: This module can run CGI scripts on Unix and Windows systems.

     Note: CGI scripts run by the *note CGIHTTPRequestHandler: 1dc4.
     class cannot execute redirects (HTTP code 302), because code 200
     (script output follows) is sent prior to execution of the CGI
     script.  This pre-empts the status code.

  The *note CGIHTTPServer: 5d. module defines the following class:

 -- Class: CGIHTTPServer.CGIHTTPRequestHandler (request,
          client_address, server)
     This class is used to serve either files or output of CGI scripts
     from  the current directory and below. Note that mapping HTTP
     hierarchic structure to local directory structure is exactly as in
     *note SimpleHTTPServer.SimpleHTTPRequestHandler: 1dbd.

     The class will however, run the CGI script, instead of serving it
     as a file, if it guesses it to be a CGI script. Only
     directory-based CGI are used -- the other common server
     configuration is to treat special extensions as denoting CGI
     scripts.

     The `do_GET()' and `do_HEAD()' functions are modified to run CGI
     scripts and serve the output, instead of serving files, if the
     request leads to somewhere below the `cgi_directories' path.

     The *note CGIHTTPRequestHandler: 1dc4. defines the following data
     member:

      -- Attribute: cgi_directories
          This defaults to `['/cgi-bin', '/htbin']' and describes
          directories to treat as containing CGI scripts.

     The *note CGIHTTPRequestHandler: 1dc4. defines the following
     methods:

      -- Method: do_POST ()
          This method serves the `'POST'' request type, only allowed
          for CGI scripts.  Error 501, "Can only POST to CGI scripts",
          is output when trying to POST to a non-CGI url.

  Note that CGI scripts will be run with UID of user nobody, for
security reasons.  Problems with the CGI script will be translated to
error 403.

  For example usage, see the implementation of the *note test(): 176.
function.

See also
........

Module *note BaseHTTPServer: 16.
     Base class implementation for Web server and request handler.


File: python.info,  Node: cookielib --- Cookie handling for HTTP clients,  Next: Cookie --- HTTP state management,  Prev: CGIHTTPServer --- CGI-capable HTTP request handler,  Up: Internet Protocols and Support

5.20.21 `cookielib' -- Cookie handling for HTTP clients
-------------------------------------------------------

     Note: The *note cookielib: 70. module has been renamed to
     `http.cookiejar' in Python 3.0.  The *note 2to3: bbf. tool will
     automatically adapt imports when converting your sources to 3.0.

New in version 2.4.

  The *note cookielib: 70. module defines classes for automatic
handling of HTTP cookies.  It is useful for accessing web sites that
require small pieces of data - _cookies_ - to be set on the client
machine by an HTTP response from a web server, and then returned to the
server in later HTTP requests.

  Both the regular Netscape cookie protocol and the protocol defined by RFC
2965(1) are handled.  RFC 2965 handling is switched off by default.  RFC
2109(2) cookies are parsed as Netscape cookies and subsequently treated
either as Netscape or RFC 2965 cookies according to the 'policy' in
effect.  Note that the great majority of cookies on the Internet are
Netscape cookies.  *note cookielib: 70. attempts to follow the de-facto
Netscape cookie protocol (which differs substantially from that set out
in the original Netscape specification), including taking note of the
`max-age' and `port' cookie-attributes introduced with RFC 2965.

     Note: The various named parameters found in `Set-Cookie' and
     `Set-Cookie2' headers (eg. `domain' and `expires') are
     conventionally referred to as _attributes_.  To distinguish them
     from Python attributes, the documentation for this module uses the
     term _cookie-attribute_ instead.

  The module defines the following exception:

 -- Exception: cookielib.LoadError
     Instances of *note FileCookieJar: 1dca. raise this exception on
     failure to load cookies from a file.

          Note: For backwards-compatibility with Python 2.4 (which
          raised an *note IOError: 1f7.), *note LoadError: 1dc9. is a
          subclass of *note IOError: 1f7.

  The following classes are provided:

 -- Class: cookielib.CookieJar (policy=None)
     _policy_ is an object implementing the *note CookiePolicy: 1dcb.
     interface.

     The *note CookieJar: 1c1a. class stores HTTP cookies.  It extracts
     cookies from HTTP requests, and returns them in HTTP responses.
     *note CookieJar: 1c1a. instances automatically expire contained
     cookies when necessary.  Subclasses are also responsible for
     storing and retrieving cookies from a file or database.

 -- Class: cookielib.FileCookieJar (filename, delayload=None,
          policy=None)
     _policy_ is an object implementing the *note CookiePolicy: 1dcb.
     interface.  For the other arguments, see the documentation for the
     corresponding attributes.

     A *note CookieJar: 1c1a. which can load cookies from, and perhaps
     save cookies to, a file on disk.  Cookies are *NOT* loaded from
     the named file until either the *note load(): 1dcc. or *note
     revert(): 1dcd. method is called.  Subclasses of this class are
     documented in section *note FileCookieJar subclasses and
     co-operation with web browsers: 1dce.

 -- Class: cookielib.CookiePolicy
     This class is responsible for deciding whether each cookie should
     be accepted from / returned to the server.

 -- Class: cookielib.DefaultCookiePolicy (blocked_domains=None,
          allowed_domains=None, netscape=True, rfc2965=False,
          rfc2109_as_netscape=None, hide_cookie2=False,
          strict_domain=False, strict_rfc2965_unverifiable=True,
          strict_ns_unverifiable=False,
          strict_ns_domain=DefaultCookiePolicy.DomainLiberal,
          strict_ns_set_initial_dollar=False, strict_ns_set_path=False)
     Constructor arguments should be passed as keyword arguments only.
     _blocked_domains_ is a sequence of domain names that we never
     accept cookies from, nor return cookies to. _allowed_domains_ if
     not *note None: 389, this is a sequence of the only domains for
     which we accept and return cookies.  For all other arguments, see
     the documentation for *note CookiePolicy: 1dcb. and *note
     DefaultCookiePolicy: 1dcf. objects.

     *note DefaultCookiePolicy: 1dcf. implements the standard accept /
     reject rules for Netscape and RFC 2965 cookies.  By default, RFC
     2109 cookies (ie. cookies received in a `Set-Cookie' header with a
     version cookie-attribute of 1) are treated according to the RFC
     2965 rules.  However, if RFC 2965 handling is turned off or *note
     rfc2109_as_netscape: 1dd0. is True, RFC 2109 cookies are
     'downgraded' by the *note CookieJar: 1c1a. instance to Netscape
     cookies, by setting the `version' attribute of the *note Cookie:
     6f. instance to 0.  *note DefaultCookiePolicy: 1dcf. also provides
     some parameters to allow some fine-tuning of policy.

 -- Class: cookielib.Cookie
     This class represents Netscape, RFC 2109 and RFC 2965 cookies.  It
     is not expected that users of *note cookielib: 70. construct their
     own *note Cookie: 6f.  instances.  Instead, if necessary, call
     `make_cookies()' on a *note CookieJar: 1c1a. instance.

See also
........

Module *note urllib2: 18a.
     URL opening with automatic cookie handling.

Module *note Cookie: 6f.
     HTTP cookie classes, principally useful for server-side code.  The
     *note cookielib: 70. and *note Cookie: 6f. modules do not depend
     on each other.

<http://wp.netscape.com/newsref/std/cookie_spec.html>
     The specification of the original Netscape cookie protocol.
     Though this is still the dominant protocol, the 'Netscape cookie
     protocol' implemented by all the major browsers (and *note
     cookielib: 70.) only bears a passing resemblance to the one
     sketched out in `cookie_spec.html'.

RFC 2109(3) - HTTP State Management Mechanism
     Obsoleted by RFC 2965. Uses `Set-Cookie' with version=1.

RFC 2965(4) - HTTP State Management Mechanism
     The Netscape protocol with the bugs fixed.  Uses `Set-Cookie2' in
     place of `Set-Cookie'.  Not widely used.

<http://kristol.org/cookie/errata.html>
     Unfinished errata to RFC 2965.

  RFC 2964(5) - Use of HTTP State Management

* Menu:

* CookieJar and FileCookieJar Objects::
* FileCookieJar subclasses and co-operation with web browsers::
* CookiePolicy Objects::
* DefaultCookiePolicy Objects::
* Cookie Objects::
* Examples: Examples<15>.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2965.html

  (2) http://tools.ietf.org/html/rfc2109.html

  (3) http://tools.ietf.org/html/rfc2109.html

  (4) http://tools.ietf.org/html/rfc2965.html

  (5) http://tools.ietf.org/html/rfc2964.html


File: python.info,  Node: CookieJar and FileCookieJar Objects,  Next: FileCookieJar subclasses and co-operation with web browsers,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.1 CookieJar and FileCookieJar Objects
.............................................

*note CookieJar: 1c1a. objects support the *note iterator: 84a.
protocol for iterating over contained *note Cookie: 6f. objects.

  *note CookieJar: 1c1a. has the following methods:

 -- Method: CookieJar.add_cookie_header (request)
     Add correct `Cookie' header to _request_.

     If policy allows (ie. the `rfc2965' and `hide_cookie2' attributes
     of the *note CookieJar: 1c1a.'s *note CookiePolicy: 1dcb. instance
     are true and false respectively), the `Cookie2' header is also
     added when appropriate.

     The _request_ object (usually a *note urllib2.Request: 1bd5.
     instance) must support the methods `get_full_url()', `get_host()',
     `get_type()', `unverifiable()', `get_origin_req_host()',
     `has_header()', `get_header()', `header_items()', and
     `add_unredirected_header()',as documented by *note urllib2: 18a.

 -- Method: CookieJar.extract_cookies (response, request)
     Extract cookies from HTTP _response_ and store them in the *note
     CookieJar: 1c1a, where allowed by policy.

     The *note CookieJar: 1c1a. will look for allowable `Set-Cookie' and
     `Set-Cookie2' headers in the _response_ argument, and store cookies
     as appropriate (subject to the *note CookiePolicy.set_ok(): 1dd6.
     method's approval).

     The _response_ object (usually the result of a call to *note
     urllib2.urlopen(): 34b, or similar) should support an `info()'
     method, which returns an object with a `getallmatchingheaders()'
     method (usually a *note mimetools.Message: 189c.  instance).

     The _request_ object (usually a *note urllib2.Request: 1bd5.
     instance) must support the methods `get_full_url()', `get_host()',
     `unverifiable()', and `get_origin_req_host()', as documented by
     *note urllib2: 18a.  The request is used to set default values for
     cookie-attributes as well as for checking that the cookie is
     allowed to be set.

 -- Method: CookieJar.set_policy (policy)
     Set the *note CookiePolicy: 1dcb. instance to be used.

 -- Method: CookieJar.make_cookies (response, request)
     Return sequence of *note Cookie: 6f. objects extracted from
     _response_ object.

     See the documentation for *note extract_cookies(): 1dd5. for the
     interfaces required of the _response_ and _request_ arguments.

 -- Method: CookieJar.set_cookie_if_ok (cookie, request)
     Set a *note Cookie: 6f. if policy says it's OK to do so.

 -- Method: CookieJar.set_cookie (cookie)
     Set a *note Cookie: 6f, without checking with policy to see
     whether or not it should be set.

 -- Method: CookieJar.clear ([domain[, path[, name]]])
     Clear some cookies.

     If invoked without arguments, clear all cookies.  If given a
     single argument, only cookies belonging to that _domain_ will be
     removed. If given two arguments, cookies belonging to the
     specified _domain_ and URL _path_ are removed.  If given three
     arguments, then the cookie with the specified _domain_, _path_ and
     _name_ is removed.

     Raises *note KeyError: 202. if no matching cookie exists.

 -- Method: CookieJar.clear_session_cookies ()
     Discard all session cookies.

     Discards all contained cookies that have a true `discard' attribute
     (usually because they had either no `max-age' or `expires'
     cookie-attribute, or an explicit `discard' cookie-attribute).  For
     interactive browsers, the end of a session usually corresponds to
     closing the browser window.

     Note that the `save()' method won't save session cookies anyway,
     unless you ask otherwise by passing a true _ignore_discard_
     argument.

  *note FileCookieJar: 1dca. implements the following additional
methods:

 -- Method: FileCookieJar.save (filename=None, ignore_discard=False,
          ignore_expires=False)
     Save cookies to a file.

     This base class raises *note NotImplementedError: 919.  Subclasses
     may leave this method unimplemented.

     _filename_ is the name of file in which to save cookies.  If
     _filename_ is not specified, `self.filename' is used (whose
     default is the value passed to the constructor, if any); if
     `self.filename' is *note None: 389, *note ValueError: 233. is
     raised.

     _ignore_discard_: save even cookies set to be discarded.
     _ignore_expires_: save even cookies that have expired

     The file is overwritten if it already exists, thus wiping all the
     cookies it contains.  Saved cookies can be restored later using
     the *note load(): 1dcc. or *note revert(): 1dcd. methods.

 -- Method: FileCookieJar.load (filename=None, ignore_discard=False,
          ignore_expires=False)
     Load cookies from a file.

     Old cookies are kept unless overwritten by newly loaded ones.

     Arguments are as for *note save(): 1ddd.

     The named file must be in the format understood by the class, or
     *note LoadError: 1dc9. will be raised.  Also, *note IOError: 1f7.
     may be raised, for example if the file does not exist.

          Note: For backwards-compatibility with Python 2.4 (which
          raised an *note IOError: 1f7.), *note LoadError: 1dc9. is a
          subclass of *note IOError: 1f7.

 -- Method: FileCookieJar.revert (filename=None, ignore_discard=False,
          ignore_expires=False)
     Clear all cookies and reload cookies from a saved file.

     *note revert(): 1dcd. can raise the same exceptions as *note
     load(): 1dcc. If there is a failure, the object's state will not
     be altered.

  *note FileCookieJar: 1dca. instances have the following public
attributes:

 -- Attribute: FileCookieJar.filename
     Filename of default file in which to keep cookies.  This attribute
     may be assigned to.

 -- Attribute: FileCookieJar.delayload
     If true, load cookies lazily from disk.  This attribute should not
     be assigned to.  This is only a hint, since this only affects
     performance, not behaviour (unless the cookies on disk are
     changing). A *note CookieJar: 1c1a. object may ignore it.  None of
     the *note FileCookieJar: 1dca. classes included in the standard
     library lazily loads cookies.


File: python.info,  Node: FileCookieJar subclasses and co-operation with web browsers,  Next: CookiePolicy Objects,  Prev: CookieJar and FileCookieJar Objects,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.2 FileCookieJar subclasses and co-operation with web browsers
.....................................................................

The following *note CookieJar: 1c1a. subclasses are provided for
reading and writing .

 -- Class: cookielib.MozillaCookieJar (filename, delayload=None,
          policy=None)
     A *note FileCookieJar: 1dca. that can load from and save cookies
     to disk in the Mozilla `cookies.txt' file format (which is also
     used by the Lynx and Netscape browsers).

          Note: Version 3 of the Firefox web browser no longer writes
          cookies in the `cookies.txt' file format.

          Note: This loses information about RFC 2965 cookies, and also
          about newer or non-standard cookie-attributes such as `port'.

          Warning: Back up your cookies before saving if you have
          cookies whose loss / corruption would be inconvenient (there
          are some subtleties which may lead to slight changes in the
          file over a load / save round-trip).

     Also note that cookies saved while Mozilla is running will get
     clobbered by Mozilla.

 -- Class: cookielib.LWPCookieJar (filename, delayload=None,
          policy=None)
     A *note FileCookieJar: 1dca. that can load from and save cookies
     to disk in format compatible with the libwww-perl library's
     `Set-Cookie3' file format.  This is convenient if you want to
     store cookies in a human-readable file.


File: python.info,  Node: CookiePolicy Objects,  Next: DefaultCookiePolicy Objects,  Prev: FileCookieJar subclasses and co-operation with web browsers,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.3 CookiePolicy Objects
..............................

Objects implementing the *note CookiePolicy: 1dcb. interface have the
following methods:

 -- Method: CookiePolicy.set_ok (cookie, request)
     Return boolean value indicating whether cookie should be accepted
     from server.

     _cookie_ is a *note cookielib.Cookie: 1dd1. instance.  _request_
     is an object implementing the interface defined by the
     documentation for *note CookieJar.extract_cookies(): 1dd5.

 -- Method: CookiePolicy.return_ok (cookie, request)
     Return boolean value indicating whether cookie should be returned
     to server.

     _cookie_ is a *note cookielib.Cookie: 1dd1. instance.  _request_
     is an object implementing the interface defined by the
     documentation for *note CookieJar.add_cookie_header(): 1dd4.

 -- Method: CookiePolicy.domain_return_ok (domain, request)
     Return false if cookies should not be returned, given cookie
     domain.

     This method is an optimization.  It removes the need for checking
     every cookie with a particular domain (which might involve reading
     many files).  Returning true from *note domain_return_ok(): 1de6.
     and *note path_return_ok(): 1de7. leaves all the work to *note
     return_ok(): 1de5.

     If *note domain_return_ok(): 1de6. returns true for the cookie
     domain, *note path_return_ok(): 1de7. is called for the cookie
     path.  Otherwise, *note path_return_ok(): 1de7. and *note
     return_ok(): 1de5. are never called for that cookie domain.  If
     *note path_return_ok(): 1de7. returns true, *note return_ok():
     1de5. is called with the *note Cookie: 6f. object itself for a
     full check.  Otherwise, *note return_ok(): 1de5. is never called
     for that cookie path.

     Note that *note domain_return_ok(): 1de6. is called for every
     _cookie_ domain, not just for the _request_ domain.  For example,
     the function might be called with both `".example.com"' and
     `"www.example.com"' if the request domain is `"www.example.com"'.
     The same goes for *note path_return_ok(): 1de7.

     The _request_ argument is as documented for *note return_ok():
     1de5.

 -- Method: CookiePolicy.path_return_ok (path, request)
     Return false if cookies should not be returned, given cookie path.

     See the documentation for *note domain_return_ok(): 1de6.

  In addition to implementing the methods above, implementations of the
*note CookiePolicy: 1dcb. interface must also supply the following
attributes, indicating which protocols should be used, and how.  All of
these attributes may be assigned to.

 -- Attribute: CookiePolicy.netscape
     Implement Netscape protocol.

 -- Attribute: CookiePolicy.rfc2965
     Implement RFC 2965 protocol.

 -- Attribute: CookiePolicy.hide_cookie2
     Don't add `Cookie2' header to requests (the presence of this header
     indicates to the server that we understand RFC 2965 cookies).

  The most useful way to define a *note CookiePolicy: 1dcb. class is by
subclassing from *note DefaultCookiePolicy: 1dcf. and overriding some
or all of the methods above.  *note CookiePolicy: 1dcb. itself may be
used as a 'null policy' to allow setting and receiving any and all
cookies (this is unlikely to be useful).


File: python.info,  Node: DefaultCookiePolicy Objects,  Next: Cookie Objects,  Prev: CookiePolicy Objects,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.4 DefaultCookiePolicy Objects
.....................................

Implements the standard rules for accepting and returning cookies.

  Both RFC 2965 and Netscape cookies are covered.  RFC 2965 handling is
switched off by default.

  The easiest way to provide your own policy is to override this class
and call its methods in your overridden implementations before adding
your own additional checks:

    import cookielib
    class MyCookiePolicy(cookielib.DefaultCookiePolicy):
        def set_ok(self, cookie, request):
            if not cookielib.DefaultCookiePolicy.set_ok(self, cookie, request):
                return False
            if i_dont_want_to_store_this_cookie(cookie):
                return False
            return True

In addition to the features required to implement the *note
CookiePolicy: 1dcb.  interface, this class allows you to block and
allow domains from setting and receiving cookies.  There are also some
strictness switches that allow you to tighten up the rather loose
Netscape protocol rules a little bit (at the cost of blocking some
benign cookies).

  A domain blacklist and whitelist is provided (both off by default).
Only domains not in the blacklist and present in the whitelist (if the
whitelist is active) participate in cookie setting and returning.  Use
the _blocked_domains_ constructor argument, and `blocked_domains()' and
`set_blocked_domains()' methods (and the corresponding argument and
methods for _allowed_domains_).  If you set a whitelist, you can turn
it off again by setting it to *note None: 389.

  Domains in block or allow lists that do not start with a dot must
equal the cookie domain to be matched.  For example, `"example.com"'
matches a blacklist entry of `"example.com"', but `"www.example.com"'
does not.  Domains that do start with a dot are matched by more
specific domains too. For example, both `"www.example.com"' and
`"www.coyote.example.com"' match `".example.com"' (but `"example.com"'
itself does not).  IP addresses are an exception, and must match
exactly.  For example, if blocked_domains contains `"192.168.1.2"' and
`".168.1.2"', 192.168.1.2 is blocked, but 193.168.1.2 is not.

  *note DefaultCookiePolicy: 1dcf. implements the following additional
methods:

 -- Method: DefaultCookiePolicy.blocked_domains ()
     Return the sequence of blocked domains (as a tuple).

 -- Method: DefaultCookiePolicy.set_blocked_domains (blocked_domains)
     Set the sequence of blocked domains.

 -- Method: DefaultCookiePolicy.is_blocked (domain)
     Return whether _domain_ is on the blacklist for setting or
     receiving cookies.

 -- Method: DefaultCookiePolicy.allowed_domains ()
     Return *note None: 389, or the sequence of allowed domains (as a
     tuple).

 -- Method: DefaultCookiePolicy.set_allowed_domains (allowed_domains)
     Set the sequence of allowed domains, or *note None: 389.

 -- Method: DefaultCookiePolicy.is_not_allowed (domain)
     Return whether _domain_ is not on the whitelist for setting or
     receiving cookies.

  *note DefaultCookiePolicy: 1dcf. instances have the following
attributes, which are all initialised from the constructor arguments of
the same name, and which may all be assigned to.

 -- Attribute: DefaultCookiePolicy.rfc2109_as_netscape
     If true, request that the *note CookieJar: 1c1a. instance
     downgrade RFC 2109 cookies (ie. cookies received in a `Set-Cookie'
     header with a version cookie-attribute of 1) to Netscape cookies
     by setting the version attribute of the *note Cookie: 6f. instance
     to 0.  The default value is *note None: 389, in which case RFC
     2109 cookies are downgraded if and only if RFC 2965 handling is
     turned off.  Therefore, RFC 2109 cookies are downgraded by default.

     New in version 2.5.

  General strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_domain
     Don't allow sites to set two-component domains with country-code
     top-level domains like `.co.uk', `.gov.uk', `.co.nz'.etc.  This is
     far from perfect and isn't guaranteed to work!

  RFC 2965 protocol strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_rfc2965_unverifiable
     Follow RFC 2965 rules on unverifiable transactions (usually, an
     unverifiable transaction is one resulting from a redirect or a
     request for an image hosted on another site).  If this is false,
     cookies are _never_ blocked on the basis of verifiability

  Netscape protocol strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_ns_unverifiable
     apply RFC 2965 rules on unverifiable transactions even to Netscape
     cookies

 -- Attribute: DefaultCookiePolicy.strict_ns_domain
     Flags indicating how strict to be with domain-matching rules for
     Netscape cookies.  See below for acceptable values.

 -- Attribute: DefaultCookiePolicy.strict_ns_set_initial_dollar
     Ignore cookies in Set-Cookie: headers that have names starting
     with `'$''.

 -- Attribute: DefaultCookiePolicy.strict_ns_set_path
     Don't allow setting cookies whose path doesn't path-match request
     URI.

  `strict_ns_domain' is a collection of flags.  Its value is
constructed by or-ing together (for example,
`DomainStrictNoDots|DomainStrictNonDomain' means both flags are set).

 -- Attribute: DefaultCookiePolicy.DomainStrictNoDots
     When setting cookies, the 'host prefix' must not contain a dot (eg.
     `www.foo.bar.com' can't set a cookie for `.bar.com', because
     `www.foo' contains a dot).

 -- Attribute: DefaultCookiePolicy.DomainStrictNonDomain
     Cookies that did not explicitly specify a `domain'
     cookie-attribute can only be returned to a domain equal to the
     domain that set the cookie (eg.  `spam.example.com' won't be
     returned cookies from `example.com' that had no `domain'
     cookie-attribute).

 -- Attribute: DefaultCookiePolicy.DomainRFC2965Match
     When setting cookies, require a full RFC 2965 domain-match.

  The following attributes are provided for convenience, and are the
most useful combinations of the above flags:

 -- Attribute: DefaultCookiePolicy.DomainLiberal
     Equivalent to 0 (ie. all of the above Netscape domain strictness
     flags switched off).

 -- Attribute: DefaultCookiePolicy.DomainStrict
     Equivalent to `DomainStrictNoDots|DomainStrictNonDomain'.


File: python.info,  Node: Cookie Objects,  Next: Examples<15>,  Prev: DefaultCookiePolicy Objects,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.5 Cookie Objects
........................

*note Cookie: 6f. instances have Python attributes roughly
corresponding to the standard cookie-attributes specified in the
various cookie standards.  The correspondence is not one-to-one,
because there are complicated rules for assigning default values,
because the `max-age' and `expires' cookie-attributes contain
equivalent information, and because RFC 2109 cookies may be
'downgraded' by *note cookielib: 70. from version 1 to version 0
(Netscape) cookies.

  Assignment to these attributes should not be necessary other than in
rare circumstances in a *note CookiePolicy: 1dcb. method.  The class
does not enforce internal consistency, so you should know what you're
doing if you do that.

 -- Attribute: Cookie.version
     Integer or *note None: 389.  Netscape cookies have *note version:
     1e00. 0. RFC 2965 and RFC 2109 cookies have a `version'
     cookie-attribute of 1.  However, note that *note cookielib: 70.
     may 'downgrade' RFC 2109 cookies to Netscape cookies, in which
     case *note version: 1e00. is 0.

 -- Attribute: Cookie.name
     Cookie name (a string).

 -- Attribute: Cookie.value
     Cookie value (a string), or *note None: 389.

 -- Attribute: Cookie.port
     String representing a port or a set of ports (eg. '80', or
     '80,8080'), or *note None: 389.

 -- Attribute: Cookie.path
     Cookie path (a string, eg. `'/acme/rocket_launchers'').

 -- Attribute: Cookie.secure
     True if cookie should only be returned over a secure connection.

 -- Attribute: Cookie.expires
     Integer expiry date in seconds since epoch, or *note None: 389.
     See also the *note is_expired(): 1e07. method.

 -- Attribute: Cookie.discard
     True if this is a session cookie.

 -- Attribute: Cookie.comment
     String comment from the server explaining the function of this
     cookie, or *note None: 389.

 -- Attribute: Cookie.comment_url
     URL linking to a comment from the server explaining the function
     of this cookie, or *note None: 389.

 -- Attribute: Cookie.rfc2109
     True if this cookie was received as an RFC 2109 cookie (ie. the
     cookie arrived in a `Set-Cookie' header, and the value of the
     Version cookie-attribute in that header was 1).  This attribute is
     provided because *note cookielib: 70. may 'downgrade' RFC 2109
     cookies to Netscape cookies, in which case *note version: 1e00. is
     0.

     New in version 2.5.

 -- Attribute: Cookie.port_specified
     True if a port or set of ports was explicitly specified by the
     server (in the `Set-Cookie' / `Set-Cookie2' header).

 -- Attribute: Cookie.domain_specified
     True if a domain was explicitly specified by the server.

 -- Attribute: Cookie.domain_initial_dot
     True if the domain explicitly specified by the server began with a
     dot (`'.'').

  Cookies may have additional non-standard cookie-attributes.  These
may be accessed using the following methods:

 -- Method: Cookie.has_nonstandard_attr (name)
     Return true if cookie has the named cookie-attribute.

 -- Method: Cookie.get_nonstandard_attr (name, default=None)
     If cookie has the named cookie-attribute, return its value.
     Otherwise, return _default_.

 -- Method: Cookie.set_nonstandard_attr (name, value)
     Set the value of the named cookie-attribute.

  The *note Cookie: 6f. class also defines the following method:

 -- Method: Cookie.is_expired ([now=None])
     True if cookie has passed the time at which the server requested
     it should expire.  If _now_ is given (in seconds since the epoch),
     return whether the cookie has expired at the specified time.


File: python.info,  Node: Examples<15>,  Prev: Cookie Objects,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.6 Examples
..................

The first example shows the most common usage of *note cookielib: 70.:

    import cookielib, urllib2
    cj = cookielib.CookieJar()
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    r = opener.open("http://example.com/")

This example illustrates how to open a URL using your Netscape,
Mozilla, or Lynx cookies (assumes Unix/Netscape convention for location
of the cookies file):

    import os, cookielib, urllib2
    cj = cookielib.MozillaCookieJar()
    cj.load(os.path.join(os.path.expanduser("~"), ".netscape", "cookies.txt"))
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    r = opener.open("http://example.com/")

The next example illustrates the use of *note DefaultCookiePolicy:
1dcf. Turn on RFC 2965 cookies, be more strict about domains when
setting and returning Netscape cookies, and block some domains from
setting cookies or having them returned:

    import urllib2
    from cookielib import CookieJar, DefaultCookiePolicy
    policy = DefaultCookiePolicy(
        rfc2965=True, strict_ns_domain=DefaultCookiePolicy.DomainStrict,
        blocked_domains=["ads.net", ".ads.net"])
    cj = CookieJar(policy)
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    r = opener.open("http://example.com/")



File: python.info,  Node: Cookie --- HTTP state management,  Next: xmlrpclib --- XML-RPC client access,  Prev: cookielib --- Cookie handling for HTTP clients,  Up: Internet Protocols and Support

5.20.22 `Cookie' -- HTTP state management
-----------------------------------------

     Note: The *note Cookie: 6f. module has been renamed to
     `http.cookies' in Python 3.0.  The *note 2to3: bbf. tool will
     automatically adapt imports when converting your sources to 3.0.

The *note Cookie: 6f. module defines classes for abstracting the
concept of cookies, an HTTP state management mechanism. It supports
both simple string-only cookies, and provides an abstraction for having
any serializable data-type as cookie value.

  The module formerly strictly applied the parsing rules described in
the RFC 2109(1) and RFC 2068(2) specifications.  It has since been
discovered that MSIE 3.0x doesn't follow the character rules outlined
in those specs.  As a result, the parsing rules used are a bit less
strict.

     Note: On encountering an invalid cookie, *note CookieError: 1e16.
     is raised, so if your cookie data comes from a browser you should
     always prepare for invalid data and catch *note CookieError: 1e16.
     on parsing.

 -- Exception: Cookie.CookieError
     Exception failing because of RFC 2109(3) invalidity: incorrect
     attributes, incorrect `Set-Cookie' header, etc.

 -- Class: Cookie.BaseCookie ([input])
     This class is a dictionary-like object whose keys are strings and
     whose values are *note Morsel: 1e18. instances. Note that upon
     setting a key to a value, the value is first converted to a *note
     Morsel: 1e18. containing the key and the value.

     If _input_ is given, it is passed to the *note load(): 1e19.
     method.

 -- Class: Cookie.SimpleCookie ([input])
     This class derives from *note BaseCookie: 1e17. and overrides
     `value_decode()' and `value_encode()' to be the identity and *note
     str(): 1e7. respectively.

 -- Class: Cookie.SerialCookie ([input])
     This class derives from *note BaseCookie: 1e17. and overrides
     `value_decode()' and `value_encode()' to be the *note
     pickle.loads(): e7d. and *note pickle.dumps(): 437.

     Deprecated since version 2.3: Reading pickled values from
     untrusted cookie data is a huge security hole, as pickle strings
     can be crafted to cause arbitrary code to execute on your server.
     It is supported for backwards compatibility only, and may
     eventually go away.

 -- Class: Cookie.SmartCookie ([input])
     This class derives from *note BaseCookie: 1e17. It overrides
     `value_decode()' to be *note pickle.loads(): e7d. if it is a valid
     pickle, and otherwise the value itself. It overrides
     `value_encode()' to be *note pickle.dumps(): 437. unless it is a
     string, in which case it returns the value itself.

     Deprecated since version 2.3: The same security warning from *note
     SerialCookie: 1e1b. applies here.

  A further security note is warranted.  For backwards compatibility,
the *note Cookie: 6f. module exports a class named *note Cookie: 6f.
which is just an alias for *note SmartCookie: 1e1c.  This is probably a
mistake and will likely be removed in a future version.  You should not
use the *note Cookie: 6f. class in your applications, for the same
reason why you should not use the *note SerialCookie: 1e1b. class.

See also
........

Module *note cookielib: 70.
     HTTP cookie handling for web _clients_.  The *note cookielib: 70.
     and *note Cookie: 6f.  modules do not depend on each other.

RFC 2109(4) - HTTP State Management Mechanism
     This is the state management specification implemented by this
     module.

* Menu:

* Cookie Objects: Cookie Objects<2>.
* Morsel Objects::
* Example: Example<11>.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2109.html

  (2) http://tools.ietf.org/html/rfc2068.html

  (3) http://tools.ietf.org/html/rfc2109.html

  (4) http://tools.ietf.org/html/rfc2109.html


File: python.info,  Node: Cookie Objects<2>,  Next: Morsel Objects,  Up: Cookie --- HTTP state management

5.20.22.1 Cookie Objects
........................

 -- Method: BaseCookie.value_decode (val)
     Return a decoded value from a string representation. Return value
     can be any type. This method does nothing in *note BaseCookie:
     1e17. -- it exists so it can be overridden.

 -- Method: BaseCookie.value_encode (val)
     Return an encoded value. _val_ can be any type, but return value
     must be a string. This method does nothing in *note BaseCookie:
     1e17. -- it exists so it can be overridden

     In general, it should be the case that *note value_encode(): 1e20.
     and *note value_decode(): 1e1f. are inverses on the range of
     _value_decode_.

 -- Method: BaseCookie.output ([attrs[, header[, sep]]])
     Return a string representation suitable to be sent as HTTP
     headers. _attrs_ and _header_ are sent to each *note Morsel:
     1e18.'s *note output(): 1e21. method. _sep_ is used to join the
     headers together, and is by default the combination `'\r\n''
     (CRLF).

     Changed in version 2.5: The default separator has been changed
     from `'\n'' to match the cookie specification.

 -- Method: BaseCookie.js_output ([attrs])
     Return an embeddable JavaScript snippet, which, if run on a
     browser which supports JavaScript, will act the same as if the
     HTTP headers was sent.

     The meaning for _attrs_ is the same as in *note output(): 1e21.

 -- Method: BaseCookie.load (rawdata)
     If _rawdata_ is a string, parse it as an `HTTP_COOKIE' and add the
     values found there as *note Morsel: 1e18.s. If it is a dictionary,
     it is equivalent to:

         for k, v in rawdata.items():
             cookie[k] = v




File: python.info,  Node: Morsel Objects,  Next: Example<11>,  Prev: Cookie Objects<2>,  Up: Cookie --- HTTP state management

5.20.22.2 Morsel Objects
........................

 -- Class: Cookie.Morsel
     Abstract a key/value pair, which has some RFC 2109(1) attributes.

     Morsels are dictionary-like objects, whose set of keys is constant
     -- the valid RFC 2109(2) attributes, which are

        * `expires'

        * `path'

        * `comment'

        * `domain'

        * `max-age'

        * `secure'

        * `version'

        * `httponly'

     The attribute `httponly' specifies that the cookie is only
     transfered in HTTP requests, and is not accessible through
     JavaScript. This is intended to mitigate some forms of cross-site
     scripting.

     The keys are case-insensitive.

     New in version 2.6: The `httponly' attribute was added.

 -- Attribute: Morsel.value
     The value of the cookie.

 -- Attribute: Morsel.coded_value
     The encoded value of the cookie -- this is what should be sent.

 -- Attribute: Morsel.key
     The name of the cookie.

 -- Method: Morsel.set (key, value, coded_value)
     Set the _key_, _value_ and _coded_value_ members.

 -- Method: Morsel.isReservedKey (K)
     Whether _K_ is a member of the set of keys of a *note Morsel: 1e18.

 -- Method: Morsel.output ([attrs[, header]])
     Return a string representation of the Morsel, suitable to be sent
     as an HTTP header. By default, all the attributes are included,
     unless _attrs_ is given, in which case it should be a list of
     attributes to use. _header_ is by default `"Set-Cookie:"'.

 -- Method: Morsel.js_output ([attrs])
     Return an embeddable JavaScript snippet, which, if run on a
     browser which supports JavaScript, will act the same as if the
     HTTP header was sent.

     The meaning for _attrs_ is the same as in *note output(): 1e2a.

 -- Method: Morsel.OutputString ([attrs])
     Return a string representing the Morsel, without any surrounding
     HTTP or JavaScript.

     The meaning for _attrs_ is the same as in *note output(): 1e2a.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2109.html

  (2) http://tools.ietf.org/html/rfc2109.html


File: python.info,  Node: Example<11>,  Prev: Morsel Objects,  Up: Cookie --- HTTP state management

5.20.22.3 Example
.................

The following example demonstrates how to use the *note Cookie: 6f.
module.

    >>> import Cookie
    >>> C = Cookie.SimpleCookie()
    >>> C["fig"] = "newton"
    >>> C["sugar"] = "wafer"
    >>> print C # generate HTTP headers
    Set-Cookie: fig=newton
    Set-Cookie: sugar=wafer
    >>> print C.output() # same thing
    Set-Cookie: fig=newton
    Set-Cookie: sugar=wafer
    >>> C = Cookie.SimpleCookie()
    >>> C["rocky"] = "road"
    >>> C["rocky"]["path"] = "/cookie"
    >>> print C.output(header="Cookie:")
    Cookie: rocky=road; Path=/cookie
    >>> print C.output(attrs=[], header="Cookie:")
    Cookie: rocky=road
    >>> C = Cookie.SimpleCookie()
    >>> C.load("chips=ahoy; vienna=finger") # load from a string (HTTP header)
    >>> print C
    Set-Cookie: chips=ahoy
    Set-Cookie: vienna=finger
    >>> C = Cookie.SimpleCookie()
    >>> C.load('keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;";')
    >>> print C
    Set-Cookie: keebler="E=everybody; L=\"Loves\"; fudge=\012;"
    >>> C = Cookie.SimpleCookie()
    >>> C["oreo"] = "doublestuff"
    >>> C["oreo"]["path"] = "/"
    >>> print C
    Set-Cookie: oreo=doublestuff; Path=/
    >>> C["twix"] = "none for you"
    >>> C["twix"].value
    'none for you'
    >>> C = Cookie.SimpleCookie()
    >>> C["number"] = 7 # equivalent to C["number"] = str(7)
    >>> C["string"] = "seven"
    >>> C["number"].value
    '7'
    >>> C["string"].value
    'seven'
    >>> print C
    Set-Cookie: number=7
    Set-Cookie: string=seven
    >>> # SerialCookie and SmartCookie are deprecated
    >>> # using it can cause security loopholes in your code.
    >>> C = Cookie.SerialCookie()
    >>> C["number"] = 7
    >>> C["string"] = "seven"
    >>> C["number"].value
    7
    >>> C["string"].value
    'seven'
    >>> print C
    Set-Cookie: number="I7\012."
    Set-Cookie: string="S'seven'\012p1\012."
    >>> C = Cookie.SmartCookie()
    >>> C["number"] = 7
    >>> C["string"] = "seven"
    >>> C["number"].value
    7
    >>> C["string"].value
    'seven'
    >>> print C
    Set-Cookie: number="I7\012."
    Set-Cookie: string=seven



File: python.info,  Node: xmlrpclib --- XML-RPC client access,  Next: SimpleXMLRPCServer --- Basic XML-RPC server,  Prev: Cookie --- HTTP state management,  Up: Internet Protocols and Support

5.20.23 `xmlrpclib' -- XML-RPC client access
--------------------------------------------

     Note: The *note xmlrpclib: 1aa. module has been renamed to
     `xmlrpc.client' in Python 3.0.  The *note 2to3: bbf. tool will
     automatically adapt imports when converting your sources to 3.0.

New in version 2.2.

  XML-RPC is a Remote Procedure Call method that uses XML passed via
HTTP as a transport.  With it, a client can call methods with
parameters on a remote server (the server is named by a URI) and get
back structured data.  This module supports writing XML-RPC client
code; it handles all the details of translating between conformable
Python objects and XML on the wire.

 -- Class: xmlrpclib.ServerProxy (uri[, transport[, encoding[,
          verbose[, allow_none[, use_datetime]]]]])
     A *note ServerProxy: 1e31. instance is an object that manages
     communication with a remote XML-RPC server.  The required first
     argument is a URI (Uniform Resource Indicator), and will normally
     be the URL of the server.  The optional second argument is a
     transport factory instance; by default it is an internal
     `SafeTransport' instance for https: URLs and an internal HTTP
     `Transport' instance otherwise.  The optional third argument is an
     encoding, by default UTF-8. The optional fourth argument is a
     debugging flag.  If _allow_none_ is true,  the Python constant
     `None' will be translated into XML; the default behaviour is for
     `None' to raise a *note TypeError: 215. This is a commonly-used
     extension to the XML-RPC specification, but isn't supported by all
     clients and servers; see
     <http://ontosys.com/xml-rpc/extensions.php> for a description.
     The _use_datetime_ flag can be used to cause date/time values to
     be presented as *note datetime.datetime: 2ce. objects; this is
     false by default.  *note datetime.datetime: 2ce. objects may be
     passed to calls.

     Both the HTTP and HTTPS transports support the URL syntax
     extension for HTTP Basic Authentication:
     `http://user:pass@host:port/path'.  The  `user:pass' portion will
     be base64-encoded as an HTTP 'Authorization' header, and sent to
     the remote server as part of the connection process when invoking
     an XML-RPC method.  You only need to use this if the remote server
     requires a Basic Authentication user and password.

     The returned instance is a proxy object with methods that can be
     used to invoke corresponding RPC calls on the remote server.  If
     the remote server supports the introspection API, the proxy can
     also be used to query the remote server for the methods it
     supports (service discovery) and fetch other server-associated
     metadata.

     *note ServerProxy: 1e31. instance methods take Python basic types
     and objects as arguments and return Python basic types and
     classes.  Types that are conformable (e.g. that can be marshalled
     through XML), include the following (and except where noted, they
     are unmarshalled as the same Python type):

     Name                                  Meaning
     ---------------------------------------------------------------------------------------- 
     *note boolean: 1e32.                  The *note True: 39f. and *note False: 3a0.
                                           constants
     `integers'                            Pass in directly
     `floating-point numbers'              Pass in directly
     `strings'                             Pass in directly
     `arrays'                              Any Python sequence type containing conformable
                                           elements. Arrays are returned as lists
     `structures'                          A Python dictionary. Keys must be strings,
                                           values may be any conformable type. Objects of
                                           user-defined classes can be passed in; only
                                           their ___dict___ attribute is transmitted.
     `dates'                               in seconds since the epoch (pass in an instance
                                           of the `DateTime' class) or a *note
                                           datetime.datetime: 2ce. instance.
     `binary data'                         pass in an instance of the `Binary' wrapper class

     This is the full set of data types supported by XML-RPC.  Method
     calls may also raise a special `Fault' instance, used to signal
     XML-RPC server errors, or `ProtocolError' used to signal an error
     in the HTTP/HTTPS transport layer.  Both `Fault' and
     `ProtocolError' derive from a base class called `Error'.  Note
     that even though starting with Python 2.2 you can subclass
     built-in types, the xmlrpclib module currently does not marshal
     instances of such subclasses.

     When passing strings, characters special to XML such as `<', `>',
     and `&' will be automatically escaped.  However, it's the caller's
     responsibility to ensure that the string is free of characters
     that aren't allowed in XML, such as the control characters with
     ASCII values between 0 and 31 (except, of course, tab, newline and
     carriage return); failing to do this will result in an XML-RPC
     request that isn't well-formed XML.  If you have to pass arbitrary
     strings via XML-RPC, use the `Binary' wrapper class described
     below.

     `Server' is retained as an alias for *note ServerProxy: 1e31. for
     backwards compatibility.  New code should use *note ServerProxy:
     1e31.

     Changed in version 2.5: The _use_datetime_ flag was added.

     Changed in version 2.6: Instances of *note new-style class: 5b1.es
     can be passed in if they have an ___dict___ attribute and don't
     have a base class that is marshalled in a special way.

See also
........

XML-RPC HOWTO(1)
     A good description of XML-RPC operation and client software in
     several languages.  Contains pretty much everything an XML-RPC
     client developer needs to know.

XML-RPC Introspection(2)
     Describes the XML-RPC protocol extension for introspection.

XML-RPC Specification(3)
     The official specification.

Unofficial XML-RPC Errata(4)
     Fredrik Lundh's "unofficial errata, intended to clarify certain
     details in the XML-RPC specification, as well as hint at 'best
     practices' to use when designing your own XML-RPC implementations."

* Menu:

* ServerProxy Objects::
* Boolean Objects::
* DateTime Objects::
* Binary Objects::
* Fault Objects::
* ProtocolError Objects::
* MultiCall Objects::
* Convenience Functions: Convenience Functions<2>.
* Example of Client Usage::
* Example of Client and Server Usage::

  ---------- Footnotes ----------

  (1) http://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html

  (2) http://xmlrpc-c.sourceforge.net/introspection.html

  (3) http://www.xmlrpc.com/spec

  (4) http://effbot.org/zone/xmlrpc-errata.htm


File: python.info,  Node: ServerProxy Objects,  Next: Boolean Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.1 ServerProxy Objects
.............................

A *note ServerProxy: 1e31. instance has a method corresponding to each
remote procedure call accepted by the XML-RPC server.  Calling the
method performs an RPC, dispatched by both name and argument signature
(e.g. the same method name can be overloaded with multiple argument
signatures).  The RPC finishes by returning a value, which may be
either returned data in a conformant type or a `Fault' or
`ProtocolError' object indicating an error.

  Servers that support the XML introspection API support some common
methods grouped under the reserved `system' member:

 -- Method: ServerProxy.system.listMethods ()
     This method returns a list of strings, one for each (non-system)
     method supported by the XML-RPC server.

 -- Method: ServerProxy.system.methodSignature (name)
     This method takes one parameter, the name of a method implemented
     by the XML-RPC server. It returns an array of possible signatures
     for this method. A signature is an array of types. The first of
     these types is the return type of the method, the rest are
     parameters.

     Because multiple signatures (ie. overloading) is permitted, this
     method returns a list of signatures rather than a singleton.

     Signatures themselves are restricted to the top level parameters
     expected by a method. For instance if a method expects one array
     of structs as a parameter, and it returns a string, its signature
     is simply "string, array". If it expects three integers and
     returns a string, its signature is "string, int, int, int".

     If no signature is defined for the method, a non-array value is
     returned. In Python this means that the type of the returned
     value will be something other than list.

 -- Method: ServerProxy.system.methodHelp (name)
     This method takes one parameter, the name of a method implemented
     by the XML-RPC server.  It returns a documentation string
     describing the use of that method. If no such string is available,
     an empty string is returned. The documentation string may contain
     HTML markup.


File: python.info,  Node: Boolean Objects,  Next: DateTime Objects,  Prev: ServerProxy Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.2 Boolean Objects
.........................

This class may be initialized from any Python value; the instance
returned depends only on its truth value.  It supports various Python
operators through *note __cmp__(): 21e, *note __repr__(): 475, *note
__int__(): 25d, and *note __nonzero__(): 6e3.  methods, all implemented
in the obvious ways.

  It also has the following method, supported mainly for internal use
by the unmarshalling code:

 -- Method: Boolean.encode (out)
     Write the XML-RPC encoding of this Boolean item to the out stream
     object.

  A working example follows. The server code:

    import xmlrpclib
    from SimpleXMLRPCServer import SimpleXMLRPCServer

    def is_even(n):
        return n%2 == 0

    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_function(is_even, "is_even")
    server.serve_forever()

The client code for the preceding server:

    import xmlrpclib

    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
    print "3 is even: %s" % str(proxy.is_even(3))
    print "100 is even: %s" % str(proxy.is_even(100))



File: python.info,  Node: DateTime Objects,  Next: Binary Objects,  Prev: Boolean Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.3 DateTime Objects
..........................

This class may be initialized with seconds since the epoch, a time
tuple, an ISO 8601 time/date string, or a *note datetime.datetime: 2ce.
instance.  It has the following methods, supported mainly for internal
use by the marshalling/unmarshalling code:

 -- Method: DateTime.decode (string)
     Accept a string as the instance's new time value.

 -- Method: DateTime.encode (out)
     Write the XML-RPC encoding of this `DateTime' item to the _out_
     stream object.

  It also supports certain of Python's built-in operators through
*note __cmp__(): 21e.  and *note __repr__(): 475. methods.

  A working example follows. The server code:

    import datetime
    from SimpleXMLRPCServer import SimpleXMLRPCServer
    import xmlrpclib

    def today():
        today = datetime.datetime.today()
        return xmlrpclib.DateTime(today)

    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_function(today, "today")
    server.serve_forever()

The client code for the preceding server:

    import xmlrpclib
    import datetime

    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")

    today = proxy.today()
    # convert the ISO8601 string to a datetime object
    converted = datetime.datetime.strptime(today.value, "%Y%m%dT%H:%M:%S")
    print "Today: %s" % converted.strftime("%d.%m.%Y, %H:%M")



File: python.info,  Node: Binary Objects,  Next: Fault Objects,  Prev: DateTime Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.4 Binary Objects
........................

This class may be initialized from string data (which may include
NULs). The primary access to the content of a `Binary' object is
provided by an attribute:

 -- Attribute: Binary.data
     The binary data encapsulated by the `Binary' instance.  The data is
     provided as an 8-bit string.

  `Binary' objects have the following methods, supported mainly for
internal use by the marshalling/unmarshalling code:

 -- Method: Binary.decode (string)
     Accept a base64 string and decode it as the instance's new data.

 -- Method: Binary.encode (out)
     Write the XML-RPC base 64 encoding of this binary item to the out
     stream object.

     The encoded data will have newlines every 76 characters as per RFC
     2045 section 6.8(1), which was the de facto standard base64
     specification when the XML-RPC spec was written.

  It also supports certain of Python's built-in operators through a
*note __cmp__(): 21e. method.

  Example usage of the binary objects.  We're going to transfer an
image over XMLRPC:

    from SimpleXMLRPCServer import SimpleXMLRPCServer
    import xmlrpclib

    def python_logo():
         with open("python_logo.jpg", "rb") as handle:
             return xmlrpclib.Binary(handle.read())

    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_function(python_logo, 'python_logo')

    server.serve_forever()

The client gets the image and saves it to a file:

    import xmlrpclib

    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
    with open("fetched_python_logo.jpg", "wb") as handle:
        handle.write(proxy.python_logo().data)


  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2045#section-6.8


File: python.info,  Node: Fault Objects,  Next: ProtocolError Objects,  Prev: Binary Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.5 Fault Objects
.......................

A `Fault' object encapsulates the content of an XML-RPC fault tag. Fault
objects have the following members:

 -- Attribute: Fault.faultCode
     A string indicating the fault type.

 -- Attribute: Fault.faultString
     A string containing a diagnostic message associated with the fault.

  In the following example we're going to intentionally cause a `Fault'
by returning a complex type object.  The server code:

    from SimpleXMLRPCServer import SimpleXMLRPCServer

    # A marshalling error is going to occur because we're returning a
    # complex number
    def add(x,y):
        return x+y+0j

    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_function(add, 'add')

    server.serve_forever()

The client code for the preceding server:

    import xmlrpclib

    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
    try:
        proxy.add(2, 5)
    except xmlrpclib.Fault, err:
        print "A fault occurred"
        print "Fault code: %d" % err.faultCode
        print "Fault string: %s" % err.faultString



File: python.info,  Node: ProtocolError Objects,  Next: MultiCall Objects,  Prev: Fault Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.6 ProtocolError Objects
...............................

A `ProtocolError' object describes a protocol error in the underlying
transport layer (such as a 404 'not found' error if the server named by
the URI does not exist).  It has the following members:

 -- Attribute: ProtocolError.url
     The URI or URL that triggered the error.

 -- Attribute: ProtocolError.errcode
     The error code.

 -- Attribute: ProtocolError.errmsg
     The error message or diagnostic string.

 -- Attribute: ProtocolError.headers
     A string containing the headers of the HTTP/HTTPS request that
     triggered the error.

  In the following example we're going to intentionally cause a
`ProtocolError' by providing an URI that doesn't point to an XMLRPC
server:

    import xmlrpclib

    # create a ServerProxy with an URI that doesn't respond to XMLRPC requests
    proxy = xmlrpclib.ServerProxy("http://www.google.com/")

    try:
        proxy.some_method()
    except xmlrpclib.ProtocolError, err:
        print "A protocol error occurred"
        print "URL: %s" % err.url
        print "HTTP/HTTPS headers: %s" % err.headers
        print "Error code: %d" % err.errcode
        print "Error message: %s" % err.errmsg



File: python.info,  Node: MultiCall Objects,  Next: Convenience Functions<2>,  Prev: ProtocolError Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.7 MultiCall Objects
...........................

New in version 2.4.

  In <http://www.xmlrpc.com/discuss/msgReader%241208>, an approach is
presented to encapsulate multiple calls to a remote server into a
single request.

 -- Class: xmlrpclib.MultiCall (server)
     Create an object used to boxcar method calls. _server_ is the
     eventual target of the call. Calls can be made to the result
     object, but they will immediately return `None', and only store
     the call name and parameters in the *note MultiCall: 1e4f. object.
     Calling the object itself causes all stored calls to be
     transmitted as a single `system.multicall' request. The result of
     this call is a *note generator: 5bb.; iterating over this
     generator yields the individual results.

  A usage example of this class follows.  The server code

    from SimpleXMLRPCServer import SimpleXMLRPCServer

    def add(x,y):
        return x+y

    def subtract(x, y):
        return x-y

    def multiply(x, y):
        return x*y

    def divide(x, y):
        return x/y

    # A simple server with simple arithmetic functions
    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_multicall_functions()
    server.register_function(add, 'add')
    server.register_function(subtract, 'subtract')
    server.register_function(multiply, 'multiply')
    server.register_function(divide, 'divide')
    server.serve_forever()

The client code for the preceding server:

    import xmlrpclib

    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
    multicall = xmlrpclib.MultiCall(proxy)
    multicall.add(7,3)
    multicall.subtract(7,3)
    multicall.multiply(7,3)
    multicall.divide(7,3)
    result = multicall()

    print "7+3=%d, 7-3=%d, 7*3=%d, 7/3=%d" % tuple(result)



File: python.info,  Node: Convenience Functions<2>,  Next: Example of Client Usage,  Prev: MultiCall Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.8 Convenience Functions
...............................

 -- Function: xmlrpclib.boolean (value)
     Convert any Python value to one of the XML-RPC Boolean constants,
     `True' or `False'.

 -- Function: xmlrpclib.dumps (params[, methodname[, methodresponse[,
          encoding[, allow_none]]]])
     Convert _params_ into an XML-RPC request. or into a response if
     _methodresponse_ is true. _params_ can be either a tuple of
     arguments or an instance of the `Fault' exception class.  If
     _methodresponse_ is true, only a single value can be returned,
     meaning that _params_ must be of length 1. _encoding_, if
     supplied, is the encoding to use in the generated XML; the default
     is UTF-8.  Python's *note None: 389. value cannot be used in
     standard XML-RPC; to allow using it via an extension,  provide a
     true value for _allow_none_.

 -- Function: xmlrpclib.loads (data[, use_datetime])
     Convert an XML-RPC request or response into Python objects, a
     `(params, methodname)'.  _params_ is a tuple of argument;
     _methodname_ is a string, or `None' if no method name is present
     in the packet. If the XML-RPC packet represents a fault condition,
     this function will raise a `Fault' exception.  The _use_datetime_
     flag can be used to cause date/time values to be presented as
     *note datetime.datetime: 2ce. objects; this is false by default.

     Changed in version 2.5: The _use_datetime_ flag was added.


File: python.info,  Node: Example of Client Usage,  Next: Example of Client and Server Usage,  Prev: Convenience Functions<2>,  Up: xmlrpclib --- XML-RPC client access

5.20.23.9 Example of Client Usage
.................................

    # simple test program (from the XML-RPC specification)
    from xmlrpclib import ServerProxy, Error

    # server = ServerProxy("http://localhost:8000") # local server
    server = ServerProxy("http://betty.userland.com")

    print server

    try:
        print server.examples.getStateName(41)
    except Error, v:
        print "ERROR", v

To access an XML-RPC server through a proxy, you need to define  a
custom transport.  The following example shows how:

    import xmlrpclib, httplib

    class ProxiedTransport(xmlrpclib.Transport):
        def set_proxy(self, proxy):
            self.proxy = proxy
        def make_connection(self, host):
            self.realhost = host
            h = httplib.HTTP(self.proxy)
            return h
        def send_request(self, connection, handler, request_body):
            connection.putrequest("POST", 'http://%s%s' % (self.realhost, handler))
        def send_host(self, connection, host):
            connection.putheader('Host', self.realhost)

    p = ProxiedTransport()
    p.set_proxy('proxy-server:8080')
    server = xmlrpclib.Server('http://time.xmlrpc.com/RPC2', transport=p)
    print server.currentTime.getCurrentTime()



File: python.info,  Node: Example of Client and Server Usage,  Prev: Example of Client Usage,  Up: xmlrpclib --- XML-RPC client access

5.20.23.10 Example of Client and Server Usage
.............................................

See *note SimpleXMLRPCServer Example: 1e56.


File: python.info,  Node: SimpleXMLRPCServer --- Basic XML-RPC server,  Next: DocXMLRPCServer --- Self-documenting XML-RPC server,  Prev: xmlrpclib --- XML-RPC client access,  Up: Internet Protocols and Support

5.20.24 `SimpleXMLRPCServer' -- Basic XML-RPC server
----------------------------------------------------

New in version 2.2.

  The *note SimpleXMLRPCServer: 158. module provides a basic server
framework for XML-RPC servers written in Python.  Servers can either be
free standing, using *note SimpleXMLRPCServer: 158, or embedded in a
CGI environment, using *note CGIXMLRPCRequestHandler: 1e59.

 -- Class: SimpleXMLRPCServer.SimpleXMLRPCServer (addr[,
          requestHandler[, logRequests[, allow_none[, encoding[,
          bind_and_activate]]]])
     Create a new server instance.  This class provides methods for
     registration of functions that can be called by the XML-RPC
     protocol.  The _requestHandler_ parameter should be a factory for
     request handler instances; it defaults to *note
     SimpleXMLRPCRequestHandler: 1e5b.  The _addr_ and _requestHandler_
     parameters are passed to the `SocketServer.TCPServer' constructor.
     If _logRequests_ is true (the default), requests will be logged;
     setting this parameter to false will turn off logging.   The
     _allow_none_ and _encoding_ parameters are passed on to  *note
     xmlrpclib: 1aa. and control the XML-RPC responses that will be
     returned from the server. The _bind_and_activate_ parameter
     controls whether `server_bind()' and `server_activate()' are
     called immediately by the constructor; it defaults to true.
     Setting it to false allows code to manipulate the
     _allow_reuse_address_ class variable before the address is bound.

     Changed in version 2.5: The _allow_none_ and _encoding_ parameters
     were added.

     Changed in version 2.6: The _bind_and_activate_ parameter was
     added.

 -- Class: SimpleXMLRPCServer.CGIXMLRPCRequestHandler ([allow_none[,
          encoding]])
     Create a new instance to handle XML-RPC requests in a CGI
     environment.  The _allow_none_ and _encoding_ parameters are
     passed on to  *note xmlrpclib: 1aa. and control the XML-RPC
     responses that will be returned  from the server.

     New in version 2.3.

     Changed in version 2.5: The _allow_none_ and _encoding_ parameters
     were added.

 -- Class: SimpleXMLRPCServer.SimpleXMLRPCRequestHandler
     Create a new request handler instance.  This request handler
     supports `POST' requests and modifies logging so that the
     _logRequests_ parameter to the *note SimpleXMLRPCServer: 158.
     constructor parameter is honored.

* Menu:

* SimpleXMLRPCServer Objects::
* CGIXMLRPCRequestHandler::

SimpleXMLRPCServer Objects

* SimpleXMLRPCServer Example::


File: python.info,  Node: SimpleXMLRPCServer Objects,  Next: CGIXMLRPCRequestHandler,  Up: SimpleXMLRPCServer --- Basic XML-RPC server

5.20.24.1 SimpleXMLRPCServer Objects
....................................

The *note SimpleXMLRPCServer: 158. class is based on
`SocketServer.TCPServer' and provides a means of creating simple, stand
alone XML-RPC servers.

 -- Method: SimpleXMLRPCServer.register_function (function[, name])
     Register a function that can respond to XML-RPC requests.  If
     _name_ is given, it will be the method name associated with
     _function_, otherwise `function.__name__' will be used.  _name_
     can be either a normal or Unicode string, and may contain
     characters not legal in Python identifiers, including the period
     character.

 -- Method: SimpleXMLRPCServer.register_instance (instance[,
          allow_dotted_names])
     Register an object which is used to expose method names which have
     not been registered using *note register_function(): 1e5e.  If
     _instance_ contains a `_dispatch()' method, it is called with the
     requested method name and the parameters from the request.  Its
     API is `def _dispatch(self, method, params)' (note that _params_
     does not represent a variable argument list).  If it calls an
     underlying function to perform its task, that function is called as
     `func(*params)', expanding the parameter list. The return value
     from `_dispatch()' is returned to the client as the result.  If
     _instance_ does not have a `_dispatch()' method, it is searched
     for an attribute matching the name of the requested method.

     If the optional _allow_dotted_names_ argument is true and the
     instance does not have a `_dispatch()' method, then if the
     requested method name contains periods, each component of the
     method name is searched for individually, with the effect that a
     simple hierarchical search is performed.  The value found from
     this search is then called with the parameters from the request,
     and the return value is passed back to the client.

          Warning: Enabling the _allow_dotted_names_ option allows
          intruders to access your module's global variables and may
          allow intruders to execute arbitrary code on your machine.
          Only use this option on a secure, closed network.

     Changed in version 2.3.5,: 2.4.1 _allow_dotted_names_ was added to
     plug a security hole; prior versions are insecure.

 -- Method: SimpleXMLRPCServer.register_introspection_functions ()
     Registers the XML-RPC introspection functions `system.listMethods',
     `system.methodHelp' and `system.methodSignature'.

     New in version 2.3.

 -- Method: SimpleXMLRPCServer.register_multicall_functions ()
     Registers the XML-RPC multicall function system.multicall.

 -- Attribute: SimpleXMLRPCRequestHandler.rpc_paths
     An attribute value that must be a tuple listing valid path
     portions of the URL for receiving XML-RPC requests.  Requests
     posted to other paths will result in a 404 "no such page" HTTP
     error.  If this tuple is empty, all paths will be considered
     valid. The default value is `('/', '/RPC2')'.

     New in version 2.5.

 -- Attribute: SimpleXMLRPCRequestHandler.encode_threshold
     If this attribute is not `None', responses larger than this value
     will be encoded using the _gzip_ transfer encoding, if permitted by
     the client.  The default is `1400' which corresponds roughly to a
     single TCP packet.

     New in version 2.7.

* Menu:

* SimpleXMLRPCServer Example::


File: python.info,  Node: SimpleXMLRPCServer Example,  Up: SimpleXMLRPCServer Objects

5.20.24.2 SimpleXMLRPCServer Example
....................................

Server code:

    from SimpleXMLRPCServer import SimpleXMLRPCServer
    from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler

    # Restrict to a particular path.
    class RequestHandler(SimpleXMLRPCRequestHandler):
        rpc_paths = ('/RPC2',)

    # Create server
    server = SimpleXMLRPCServer(("localhost", 8000),
                                requestHandler=RequestHandler)
    server.register_introspection_functions()

    # Register pow() function; this will use the value of
    # pow.__name__ as the name, which is just 'pow'.
    server.register_function(pow)

    # Register a function under a different name
    def adder_function(x,y):
        return x + y
    server.register_function(adder_function, 'add')

    # Register an instance; all the methods of the instance are
    # published as XML-RPC methods (in this case, just 'div').
    class MyFuncs:
        def div(self, x, y):
            return x // y

    server.register_instance(MyFuncs())

    # Run the server's main loop
    server.serve_forever()

The following client code will call the methods made available by the
preceding server:

    import xmlrpclib

    s = xmlrpclib.ServerProxy('http://localhost:8000')
    print s.pow(2,3)  # Returns 2**3 = 8
    print s.add(2,3)  # Returns 5
    print s.div(5,2)  # Returns 5//2 = 2

    # Print list of available methods
    print s.system.listMethods()



File: python.info,  Node: CGIXMLRPCRequestHandler,  Prev: SimpleXMLRPCServer Objects,  Up: SimpleXMLRPCServer --- Basic XML-RPC server

5.20.24.3 CGIXMLRPCRequestHandler
.................................

The *note CGIXMLRPCRequestHandler: 1e59. class can be used to  handle
XML-RPC requests sent to Python CGI scripts.

 -- Method: CGIXMLRPCRequestHandler.register_function (function[, name])
     Register a function that can respond to XML-RPC requests. If
     _name_ is given, it will be the method name associated with
     function, otherwise _function.__name___ will be used. _name_ can
     be either a normal or Unicode string, and may contain  characters
     not legal in Python identifiers, including the period character.

 -- Method: CGIXMLRPCRequestHandler.register_instance (instance)
     Register an object which is used to expose method names  which
     have not been registered using *note register_function(): 1e66. If
     instance contains a `_dispatch()' method, it is called with the
     requested method name and the parameters from the  request; the
     return value is returned to the client as the result. If instance
     does not have a `_dispatch()' method, it is searched for an
     attribute matching the name of the requested method; if  the
     requested method name contains periods, each  component of the
     method name is searched for individually,  with the effect that a
     simple hierarchical search is performed.  The value found from
     this search is then called with the  parameters from the request,
     and the return value is passed  back to the client.

 -- Method: CGIXMLRPCRequestHandler.register_introspection_functions ()
     Register the XML-RPC introspection functions  `system.listMethods',
     `system.methodHelp' and  `system.methodSignature'.

 -- Method: CGIXMLRPCRequestHandler.register_multicall_functions ()
     Register the XML-RPC multicall function `system.multicall'.

 -- Method: CGIXMLRPCRequestHandler.handle_request ([request_text =
          None])
     Handle a XML-RPC request. If _request_text_ is given, it  should
     be the POST data provided by the HTTP server,  otherwise the
     contents of stdin will be used.

  Example:

    class MyFuncs:
        def div(self, x, y) : return x // y


    handler = CGIXMLRPCRequestHandler()
    handler.register_function(pow)
    handler.register_function(lambda x,y: x+y, 'add')
    handler.register_introspection_functions()
    handler.register_instance(MyFuncs())
    handler.handle_request()



File: python.info,  Node: DocXMLRPCServer --- Self-documenting XML-RPC server,  Prev: SimpleXMLRPCServer --- Basic XML-RPC server,  Up: Internet Protocols and Support

5.20.25 `DocXMLRPCServer' -- Self-documenting XML-RPC server
------------------------------------------------------------

     Note: The *note DocXMLRPCServer: b7. module has been merged into
     `xmlrpc.server' in Python 3.0.  The *note 2to3: bbf. tool will
     automatically adapt imports when converting your sources to 3.0.

New in version 2.3.

  The *note DocXMLRPCServer: b7. module extends the classes found in
*note SimpleXMLRPCServer: 158. to serve HTML documentation in response
to HTTP GET requests. Servers can either be free standing, using *note
DocXMLRPCServer: b7, or embedded in a CGI environment, using *note
DocCGIXMLRPCRequestHandler: 1e6d.

 -- Class: DocXMLRPCServer.DocXMLRPCServer (addr[, requestHandler[,
          logRequests[, allow_none[, encoding[, bind_and_activate]]]]])
     Create a new server instance. All parameters have the same meaning
     as for *note SimpleXMLRPCServer.SimpleXMLRPCServer: 1e5a.;
     _requestHandler_ defaults to *note DocXMLRPCRequestHandler: 1e6f.

 -- Class: DocXMLRPCServer.DocCGIXMLRPCRequestHandler
     Create a new instance to handle XML-RPC requests in a CGI
     environment.

 -- Class: DocXMLRPCServer.DocXMLRPCRequestHandler
     Create a new request handler instance. This request handler
     supports XML-RPC POST requests, documentation GET requests, and
     modifies logging so that the _logRequests_ parameter to the *note
     DocXMLRPCServer: b7. constructor parameter is honored.

* Menu:

* DocXMLRPCServer Objects::
* DocCGIXMLRPCRequestHandler::


File: python.info,  Node: DocXMLRPCServer Objects,  Next: DocCGIXMLRPCRequestHandler,  Up: DocXMLRPCServer --- Self-documenting XML-RPC server

5.20.25.1 DocXMLRPCServer Objects
.................................

The *note DocXMLRPCServer: b7. class is derived from *note
SimpleXMLRPCServer.SimpleXMLRPCServer: 1e5a. and provides a means of
creating self-documenting, stand alone XML-RPC servers. HTTP POST
requests are handled as XML-RPC method calls. HTTP GET requests are
handled by generating pydoc-style HTML documentation. This allows a
server to provide its own web-based documentation.

 -- Method: DocXMLRPCServer.set_server_title (server_title)
     Set the title used in the generated HTML documentation. This title
     will be used inside the HTML "title" element.

 -- Method: DocXMLRPCServer.set_server_name (server_name)
     Set the name used in the generated HTML documentation. This name
     will appear at the top of the generated documentation inside a
     "h1" element.

 -- Method: DocXMLRPCServer.set_server_documentation
          (server_documentation)
     Set the description used in the generated HTML documentation. This
     description will appear as a paragraph, below the server name, in
     the documentation.


File: python.info,  Node: DocCGIXMLRPCRequestHandler,  Prev: DocXMLRPCServer Objects,  Up: DocXMLRPCServer --- Self-documenting XML-RPC server

5.20.25.2 DocCGIXMLRPCRequestHandler
....................................

The *note DocCGIXMLRPCRequestHandler: 1e6d. class is derived from *note
SimpleXMLRPCServer.CGIXMLRPCRequestHandler: 1e59. and provides a means
of creating self-documenting, XML-RPC CGI scripts. HTTP POST requests
are handled as XML-RPC method calls. HTTP GET requests are handled by
generating pydoc-style HTML documentation. This allows a server to
provide its own web-based documentation.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_title (server_title)
     Set the title used in the generated HTML documentation. This title
     will be used inside the HTML "title" element.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_name (server_name)
     Set the name used in the generated HTML documentation. This name
     will appear at the top of the generated documentation inside a
     "h1" element.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_documentation
          (server_documentation)
     Set the description used in the generated HTML documentation. This
     description will appear as a paragraph, below the server name, in
     the documentation.


File: python.info,  Node: Multimedia Services,  Next: Internationalization,  Prev: Internet Protocols and Support,  Up: The Python Standard Library

5.21 Multimedia Services
========================

The modules described in this chapter implement various algorithms or
interfaces that are mainly useful for multimedia applications.  They
are available at the discretion of the installation.  Here's an
overview:

* Menu:

* audioop: audioop --- Manipulate raw audio data. Manipulate raw audio data
* imageop: imageop --- Manipulate raw image data. Manipulate raw image data
* aifc: aifc --- Read and write AIFF and AIFC files. Read and write AIFF and AIFC files
* sunau: sunau --- Read and write Sun AU files. Read and write Sun AU files
* wave: wave --- Read and write WAV files. Read and write WAV files
* chunk: chunk --- Read IFF chunked data. Read IFF chunked data
* colorsys: colorsys --- Conversions between color systems. Conversions between color systems
* imghdr: imghdr --- Determine the type of an image. Determine the type of an image
* sndhdr: sndhdr --- Determine type of sound file. Determine type of sound file
* ossaudiodev: ossaudiodev --- Access to OSS-compatible audio devices. Access to OSS-compatible audio devices


File: python.info,  Node: audioop --- Manipulate raw audio data,  Next: imageop --- Manipulate raw image data,  Up: Multimedia Services

5.21.1 `audioop' -- Manipulate raw audio data
---------------------------------------------

The *note audioop: 13. module contains some useful operations on sound
fragments.  It operates on sound fragments consisting of signed integer
samples 8, 16 or 32 bits wide, stored in Python strings.  This is the
same format as used by the *note al: 9. and *note sunaudiodev: 16a.
modules.  All scalar items are integers, unless specified otherwise.

  This module provides support for a-LAW, u-LAW and Intel/DVI ADPCM
encodings.

  A few of the more complicated operations only take 16-bit samples,
otherwise the sample size (in bytes) is always a parameter of the
operation.

  The module defines the following variables and functions:

 -- Exception: audioop.error
     This exception is raised on all errors, such as unknown number of
     bytes per sample, etc.

 -- Function: audioop.add (fragment1, fragment2, width)
     Return a fragment which is the addition of the two samples passed
     as parameters.  _width_ is the sample width in bytes, either `1',
     `2' or `4'.  Both fragments should have the same length.

 -- Function: audioop.adpcm2lin (adpcmfragment, width, state)
     Decode an Intel/DVI ADPCM coded fragment to a linear fragment.
     See the description of *note lin2adpcm(): 1e81. for details on
     ADPCM coding. Return a tuple `(sample, newstate)' where the sample
     has the width specified in _width_.

 -- Function: audioop.alaw2lin (fragment, width)
     Convert sound fragments in a-LAW encoding to linearly encoded
     sound fragments.  a-LAW encoding always uses 8 bits samples, so
     _width_ refers only to the sample width of the output fragment
     here.

     New in version 2.5.

 -- Function: audioop.avg (fragment, width)
     Return the average over all samples in the fragment.

 -- Function: audioop.avgpp (fragment, width)
     Return the average peak-peak value over all samples in the
     fragment. No filtering is done, so the usefulness of this routine
     is questionable.

 -- Function: audioop.bias (fragment, width, bias)
     Return a fragment that is the original fragment with a bias added
     to each sample.

 -- Function: audioop.cross (fragment, width)
     Return the number of zero crossings in the fragment passed as an
     argument.

 -- Function: audioop.findfactor (fragment, reference)
     Return a factor _F_ such that `rms(add(fragment, mul(reference,
     -F)))' is minimal, i.e., return the factor with which you should
     multiply _reference_ to make it match as well as possible to
     _fragment_.  The fragments should both contain 2-byte samples.

     The time taken by this routine is proportional to `len(fragment)'.

 -- Function: audioop.findfit (fragment, reference)
     Try to match _reference_ as well as possible to a portion of
     _fragment_ (which should be the longer fragment).  This is
     (conceptually) done by taking slices out of _fragment_, using
     *note findfactor(): 1e87. to compute the best match, and
     minimizing the result.  The fragments should both contain 2-byte
     samples.  Return a tuple `(offset, factor)' where _offset_ is the
     (integer) offset into _fragment_ where the optimal match started
     and _factor_ is the (floating-point) factor as per *note
     findfactor(): 1e87.

 -- Function: audioop.findmax (fragment, length)
     Search _fragment_ for a slice of length _length_ samples (not
     bytes!) with maximum energy, i.e., return _i_ for which
     `rms(fragment[i*2:(i+length)*2])' is maximal.  The fragments
     should both contain 2-byte samples.

     The routine takes time proportional to `len(fragment)'.

 -- Function: audioop.getsample (fragment, width, index)
     Return the value of sample _index_ from the fragment.

 -- Function: audioop.lin2adpcm (fragment, width, state)
     Convert samples to 4 bit Intel/DVI ADPCM encoding.  ADPCM coding
     is an adaptive coding scheme, whereby each 4 bit number is the
     difference between one sample and the next, divided by a (varying)
     step.  The Intel/DVI ADPCM algorithm has been selected for use by
     the IMA, so it may well become a standard.

     _state_ is a tuple containing the state of the coder.  The coder
     returns a tuple `(adpcmfrag, newstate)', and the _newstate_ should
     be passed to the next call of *note lin2adpcm(): 1e81.  In the
     initial call, `None' can be passed as the state.  _adpcmfrag_ is
     the ADPCM coded fragment packed 2 4-bit values per byte.

 -- Function: audioop.lin2alaw (fragment, width)
     Convert samples in the audio fragment to a-LAW encoding and return
     this as a Python string.  a-LAW is an audio encoding format
     whereby you get a dynamic range of about 13 bits using only 8 bit
     samples.  It is used by the Sun audio hardware, among others.

     New in version 2.5.

 -- Function: audioop.lin2lin (fragment, width, newwidth)
     Convert samples between 1-, 2- and 4-byte formats.

          Note: In some audio formats, such as .WAV files, 16 and 32
          bit samples are signed, but 8 bit samples are unsigned.  So
          when converting to 8 bit wide samples for these formats, you
          need to also add 128 to the result:

              new_frames = audioop.lin2lin(frames, old_width, 1)
              new_frames = audioop.bias(new_frames, 1, 128)

          The same, in reverse, has to be applied when converting from
          8 to 16 or 32 bit width samples.

 -- Function: audioop.lin2ulaw (fragment, width)
     Convert samples in the audio fragment to u-LAW encoding and return
     this as a Python string.  u-LAW is an audio encoding format
     whereby you get a dynamic range of about 14 bits using only 8 bit
     samples.  It is used by the Sun audio hardware, among others.

 -- Function: audioop.minmax (fragment, width)
     Return a tuple consisting of the minimum and maximum values of all
     samples in the sound fragment.

 -- Function: audioop.max (fragment, width)
     Return the maximum of the _absolute value_ of all samples in a
     fragment.

 -- Function: audioop.maxpp (fragment, width)
     Return the maximum peak-peak value in the sound fragment.

 -- Function: audioop.mul (fragment, width, factor)
     Return a fragment that has all samples in the original fragment
     multiplied by the floating-point value _factor_.  Overflow is
     silently ignored.

 -- Function: audioop.ratecv (fragment, width, nchannels, inrate,
          outrate, state[, weightA[, weightB]])
     Convert the frame rate of the input fragment.

     _state_ is a tuple containing the state of the converter.  The
     converter returns a tuple `(newfragment, newstate)', and
     _newstate_ should be passed to the next call of *note ratecv():
     1e92.  The initial call should pass `None' as the state.

     The _weightA_ and _weightB_ arguments are parameters for a simple
     digital filter and default to `1' and `0' respectively.

 -- Function: audioop.reverse (fragment, width)
     Reverse the samples in a fragment and returns the modified
     fragment.

 -- Function: audioop.rms (fragment, width)
     Return the root-mean-square of the fragment, i.e.
     `sqrt(sum(S_i^2)/n)'.

     This is a measure of the power in an audio signal.

 -- Function: audioop.tomono (fragment, width, lfactor, rfactor)
     Convert a stereo fragment to a mono fragment.  The left channel is
     multiplied by _lfactor_ and the right channel by _rfactor_ before
     adding the two channels to give a mono signal.

 -- Function: audioop.tostereo (fragment, width, lfactor, rfactor)
     Generate a stereo fragment from a mono fragment.  Each pair of
     samples in the stereo fragment are computed from the mono sample,
     whereby left channel samples are multiplied by _lfactor_ and right
     channel samples by _rfactor_.

 -- Function: audioop.ulaw2lin (fragment, width)
     Convert sound fragments in u-LAW encoding to linearly encoded
     sound fragments.  u-LAW encoding always uses 8 bits samples, so
     _width_ refers only to the sample width of the output fragment
     here.

  Note that operations such as *note mul(): 1e91. or *note max(): 1e8f.
make no distinction between mono and stereo fragments, i.e. all samples
are treated equal.  If this is a problem the stereo fragment should be
split into two mono fragments first and recombined later.  Here is an
example of how to do that:

    def mul_stereo(sample, width, lfactor, rfactor):
        lsample = audioop.tomono(sample, width, 1, 0)
        rsample = audioop.tomono(sample, width, 0, 1)
        lsample = audioop.mul(lsample, width, lfactor)
        rsample = audioop.mul(rsample, width, rfactor)
        lsample = audioop.tostereo(lsample, width, 1, 0)
        rsample = audioop.tostereo(rsample, width, 0, 1)
        return audioop.add(lsample, rsample, width)

If you use the ADPCM coder to build network packets and you want your
protocol to be stateless (i.e. to be able to tolerate packet loss) you
should not only transmit the data but also the state.  Note that you
should send the _initial_ state (the one you passed to *note
lin2adpcm(): 1e81.) along to the decoder, not the final state (as
returned by the coder).  If you want to use `struct.struct()' to store
the state in binary you can code the first element (the predicted
value) in 16 bits and the second (the delta index) in 8.

  The ADPCM coders have never been tried against other ADPCM coders,
only against themselves.  It could well be that I misinterpreted the
standards in which case they will not be interoperable with the
respective standards.

  The `find*()' routines might look a bit funny at first sight. They are
primarily meant to do echo cancellation.  A reasonably fast way to do
this is to pick the most energetic piece of the output sample, locate
that in the input sample and subtract the whole output sample from the
input sample:

    def echocancel(outputdata, inputdata):
        pos = audioop.findmax(outputdata, 800)    # one tenth second
        out_test = outputdata[pos*2:]
        in_test = inputdata[pos*2:]
        ipos, factor = audioop.findfit(in_test, out_test)
        # Optional (for better cancellation):
        # factor = audioop.findfactor(in_test[ipos*2:ipos*2+len(out_test)],
        #              out_test)
        prefill = '\0'*(pos+ipos)*2
        postfill = '\0'*(len(inputdata)-len(prefill)-len(outputdata))
        outputdata = prefill + audioop.mul(outputdata,2,-factor) + postfill
        return audioop.add(inputdata, outputdata, 2)



File: python.info,  Node: imageop --- Manipulate raw image data,  Next: aifc --- Read and write AIFF and AIFC files,  Prev: audioop --- Manipulate raw audio data,  Up: Multimedia Services

5.21.2 `imageop' -- Manipulate raw image data
---------------------------------------------

Deprecated since version 2.6: The *note imageop: f2. module has been
removed in Python 3.0.

  The *note imageop: f2. module contains some useful operations on
images. It operates on images consisting of 8 or 32 bit pixels stored
in Python strings.  This is the same format as used by
`gl.lrectwrite()' and the *note imgfile: f4. module.

  The module defines the following variables and functions:

 -- Exception: imageop.error
     This exception is raised on all errors, such as unknown number of
     bits per pixel, etc.

 -- Function: imageop.crop (image, psize, width, height, x0, y0, x1, y1)
     Return the selected part of _image_, which should be _width_ by
     _height_ in size and consist of pixels of _psize_ bytes. _x0_,
     _y0_, _x1_ and _y1_ are like the `gl.lrectread()' parameters, i.e.
     the boundary is included in the new image.  The new boundaries
     need not be inside the picture.  Pixels that fall outside the old
     image will have their value set to zero.  If _x0_ is bigger than
     _x1_ the new image is mirrored.  The same holds for the y
     coordinates.

 -- Function: imageop.scale (image, psize, width, height, newwidth,
          newheight)
     Return _image_ scaled to size _newwidth_ by _newheight_. No
     interpolation is done, scaling is done by simple-minded pixel
     duplication or removal.  Therefore, computer-generated images or
     dithered images will not look nice after scaling.

 -- Function: imageop.tovideo (image, psize, width, height)
     Run a vertical low-pass filter over an image.  It does so by
     computing each destination pixel as the average of two
     vertically-aligned source pixels.  The main use of this routine is
     to forestall excessive flicker if the image is displayed on a
     video device that uses interlacing, hence the name.

 -- Function: imageop.grey2mono (image, width, height, threshold)
     Convert a 8-bit deep greyscale image to a 1-bit deep image by
     thresholding all the pixels.  The resulting image is tightly
     packed and is probably only useful as an argument to *note
     mono2grey(): 1e9f.

 -- Function: imageop.dither2mono (image, width, height)
     Convert an 8-bit greyscale image to a 1-bit monochrome image using
     a (simple-minded) dithering algorithm.

 -- Function: imageop.mono2grey (image, width, height, p0, p1)
     Convert a 1-bit monochrome image to an 8 bit greyscale or color
     image. All pixels that are zero-valued on input get value _p0_ on
     output and all one-value input pixels get value _p1_ on output.
     To convert a monochrome black-and-white image to greyscale pass
     the values `0' and `255' respectively.

 -- Function: imageop.grey2grey4 (image, width, height)
     Convert an 8-bit greyscale image to a 4-bit greyscale image
     without dithering.

 -- Function: imageop.grey2grey2 (image, width, height)
     Convert an 8-bit greyscale image to a 2-bit greyscale image
     without dithering.

 -- Function: imageop.dither2grey2 (image, width, height)
     Convert an 8-bit greyscale image to a 2-bit greyscale image with
     dithering.  As for *note dither2mono(): 1ea0, the dithering
     algorithm is currently very simple.

 -- Function: imageop.grey42grey (image, width, height)
     Convert a 4-bit greyscale image to an 8-bit greyscale image.

 -- Function: imageop.grey22grey (image, width, height)
     Convert a 2-bit greyscale image to an 8-bit greyscale image.

 -- Data: imageop.backward_compatible
     If set to 0, the functions in this module use a non-backward
     compatible way of representing multi-byte pixels on little-endian
     systems.  The SGI for which this module was originally written is
     a big-endian system, so setting this variable will have no effect.
     However, the code wasn't originally intended to run on anything
     else, so it made assumptions about byte order which are not
     universal.  Setting this variable to 0 will cause the byte order
     to be reversed on little-endian systems, so that it then is the
     same as on big-endian systems.


File: python.info,  Node: aifc --- Read and write AIFF and AIFC files,  Next: sunau --- Read and write Sun AU files,  Prev: imageop --- Manipulate raw image data,  Up: Multimedia Services

5.21.3 `aifc' -- Read and write AIFF and AIFC files
---------------------------------------------------

This module provides support for reading and writing AIFF and AIFF-C
files.  AIFF is Audio Interchange File Format, a format for storing
digital audio samples in a file.  AIFF-C is a newer version of the
format that includes the ability to compress the audio data.

     Note: Some operations may only work under IRIX; these will raise
     *note ImportError: 35f.  when attempting to import the `cl'
     module, which is only available on IRIX.

  Audio files have a number of parameters that describe the audio data.
The sampling rate or frame rate is the number of times per second the
sound is sampled.  The number of channels indicate if the audio is
mono, stereo, or quadro.  Each frame consists of one sample per
channel.  The sample size is the size in bytes of each sample.  Thus a
frame consists of _nchannels_**samplesize* bytes, and a second's worth
of audio consists of _nchannels_**samplesize***framerate* bytes.

  For example, CD quality audio has a sample size of two bytes (16
bits), uses two channels (stereo) and has a frame rate of 44,100
frames/second.  This gives a frame size of 4 bytes (2*2), and a
second's worth occupies 2*2*44100 bytes (176,400 bytes).

  Module *note aifc: 8. defines the following function:

 -- Function: aifc.open (file[, mode])
     Open an AIFF or AIFF-C file and return an object instance with
     methods that are described below.  The argument _file_ is either a
     string naming a file or a file object.  _mode_ must be `'r'' or
     `'rb'' when the file must be opened for reading, or `'w''  or
     `'wb'' when the file must be opened for writing.  If omitted,
     `file.mode' is used if it exists, otherwise `'rb'' is used.  When
     used for writing, the file object should be seekable, unless you
     know ahead of time how many samples you are going to write in
     total and use `writeframesraw()' and `setnframes()'.

  Objects returned by *note open(): 1ea9. when a file is opened for
reading have the following methods:

 -- Method: aifc.getnchannels ()
     Return the number of audio channels (1 for mono, 2 for stereo).

 -- Method: aifc.getsampwidth ()
     Return the size in bytes of individual samples.

 -- Method: aifc.getframerate ()
     Return the sampling rate (number of audio frames per second).

 -- Method: aifc.getnframes ()
     Return the number of audio frames in the file.

 -- Method: aifc.getcomptype ()
     Return a four-character string describing the type of compression
     used in the audio file.  For AIFF files, the returned value is
     `'NONE''.

 -- Method: aifc.getcompname ()
     Return a human-readable description of the type of compression
     used in the audio file.  For AIFF files, the returned value is
     `'not compressed''.

 -- Method: aifc.getparams ()
     Return a tuple consisting of all of the above values in the above
     order.

 -- Method: aifc.getmarkers ()
     Return a list of markers in the audio file.  A marker consists of
     a tuple of three elements.  The first is the mark ID (an integer),
     the second is the mark position in frames from the beginning of
     the data (an integer), the third is the name of the mark (a
     string).

 -- Method: aifc.getmark (id)
     Return the tuple as described in *note getmarkers(): 1eb1. for the
     mark with the given _id_.

 -- Method: aifc.readframes (nframes)
     Read and return the next _nframes_ frames from the audio file.
     The returned data is a string containing for each frame the
     uncompressed samples of all channels.

 -- Method: aifc.rewind ()
     Rewind the read pointer.  The next *note readframes(): 1eb3. will
     start from the beginning.

 -- Method: aifc.setpos (pos)
     Seek to the specified frame number.

 -- Method: aifc.tell ()
     Return the current frame number.

 -- Method: aifc.close ()
     Close the AIFF file.  After calling this method, the object can no
     longer be used.

  Objects returned by *note open(): 1ea9. when a file is opened for
writing have all the above methods, except for `readframes()' and
`setpos()'.  In addition the following methods exist.  The `get*()'
methods can only be called after the corresponding `set*()' methods
have been called.  Before the first `writeframes()' or
`writeframesraw()', all parameters except for the number of frames must
be filled in.

 -- Method: aifc.aiff ()
     Create an AIFF file.  The default is that an AIFF-C file is
     created, unless the name of the file ends in `'.aiff'' in which
     case the default is an AIFF file.

 -- Method: aifc.aifc ()
     Create an AIFF-C file.  The default is that an AIFF-C file is
     created, unless the name of the file ends in `'.aiff'' in which
     case the default is an AIFF file.

 -- Method: aifc.setnchannels (nchannels)
     Specify the number of channels in the audio file.

 -- Method: aifc.setsampwidth (width)
     Specify the size in bytes of audio samples.

 -- Method: aifc.setframerate (rate)
     Specify the sampling frequency in frames per second.

 -- Method: aifc.setnframes (nframes)
     Specify the number of frames that are to be written to the audio
     file. If this parameter is not set, or not set correctly, the file
     needs to support seeking.

 -- Method: aifc.setcomptype (type, name)
     Specify the compression type.  If not specified, the audio data
     will not be compressed.  In AIFF files, compression is not
     possible.  The name parameter should be a human-readable
     description of the compression type, the type parameter should be
     a four-character string.  Currently the following compression
     types are supported: NONE, ULAW, ALAW, G722.

 -- Method: aifc.setparams (nchannels, sampwidth, framerate, comptype,
          compname)
     Set all the above parameters at once.  The argument is a tuple
     consisting of the various parameters.  This means that it is
     possible to use the result of a *note getparams(): 1eb0. call as
     argument to *note setparams(): 1ebf.

 -- Method: aifc.setmark (id, pos, name)
     Add a mark with the given id (larger than 0), and the given name
     at the given position.  This method can be called at any time
     before *note close(): 1eb7.

 -- Method: aifc.tell ()
     Return the current write position in the output file.  Useful in
     combination with *note setmark(): 1ec0.

 -- Method: aifc.writeframes (data)
     Write data to the output file.  This method can only be called
     after the audio file parameters have been set.

 -- Method: aifc.writeframesraw (data)
     Like *note writeframes(): 1ec1, except that the header of the
     audio file is not updated.

 -- Method: aifc.close ()
     Close the AIFF file.  The header of the file is updated to reflect
     the actual size of the audio data. After calling this method, the
     object can no longer be used.


File: python.info,  Node: sunau --- Read and write Sun AU files,  Next: wave --- Read and write WAV files,  Prev: aifc --- Read and write AIFF and AIFC files,  Up: Multimedia Services

5.21.4 `sunau' -- Read and write Sun AU files
---------------------------------------------

The *note sunau: 169. module provides a convenient interface to the Sun
AU sound format.  Note that this module is interface-compatible with
the modules *note aifc: 8. and *note wave: 195.

  An audio file consists of a header followed by the data.  The fields
of the header are:

Field               Contents
------------------------------------------------------------------------ 
magic word          The four bytes `.snd'.
header size         Size of the header, including info, in bytes.
data size           Physical size of the data, in bytes.
encoding            Indicates how the audio samples are encoded.
sample rate         The sampling rate.
# of channels       The number of channels in the samples.
info                ASCII string giving a description of the audio
                    file (padded with null bytes).

  Apart from the info field, all header fields are 4 bytes in size.
They are all 32-bit unsigned integers encoded in big-endian byte order.

  The *note sunau: 169. module defines the following functions:

 -- Function: sunau.open (file, mode)
     If _file_ is a string, open the file by that name, otherwise treat
     it as a seekable file-like object. _mode_ can be any of

    `'r''
          Read only mode.

    `'w''
          Write only mode.

     Note that it does not allow read/write files.

     A _mode_ of `'r'' returns a `AU_read' object, while a _mode_ of
     `'w'' or `'wb'' returns a `AU_write' object.

 -- Function: sunau.openfp (file, mode)
     A synonym for *note open(): 1ec5, maintained for backwards
     compatibility.

  The *note sunau: 169. module defines the following exception:

 -- Exception: sunau.Error
     An error raised when something is impossible because of Sun AU
     specs or implementation deficiency.

  The *note sunau: 169. module defines the following data items:

 -- Data: sunau.AUDIO_FILE_MAGIC
     An integer every valid Sun AU file begins with, stored in
     big-endian form.  This is the string `.snd' interpreted as an
     integer.

 -- Data: sunau.AUDIO_FILE_ENCODING_MULAW_8
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_8
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_16
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_24
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_32
 -- Data: sunau.AUDIO_FILE_ENCODING_ALAW_8
     Values of the encoding field from the AU header which are
     supported by this module.

 -- Data: sunau.AUDIO_FILE_ENCODING_FLOAT
 -- Data: sunau.AUDIO_FILE_ENCODING_DOUBLE
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G721
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G722
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5
     Additional known values of the encoding field from the AU header,
     but which are not supported by this module.

* Menu:

* AU_read Objects::
* AU_write Objects::


File: python.info,  Node: AU_read Objects,  Next: AU_write Objects,  Up: sunau --- Read and write Sun AU files

5.21.4.1 AU_read Objects
........................

AU_read objects, as returned by *note open(): 1ec5. above, have the
following methods:

 -- Method: AU_read.close ()
     Close the stream, and make the instance unusable. (This is  called
     automatically on deletion.)

 -- Method: AU_read.getnchannels ()
     Returns number of audio channels (1 for mone, 2 for stereo).

 -- Method: AU_read.getsampwidth ()
     Returns sample width in bytes.

 -- Method: AU_read.getframerate ()
     Returns sampling frequency.

 -- Method: AU_read.getnframes ()
     Returns number of audio frames.

 -- Method: AU_read.getcomptype ()
     Returns compression type. Supported compression types are
     `'ULAW'', `'ALAW'' and `'NONE''.

 -- Method: AU_read.getcompname ()
     Human-readable version of *note getcomptype(): 1edc.  The
     supported types have the respective names `'CCITT G.711 u-law'',
     `'CCITT G.711 A-law'' and `'not compressed''.

 -- Method: AU_read.getparams ()
     Returns a tuple `(nchannels, sampwidth, framerate, nframes,
     comptype, compname)', equivalent to output of the `get*()' methods.

 -- Method: AU_read.readframes (n)
     Reads and returns at most _n_ frames of audio, as a string of
     bytes.  The data will be returned in linear format.  If the
     original data is in u-LAW format, it will be converted.

 -- Method: AU_read.rewind ()
     Rewind the file pointer to the beginning of the audio stream.

  The following two methods define a term "position" which is
compatible between them, and is otherwise implementation dependent.

 -- Method: AU_read.setpos (pos)
     Set the file pointer to the specified position.  Only values
     returned from *note tell(): 1ee2. should be used for _pos_.

 -- Method: AU_read.tell ()
     Return current file pointer position.  Note that the returned
     value has nothing to do with the actual position in the file.

  The following two functions are defined for compatibility with the
*note aifc: 8, and don't do anything interesting.

 -- Method: AU_read.getmarkers ()
     Returns `None'.

 -- Method: AU_read.getmark (id)
     Raise an error.


File: python.info,  Node: AU_write Objects,  Prev: AU_read Objects,  Up: sunau --- Read and write Sun AU files

5.21.4.2 AU_write Objects
.........................

AU_write objects, as returned by *note open(): 1ec5. above, have the
following methods:

 -- Method: AU_write.setnchannels (n)
     Set the number of channels.

 -- Method: AU_write.setsampwidth (n)
     Set the sample width (in bytes.)

 -- Method: AU_write.setframerate (n)
     Set the frame rate.

 -- Method: AU_write.setnframes (n)
     Set the number of frames. This can be later changed, when and if
     more  frames are written.

 -- Method: AU_write.setcomptype (type, name)
     Set the compression type and description. Only `'NONE'' and
     `'ULAW'' are supported on output.

 -- Method: AU_write.setparams (tuple)
     The _tuple_ should be `(nchannels, sampwidth, framerate, nframes,
     comptype, compname)', with values valid for the `set*()' methods.
     Set all parameters.

 -- Method: AU_write.tell ()
     Return current position in the file, with the same disclaimer for
     the *note AU_read.tell(): 1ee2. and *note AU_read.setpos(): 1ee1.
     methods.

 -- Method: AU_write.writeframesraw (data)
     Write audio frames, without correcting _nframes_.

 -- Method: AU_write.writeframes (data)
     Write audio frames and make sure _nframes_ is correct.

 -- Method: AU_write.close ()
     Make sure _nframes_ is correct, and close the file.

     This method is called upon deletion.

  Note that it is invalid to set any parameters after calling
`writeframes()' or `writeframesraw()'.


File: python.info,  Node: wave --- Read and write WAV files,  Next: chunk --- Read IFF chunked data,  Prev: sunau --- Read and write Sun AU files,  Up: Multimedia Services

5.21.5 `wave' -- Read and write WAV files
-----------------------------------------

The *note wave: 195. module provides a convenient interface to the WAV
sound format.  It does not support compression/decompression, but it
does support mono/stereo.

  The *note wave: 195. module defines the following function and
exception:

 -- Function: wave.open (file[, mode])
     If _file_ is a string, open the file by that name, otherwise treat
     it as a seekable file-like object.  _mode_ can be any of

    `'r'', `'rb''
          Read only mode.

    `'w'', `'wb''
          Write only mode.

     Note that it does not allow read/write WAV files.

     A _mode_ of `'r'' or `'rb'' returns a `Wave_read' object, while a
     _mode_ of `'w'' or `'wb'' returns a `Wave_write' object.  If
     _mode_ is omitted and a file-like object is passed as _file_,
     `file.mode' is used as the default value for _mode_ (the `'b''
     flag is still added if necessary).

     If you pass in a file-like object, the wave object will not close
     it when its `close()' method is called; it is the caller's
     responsibility to close the file object.

 -- Function: wave.openfp (file, mode)
     A synonym for *note open(): 1ef3, maintained for backwards
     compatibility.

 -- Exception: wave.Error
     An error raised when something is impossible because it violates
     the WAV specification or hits an implementation deficiency.

* Menu:

* Wave_read Objects::
* Wave_write Objects::


File: python.info,  Node: Wave_read Objects,  Next: Wave_write Objects,  Up: wave --- Read and write WAV files

5.21.5.1 Wave_read Objects
..........................

Wave_read objects, as returned by *note open(): 1ef3, have the
following methods:

 -- Method: Wave_read.close ()
     Close the stream if it was opened by *note wave: 195, and make the
     instance unusable.  This is called automatically on object
     collection.

 -- Method: Wave_read.getnchannels ()
     Returns number of audio channels (`1' for mono, `2' for stereo).

 -- Method: Wave_read.getsampwidth ()
     Returns sample width in bytes.

 -- Method: Wave_read.getframerate ()
     Returns sampling frequency.

 -- Method: Wave_read.getnframes ()
     Returns number of audio frames.

 -- Method: Wave_read.getcomptype ()
     Returns compression type (`'NONE'' is the only supported type).

 -- Method: Wave_read.getcompname ()
     Human-readable version of *note getcomptype(): 1efd. Usually `'not
     compressed'' parallels `'NONE''.

 -- Method: Wave_read.getparams ()
     Returns a tuple `(nchannels, sampwidth, framerate, nframes,
     comptype, compname)', equivalent to output of the `get*()' methods.

 -- Method: Wave_read.readframes (n)
     Reads and returns at most _n_ frames of audio, as a string of
     bytes.

 -- Method: Wave_read.rewind ()
     Rewind the file pointer to the beginning of the audio stream.

  The following two methods are defined for compatibility with the
*note aifc: 8.  module, and don't do anything interesting.

 -- Method: Wave_read.getmarkers ()
     Returns `None'.

 -- Method: Wave_read.getmark (id)
     Raise an error.

  The following two methods define a term "position" which is
compatible between them, and is otherwise implementation dependent.

 -- Method: Wave_read.setpos (pos)
     Set the file pointer to the specified position.

 -- Method: Wave_read.tell ()
     Return current file pointer position.


File: python.info,  Node: Wave_write Objects,  Prev: Wave_read Objects,  Up: wave --- Read and write WAV files

5.21.5.2 Wave_write Objects
...........................

Wave_write objects, as returned by *note open(): 1ef3, have the
following methods:

 -- Method: Wave_write.close ()
     Make sure _nframes_ is correct, and close the file if it was
     opened by *note wave: 195.  This method is called upon object
     collection.

 -- Method: Wave_write.setnchannels (n)
     Set the number of channels.

 -- Method: Wave_write.setsampwidth (n)
     Set the sample width to _n_ bytes.

 -- Method: Wave_write.setframerate (n)
     Set the frame rate to _n_.

 -- Method: Wave_write.setnframes (n)
     Set the number of frames to _n_. This will be changed later if
     more frames are written.

 -- Method: Wave_write.setcomptype (type, name)
     Set the compression type and description. At the moment, only
     compression type `NONE' is supported, meaning no compression.

 -- Method: Wave_write.setparams (tuple)
     The _tuple_ should be `(nchannels, sampwidth, framerate, nframes,
     comptype, compname)', with values valid for the `set*()' methods.
     Sets all parameters.

 -- Method: Wave_write.tell ()
     Return current position in the file, with the same disclaimer for
     the *note Wave_read.tell(): 1f05. and *note Wave_read.setpos():
     1f04. methods.

 -- Method: Wave_write.writeframesraw (data)
     Write audio frames, without correcting _nframes_.

 -- Method: Wave_write.writeframes (data)
     Write audio frames and make sure _nframes_ is correct.

  Note that it is invalid to set any parameters after calling
`writeframes()' or `writeframesraw()', and any attempt to do so will
raise *note wave.Error: 1ef5.


File: python.info,  Node: chunk --- Read IFF chunked data,  Next: colorsys --- Conversions between color systems,  Prev: wave --- Read and write WAV files,  Up: Multimedia Services

5.21.6 `chunk' -- Read IFF chunked data
---------------------------------------

This module provides an interface for reading files that use EA IFF 85
chunks.  (1)  This format is used in at least the Audio Interchange
File Format (AIFF/AIFF-C) and the Real Media File Format (RMFF).  The
WAVE audio file format is closely related and can also be read using
this module.

  A chunk has the following structure:

Offset        Length       Contents
--------------------------------------------------------------- 
0             4            Chunk ID
4             4            Size of chunk in big-endian byte
                           order, not including the header
8             _n_          Data bytes, where _n_ is the size
                           given in the preceding field
8 + _n_       0 or 1       Pad byte needed if _n_ is odd and
                           chunk alignment is used

  The ID is a 4-byte string which identifies the type of chunk.

  The size field (a 32-bit value, encoded using big-endian byte order)
gives the size of the chunk data, not including the 8-byte header.

  Usually an IFF-type file consists of one or more chunks.  The
proposed usage of the *note Chunk: 1f14. class defined here is to
instantiate an instance at the start of each chunk and read from the
instance until it reaches the end, after which a new instance can be
instantiated. At the end of the file, creating a new instance will fail
with a *note EOFError: 854. exception.

 -- Class: chunk.Chunk (file[, align, bigendian, inclheader])
     Class which represents a chunk.  The _file_ argument is expected
     to be a file-like object.  An instance of this class is
     specifically allowed.  The only method that is needed is *note
     read(): 1f15.  If the methods *note seek(): 1f16. and *note
     tell(): 1f17. are present and don't raise an exception, they are
     also used.  If these methods are present and raise an exception,
     they are expected to not have altered the object.  If the optional
     argument _align_ is true, chunks are assumed to be aligned on
     2-byte boundaries.  If _align_ is false, no alignment is assumed.
     The default value is true.  If the optional argument _bigendian_
     is false, the chunk size is assumed to be in little-endian order.
     This is needed for WAVE audio files. The default value is true.
     If the optional argument _inclheader_ is true, the size given in
     the chunk header includes the size of the header.  The default
     value is false.

     A *note Chunk: 1f14. object supports the following methods:

      -- Method: getname ()
          Returns the name (ID) of the chunk.  This is the first 4
          bytes of the chunk.

      -- Method: getsize ()
          Returns the size of the chunk.

      -- Method: close ()
          Close and skip to the end of the chunk.  This does not close
          the underlying file.

     The remaining methods will raise *note IOError: 1f7. if called
     after the *note close(): 1f1a. method has been called.

      -- Method: isatty ()
          Returns `False'.

      -- Method: seek (pos[, whence])
          Set the chunk's current position.  The _whence_ argument is
          optional and defaults to `0' (absolute file positioning);
          other values are `1' (seek relative to the current position)
          and `2' (seek relative to the file's end).  There is no
          return value. If the underlying file does not allow seek,
          only forward seeks are allowed.

      -- Method: tell ()
          Return the current position into the chunk.

      -- Method: read ([size])
          Read at most _size_ bytes from the chunk (less if the read
          hits the end of the chunk before obtaining _size_ bytes).  If
          the _size_ argument is negative or omitted, read all data
          until the end of the chunk.  The bytes are returned as a
          string object.  An empty string is returned when the end of
          the chunk is encountered immediately.

      -- Method: skip ()
          Skip to the end of the chunk.  All further calls to *note
          read(): 1f15. for the chunk will return `'''.  If you are not
          interested in the contents of the chunk, this method should
          be called so that the file points to the start of the next
          chunk.

  ---------- Footnotes ----------

  (1) "EA IFF 85" Standard for Interchange Format Files, Jerry
Morrison, Electronic Arts, January 1985.


File: python.info,  Node: colorsys --- Conversions between color systems,  Next: imghdr --- Determine the type of an image,  Prev: chunk --- Read IFF chunked data,  Up: Multimedia Services

5.21.7 `colorsys' -- Conversions between color systems
------------------------------------------------------

The *note colorsys: 67. module defines bidirectional conversions of
color values between colors expressed in the RGB (Red Green Blue) color
space used in computer monitors and three other coordinate systems:
YIQ, HLS (Hue Lightness Saturation) and HSV (Hue Saturation Value).
Coordinates in all of these color spaces are floating point values.  In
the YIQ space, the Y coordinate is between 0 and 1, but the I and Q
coordinates can be positive or negative.  In all other spaces, the
coordinates are all between 0 and 1.

See also
........

More information about color spaces can be found at
<http://www.poynton.com/ColorFAQ.html> and
<http://www.cambridgeincolour.com/tutorials/color-spaces.htm>.

  The *note colorsys: 67. module defines the following functions:

 -- Function: colorsys.rgb_to_yiq (r, g, b)
     Convert the color from RGB coordinates to YIQ coordinates.

 -- Function: colorsys.yiq_to_rgb (y, i, q)
     Convert the color from YIQ coordinates to RGB coordinates.

 -- Function: colorsys.rgb_to_hls (r, g, b)
     Convert the color from RGB coordinates to HLS coordinates.

 -- Function: colorsys.hls_to_rgb (h, l, s)
     Convert the color from HLS coordinates to RGB coordinates.

 -- Function: colorsys.rgb_to_hsv (r, g, b)
     Convert the color from RGB coordinates to HSV coordinates.

 -- Function: colorsys.hsv_to_rgb (h, s, v)
     Convert the color from HSV coordinates to RGB coordinates.

  Example:

    >>> import colorsys
    >>> colorsys.rgb_to_hsv(.3, .4, .2)
    (0.25, 0.5, 0.4)
    >>> colorsys.hsv_to_rgb(0.25, 0.5, 0.4)
    (0.3, 0.4, 0.2)



File: python.info,  Node: imghdr --- Determine the type of an image,  Next: sndhdr --- Determine type of sound file,  Prev: colorsys --- Conversions between color systems,  Up: Multimedia Services

5.21.8 `imghdr' -- Determine the type of an image
-------------------------------------------------

The *note imghdr: f5. module determines the type of image contained in
a file or byte stream.

  The *note imghdr: f5. module defines the following function:

 -- Function: imghdr.what (filename[, h])
     Tests the image data contained in the file named by _filename_,
     and returns a string describing the image type.  If optional _h_
     is provided, the _filename_ is ignored and _h_ is assumed to
     contain the byte stream to test.

  The following image types are recognized, as listed below with the
return value from *note what(): 1f27.:

Value            Image format
--------------------------------------------------------- 
`'rgb''          SGI ImgLib Files
`'gif''          GIF 87a and 89a Files
`'pbm''          Portable Bitmap Files
`'pgm''          Portable Graymap Files
`'ppm''          Portable Pixmap Files
`'tiff''         TIFF Files
`'rast''         Sun Raster Files
`'xbm''          X Bitmap Files
`'jpeg''         JPEG data in JFIF or Exif formats
`'bmp''          BMP files
`'png''          Portable Network Graphics

  New in version 2.5: Exif detection.

  You can extend the list of file types *note imghdr: f5. can recognize
by appending to this variable:

 -- Data: imghdr.tests
     A list of functions performing the individual tests.  Each
     function takes two arguments: the byte-stream and an open
     file-like object. When *note what(): 1f27. is called with a
     byte-stream, the file-like object will be `None'.

     The test function should return a string describing the image type
     if the test succeeded, or `None' if it failed.

  Example:

    >>> import imghdr
    >>> imghdr.what('/tmp/bass.gif')
    'gif'



File: python.info,  Node: sndhdr --- Determine type of sound file,  Next: ossaudiodev --- Access to OSS-compatible audio devices,  Prev: imghdr --- Determine the type of an image,  Up: Multimedia Services

5.21.9 `sndhdr' -- Determine type of sound file
-----------------------------------------------

The *note sndhdr: 15c. provides utility functions which attempt to
determine the type of sound data which is in a file.  When these
functions are able to determine what type of sound data is stored in a
file, they return a tuple `(type, sampling_rate, channels, frames,
bits_per_sample)'.  The value for _type_ indicates the data type and
will be one of the strings `'aifc'', `'aiff'', `'au'', `'hcom'',
`'sndr'', `'sndt'', `'voc'', `'wav'', `'8svx'', `'sb'', `'ub'', or
`'ul''.  The _sampling_rate_ will be either the actual value or `0' if
unknown or difficult to decode.  Similarly, _channels_ will be either
the number of channels or `0' if it cannot be determined or if the
value is difficult to decode.  The value for _frames_ will be either
the number of frames or `-1'.  The last item in the tuple,
_bits_per_sample_, will either be the sample size in bits or `'A'' for
A-LAW or `'U'' for u-LAW.

 -- Function: sndhdr.what (filename)
     Determines the type of sound data stored in the file _filename_
     using *note whathdr(): 1f2c.  If it succeeds, returns a tuple as
     described above, otherwise `None' is returned.

 -- Function: sndhdr.whathdr (filename)
     Determines the type of sound data stored in a file based on the
     file  header.  The name of the file is given by _filename_.  This
     function returns a tuple as described above on success, or `None'.


File: python.info,  Node: ossaudiodev --- Access to OSS-compatible audio devices,  Prev: sndhdr --- Determine type of sound file,  Up: Multimedia Services

5.21.10 `ossaudiodev' -- Access to OSS-compatible audio devices
---------------------------------------------------------------

New in version 2.3.

  This module allows you to access the OSS (Open Sound System) audio
interface.  OSS is available for a wide range of open-source and
commercial Unices, and is the standard audio interface for Linux and
recent versions of FreeBSD.

See also
........

Open Sound System Programmer's Guide(1)
     the official documentation for the OSS C API

  The module defines a large number of constants supplied by the OSS
device driver; see `<sys/soundcard.h>' on either Linux or FreeBSD for a
listing .

  *note ossaudiodev: 12b. defines the following variables and functions:

 -- Exception: ossaudiodev.OSSAudioError
     This exception is raised on certain errors.  The argument is a
     string describing what went wrong.

     (If *note ossaudiodev: 12b. receives an error from a system call
     such as `open()', `write()', or `ioctl()', it raises *note
     IOError: 1f7.  Errors detected directly by *note ossaudiodev: 12b.
     result in *note OSSAudioError: 1f2f.)

     (For backwards compatibility, the exception class is also
     available as `ossaudiodev.error'.)

 -- Function: ossaudiodev.open ([device], mode)
     Open an audio device and return an OSS audio device object.  This
     object supports many file-like methods, such as `read()',
     `write()', and `fileno()' (although there are subtle differences
     between conventional Unix read/write semantics and those of OSS
     audio devices).  It also supports a number of audio-specific
     methods; see below for the complete list of methods.

     _device_ is the audio device filename to use.  If it is not
     specified, this module first looks in the environment variable `AUDIODEV'
     for a device to use.  If not found, it falls back to `/dev/dsp'.

     _mode_ is one of `'r'' for read-only (record) access, `'w'' for
     write-only (playback) access and `'rw'' for both. Since many sound
     cards only allow one process to have the recorder or player open
     at a time, it is a good idea to open the device only for the
     activity needed.  Further, some sound cards are half-duplex: they
     can be opened for reading or writing, but not both at once.

     Note the unusual calling syntax: the _first_ argument is optional,
     and the second is required.  This is a historical artifact for
     compatibility with the older `linuxaudiodev' module which *note
     ossaudiodev: 12b. supersedes.


 -- Function: ossaudiodev.openmixer ([device])
     Open a mixer device and return an OSS mixer device object.
     _device_ is the mixer device filename to use.  If it is not
     specified, this module first looks in the environment variable `MIXERDEV'
     for a device to use.  If not found, it falls back to `/dev/mixer'.

* Menu:

* Audio Device Objects::
* Mixer Device Objects::

  ---------- Footnotes ----------

  (1) http://www.opensound.com/pguide/oss.pdf


File: python.info,  Node: Audio Device Objects,  Next: Mixer Device Objects,  Up: ossaudiodev --- Access to OSS-compatible audio devices

5.21.10.1 Audio Device Objects
..............................

Before you can write to or read from an audio device, you must call
three methods in the correct order:

  1. `setfmt()' to set the output format

  2. `channels()' to set the number of channels

  3. `speed()' to set the sample rate

  Alternately, you can use the `setparameters()' method to set all
three audio parameters at once.  This is more convenient, but may not
be as flexible in all cases.

  The audio device objects returned by *note open(): 1f30. define the
following methods and (read-only) attributes:

 -- Method: oss_audio_device.close ()
     Explicitly close the audio device.  When you are done writing to
     or reading from an audio device, you should explicitly close it.
     A closed device cannot be used again.

 -- Method: oss_audio_device.fileno ()
     Return the file descriptor associated with the device.

 -- Method: oss_audio_device.read (size)
     Read _size_ bytes from the audio input and return them as a Python
     string.  Unlike most Unix device drivers, OSS audio devices in
     blocking mode (the default) will block *note read(): 1f36. until
     the entire requested amount of data is available.

 -- Method: oss_audio_device.write (data)
     Write the Python string _data_ to the audio device and return the
     number of bytes written.  If the audio device is in blocking mode
     (the default), the entire string is always written (again, this is
     different from usual Unix device semantics).  If the device is in
     non-blocking mode, some data may not be written --see *note
     writeall(): 1f38.

 -- Method: oss_audio_device.writeall (data)
     Write the entire Python string _data_ to the audio device: waits
     until the audio device is able to accept data, writes as much data
     as it will accept, and repeats until _data_ has been completely
     written. If the device is in blocking mode (the default), this has
     the same effect as *note write(): 1f37.; *note writeall(): 1f38.
     is only useful in non-blocking mode.  Has no return value, since
     the amount of data written is always equal to the amount of data
     supplied.

  The following methods each map to exactly one `ioctl()' system call.
The correspondence is obvious: for example, `setfmt()' corresponds to
the `SNDCTL_DSP_SETFMT' ioctl, and `sync()' to `SNDCTL_DSP_SYNC' (this
can be useful when consulting the OSS documentation).  If the underlying
`ioctl()' fails, they all raise *note IOError: 1f7.

 -- Method: oss_audio_device.nonblock ()
     Put the device into non-blocking mode.  Once in non-blocking mode,
     there is no way to return it to blocking mode.

 -- Method: oss_audio_device.getfmts ()
     Return a bitmask of the audio output formats supported by the
     soundcard.  Some of the formats supported by OSS are:

     Format                        Description
     -------------------------------------------------------------------------------- 
     `AFMT_MU_LAW'                 a logarithmic encoding (used by Sun `.au' files
                                   and `/dev/audio')
     `AFMT_A_LAW'                  a logarithmic encoding
     `AFMT_IMA_ADPCM'              a 4:1 compressed format defined by the
                                   Interactive Multimedia Association
     `AFMT_U8'                     Unsigned, 8-bit audio
     `AFMT_S16_LE'                 Signed, 16-bit audio, little-endian byte order
                                   (as used by Intel processors)
     `AFMT_S16_BE'                 Signed, 16-bit audio, big-endian byte order (as
                                   used by 68k, PowerPC, Sparc)
     `AFMT_S8'                     Signed, 8 bit audio
     `AFMT_U16_LE'                 Unsigned, 16-bit little-endian audio
     `AFMT_U16_BE'                 Unsigned, 16-bit big-endian audio

     Consult the OSS documentation for a full list of audio formats,
     and note that most devices support only a subset of these formats.
     Some older devices only support `AFMT_U8'; the most common format
     used today is `AFMT_S16_LE'.

 -- Method: oss_audio_device.setfmt (format)
     Try to set the current audio format to _format_--see *note
     getfmts(): 1f3a. for a list.  Returns the audio format that the
     device was set to, which may not be the requested format.  May
     also be used to return the current audio format--do this by
     passing an "audio format" of `AFMT_QUERY'.

 -- Method: oss_audio_device.channels (nchannels)
     Set the number of output channels to _nchannels_.  A value of 1
     indicates monophonic sound, 2 stereophonic.  Some devices may have
     more than 2 channels, and some high-end devices may not support
     mono. Returns the number of channels the device was set to.

 -- Method: oss_audio_device.speed (samplerate)
     Try to set the audio sampling rate to _samplerate_ samples per
     second.  Returns the rate actually set.  Most sound devices don't
     support arbitrary sampling rates.  Common rates are:

     Rate        Description
     ------------------------------------------------------------ 
     8000        default rate for `/dev/audio'
     11025       speech recording
     22050       
     44100       CD quality audio (at 16 bits/sample and 2
                 channels)
     96000       DVD quality audio (at 24 bits/sample)


 -- Method: oss_audio_device.sync ()
     Wait until the sound device has played every byte in its buffer.
     (This happens implicitly when the device is closed.)  The OSS
     documentation recommends closing and re-opening the device rather
     than using *note sync(): 1f3e.

 -- Method: oss_audio_device.reset ()
     Immediately stop playing or recording and return the device to a
     state where it can accept commands.  The OSS documentation
     recommends closing and re-opening the device after calling *note
     reset(): 1f3f.

 -- Method: oss_audio_device.post ()
     Tell the driver that there is likely to be a pause in the output,
     making it possible for the device to handle the pause more
     intelligently.  You might use this after playing a spot sound
     effect, before waiting for user input, or before doing disk I/O.

  The following convenience methods combine several ioctls, or one
ioctl and some simple calculations.

 -- Method: oss_audio_device.setparameters (format, nchannels,
          samplerate[, strict=False])
     Set the key audio sampling parameters--sample format, number of
     channels, and sampling rate--in one method call.  _format_,
     _nchannels_, and _samplerate_ should be as specified in the *note
     setfmt(): 1f3b, *note channels(): 1f3c, and *note speed(): 1f3d.
     methods.  If _strict_ is true, *note setparameters(): 1f41. checks
     to see if each parameter was actually set to the requested value,
     and raises *note OSSAudioError: 1f2f. if not.  Returns a tuple
     (_format_, _nchannels_, _samplerate_) indicating the parameter
     values that were actually set by the device driver (i.e., the same
     as the return values of *note setfmt(): 1f3b, *note channels():
     1f3c, and *note speed(): 1f3d.).

     For example,

         (fmt, channels, rate) = dsp.setparameters(fmt, channels, rate)

     is equivalent to

         fmt = dsp.setfmt(fmt)
         channels = dsp.channels(channels)
         rate = dsp.rate(channels)



 -- Method: oss_audio_device.bufsize ()
     Returns the size of the hardware buffer, in samples.

 -- Method: oss_audio_device.obufcount ()
     Returns the number of samples that are in the hardware buffer yet
     to be played.

 -- Method: oss_audio_device.obuffree ()
     Returns the number of samples that could be queued into the
     hardware buffer to be played without blocking.

  Audio device objects also support several read-only attributes:

 -- Attribute: oss_audio_device.closed
     Boolean indicating whether the device has been closed.

 -- Attribute: oss_audio_device.name
     String containing the name of the device file.

 -- Attribute: oss_audio_device.mode
     The I/O mode for the file, either `"r"', `"rw"', or `"w"'.


File: python.info,  Node: Mixer Device Objects,  Prev: Audio Device Objects,  Up: ossaudiodev --- Access to OSS-compatible audio devices

5.21.10.2 Mixer Device Objects
..............................

The mixer object provides two file-like methods:

 -- Method: oss_mixer_device.close ()
     This method closes the open mixer device file.  Any further
     attempts to use the mixer after this file is closed will raise an
     *note IOError: 1f7.

 -- Method: oss_mixer_device.fileno ()
     Returns the file handle number of the open mixer device file.

  The remaining methods are specific to audio mixing:

 -- Method: oss_mixer_device.controls ()
     This method returns a bitmask specifying the available mixer
     controls ("Control" being a specific mixable "channel", such as
     `SOUND_MIXER_PCM' or `SOUND_MIXER_SYNTH').  This bitmask indicates
     a subset of all available mixer controls--the `SOUND_MIXER_*'
     constants defined at module level.  To determine if, for example,
     the current mixer object supports a PCM mixer, use the following
     Python code:

         mixer=ossaudiodev.openmixer()
         if mixer.controls() & (1 << ossaudiodev.SOUND_MIXER_PCM):
             # PCM is supported
             ... code ...

     For most purposes, the `SOUND_MIXER_VOLUME' (master volume) and
     `SOUND_MIXER_PCM' controls should suffice--but code that uses the
     mixer should be flexible when it comes to choosing mixer controls.
     On the Gravis Ultrasound, for example, `SOUND_MIXER_VOLUME' does
     not exist.

 -- Method: oss_mixer_device.stereocontrols ()
     Returns a bitmask indicating stereo mixer controls.  If a bit is
     set, the corresponding control is stereo; if it is unset, the
     control is either monophonic or not supported by the mixer (use in
     combination with *note controls(): 1f4c. to determine which).

     See the code example for the *note controls(): 1f4c. function for
     an example of getting data from a bitmask.

 -- Method: oss_mixer_device.reccontrols ()
     Returns a bitmask specifying the mixer controls that may be used
     to record.  See the code example for *note controls(): 1f4c. for
     an example of reading from a bitmask.

 -- Method: oss_mixer_device.get (control)
     Returns the volume of a given mixer control.  The returned volume
     is a 2-tuple `(left_volume,right_volume)'.  Volumes are specified
     as numbers from 0 (silent) to 100 (full volume).  If the control
     is monophonic, a 2-tuple is still returned, but both volumes are
     the same.

     Raises *note OSSAudioError: 1f2f. if an invalid control was is
     specified, or *note IOError: 1f7. if an unsupported control is
     specified.

 -- Method: oss_mixer_device.set (control, (left, right))
     Sets the volume for a given mixer control to `(left,right)'.
     `left' and `right' must be ints and between 0 (silent) and 100
     (full volume).  On success, the new volume is returned as a
     2-tuple. Note that this may not be exactly the same as the volume
     specified, because of the limited resolution of some soundcard's
     mixers.

     Raises *note OSSAudioError: 1f2f. if an invalid mixer control was
     specified, or if the specified volumes were out-of-range.

 -- Method: oss_mixer_device.get_recsrc ()
     This method returns a bitmask indicating which control(s) are
     currently being used as a recording source.

 -- Method: oss_mixer_device.set_recsrc (bitmask)
     Call this function to specify a recording source.  Returns a
     bitmask indicating the new recording source (or sources) if
     successful; raises *note IOError: 1f7. if an invalid source was
     specified.  To set the current recording source to the microphone
     input:

         mixer.setrecsrc (1 << ossaudiodev.SOUND_MIXER_MIC)




File: python.info,  Node: Internationalization,  Next: Program Frameworks,  Prev: Multimedia Services,  Up: The Python Standard Library

5.22 Internationalization
=========================

The modules described in this chapter help you write software that is
independent of language and locale by providing mechanisms for
selecting a language to be used in  program messages or by tailoring
output to match local conventions.

  The list of modules described in this chapter is:

* Menu:

* gettext: gettext --- Multilingual internationalization services. Multilingual internationalization services
* locale: locale --- Internationalization services. Internationalization services

gettext --- Multilingual internationalization services

* GNU gettext API::
* Class-based API::
* Internationalizing your programs and modules::
* Acknowledgements: Acknowledgements<9>.

Class-based API

* The NullTranslations class::
* The GNUTranslations class::
* Solaris message catalog support::
* The Catalog constructor::

Internationalizing your programs and modules

* Localizing your module::
* Localizing your application::
* Changing languages on the fly::
* Deferred translations::
* gettext() vs. lgettext(): gettext vs lgettext.

locale --- Internationalization services

* Background, details, hints, tips and caveats: Background details hints tips and caveats.
* For extension writers and programs that embed Python::
* Access to message catalogs::


File: python.info,  Node: gettext --- Multilingual internationalization services,  Next: locale --- Internationalization services,  Up: Internationalization

5.22.1 `gettext' -- Multilingual internationalization services
--------------------------------------------------------------

The *note gettext: e1. module provides internationalization (I18N) and
localization (L10N) services for your Python modules and applications.
It supports both the GNU `gettext' message catalog API and a higher
level, class-based API that may be more appropriate for Python files.
The interface described below allows you to write your module and
application messages in one natural language, and provide a catalog of
translated messages for running under different natural languages.

  Some hints on localizing your Python modules and applications are
also given.

* Menu:

* GNU gettext API::
* Class-based API::
* Internationalizing your programs and modules::
* Acknowledgements: Acknowledgements<9>.


File: python.info,  Node: GNU gettext API,  Next: Class-based API,  Up: gettext --- Multilingual internationalization services

5.22.1.1 GNU *gettext* API
..........................

The *note gettext: e1. module defines the following API, which is very
similar to the GNU *gettext* API.  If you use this API you will affect
the translation of your entire application globally.  Often this is
what you want if your application is monolingual, with the choice of
language dependent on the locale of your user.  If you are localizing a
Python module, or if your application needs to switch languages on the
fly, you probably want to use the class-based API instead.

 -- Function: gettext.bindtextdomain (domain[, localedir])
     Bind the _domain_ to the locale directory _localedir_.  More
     concretely, *note gettext: e1. will look for binary `.mo' files
     for the given domain using the path (on Unix):
     `localedir/language/LC_MESSAGES/domain.mo', where _languages_ is
     searched for in the environment variables `LANGUAGE', `LC_ALL', `LC_MESSAGES',
     and `LANG' respectively.

     If _localedir_ is omitted or `None', then the current binding for
     _domain_ is returned. (1)

 -- Function: gettext.bind_textdomain_codeset (domain[, codeset])
     Bind the _domain_ to _codeset_, changing the encoding of strings
     returned by the *note gettext(): e1. family of functions. If
     _codeset_ is omitted, then the current binding is returned.

     New in version 2.4.

 -- Function: gettext.textdomain ([domain])
     Change or query the current global domain.  If _domain_ is `None',
     then the current global domain is returned, otherwise the global
     domain is set to _domain_, which is returned.

 -- Function: gettext.gettext (message)
     Return the localized translation of _message_, based on the
     current global domain, language, and locale directory.  This
     function is usually aliased as `_()' in the local namespace (see
     examples below).

 -- Function: gettext.lgettext (message)
     Equivalent to *note gettext(): e1, but the translation is returned
     in the preferred system encoding, if no other encoding was
     explicitly set with *note bind_textdomain_codeset(): 1f5a.

     New in version 2.4.

 -- Function: gettext.dgettext (domain, message)
     Like *note gettext(): e1, but look the message up in the specified
     _domain_.

 -- Function: gettext.ldgettext (domain, message)
     Equivalent to *note dgettext(): 1f5d, but the translation is
     returned in the preferred system encoding, if no other encoding
     was explicitly set with *note bind_textdomain_codeset(): 1f5a.

     New in version 2.4.

 -- Function: gettext.ngettext (singular, plural, n)
     Like *note gettext(): e1, but consider plural forms. If a
     translation is found, apply the plural formula to _n_, and return
     the resulting message (some languages have more than two plural
     forms). If no translation is found, return _singular_ if _n_ is 1;
     return _plural_ otherwise.

     The Plural formula is taken from the catalog header. It is a C or
     Python expression that has a free variable _n_; the expression
     evaluates to the index of the plural in the catalog. See the GNU
     gettext documentation for the precise syntax to be used in `.po'
     files and the formulas for a variety of languages.

     New in version 2.3.

 -- Function: gettext.lngettext (singular, plural, n)
     Equivalent to *note ngettext(): 1f5f, but the translation is
     returned in the preferred system encoding, if no other encoding
     was explicitly set with *note bind_textdomain_codeset(): 1f5a.

     New in version 2.4.

 -- Function: gettext.dngettext (domain, singular, plural, n)
     Like *note ngettext(): 1f5f, but look the message up in the
     specified _domain_.

     New in version 2.3.

 -- Function: gettext.ldngettext (domain, singular, plural, n)
     Equivalent to *note dngettext(): 1f61, but the translation is
     returned in the preferred system encoding, if no other encoding
     was explicitly set with *note bind_textdomain_codeset(): 1f5a.

     New in version 2.4.

  Note that GNU *gettext* also defines a `dcgettext()' method, but this
was deemed not useful and so it is currently unimplemented.

  Here's an example of typical usage for this API:

    import gettext
    gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')
    gettext.textdomain('myapplication')
    _ = gettext.gettext
    # ...
    print _('This is a translatable string.')


  ---------- Footnotes ----------

  (1) The default locale directory is system dependent; for example, on
RedHat Linux it is `/usr/share/locale', but on Solaris it is
`/usr/lib/locale'.  The *note gettext: e1. module does not try to
support these system dependent defaults; instead its default is
`sys.prefix/share/locale'. For this reason, it is always best to call
*note bindtextdomain(): 1f59. with an explicit absolute path at the
start of your application.


File: python.info,  Node: Class-based API,  Next: Internationalizing your programs and modules,  Prev: GNU gettext API,  Up: gettext --- Multilingual internationalization services

5.22.1.2 Class-based API
........................

The class-based API of the *note gettext: e1. module gives you more
flexibility and greater convenience than the GNU *gettext* API.  It is
the recommended way of localizing your Python applications and modules.
*note gettext: e1. defines a "translations" class which implements the
parsing of GNU `.mo' format files, and has methods for returning either
standard 8-bit strings or Unicode strings. Instances of this
"translations" class can also install themselves  in the built-in
namespace as the function `_()'.

 -- Function: gettext.find (domain[, localedir[, languages[, all]]])
     This function implements the standard `.mo' file search algorithm.
     It takes a _domain_, identical to what *note textdomain(): 1f5b.
     takes.  Optional _localedir_ is as in *note bindtextdomain():
     1f59.  Optional _languages_ is a list of strings, where each
     string is a language code.

     If _localedir_ is not given, then the default system locale
     directory is used.  (1)  If _languages_ is not given, then the
     following environment variables are searched: `LANGUAGE', `LC_ALL', `LC_MESSAGES',
     and `LANG'.  The first one returning a non-empty value is used for
     the _languages_ variable. The environment variables should contain
     a colon separated list of languages, which will be split on the
     colon to produce the expected list of language code strings.

     *note find(): 1f64. then expands and normalizes the languages, and
     then iterates through them, searching for an existing file built
     of these components:

     `localedir/language/LC_MESSAGES/domain.mo'

     The first such file name that exists is returned by *note find():
     1f64. If no such file is found, then `None' is returned. If _all_
     is given, it returns a list of all file names, in the order in
     which they appear in the languages list or the environment
     variables.

 -- Function: gettext.translation (domain[, localedir[, languages[,
          class_[, fallback[, codeset]]]]])
     Return a `Translations' instance based on the _domain_,
     _localedir_, and _languages_, which are first passed to *note
     find(): 1f64. to get a list of the associated `.mo' file paths.
     Instances with identical `.mo' file names are cached.  The actual
     class instantiated is either _class__ if provided, otherwise
     `GNUTranslations'.  The class's constructor must take a single
     file object argument. If provided, _codeset_ will change the
     charset used to encode translated strings.

     If multiple files are found, later files are used as fallbacks for
     earlier ones.  To allow setting the fallback, *note copy.copy():
     bf3. is used to clone each translation object from the cache; the
     actual instance data is still shared with the cache.

     If no `.mo' file is found, this function raises *note IOError:
     1f7. if _fallback_ is false (which is the default), and returns a
     *note NullTranslations: 1f66. instance if _fallback_ is true.

     Changed in version 2.4: Added the _codeset_ parameter.

 -- Function: gettext.install (domain[, localedir[, unicode[, codeset[,
          names]]]])
     This installs the function `_()' in Python's builtins namespace,
     based on _domain_, _localedir_, and _codeset_ which are passed to
     the function *note translation(): 1f65.  The _unicode_ flag is
     passed to the resulting translation object's *note install():
     1f68. method.

     For the _names_ parameter, please see the description of the
     translation object's *note install(): 1f68. method.

     As seen below, you usually mark the strings in your application
     that are candidates for translation, by wrapping them in a call to
     the `_()' function, like this:

         print _('This string will be translated.')

     For convenience, you want the `_()' function to be installed in
     Python's builtins namespace, so it is easily accessible in all
     modules of your application.

     Changed in version 2.4: Added the _codeset_ parameter.

     Changed in version 2.5: Added the _names_ parameter.

* Menu:

* The NullTranslations class::
* The GNUTranslations class::
* Solaris message catalog support::
* The Catalog constructor::

  ---------- Footnotes ----------

  (1) See the footnote for *note bindtextdomain(): 1f59. above.


File: python.info,  Node: The NullTranslations class,  Next: The GNUTranslations class,  Up: Class-based API

5.22.1.3 The `NullTranslations' class
.....................................

Translation classes are what actually implement the translation of
original source file message strings to translated message strings. The
base class used by all translation classes is *note NullTranslations:
1f66.; this provides the basic interface you can use to write your own
specialized translation classes.  Here are the methods of *note
NullTranslations: 1f66.:

 -- Class: gettext.NullTranslations ([fp])
     Takes an optional file object _fp_, which is ignored by the base
     class.  Initializes "protected" instance variables __info_ and
     __charset_ which are set by derived classes, as well as
     __fallback_, which is set through *note add_fallback(): 1f6a.  It
     then calls `self._parse(fp)' if _fp_ is not `None'.

      -- Method: _parse (fp)
          No-op'd in the base class, this method takes file object
          _fp_, and reads the data from the file, initializing its
          message catalog.  If you have an unsupported message catalog
          file format, you should override this method to parse your
          format.

      -- Method: add_fallback (fallback)
          Add _fallback_ as the fallback object for the current
          translation object. A translation object should consult the
          fallback if it cannot provide a translation for a given
          message.

      -- Method: gettext (message)
          If a fallback has been set, forward *note gettext(): e1. to
          the fallback. Otherwise, return the translated message.
          Overridden in derived classes.

      -- Method: lgettext (message)
          If a fallback has been set, forward *note lgettext(): 1f5c.
          to the fallback. Otherwise, return the translated message.
          Overridden in derived classes.

          New in version 2.4.

      -- Method: ugettext (message)
          If a fallback has been set, forward *note ugettext(): 1f6e.
          to the fallback. Otherwise, return the translated message as
          a Unicode string. Overridden in derived classes.

      -- Method: ngettext (singular, plural, n)
          If a fallback has been set, forward *note ngettext(): 1f5f.
          to the fallback. Otherwise, return the translated message.
          Overridden in derived classes.

          New in version 2.3.

      -- Method: lngettext (singular, plural, n)
          If a fallback has been set, forward *note ngettext(): 1f5f.
          to the fallback. Otherwise, return the translated message.
          Overridden in derived classes.

          New in version 2.4.

      -- Method: ungettext (singular, plural, n)
          If a fallback has been set, forward *note ungettext(): 1f71.
          to the fallback.  Otherwise, return the translated message as
          a Unicode string. Overridden in derived classes.

          New in version 2.3.

      -- Method: info ()
          Return the "protected" `_info' variable.

      -- Method: charset ()
          Return the "protected" `_charset' variable.

      -- Method: output_charset ()
          Return the "protected" `_output_charset' variable, which
          defines the encoding used to return translated messages.

          New in version 2.4.

      -- Method: set_output_charset (charset)
          Change the "protected" `_output_charset' variable, which
          defines the encoding used to return translated messages.

          New in version 2.4.

      -- Method: install ([unicode[, names]])
          If the _unicode_ flag is false, this method installs
          `self.gettext()' into the built-in namespace, binding it to
          `_'.  If _unicode_ is true, it binds `self.ugettext()'
          instead.  By default, _unicode_ is false.

          If the _names_ parameter is given, it must be a sequence
          containing the names of functions you want to install in the
          builtins namespace in addition to `_()'.  Supported names are
          `'gettext'' (bound to `self.gettext()' or `self.ugettext()'
          according to the _unicode_ flag), `'ngettext'' (bound to
          `self.ngettext()' or `self.ungettext()' according to the
          _unicode_ flag), `'lgettext'' and `'lngettext''.

          Note that this is only one way, albeit the most convenient
          way, to make the `_()' function available to your
          application.  Because it affects the entire application
          globally, and specifically the built-in namespace, localized
          modules should never install `_()'. Instead, they should use
          this code to make `_()' available to their module:

              import gettext
              t = gettext.translation('mymodule', ...)
              _ = t.gettext

          This puts `_()' only in the module's global namespace and so
          only affects calls within this module.

          Changed in version 2.5: Added the _names_ parameter.


File: python.info,  Node: The GNUTranslations class,  Next: Solaris message catalog support,  Prev: The NullTranslations class,  Up: Class-based API

5.22.1.4 The `GNUTranslations' class
....................................

The *note gettext: e1. module provides one additional class derived from
*note NullTranslations: 1f66.: `GNUTranslations'.  This class overrides
`_parse()' to enable reading GNU *gettext* format `.mo' files in both
big-endian and little-endian format. It also coerces both message ids
and message strings to Unicode.

  `GNUTranslations' parses optional meta-data out of the translation
catalog.  It is convention with GNU *gettext* to include meta-data as
the translation for the empty string.  This meta-data is in RFC
822(1)-style `key: value' pairs, and should contain the
`Project-Id-Version' key.  If the key `Content-Type' is found, then the
`charset' property is used to initialize the "protected" `_charset'
instance variable, defaulting to `None' if not found.  If the charset
encoding is specified, then all message ids and message strings read
from the catalog are converted to Unicode using this encoding.  The
`ugettext()' method always returns a Unicode, while the *note
gettext(): e1. returns an encoded 8-bit string.  For the message id
arguments of both methods, either Unicode strings or 8-bit strings
containing only US-ASCII characters are acceptable.  Note that the
Unicode version of the methods (i.e. `ugettext()' and `ungettext()')
are the recommended interface to use for internationalized Python
programs.

  The entire set of key/value pairs are placed into a dictionary and
set as the "protected" `_info' instance variable.

  If the `.mo' file's magic number is invalid, or if other problems
occur while reading the file, instantiating a `GNUTranslations' class
can raise *note IOError: 1f7.

  The following methods are overridden from the base class
implementation:

 -- Method: GNUTranslations.gettext (message)
     Look up the _message_ id in the catalog and return the
     corresponding message string, as an 8-bit string encoded with the
     catalog's charset encoding, if known.  If there is no entry in the
     catalog for the _message_ id, and a fallback has been set, the
     look up is forwarded to the fallback's *note gettext(): e1. method.
     Otherwise, the _message_ id is returned.

 -- Method: GNUTranslations.lgettext (message)
     Equivalent to *note gettext(): e1, but the translation is returned
     in the preferred system encoding, if no other encoding was
     explicitly set with `set_output_charset()'.

     New in version 2.4.

 -- Method: GNUTranslations.ugettext (message)
     Look up the _message_ id in the catalog and return the
     corresponding message string, as a Unicode string.  If there is no
     entry in the catalog for the _message_ id, and a fallback has been
     set, the look up is forwarded to the fallback's *note ugettext():
     1f79. method.  Otherwise, the _message_ id is returned.

 -- Method: GNUTranslations.ngettext (singular, plural, n)
     Do a plural-forms lookup of a message id.  _singular_ is used as
     the message id for purposes of lookup in the catalog, while _n_ is
     used to determine which plural form to use.  The returned message
     string is an 8-bit string encoded with the catalog's charset
     encoding, if known.

     If the message id is not found in the catalog, and a fallback is
     specified, the request is forwarded to the fallback's *note
     ngettext(): 1f5f. method.  Otherwise, when _n_ is 1 _singular_ is
     returned, and _plural_ is returned in all other cases.

     New in version 2.3.

 -- Method: GNUTranslations.lngettext (singular, plural, n)
     Equivalent to *note gettext(): e1, but the translation is returned
     in the preferred system encoding, if no other encoding was
     explicitly set with `set_output_charset()'.

     New in version 2.4.

 -- Method: GNUTranslations.ungettext (singular, plural, n)
     Do a plural-forms lookup of a message id.  _singular_ is used as
     the message id for purposes of lookup in the catalog, while _n_ is
     used to determine which plural form to use.  The returned message
     string is a Unicode string.

     If the message id is not found in the catalog, and a fallback is
     specified, the request is forwarded to the fallback's *note
     ungettext(): 1f7c. method.  Otherwise, when _n_ is 1 _singular_ is
     returned, and _plural_ is returned in all other cases.

     Here is an example:

         n = len(os.listdir('.'))
         cat = GNUTranslations(somefile)
         message = cat.ungettext(
             'There is %(num)d file in this directory',
             'There are %(num)d files in this directory',
             n) % {'num': n}

     New in version 2.3.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc822.html


File: python.info,  Node: Solaris message catalog support,  Next: The Catalog constructor,  Prev: The GNUTranslations class,  Up: Class-based API

5.22.1.5 Solaris message catalog support
........................................

The Solaris operating system defines its own binary `.mo' file format,
but since no documentation can be found on this format, it is not
supported at this time.


File: python.info,  Node: The Catalog constructor,  Prev: Solaris message catalog support,  Up: Class-based API

5.22.1.6 The Catalog constructor
................................

GNOME uses a version of the *note gettext: e1. module by James
Henstridge, but this version has a slightly different API.  Its
documented usage was:

    import gettext
    cat = gettext.Catalog(domain, localedir)
    _ = cat.gettext
    print _('hello world')

For compatibility with this older module, the function `Catalog()' is an
alias for the *note translation(): 1f65. function described above.

  One difference between this module and Henstridge's: his catalog
objects supported access through a mapping API, but this appears to be
unused and so is not currently supported.


File: python.info,  Node: Internationalizing your programs and modules,  Next: Acknowledgements<9>,  Prev: Class-based API,  Up: gettext --- Multilingual internationalization services

5.22.1.7 Internationalizing your programs and modules
.....................................................

Internationalization (I18N) refers to the operation by which a program
is made aware of multiple languages.  Localization (L10N) refers to the
adaptation of your program, once internationalized, to the local
language and cultural habits.  In order to provide multilingual
messages for your Python programs, you need to take the following steps:

  1. prepare your program or module by specially marking translatable
     strings

  2. run a suite of tools over your marked files to generate raw
     messages catalogs

  3. create language specific translations of the message catalogs

  4. use the *note gettext: e1. module so that message strings are
     properly translated

  In order to prepare your code for I18N, you need to look at all the
strings in your files.  Any string that needs to be translated should
be marked by wrapping it in `_('...')' -- that is, a call to the
function `_()'.  For example:

    filename = 'mylog.txt'
    message = _('writing a log message')
    fp = open(filename, 'w')
    fp.write(message)
    fp.close()

In this example, the string `'writing a log message'' is marked as a
candidate for translation, while the strings `'mylog.txt'' and `'w''
are not.

  The Python distribution comes with two tools which help you generate
the message catalogs once you've prepared your source code.  These may
or may not be available from a binary distribution, but they can be
found in a source distribution, in the `Tools/i18n' directory.

  The *pygettext* (1) program scans all your Python source code looking
for the strings you previously marked as translatable.  It is similar
to the GNU *gettext* program except that it understands all the
intricacies of Python source code, but knows nothing about C or C++
source code.  You don't need GNU `gettext' unless you're also going to
be translating C code (such as C extension modules).

  *pygettext* generates textual Uniforum-style human readable message
catalog `.pot' files, essentially structured human readable files which
contain every marked string in the source code, along with a
placeholder for the translation strings. *pygettext* is a command line
script that supports a similar command line interface as *xgettext*;
for details on its use, run:

    pygettext.py --help

Copies of these `.pot' files are then handed over to the individual
human translators who write language-specific versions for every
supported natural language.  They send you back the filled in
language-specific versions as a `.po' file.  Using the *msgfmt.py* (2)
program (in the `Tools/i18n' directory), you take the `.po' files from
your translators and generate the machine-readable `.mo' binary catalog
files.  The `.mo' files are what the *note gettext: e1. module uses for
the actual translation processing during run-time.

  How you use the *note gettext: e1. module in your code depends on
whether you are internationalizing a single module or your entire
application. The next two sections will discuss each case.

* Menu:

* Localizing your module::
* Localizing your application::
* Changing languages on the fly::
* Deferred translations::
* gettext() vs. lgettext(): gettext vs lgettext.

  ---------- Footnotes ----------

  (1) François Pinard has written a program called *xpot* which does a
similar job.  It is available as part of his *po-utils* package at http
://po-utils.progiciels-bpi.ca/.

  (2) *msgfmt.py* is binary compatible with GNU *msgfmt* except that it
provides a simpler, all-Python implementation.  With this and
*pygettext.py*, you generally won't need to install the GNU *gettext*
package to internationalize your Python applications.


File: python.info,  Node: Localizing your module,  Next: Localizing your application,  Up: Internationalizing your programs and modules

5.22.1.8 Localizing your module
...............................

If you are localizing your module, you must take care not to make global
changes, e.g. to the built-in namespace.  You should not use the GNU
`gettext' API but instead the class-based API.

  Let's say your module is called "spam" and the module's various
natural language translation `.mo' files reside in `/usr/share/locale'
in GNU *gettext* format.  Here's what you would put at the top of your
module:

    import gettext
    t = gettext.translation('spam', '/usr/share/locale')
    _ = t.lgettext

If your translators were providing you with Unicode strings in their
`.po' files, you'd instead do:

    import gettext
    t = gettext.translation('spam', '/usr/share/locale')
    _ = t.ugettext



File: python.info,  Node: Localizing your application,  Next: Changing languages on the fly,  Prev: Localizing your module,  Up: Internationalizing your programs and modules

5.22.1.9 Localizing your application
....................................

If you are localizing your application, you can install the `_()'
function globally into the built-in namespace, usually in the main
driver file of your application.  This will let all your
application-specific files just use `_('...')' without having to
explicitly install it in each file.

  In the simple case then, you need only add the following bit of code
to the main driver file of your application:

    import gettext
    gettext.install('myapplication')

If you need to set the locale directory or the _unicode_ flag, you can
pass these into the *note install(): 1f67. function:

    import gettext
    gettext.install('myapplication', '/usr/share/locale', unicode=1)



File: python.info,  Node: Changing languages on the fly,  Next: Deferred translations,  Prev: Localizing your application,  Up: Internationalizing your programs and modules

5.22.1.10 Changing languages on the fly
.......................................

If your program needs to support many languages at the same time, you
may want to create multiple translation instances and then switch
between them explicitly, like so:

    import gettext

    lang1 = gettext.translation('myapplication', languages=['en'])
    lang2 = gettext.translation('myapplication', languages=['fr'])
    lang3 = gettext.translation('myapplication', languages=['de'])

    # start by using language1
    lang1.install()

    # ... time goes by, user selects language 2
    lang2.install()

    # ... more time goes by, user selects language 3
    lang3.install()



File: python.info,  Node: Deferred translations,  Next: gettext vs lgettext,  Prev: Changing languages on the fly,  Up: Internationalizing your programs and modules

5.22.1.11 Deferred translations
...............................

In most coding situations, strings are translated where they are coded.
Occasionally however, you need to mark strings for translation, but
defer actual translation until later.  A classic example is:

    animals = ['mollusk',
               'albatross',
               'rat',
               'penguin',
               'python', ]
    # ...
    for a in animals:
        print a

Here, you want to mark the strings in the `animals' list as being
translatable, but you don't actually want to translate them until they
are printed.

  Here is one way you can handle this situation:

    def _(message): return message

    animals = [_('mollusk'),
               _('albatross'),
               _('rat'),
               _('penguin'),
               _('python'), ]

    del _

    # ...
    for a in animals:
        print _(a)

This works because the dummy definition of `_()' simply returns the
string unchanged.  And this dummy definition will temporarily override
any definition of `_()' in the built-in namespace (until the *note del:
54f. command). Take care, though if you have a previous definition of
`_()' in the local namespace.

  Note that the second use of `_()' will not identify "a" as being
translatable to the *pygettext* program, since it is not a string.

  Another way to handle this is with the following example:

    def N_(message): return message

    animals = [N_('mollusk'),
               N_('albatross'),
               N_('rat'),
               N_('penguin'),
               N_('python'), ]

    # ...
    for a in animals:
        print _(a)

In this case, you are marking translatable strings with the function
`N_()', (1) which won't conflict with any definition of `_()'.
However, you will need to teach your message extraction program to look
for translatable strings marked with `N_()'. *pygettext* and *xpot*
both support this through the use of command line switches.

  ---------- Footnotes ----------

  (1) The choice of `N_()' here is totally arbitrary; it could have
just as easily been `MarkThisStringForTranslation()'.


File: python.info,  Node: gettext vs lgettext,  Prev: Deferred translations,  Up: Internationalizing your programs and modules

5.22.1.12 `gettext()' vs. `lgettext()'
......................................

In Python 2.4 the *note lgettext(): 1f5c. family of functions were
introduced. The intention of these functions is to provide an
alternative which is more compliant with the current implementation of
GNU gettext. Unlike *note gettext(): e1, which returns strings encoded
with the same codeset used in the translation file, *note lgettext():
1f5c. will return strings encoded with the preferred system encoding,
as returned by *note locale.getpreferredencoding(): 115c.  Also notice
that Python 2.4 introduces new functions to explicitly choose the
codeset used in translated strings. If a codeset is explicitly set, even
*note lgettext(): 1f5c. will return translated strings in the requested
codeset, as would be expected in the GNU gettext implementation.


File: python.info,  Node: Acknowledgements<9>,  Prev: Internationalizing your programs and modules,  Up: gettext --- Multilingual internationalization services

5.22.1.13 Acknowledgements
..........................

The following people contributed code, feedback, design suggestions,
previous implementations, and valuable experience to the creation of
this module:

   * Peter Funk

   * James Henstridge

   * Juan David Ibáñez Palomar

   * Marc-André Lemburg

   * Martin von Löwis

   * François Pinard

   * Barry Warsaw

   * Gustavo Niemeyer


File: python.info,  Node: locale --- Internationalization services,  Prev: gettext --- Multilingual internationalization services,  Up: Internationalization

5.22.2 `locale' -- Internationalization services
------------------------------------------------

The *note locale: 101. module opens access to the POSIX locale database
and functionality. The POSIX locale mechanism allows programmers to
deal with certain cultural issues in an application, without requiring
the programmer to know all the specifics of each country where the
software is executed.

  The *note locale: 101. module is implemented on top of the `_locale'
module, which in turn uses an ANSI C locale implementation if available.

  The *note locale: 101. module defines the following exception and
functions:

 -- Exception: locale.Error
     Exception raised when *note setlocale(): 933. fails.

 -- Function: locale.setlocale (category[, locale])
     If _locale_ is specified, it may be a string, a tuple of the form
     `(language code, encoding)', or `None'. If it is a tuple, it is
     converted to a string using the locale aliasing engine.  If
     _locale_ is given and not `None', *note setlocale(): 933. modifies
     the locale setting for the _category_.  The available categories
     are listed in the data description below.  The value is the name
     of a locale.  An empty string specifies the user's default
     settings. If the modification of the locale fails, the exception
     *note Error: 1f88. is raised.  If successful, the new locale
     setting is returned.

     If _locale_ is omitted or `None', the current setting for
     _category_ is returned.

     *note setlocale(): 933. is not thread-safe on most systems.
     Applications typically start with a call of

         import locale
         locale.setlocale(locale.LC_ALL, '')

     This sets the locale for all categories to the user's default
     setting (typically specified in the `LANG' environment variable).
     If the locale is not changed thereafter, using multithreading
     should not cause problems.

     Changed in version 2.0: Added support for tuple values of the
     _locale_ parameter.

 -- Function: locale.localeconv ()
     Returns the database of the local conventions as a dictionary.
     This dictionary has the following strings as keys:

     Category                   Key                                       Meaning
     ---------------------------------------------------------------------------------------------------------- 
     *note LC_NUMERIC: 1f8a.    `'decimal_point''                         Decimal point character.
                                `'grouping''                              Sequence of numbers specifying
                                                                          which relative positions the
                                                                          `'thousands_sep'' is expected.  If
                                                                          the sequence is terminated with
                                                                          *note CHAR_MAX: 1f8b, no further
                                                                          grouping is performed. If the
                                                                          sequence terminates with a `0',
                                                                          the last group size is repeatedly
                                                                          used.
                                `'thousands_sep''                         Character used between groups.
     *note LC_MONETARY: 1f8c.   `'int_curr_symbol''                       International currency symbol.
                                `'currency_symbol''                       Local currency symbol.
                                `'p_cs_precedes/n_cs_precedes''           Whether the currency symbol
                                                                          precedes the value (for positive
                                                                          resp. negative values).
                                `'p_sep_by_space/n_sep_by_space''         Whether the currency symbol is
                                                                          separated from the value  by a
                                                                          space (for positive resp.  negative
                                                                          values).
                                `'mon_decimal_point''                     Decimal point used for monetary
                                                                          values.
                                `'frac_digits''                           Number of fractional digits used in
                                                                          local formatting of monetary values.
                                `'int_frac_digits''                       Number of fractional digits used in
                                                                          international formatting of
                                                                          monetary values.
                                `'mon_thousands_sep''                     Group separator used for monetary
                                                                          values.
                                `'mon_grouping''                          Equivalent to `'grouping'', used
                                                                          for monetary values.
                                `'positive_sign''                         Symbol used to annotate a positive
                                                                          monetary value.
                                `'negative_sign''                         Symbol used to annotate a negative
                                                                          monetary value.
                                `'p_sign_posn/n_sign_posn''               The position of the sign (for
                                                                          positive resp. negative values),
                                                                          see below.

     All numeric values can be set to *note CHAR_MAX: 1f8b. to indicate
     that there is no value specified in this locale.

     The possible values for `'p_sign_posn'' and `'n_sign_posn'' are
     given below.

     Value              Explanation
     ----------------------------------------------------------------- 
     `0'                Currency and value are surrounded by
                        parentheses.
     `1'                The sign should precede the value and
                        currency symbol.
     `2'                The sign should follow the value and
                        currency symbol.
     `3'                The sign should immediately precede the
                        value.
     `4'                The sign should immediately follow the value.
     `CHAR_MAX'         Nothing is specified in this locale.


 -- Function: locale.nl_langinfo (option)
     Return some locale-specific information as a string.  This
     function is not available on all systems, and the set of possible
     options might also vary across platforms.  The possible argument
     values are numbers, for which symbolic constants are available in
     the locale module.

     The *note nl_langinfo(): 1f8d. function accepts one of the
     following keys.  Most descriptions are taken from the
     corresponding description in the GNU C library.

      -- Data: locale.CODESET
          Get a string with the name of the character encoding used in
          the selected locale.

      -- Data: locale.D_T_FMT
          Get a string that can be used as a format string for
          `strftime()' to represent date and time in a locale-specific
          way.

      -- Data: locale.D_FMT
          Get a string that can be used as a format string for
          `strftime()' to represent a date in a locale-specific way.

      -- Data: locale.T_FMT
          Get a string that can be used as a format string for
          `strftime()' to represent a time in a locale-specific way.

      -- Data: locale.T_FMT_AMPM
          Get a format string for `strftime()' to represent time in the
          am/pm format.

      -- Data: DAY_1 ... DAY_7
          Get the name of the n-th day of the week.

               Note: This follows the US convention of `DAY_1' being
               Sunday, not the international convention (ISO 8601) that
               Monday is the first day of the week.

      -- Data: ABDAY_1 ... ABDAY_7
          Get the abbreviated name of the n-th day of the week.

      -- Data: MON_1 ... MON_12
          Get the name of the n-th month.

      -- Data: ABMON_1 ... ABMON_12
          Get the abbreviated name of the n-th month.

      -- Data: locale.RADIXCHAR
          Get the radix character (decimal dot, decimal comma, etc.)

      -- Data: locale.THOUSEP
          Get the separator character for thousands (groups of three
          digits).

      -- Data: locale.YESEXPR
          Get a regular expression that can be used with the regex
          function to recognize a positive response to a yes/no
          question.

               Note: The expression is in the syntax suitable for the
               `regex()' function from the C library, which might
               differ from the syntax used in *note re: 144.

      -- Data: locale.NOEXPR
          Get a regular expression that can be used with the regex(3)
          function to recognize a negative response to a yes/no
          question.

      -- Data: locale.CRNCYSTR
          Get the currency symbol, preceded by "-" if the symbol should
          appear before the value, "+" if the symbol should appear
          after the value, or "." if the symbol should replace the
          radix character.

      -- Data: locale.ERA
          Get a string that represents the era used in the current
          locale.

          Most locales do not define this value.  An example of a
          locale which does define this value is the Japanese one.  In
          Japan, the traditional representation of dates includes the
          name of the era corresponding to the then-emperor's reign.

          Normally it should not be necessary to use this value
          directly. Specifying the `E' modifier in their format strings
          causes the `strftime()' function to use this information.
          The format of the returned string is not specified, and
          therefore you should not assume knowledge of it on different
          systems.

      -- Data: locale.ERA_D_T_FMT
          Get a format string for `strftime()' to represent date and
          time in a locale-specific era-based way.

      -- Data: locale.ERA_D_FMT
          Get a format string for `strftime()' to represent a date in a
          locale-specific era-based way.

      -- Data: locale.ERA_T_FMT
          Get a format string for `strftime()' to represent a time in a
          locale-specific era-based way.

      -- Data: locale.ALT_DIGITS
          Get a representation of up to 100 values used to represent
          the values 0 to 99.

 -- Function: locale.getdefaultlocale ([envvars])
     Tries to determine the default locale settings and returns them as
     a tuple of the form `(language code, encoding)'.

     According to POSIX, a program which has not called
     `setlocale(LC_ALL, '')' runs using the portable `'C'' locale.
     Calling `setlocale(LC_ALL, '')' lets it use the default locale as
     defined by the `LANG' variable.  Since we do not want to interfere
     with the current locale setting we thus emulate the behavior in
     the way described above.

     To maintain compatibility with other platforms, not only the `LANG'
     variable is tested, but a list of variables given as envvars
     parameter.  The first found to be defined will be used.  _envvars_
     defaults to the search path used in GNU gettext; it must always
     contain the variable name `LANG'.  The GNU gettext search path
     contains `'LANGUAGE'', `'LC_ALL'', `'LC_CTYPE'', and `'LANG'', in
     that order.

     Except for the code `'C'', the language code corresponds to RFC
     1766(1).  _language code_ and _encoding_ may be `None' if their
     values cannot be determined.

     New in version 2.0.

 -- Function: locale.getlocale ([category])
     Returns the current setting for the given locale category as
     sequence containing _language code_, _encoding_. _category_ may be
     one of the `LC_*' values except *note LC_ALL: 1f9f.  It defaults
     to *note LC_CTYPE: 1fa0.

     Except for the code `'C'', the language code corresponds to RFC
     1766(2).  _language code_ and _encoding_ may be `None' if their
     values cannot be determined.

     New in version 2.0.

 -- Function: locale.getpreferredencoding ([do_setlocale])
     Return the encoding used for text data, according to user
     preferences.  User preferences are expressed differently on
     different systems, and might not be available programmatically on
     some systems, so this function only returns a guess.

     On some systems, it is necessary to invoke *note setlocale(): 933.
     to obtain the user preferences, so this function is not
     thread-safe. If invoking setlocale is not necessary or desired,
     _do_setlocale_ should be set to `False'.

     New in version 2.3.

 -- Function: locale.normalize (localename)
     Returns a normalized locale code for the given locale name.  The
     returned locale code is formatted for use with *note setlocale():
     933.  If normalization fails, the original name is returned
     unchanged.

     If the given encoding is not known, the function defaults to the
     default encoding for the locale code just like *note setlocale():
     933.

     New in version 2.0.

 -- Function: locale.resetlocale ([category])
     Sets the locale for _category_ to the default setting.

     The default setting is determined by calling *note
     getdefaultlocale(): 1f9d.  _category_ defaults to *note LC_ALL:
     1f9f.

     New in version 2.0.

 -- Function: locale.strcoll (string1, string2)
     Compares two strings according to the current *note LC_COLLATE:
     1fa4. setting. As any other compare function, returns a negative,
     or a positive value, or `0', depending on whether _string1_
     collates before or after _string2_ or is equal to it.

 -- Function: locale.strxfrm (string)
     Transforms a string to one that can be used for the built-in
     function *note cmp(): 4ab, and still returns locale-aware results.
     This function can be used when the same string is compared
     repeatedly, e.g. when collating a sequence of strings.

 -- Function: locale.format (format, val[, grouping[, monetary]])
     Formats a number _val_ according to the current *note LC_NUMERIC:
     1f8a. setting.  The format follows the conventions of the `%'
     operator.  For floating point values, the decimal point is
     modified if appropriate.  If _grouping_ is true, also takes the
     grouping into account.

     If _monetary_ is true, the conversion uses monetary thousands
     separator and grouping strings.

     Please note that this function will only work for exactly one
     %char specifier.  For whole format strings, use *note
     format_string(): 1fa7.

     Changed in version 2.5: Added the _monetary_ parameter.

 -- Function: locale.format_string (format, val[, grouping])
     Processes formatting specifiers as in `format % val', but takes
     the current locale settings into account.

     New in version 2.5.

 -- Function: locale.currency (val[, symbol[, grouping[,
          international]]])
     Formats a number _val_ according to the current *note LC_MONETARY:
     1f8c. settings.

     The returned string includes the currency symbol if _symbol_ is
     true, which is the default. If _grouping_ is true (which is not
     the default), grouping is done with the value. If _international_
     is true (which is not the default), the international currency
     symbol is used.

     Note that this function will not work with the 'C' locale, so you
     have to set a locale via *note setlocale(): 933. first.

     New in version 2.5.

 -- Function: locale.str (float)
     Formats a floating point number using the same format as the
     built-in function `str(float)', but takes the decimal point into
     account.

 -- Function: locale.atof (string)
     Converts a string to a floating point number, following the *note
     LC_NUMERIC: 1f8a.  settings.

 -- Function: locale.atoi (string)
     Converts a string to an integer, following the *note LC_NUMERIC:
     1f8a. conventions.

 -- Data: locale.LC_CTYPE
     Locale category for the character type functions.  Depending on
     the settings of this category, the functions of module *note
     string: 164. dealing with case change their behaviour.

 -- Data: locale.LC_COLLATE
     Locale category for sorting strings.  The functions *note
     strcoll(): 1fa3. and *note strxfrm(): 1fa5. of the *note locale:
     101. module are affected.

 -- Data: locale.LC_TIME
     Locale category for the formatting of time.  The function *note
     time.strftime(): 3ad.  follows these conventions.

 -- Data: locale.LC_MONETARY
     Locale category for formatting of monetary values.  The available
     options are available from the *note localeconv(): 1f89. function.

 -- Data: locale.LC_MESSAGES
     Locale category for message display. Python currently does not
     support application specific locale-aware messages.  Messages
     displayed by the operating system, like those returned by *note
     os.strerror(): 10a4. might be affected by this category.

 -- Data: locale.LC_NUMERIC
     Locale category for formatting numbers.  The functions *note
     format(): 1fa6, *note atoi(): 1fab, *note atof(): 1faa. and *note
     str(): 1fa9. of the *note locale: 101. module are affected by that
     category.  All other numeric formatting operations are not
     affected.

 -- Data: locale.LC_ALL
     Combination of all locale settings.  If this flag is used when the
     locale is changed, setting the locale for all categories is
     attempted. If that fails for any category, no category is changed
     at all.  When the locale is retrieved using this flag, a string
     indicating the setting for all categories is returned. This string
     can be later used to restore the settings.

 -- Data: locale.CHAR_MAX
     This is a symbolic constant used for different values returned by
     *note localeconv(): 1f89.

  Example:

    >>> import locale
    >>> loc = locale.getlocale() # get current locale
    # use German locale; name might vary with platform
    >>> locale.setlocale(locale.LC_ALL, 'de_DE')
    >>> locale.strcoll('f\xe4n', 'foo') # compare a string containing an umlaut
    >>> locale.setlocale(locale.LC_ALL, '') # use user's preferred locale
    >>> locale.setlocale(locale.LC_ALL, 'C') # use default (C) locale
    >>> locale.setlocale(locale.LC_ALL, loc) # restore saved locale


* Menu:

* Background, details, hints, tips and caveats: Background details hints tips and caveats.
* For extension writers and programs that embed Python::
* Access to message catalogs::

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc1766.html

  (2) http://tools.ietf.org/html/rfc1766.html


File: python.info,  Node: Background details hints tips and caveats,  Next: For extension writers and programs that embed Python,  Up: locale --- Internationalization services

5.22.2.1 Background, details, hints, tips and caveats
.....................................................

The C standard defines the locale as a program-wide property that may be
relatively expensive to change.  On top of that, some implementation
are broken in such a way that frequent locale changes may cause core
dumps.  This makes the locale somewhat painful to use correctly.

  Initially, when a program is started, the locale is the `C' locale,
no matter what the user's preferred locale is.  The program must
explicitly say that it wants the user's preferred locale settings by
calling `setlocale(LC_ALL, '')'.

  It is generally a bad idea to call *note setlocale(): 933. in some
library routine, since as a side effect it affects the entire program.
Saving and restoring it is almost as bad: it is expensive and affects
other threads that happen to run before the settings have been restored.

  If, when coding a module for general use, you need a locale
independent version of an operation that is affected by the locale
(such as *note string.lower(): 968, or certain formats used with *note
time.strftime(): 3ad.), you will have to find a way to do it without
using the standard library routine.  Even better is convincing yourself
that using locale settings is okay.  Only as a last resort should you
document that your module is not compatible with non-`C' locale
settings.

  The case conversion functions in the *note string: 164. module are
affected by the locale settings.  When a call to the *note setlocale():
933. function changes the *note LC_CTYPE: 1fa0. settings, the variables
`string.lowercase', `string.uppercase' and `string.letters' are
recalculated.  Note that code that uses these variable through '*note
from: 7f0 ... *note import: 1f1 ...', e.g. `from string import
letters', is not affected by subsequent *note setlocale(): 933. calls.

  The only way to perform numeric operations according to the locale is
to use the special functions defined by this module: *note atof():
1faa, *note atoi(): 1fab, *note format(): 1fa6, *note str(): 1fa9.

