This is python.info, produced by makeinfo version 4.8 from
build/texinfo/python.texi.

Generated by Sphinx 1.1pre.
INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY

     Python 2.7.2, April 02, 2012

     Georg Brandl

     Copyright (C) 1990-2012, Python Software Foundation


File: python.info,  Node: How fast are exceptions?,  Next: Why isn't there a switch or case statement in Python?,  Prev: Why is join a string method instead of a list or tuple method?,  Up: Design and History FAQ

12.3.9 How fast are exceptions?
-------------------------------

A try/except block is extremely efficient.  Actually catching an
exception is expensive.  In versions of Python prior to 2.0 it was
common to use this idiom:

    try:
        value = mydict[key]
    except KeyError:
        mydict[key] = getvalue(key)
        value = mydict[key]

This only made sense when you expected the dict to have the key almost
all the time.  If that wasn't the case, you coded it like this:

    if mydict.has_key(key):
        value = mydict[key]
    else:
        mydict[key] = getvalue(key)
        value = mydict[key]


     Note: In Python 2.0 and higher, you can code this as `value =
     mydict.setdefault(key, getvalue(key))'.


File: python.info,  Node: Why isn't there a switch or case statement in Python?,  Next: Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?,  Prev: How fast are exceptions?,  Up: Design and History FAQ

12.3.10 Why isn't there a switch or case statement in Python?
-------------------------------------------------------------

You can do this easily enough with a sequence of `if... elif... elif...
else'.  There have been some proposals for switch statement syntax, but
there is no consensus (yet) on whether and how to do range tests.  See PEP
275(1) for complete details and the current status.

  For cases where you need to choose from a very large number of
possibilities, you can create a dictionary mapping case values to
functions to call.  For example:

    def function_1(...):
        ...

    functions = {'a': function_1,
                 'b': function_2,
                 'c': self.method_1, ...}

    func = functions[value]
    func()

For calling methods on objects, you can simplify yet further by using
the *note getattr(): 844. built-in to retrieve methods with a
particular name:

    def visit_a(self, ...):
        ...
    ...

    def dispatch(self, value):
        method_name = 'visit_' + str(value)
        method = getattr(self, method_name)
        method()

It's suggested that you use a prefix for the method names, such as
`visit_' in this example.  Without such a prefix, if values are coming
from an untrusted source, an attacker would be able to call any method
on your object.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0275


File: python.info,  Node: Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?,  Next: Why can't lambda forms contain statements?,  Prev: Why isn't there a switch or case statement in Python?,  Up: Design and History FAQ

12.3.11 Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?
----------------------------------------------------------------------------------------------------------------

Answer 1: Unfortunately, the interpreter pushes at least one C stack
frame for each Python stack frame.  Also, extensions can call back into
Python at almost random moments.  Therefore, a complete threads
implementation requires thread support for C.

  Answer 2: Fortunately, there is Stackless Python(1), which has a
completely redesigned interpreter loop that avoids the C stack.  It's
still experimental but looks very promising.  Although it is binary
compatible with standard Python, it's still unclear whether Stackless
will make it into the core - maybe it's just too revolutionary.

  ---------- Footnotes ----------

  (1) http://www.stackless.com


File: python.info,  Node: Why can't lambda forms contain statements?,  Next: Can Python be compiled to machine code C or some other language?,  Prev: Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?,  Up: Design and History FAQ

12.3.12 Why can't lambda forms contain statements?
--------------------------------------------------

Python lambda forms cannot contain statements because Python's syntactic
framework can't handle statements nested inside expressions.  However,
in Python, this is not a serious problem.  Unlike lambda forms in other
languages, where they add functionality, Python lambdas are only a
shorthand notation if you're too lazy to define a function.

  Functions are already first class objects in Python, and can be
declared in a local scope.  Therefore the only advantage of using a
lambda form instead of a locally-defined function is that you don't
need to invent a name for the function - but that's just a local
variable to which the function object (which is exactly the same type
of object that a lambda form yields) is assigned!


File: python.info,  Node: Can Python be compiled to machine code C or some other language?,  Next: How does Python manage memory?,  Prev: Why can't lambda forms contain statements?,  Up: Design and History FAQ

12.3.13 Can Python be compiled to machine code, C or some other language?
-------------------------------------------------------------------------

Not easily.  Python's high level data types, dynamic typing of objects
and run-time invocation of the interpreter (using *note eval(): 34f. or
*note exec: 3f3.)  together mean that a "compiled" Python program would
probably consist mostly of calls into the Python run-time system, even
for seemingly simple operations like `x+1'.

  Several projects described in the Python newsgroup or at past Python
conferences(1) have shown that this approach is feasible, although the
speedups reached so far are only modest (e.g. 2x).  Jython uses the
same strategy for compiling to Java bytecode.  (Jim Hugunin has
demonstrated that in combination with whole-program analysis, speedups
of 1000x are feasible for small demo programs.  See the proceedings
from the 1997 Python conference(2) for more information.)

  Internally, Python source code is always translated into a bytecode
representation, and this bytecode is then executed by the Python virtual
machine.  In order to avoid the overhead of repeatedly parsing and
translating modules that rarely change, this byte code is written into
a file whose name ends in ".pyc" whenever a module is parsed.  When the
corresponding .py file is changed, it is parsed and translated again
and the .pyc file is rewritten.

  There is no performance difference once the .pyc file has been
loaded, as the bytecode read from the .pyc file is exactly the same as
the bytecode created by direct translation.  The only difference is
that loading code from a .pyc file is faster than parsing and
translating a .py file, so the presence of precompiled .pyc files
improves the start-up time of Python scripts.  If desired, the
Lib/compileall.py module can be used to create valid .pyc files for a
given set of modules.

  Note that the main script executed by Python, even if its filename
ends in .py, is not compiled to a .pyc file.  It is compiled to
bytecode, but the bytecode is not saved to a file.  Usually main
scripts are quite short, so this doesn't cost much speed.

  There are also several programs which make it easier to intermingle
Python and C code in various ways to increase performance.  See, for
example, Psyco(3), Pyrex(4), PyInline(5), Py2Cmod(6), and Weave(7).

  ---------- Footnotes ----------

  (1) http://python.org/community/workshops/

  (2) http://python.org/workshops/1997-10/proceedings/

  (3) http://psyco.sourceforge.net/

  (4) http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/

  (5) http://pyinline.sourceforge.net/

  (6) http://sourceforge.net/projects/py2cmod/

  (7) http://www.scipy.org/Weave


File: python.info,  Node: How does Python manage memory?,  Next: Why isn't all memory freed when Python exits?,  Prev: Can Python be compiled to machine code C or some other language?,  Up: Design and History FAQ

12.3.14 How does Python manage memory?
--------------------------------------

The details of Python memory management depend on the implementation.
The standard C implementation of Python uses reference counting to
detect inaccessible objects, and another mechanism to collect reference
cycles, periodically executing a cycle detection algorithm which looks
for inaccessible cycles and deletes the objects involved. The *note gc:
dc. module provides functions to perform a garbage collection, obtain
debugging statistics, and tune the collector's parameters.

  Jython relies on the Java runtime so the JVM's garbage collector is
used.  This difference can cause some subtle porting problems if your
Python code depends on the behavior of the reference counting
implementation.

  Sometimes objects get stuck in tracebacks temporarily and hence are
not deallocated when you might expect.  Clear the tracebacks with:

    import sys
    sys.exc_clear()
    sys.exc_traceback = sys.last_traceback = None

Tracebacks are used for reporting errors, implementing debuggers and
related things.  They contain a portion of the program state extracted
during the handling of an exception (usually the most recent exception).

  In the absence of circularities and tracebacks, Python programs do
not need to manage memory explicitly.

  Why doesn't Python use a more traditional garbage collection scheme?
For one thing, this is not a C standard feature and hence it's not
portable.  (Yes, we know about the Boehm GC library.  It has bits of
assembler code for _most_ common platforms, not for all of them, and
although it is mostly transparent, it isn't completely transparent;
patches are required to get Python to work with it.)

  Traditional GC also becomes a problem when Python is embedded into
other applications.  While in a standalone Python it's fine to replace
the standard malloc() and free() with versions provided by the GC
library, an application embedding Python may want to have its _own_
substitute for malloc() and free(), and may not want Python's.  Right
now, Python works with anything that implements malloc() and free()
properly.

  In Jython, the following code (which is fine in CPython) will
probably run out of file descriptors long before it runs out of memory:

    for file in very_long_list_of_files:
        f = open(file)
        c = f.read(1)

Using the current reference counting and destructor scheme, each new
assignment to f closes the previous file.  Using GC, this is not
guaranteed.  If you want to write code that will work with any Python
implementation, you should explicitly close the file or use the *note
with: 1bd. statement; this will work regardless of GC:

    for file in very_long_list_of_files:
        with open(file) as f:
            c = f.read(1)



File: python.info,  Node: Why isn't all memory freed when Python exits?,  Next: Why are there separate tuple and list data types?,  Prev: How does Python manage memory?,  Up: Design and History FAQ

12.3.15 Why isn't all memory freed when Python exits?
-----------------------------------------------------

Objects referenced from the global namespaces of Python modules are not
always deallocated when Python exits.  This may happen if there are
circular references.  There are also certain bits of memory that are
allocated by the C library that are impossible to free (e.g. a tool
like Purify will complain about these).  Python is, however, aggressive
about cleaning up memory on exit and does try to destroy every single
object.

  If you want to force Python to delete certain things on deallocation
use the *note atexit: 12. module to run a function that will force
those deletions.


File: python.info,  Node: Why are there separate tuple and list data types?,  Next: How are lists implemented?,  Prev: Why isn't all memory freed when Python exits?,  Up: Design and History FAQ

12.3.16 Why are there separate tuple and list data types?
---------------------------------------------------------

Lists and tuples, while similar in many respects, are generally used in
fundamentally different ways.  Tuples can be thought of as being
similar to Pascal records or C structs; they're small collections of
related data which may be of different types which are operated on as a
group.  For example, a Cartesian coordinate is appropriately
represented as a tuple of two or three numbers.

  Lists, on the other hand, are more like arrays in other languages.
They tend to hold a varying number of objects all of which have the
same type and which are operated on one-by-one.  For example,
`os.listdir('.')' returns a list of strings representing the files in
the current directory.  Functions which operate on this output would
generally not break if you added another file or two to the directory.

  Tuples are immutable, meaning that once a tuple has been created, you
can't replace any of its elements with a new value.  Lists are mutable,
meaning that you can always change a list's elements.  Only immutable
elements can be used as dictionary keys, and hence only tuples and not
lists can be used as keys.


File: python.info,  Node: How are lists implemented?,  Next: How are dictionaries implemented?,  Prev: Why are there separate tuple and list data types?,  Up: Design and History FAQ

12.3.17 How are lists implemented?
----------------------------------

Python's lists are really variable-length arrays, not Lisp-style linked
lists.  The implementation uses a contiguous array of references to
other objects, and keeps a pointer to this array and the array's length
in a list head structure.

  This makes indexing a list `a[i]' an operation whose cost is
independent of the size of the list or the value of the index.

  When items are appended or inserted, the array of references is
resized.  Some cleverness is applied to improve the performance of
appending items repeatedly; when the array must be grown, some extra
space is allocated so the next few times don't require an actual resize.


File: python.info,  Node: How are dictionaries implemented?,  Next: Why must dictionary keys be immutable?,  Prev: How are lists implemented?,  Up: Design and History FAQ

12.3.18 How are dictionaries implemented?
-----------------------------------------

Python's dictionaries are implemented as resizable hash tables.
Compared to B-trees, this gives better performance for lookup (the most
common operation by far) under most circumstances, and the
implementation is simpler.

  Dictionaries work by computing a hash code for each key stored in the
dictionary using the *note hash(): 6e2. built-in function.  The hash
code varies widely depending on the key; for example, "Python" hashes
to -539294296 while "python", a string that differs by a single bit,
hashes to 1142331976.  The hash code is then used to calculate a
location in an internal array where the value will be stored.  Assuming
that you're storing keys that all have different hash values, this
means that dictionaries take constant time - O(1), in computer science
notation - to retrieve a key.  It also means that no sorted order of
the keys is maintained, and traversing the array as the `.keys()' and
`.items()' do will output the dictionary's content in some arbitrary
jumbled order.


File: python.info,  Node: Why must dictionary keys be immutable?,  Next: Why doesn't list sort return the sorted list?,  Prev: How are dictionaries implemented?,  Up: Design and History FAQ

12.3.19 Why must dictionary keys be immutable?
----------------------------------------------

The hash table implementation of dictionaries uses a hash value
calculated from the key value to find the key.  If the key were a
mutable object, its value could change, and thus its hash could also
change.  But since whoever changes the key object can't tell that it
was being used as a dictionary key, it can't move the entry around in
the dictionary.  Then, when you try to look up the same object in the
dictionary it won't be found because its hash value is different.  If
you tried to look up the old value it wouldn't be found either, because
the value of the object found in that hash bin would be different.

  If you want a dictionary indexed with a list, simply convert the list
to a tuple first; the function `tuple(L)' creates a tuple with the same
entries as the list `L'.  Tuples are immutable and can therefore be
used as dictionary keys.

  Some unacceptable solutions that have been proposed:

   - Hash lists by their address (object ID).  This doesn't work
     because if you construct a new list with the same value it won't
     be found; e.g.:

         mydict = {[1, 2]: '12'}
         print mydict[[1, 2]]

     would raise a KeyError exception because the id of the `[1, 2]'
     used in the second line differs from that in the first line.  In
     other words, dictionary keys should be compared using `==', not
     using *note is: 6c6.

   - Make a copy when using a list as a key.  This doesn't work because
     the list, being a mutable object, could contain a reference to
     itself, and then the copying code would run into an infinite loop.

   - Allow lists as keys but tell the user not to modify them.  This
     would allow a class of hard-to-track bugs in programs when you
     forgot or modified a list by accident. It also invalidates an
     important invariant of dictionaries: every value in `d.keys()' is
     usable as a key of the dictionary.

   - Mark lists as read-only once they are used as a dictionary key.
     The problem is that it's not just the top-level object that could
     change its value; you could use a tuple containing a list as a
     key.  Entering anything as a key into a dictionary would require
     marking all objects reachable from there as read-only - and again,
     self-referential objects could cause an infinite loop.

  There is a trick to get around this if you need to, but use it at
your own risk: You can wrap a mutable structure inside a class instance
which has both a *note __eq__(): 219. and a *note __hash__(): 324.
method.  You must then make sure that the hash value for all such
wrapper objects that reside in a dictionary (or other hash based
structure), remain fixed while the object is in the dictionary (or
other structure).

    class ListWrapper:
        def __init__(self, the_list):
            self.the_list = the_list
        def __eq__(self, other):
            return self.the_list == other.the_list
        def __hash__(self):
            l = self.the_list
            result = 98767 - len(l)*555
            for i, el in enumerate(l):
                try:
                    result = result + (hash(el) % 9999999) * 1001 + i
                except Exception:
                    result = (result % 7777777) + i * 333
            return result

Note that the hash computation is complicated by the possibility that
some members of the list may be unhashable and also by the possibility
of arithmetic overflow.

  Furthermore it must always be the case that if `o1 == o2' (ie
`o1.__eq__(o2) is True') then `hash(o1) == hash(o2)' (ie,
`o1.__hash__() == o2.__hash__()'), regardless of whether the object is
in a dictionary or not.  If you fail to meet these restrictions
dictionaries and other hash based structures will misbehave.

  In the case of ListWrapper, whenever the wrapper object is in a
dictionary the wrapped list must not change to avoid anomalies.  Don't
do this unless you are prepared to think hard about the requirements
and the consequences of not meeting them correctly.  Consider yourself
warned.


File: python.info,  Node: Why doesn't list sort return the sorted list?,  Next: How do you specify and enforce an interface spec in Python?,  Prev: Why must dictionary keys be immutable?,  Up: Design and History FAQ

12.3.20 Why doesn't list.sort() return the sorted list?
-------------------------------------------------------

In situations where performance matters, making a copy of the list just
to sort it would be wasteful. Therefore, `list.sort()' sorts the list
in place. In order to remind you of that fact, it does not return the
sorted list.  This way, you won't be fooled into accidentally
overwriting a list when you need a sorted copy but also need to keep
the unsorted version around.

  In Python 2.4 a new built-in function - *note sorted(): 220. - has
been added.  This function creates a new list from a provided iterable,
sorts it and returns it.  For example, here's how to iterate over the
keys of a dictionary in sorted order:

    for key in sorted(mydict):
        ... # do whatever with mydict[key]...



File: python.info,  Node: How do you specify and enforce an interface spec in Python?,  Next: Why are default values shared between objects?,  Prev: Why doesn't list sort return the sorted list?,  Up: Design and History FAQ

12.3.21 How do you specify and enforce an interface spec in Python?
-------------------------------------------------------------------

An interface specification for a module as provided by languages such
as C++ and Java describes the prototypes for the methods and functions
of the module.  Many feel that compile-time enforcement of interface
specifications helps in the construction of large programs.

  Python 2.6 adds an *note abc: 4. module that lets you define Abstract
Base Classes (ABCs).  You can then use *note isinstance(): 30e. and
*note issubclass(): 30f. to check whether an instance or a class
implements a particular ABC.  The *note collections: 65. modules
defines a set of useful ABCs such as `Iterable', `Container', and
`MutableMapping'.

  For Python, many of the advantages of interface specifications can be
obtained by an appropriate test discipline for components.  There is
also a tool, PyChecker, which can be used to find problems due to
subclassing.

  A good test suite for a module can both provide a regression test and
serve as a module interface specification and a set of examples.  Many
Python modules can be run as a script to provide a simple "self test."
Even modules which use complex external interfaces can often be tested
in isolation using trivial "stub" emulations of the external interface.
The *note doctest: b6. and *note unittest: 188. modules or third-party
test frameworks can be used to construct exhaustive test suites that
exercise every line of code in a module.

  An appropriate testing discipline can help build large complex
applications in Python as well as having interface specifications
would.  In fact, it can be better because an interface specification
cannot test certain properties of a program.  For example, the
`append()' method is expected to add new elements to the end of some
internal list; an interface specification cannot test that your
`append()' implementation will actually do this correctly, but it's
trivial to check this property in a test suite.

  Writing test suites is very helpful, and you might want to design
your code with an eye to making it easily tested.  One increasingly
popular technique, test-directed development, calls for writing parts
of the test suite first, before you write any of the actual code.  Of
course Python allows you to be sloppy and not write test cases at all.


File: python.info,  Node: Why are default values shared between objects?,  Next: Why is there no goto?,  Prev: How do you specify and enforce an interface spec in Python?,  Up: Design and History FAQ

12.3.22 Why are default values shared between objects?
------------------------------------------------------

This type of bug commonly bites neophyte programmers.  Consider this
function:

    def foo(mydict={}):  # Danger: shared reference to one dict for all calls
        ... compute something ...
        mydict[key] = value
        return mydict

The first time you call this function, `mydict' contains a single item.
The second time, `mydict' contains two items because when `foo()'
begins executing, `mydict' starts out with an item already in it.

  It is often expected that a function call creates new objects for
default values. This is not what happens. Default values are created
exactly once, when the function is defined.  If that object is changed,
like the dictionary in this example, subsequent calls to the function
will refer to this changed object.

  By definition, immutable objects such as numbers, strings, tuples,
and `None', are safe from change. Changes to mutable objects such as
dictionaries, lists, and class instances can lead to confusion.

  Because of this feature, it is good programming practice to not use
mutable objects as default values.  Instead, use `None' as the default
value and inside the function, check if the parameter is `None' and
create a new list/dictionary/whatever if it is.  For example, don't
write:

    def foo(mydict={}):
        ...

but:

    def foo(mydict=None):
        if mydict is None:
            mydict = {}  # create a new dict for local namespace

This feature can be useful.  When you have a function that's
time-consuming to compute, a common technique is to cache the
parameters and the resulting value of each call to the function, and
return the cached value if the same value is requested again.  This is
called "memoizing", and can be implemented like this:

    # Callers will never provide a third parameter for this function.
    def expensive (arg1, arg2, _cache={}):
        if (arg1, arg2) in _cache:
            return _cache[(arg1, arg2)]

        # Calculate the value
        result = ... expensive computation ...
        _cache[(arg1, arg2)] = result           # Store result in the cache
        return result

You could use a global variable containing a dictionary instead of the
default value; it's a matter of taste.


File: python.info,  Node: Why is there no goto?,  Next: Why can't raw strings r-strings end with a backslash?,  Prev: Why are default values shared between objects?,  Up: Design and History FAQ

12.3.23 Why is there no goto?
-----------------------------

You can use exceptions to provide a "structured goto" that even works
across function calls.  Many feel that exceptions can conveniently
emulate all reasonable uses of the "go" or "goto" constructs of C,
Fortran, and other languages.  For example:

    class label: pass  # declare a label

    try:
         ...
         if (condition): raise label()  # goto label
         ...
    except label:  # where to goto
         pass
    ...

This doesn't allow you to jump into the middle of a loop, but that's
usually considered an abuse of goto anyway.  Use sparingly.


File: python.info,  Node: Why can't raw strings r-strings end with a backslash?,  Next: Why doesn't Python have a "with" statement for attribute assignments?,  Prev: Why is there no goto?,  Up: Design and History FAQ

12.3.24 Why can't raw strings (r-strings) end with a backslash?
---------------------------------------------------------------

More precisely, they can't end with an odd number of backslashes: the
unpaired backslash at the end escapes the closing quote character,
leaving an unterminated string.

  Raw strings were designed to ease creating input for processors
(chiefly regular expression engines) that want to do their own
backslash escape processing. Such processors consider an unmatched
trailing backslash to be an error anyway, so raw strings disallow that.
In return, they allow you to pass on the string quote character by
escaping it with a backslash.  These rules work well when r-strings are
used for their intended purpose.

  If you're trying to build Windows pathnames, note that all Windows
system calls accept forward slashes too:

    f = open("/mydir/file.txt")  # works fine!

If you're trying to build a pathname for a DOS command, try e.g. one of

    dir = r"\this\is\my\dos\dir" "\\"
    dir = r"\this\is\my\dos\dir\ "[:-1]
    dir = "\\this\\is\\my\\dos\\dir\\"



File: python.info,  Node: Why doesn't Python have a "with" statement for attribute assignments?,  Next: Why are colons required for the if/while/def/class statements?,  Prev: Why can't raw strings r-strings end with a backslash?,  Up: Design and History FAQ

12.3.25 Why doesn't Python have a "with" statement for attribute assignments?
-----------------------------------------------------------------------------

Python has a 'with' statement that wraps the execution of a block,
calling code on the entrance and exit from the block.  Some language
have a construct that looks like this:

    with obj:
        a = 1               # equivalent to obj.a = 1
        total = total + 1   # obj.total = obj.total + 1

In Python, such a construct would be ambiguous.

  Other languages, such as Object Pascal, Delphi, and C++, use static
types, so it's possible to know, in an unambiguous way, what member is
being assigned to. This is the main point of static typing - the
compiler _always_ knows the scope of every variable at compile time.

  Python uses dynamic types. It is impossible to know in advance which
attribute will be referenced at runtime. Member attributes may be added
or removed from objects on the fly. This makes it impossible to know,
from a simple reading, what attribute is being referenced: a local one,
a global one, or a member attribute?

  For instance, take the following incomplete snippet:

    def foo(a):
        with a:
            print x

The snippet assumes that "a" must have a member attribute called "x".
However, there is nothing in Python that tells the interpreter this.
What should happen if "a" is, let us say, an integer?  If there is a
global variable named "x", will it be used inside the with block?  As
you see, the dynamic nature of Python makes such choices much harder.

  The primary benefit of "with" and similar language features
(reduction of code volume) can, however, easily be achieved in Python
by assignment.  Instead of:

    function(args).mydict[index][index].a = 21
    function(args).mydict[index][index].b = 42
    function(args).mydict[index][index].c = 63

write this:

    ref = function(args).mydict[index][index]
    ref.a = 21
    ref.b = 42
    ref.c = 63

This also has the side-effect of increasing execution speed because name
bindings are resolved at run-time in Python, and the second version
only needs to perform the resolution once.


File: python.info,  Node: Why are colons required for the if/while/def/class statements?,  Next: Why does Python allow commas at the end of lists and tuples?,  Prev: Why doesn't Python have a "with" statement for attribute assignments?,  Up: Design and History FAQ

12.3.26 Why are colons required for the if/while/def/class statements?
----------------------------------------------------------------------

The colon is required primarily to enhance readability (one of the
results of the experimental ABC language).  Consider this:

    if a == b
        print a

versus

    if a == b:
        print a

Notice how the second one is slightly easier to read.  Notice further
how a colon sets off the example in this FAQ answer; it's a standard
usage in English.

  Another minor reason is that the colon makes it easier for editors
with syntax highlighting; they can look for colons to decide when
indentation needs to be increased instead of having to do a more
elaborate parsing of the program text.


File: python.info,  Node: Why does Python allow commas at the end of lists and tuples?,  Prev: Why are colons required for the if/while/def/class statements?,  Up: Design and History FAQ

12.3.27 Why does Python allow commas at the end of lists and tuples?
--------------------------------------------------------------------

Python lets you add a trailing comma at the end of lists, tuples, and
dictionaries:

    [1, 2, 3,]
    ('a', 'b', 'c',)
    d = {
        "A": [1, 5],
        "B": [6, 7],  # last trailing comma is optional but good style
    }

There are several reasons to allow this.

  When you have a literal value for a list, tuple, or dictionary spread
across multiple lines, it's easier to add more elements because you
don't have to remember to add a comma to the previous line.  The lines
can also be sorted in your editor without creating a syntax error.

  Accidentally omitting the comma can lead to errors that are hard to
diagnose.  For example:

    x = [
      "fee",
      "fie"
      "foo",
      "fum"
    ]

This list looks like it has four elements, but it actually contains
three: "fee", "fiefoo" and "fum".  Always adding the comma avoids this
source of error.

  Allowing the trailing comma may also make programmatic code
generation easier.


File: python.info,  Node: Library and Extension FAQ,  Next: Extending/Embedding FAQ,  Prev: Design and History FAQ,  Up: Python Frequently Asked Questions

12.4 Library and Extension FAQ
==============================

* Menu:

* General Library Questions::
* Common tasks::
* Threads::
* Input and Output: Input and Output<2>.
* Network/Internet Programming::
* Databases::
* Mathematics and Numerics::

General Library Questions

* How do I find a module or application to perform task X?::
* Where is the math.py (socket.py, regex.py, etc.) source file?: Where is the math py socket py regex py etc source file?.
* How do I make a Python script executable on Unix?::
* Is there a curses/termcap package for Python?::
* Is there an equivalent to C's onexit() in Python?: Is there an equivalent to C's onexit in Python?.
* Why don't my signal handlers work?::

Common tasks

* How do I test a Python program or component?::
* How do I create documentation from doc strings?::
* How do I get a single keypress at a time?::

Threads

* How do I program using threads?::
* None of my threads seem to run; why?: None of my threads seem to run why?.
* How do I parcel out work among a bunch of worker threads?::
* What kinds of global value mutation are thread-safe?::
* Can't we get rid of the Global Interpreter Lock?::

Input and Output

* How do I delete a file? (And other file questions...): How do I delete a file? And other file questions.
* How do I copy a file?::
* How do I read (or write) binary data?: How do I read or write binary data?.
* I can't seem to use os.read() on a pipe created with os.popen(); why?: I can't seem to use os read on a pipe created with os popen ; why?.
* How do I run a subprocess with pipes connected to both input and output?::
* How do I access the serial (RS232) port?: How do I access the serial RS232 port?.
* Why doesn't closing sys.stdout (stdin, stderr) really close it?: Why doesn't closing sys stdout stdin stderr really close it?.

Network/Internet Programming

* What WWW tools are there for Python?::
* How can I mimic CGI form submission (METHOD=POST)?: How can I mimic CGI form submission METHOD=POST ?.
* What module should I use to help with generating HTML?::
* How do I send mail from a Python script?::
* How do I avoid blocking in the connect() method of a socket?: How do I avoid blocking in the connect method of a socket?.

Databases

* Are there any interfaces to database packages in Python?::
* How do you implement persistent objects in Python?::
* Why is cPickle so slow?::
* If my program crashes with a bsddb (or anydbm) database open, it gets corrupted. How come?: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?.
* I tried to open Berkeley DB file, but bsddb produces bsddb.error; (22, 'Invalid argument'). Help! How can I restore my data?: I tried to open Berkeley DB file but bsddb produces bsddb error 22 'Invalid argument' Help! How can I restore my data?.

Mathematics and Numerics

* How do I generate random numbers in Python?::


File: python.info,  Node: General Library Questions,  Next: Common tasks,  Up: Library and Extension FAQ

12.4.1 General Library Questions
--------------------------------

* Menu:

* How do I find a module or application to perform task X?::
* Where is the math.py (socket.py, regex.py, etc.) source file?: Where is the math py socket py regex py etc source file?.
* How do I make a Python script executable on Unix?::
* Is there a curses/termcap package for Python?::
* Is there an equivalent to C's onexit() in Python?: Is there an equivalent to C's onexit in Python?.
* Why don't my signal handlers work?::


File: python.info,  Node: How do I find a module or application to perform task X?,  Next: Where is the math py socket py regex py etc source file?,  Up: General Library Questions

12.4.1.1 How do I find a module or application to perform task X?
.................................................................

Check *note the Library Reference: 4e5. to see if there's a relevant
standard library module.  (Eventually you'll learn what's in the
standard library and will able to skip this step.)

  For third-party packages, search the Python Package Index(1) or try
Google(2) or another Web search engine.  Searching for "Python" plus a
keyword or two for your topic of interest will usually find something
helpful.

  ---------- Footnotes ----------

  (1) http://pypi.python.org/pypi

  (2) http://www.google.com


File: python.info,  Node: Where is the math py socket py regex py etc source file?,  Next: How do I make a Python script executable on Unix?,  Prev: How do I find a module or application to perform task X?,  Up: General Library Questions

12.4.1.2 Where is the math.py (socket.py, regex.py, etc.) source file?
......................................................................

If you can't find a source file for a module it may be a built-in or
dynamically loaded module implemented in C, C++ or other compiled
language.  In this case you may not have the source file or it may be
something like mathmodule.c, somewhere in a C source directory (not on
the Python Path).

  There are (at least) three kinds of modules in Python:

  1. modules written in Python (.py);

  2. modules written in C and dynamically loaded (.dll, .pyd, .so, .sl,
     etc);

  3. modules written in C and linked with the interpreter; to get a
     list of these, type:

         import sys
         print sys.builtin_module_names




File: python.info,  Node: How do I make a Python script executable on Unix?,  Next: Is there a curses/termcap package for Python?,  Prev: Where is the math py socket py regex py etc source file?,  Up: General Library Questions

12.4.1.3 How do I make a Python script executable on Unix?
..........................................................

You need to do two things: the script file's mode must be executable
and the first line must begin with `#!' followed by the path of the
Python interpreter.

  The first is done by executing `chmod +x scriptfile' or perhaps
`chmod 755 scriptfile'.

  The second can be done in a number of ways.  The most straightforward
way is to write

    #!/usr/local/bin/python

as the very first line of your file, using the pathname for where the
Python interpreter is installed on your platform.

  If you would like the script to be independent of where the Python
interpreter lives, you can use the "env" program.  Almost all Unix
variants support the following, assuming the Python interpreter is in a
directory on the user's $PATH:

    #!/usr/bin/env python

_Don't_ do this for CGI scripts.  The $PATH variable for CGI scripts is
often very minimal, so you need to use the actual absolute pathname of
the interpreter.

  Occasionally, a user's environment is so full that the /usr/bin/env
program fails; or there's no env program at all.  In that case, you can
try the following hack (due to Alex Rezinsky):

    #! /bin/sh
    """:"
    exec python $0 ${1+"$@"}
    """

The minor disadvantage is that this defines the script's __doc__ string.
However, you can fix that by adding

    __doc__ = """...Whatever..."""



File: python.info,  Node: Is there a curses/termcap package for Python?,  Next: Is there an equivalent to C's onexit in Python?,  Prev: How do I make a Python script executable on Unix?,  Up: General Library Questions

12.4.1.4 Is there a curses/termcap package for Python?
......................................................

For Unix variants: The standard Python source distribution comes with a
curses module in the `Modules/' subdirectory, though it's not compiled
by default (note that this is not available in the Windows distribution
- there is no curses module for Windows).

  The curses module supports basic curses features as well as many
additional functions from ncurses and SYSV curses such as colour,
alternative character set support, pads, and mouse support. This means
the module isn't compatible with operating systems that only have BSD
curses, but there don't seem to be any currently maintained OSes that
fall into this category.

  For Windows: use the consolelib module(1).

  ---------- Footnotes ----------

  (1) http://effbot.org/zone/console-index.htm


File: python.info,  Node: Is there an equivalent to C's onexit in Python?,  Next: Why don't my signal handlers work?,  Prev: Is there a curses/termcap package for Python?,  Up: General Library Questions

12.4.1.5 Is there an equivalent to C's onexit() in Python?
..........................................................

The *note atexit: 12. module provides a register function that is
similar to C's onexit.


File: python.info,  Node: Why don't my signal handlers work?,  Prev: Is there an equivalent to C's onexit in Python?,  Up: General Library Questions

12.4.1.6 Why don't my signal handlers work?
...........................................

The most common problem is that the signal handler is declared with the
wrong argument list.  It is called as

    handler(signum, frame)

so it should be declared with two arguments:

    def handler(signum, frame):
        ...



File: python.info,  Node: Common tasks,  Next: Threads,  Prev: General Library Questions,  Up: Library and Extension FAQ

12.4.2 Common tasks
-------------------

* Menu:

* How do I test a Python program or component?::
* How do I create documentation from doc strings?::
* How do I get a single keypress at a time?::


File: python.info,  Node: How do I test a Python program or component?,  Next: How do I create documentation from doc strings?,  Up: Common tasks

12.4.2.1 How do I test a Python program or component?
.....................................................

Python comes with two testing frameworks.  The *note doctest: b6.
module finds examples in the docstrings for a module and runs them,
comparing the output with the expected output given in the docstring.

  The *note unittest: 188. module is a fancier testing framework
modelled on Java and Smalltalk testing frameworks.

  For testing, it helps to write the program so that it may be easily
tested by using good modular design.  Your program should have almost
all functionality encapsulated in either functions or class methods -
and this sometimes has the surprising and delightful effect of making
the program run faster (because local variable accesses are faster than
global accesses).  Furthermore the program should avoid depending on
mutating global variables, since this makes testing much more difficult
to do.

  The "global main logic" of your program may be as simple as

    if __name__ == "__main__":
        main_logic()

at the bottom of the main module of your program.

  Once your program is organized as a tractable collection of functions
and class behaviours you should write test functions that exercise the
behaviours.  A test suite can be associated with each module which
automates a sequence of tests.  This sounds like a lot of work, but
since Python is so terse and flexible it's surprisingly easy.  You can
make coding much more pleasant and fun by writing your test functions
in parallel with the "production code", since this makes it easy to
find bugs and even design flaws earlier.

  "Support modules" that are not intended to be the main module of a
program may include a self-test of the module.

    if __name__ == "__main__":
        self_test()

Even programs that interact with complex external interfaces may be
tested when the external interfaces are unavailable by using "fake"
interfaces implemented in Python.


File: python.info,  Node: How do I create documentation from doc strings?,  Next: How do I get a single keypress at a time?,  Prev: How do I test a Python program or component?,  Up: Common tasks

12.4.2.2 How do I create documentation from doc strings?
........................................................

The *note pydoc: 140. module can create HTML from the doc strings in
your Python source code.  An alternative for creating API documentation
purely from docstrings is epydoc(1).  Sphinx(2) can also include
docstring content.

  ---------- Footnotes ----------

  (1) http://epydoc.sf.net/

  (2) http://sphinx.pocoo.org


File: python.info,  Node: How do I get a single keypress at a time?,  Prev: How do I create documentation from doc strings?,  Up: Common tasks

12.4.2.3 How do I get a single keypress at a time?
..................................................

For Unix variants: There are several solutions.  It's straightforward
to do this using curses, but curses is a fairly large module to learn.
Here's a solution without curses:

    import termios, fcntl, sys, os
    fd = sys.stdin.fileno()

    oldterm = termios.tcgetattr(fd)
    newattr = termios.tcgetattr(fd)
    newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
    termios.tcsetattr(fd, termios.TCSANOW, newattr)

    oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)

    try:
        while 1:
            try:
                c = sys.stdin.read(1)
                print "Got character", repr(c)
            except IOError: pass
    finally:
        termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
        fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)

You need the *note termios: 175. and the *note fcntl: cb. module for
any of this to work, and I've only tried it on Linux, though it should
work elsewhere.  In this code, characters are read and printed one at a
time.

  *note termios.tcsetattr(): 270e. turns off stdin's echoing and
disables canonical mode.  `fcntl.fnctl()' is used to obtain stdin's
file descriptor flags and modify them for non-blocking mode.  Since
reading stdin when it is empty results in an *note IOError: 1f7, this
error is caught and ignored.


File: python.info,  Node: Threads,  Next: Input and Output<2>,  Prev: Common tasks,  Up: Library and Extension FAQ

12.4.3 Threads
--------------

* Menu:

* How do I program using threads?::
* None of my threads seem to run; why?: None of my threads seem to run why?.
* How do I parcel out work among a bunch of worker threads?::
* What kinds of global value mutation are thread-safe?::
* Can't we get rid of the Global Interpreter Lock?::


File: python.info,  Node: How do I program using threads?,  Next: None of my threads seem to run why?,  Up: Threads

12.4.3.1 How do I program using threads?
........................................

Be sure to use the *note threading: 17a. module and not the *note
thread: 179. module.  The *note threading: 17a. module builds
convenient abstractions on top of the low-level primitives provided by
the *note thread: 179. module.

  Aahz has a set of slides from his threading tutorial that are
helpful; see <http://www.pythoncraft.com/OSCON2001/>.


File: python.info,  Node: None of my threads seem to run why?,  Next: How do I parcel out work among a bunch of worker threads?,  Prev: How do I program using threads?,  Up: Threads

12.4.3.2 None of my threads seem to run: why?
.............................................

As soon as the main thread exits, all threads are killed.  Your main
thread is running too quickly, giving the threads no time to do any
work.

  A simple fix is to add a sleep to the end of the program that's long
enough for all the threads to finish:

    import threading, time

    def thread_task(name, n):
        for i in range(n): print name, i

    for i in range(10):
        T = threading.Thread(target=thread_task, args=(str(i), i))
        T.start()

    time.sleep(10) # <----------------------------!

But now (on many platforms) the threads don't run in parallel, but
appear to run sequentially, one at a time!  The reason is that the OS
thread scheduler doesn't start a new thread until the previous thread
is blocked.

  A simple fix is to add a tiny sleep to the start of the run function:

    def thread_task(name, n):
        time.sleep(0.001) # <---------------------!
        for i in range(n): print name, i

    for i in range(10):
        T = threading.Thread(target=thread_task, args=(str(i), i))
        T.start()

    time.sleep(10)

Instead of trying to guess how long a *note time.sleep(): 1198. delay
will be enough, it's better to use some kind of semaphore mechanism.
One idea is to use the *note Queue: 141. module to create a queue
object, let each thread append a token to the queue when it finishes,
and let the main thread read as many tokens from the queue as there are
threads.


File: python.info,  Node: How do I parcel out work among a bunch of worker threads?,  Next: What kinds of global value mutation are thread-safe?,  Prev: None of my threads seem to run why?,  Up: Threads

12.4.3.3 How do I parcel out work among a bunch of worker threads?
..................................................................

Use the *note Queue: 141. module to create a queue containing a list of
jobs.  The *note Queue: 5e5. class maintains a list of objects with
`.put(obj)' to add an item to the queue and `.get()' to return an item.
The class will take care of the locking necessary to ensure that each
job is handed out exactly once.

  Here's a trivial example:

    import threading, Queue, time

    # The worker thread gets jobs off the queue.  When the queue is empty, it
    # assumes there will be no more work and exits.
    # (Realistically workers will run until terminated.)
    def worker ():
        print 'Running worker'
        time.sleep(0.1)
        while True:
            try:
                arg = q.get(block=False)
            except Queue.Empty:
                print 'Worker', threading.currentThread(),
                print 'queue empty'
                break
            else:
                print 'Worker', threading.currentThread(),
                print 'running with argument', arg
                time.sleep(0.5)

    # Create queue
    q = Queue.Queue()

    # Start a pool of 5 workers
    for i in range(5):
        t = threading.Thread(target=worker, name='worker %i' % (i+1))
        t.start()

    # Begin adding work to the queue
    for i in range(50):
        q.put(i)

    # Give threads time to run
    print 'Main thread sleeping'
    time.sleep(5)

When run, this will produce the following output:

     Running worker Running worker Running worker Running worker
     Running worker Main thread sleeping Worker <Thread(worker 1,
     started)> running with argument 0 Worker <Thread(worker 2,
     started)> running with argument 1 Worker <Thread(worker 3,
     started)> running with argument 2 Worker <Thread(worker 4,
     started)> running with argument 3 Worker <Thread(worker 5,
     started)> running with argument 4 Worker <Thread(worker 1,
     started)> running with argument 5 ...

  Consult the module's documentation for more details; the `Queue' class
provides a featureful interface.


File: python.info,  Node: What kinds of global value mutation are thread-safe?,  Next: Can't we get rid of the Global Interpreter Lock?,  Prev: How do I parcel out work among a bunch of worker threads?,  Up: Threads

12.4.3.4 What kinds of global value mutation are thread-safe?
.............................................................

A global interpreter lock (GIL) is used internally to ensure that only
one thread runs in the Python VM at a time.  In general, Python offers
to switch among threads only between bytecode instructions; how
frequently it switches can be set via *note sys.setcheckinterval():
2325.  Each bytecode instruction and therefore all the C implementation
code reached from each instruction is therefore atomic from the point
of view of a Python program.

  In theory, this means an exact accounting requires an exact
understanding of the PVM bytecode implementation.  In practice, it
means that operations on shared variables of built-in data types (ints,
lists, dicts, etc) that "look atomic" really are.

  For example, the following operations are all atomic (L, L1, L2 are
lists, D, D1, D2 are dicts, x, y are objects, i, j are ints):

    L.append(x)
    L1.extend(L2)
    x = L[i]
    x = L.pop()
    L1[i:j] = L2
    L.sort()
    x = y
    x.field = y
    D[x] = y
    D1.update(D2)
    D.keys()

These aren't:

    i = i+1
    L.append(L[-1])
    L[i] = L[j]
    D[x] = D[x] + 1

Operations that replace other objects may invoke those other objects'
*note __del__(): 6e0. method when their reference count reaches zero,
and that can affect things.  This is especially true for the mass
updates to dictionaries and lists.  When in doubt, use a mutex!


File: python.info,  Node: Can't we get rid of the Global Interpreter Lock?,  Prev: What kinds of global value mutation are thread-safe?,  Up: Threads

12.4.3.5 Can't we get rid of the Global Interpreter Lock?
.........................................................

The Global Interpreter Lock (GIL) is often seen as a hindrance to
Python's deployment on high-end multiprocessor server machines, because
a multi-threaded Python program effectively only uses one CPU, due to
the insistence that (almost) all Python code can only run while the GIL
is held.

  Back in the days of Python 1.5, Greg Stein actually implemented a
comprehensive patch set (the "free threading" patches) that removed the
GIL and replaced it with fine-grained locking.  Unfortunately, even on
Windows (where locks are very efficient) this ran ordinary Python code
about twice as slow as the interpreter using the GIL.  On Linux the
performance loss was even worse because pthread locks aren't as
efficient.

  Since then, the idea of getting rid of the GIL has occasionally come
up but nobody has found a way to deal with the expected slowdown, and
users who don't use threads would not be happy if their code ran at
half at the speed.  Greg's free threading patch set has not been kept
up-to-date for later Python versions.

  This doesn't mean that you can't make good use of Python on multi-CPU
machines!  You just have to be creative with dividing the work up
between multiple _processes_ rather than multiple _threads_.  Judicious
use of C extensions will also help; if you use a C extension to perform
a time-consuming task, the extension can release the GIL while the
thread of execution is in the C code and allow other threads to get
some work done.

  It has been suggested that the GIL should be a per-interpreter-state
lock rather than truly global; interpreters then wouldn't be able to
share objects.  Unfortunately, this isn't likely to happen either.  It
would be a tremendous amount of work, because many object
implementations currently have global state.  For example, small
integers and short strings are cached; these caches would have to be
moved to the interpreter state.  Other object types have their own free
list; these free lists would have to be moved to the interpreter state.
And so on.

  And I doubt that it can even be done in finite time, because the same
problem exists for 3rd party extensions.  It is likely that 3rd party
extensions are being written at a faster rate than you can convert them
to store all their global state in the interpreter state.

  And finally, once you have multiple interpreters not sharing any
state, what have you gained over running each interpreter in a separate
process?


File: python.info,  Node: Input and Output<2>,  Next: Network/Internet Programming,  Prev: Threads,  Up: Library and Extension FAQ

12.4.4 Input and Output
-----------------------

* Menu:

* How do I delete a file? (And other file questions...): How do I delete a file? And other file questions.
* How do I copy a file?::
* How do I read (or write) binary data?: How do I read or write binary data?.
* I can't seem to use os.read() on a pipe created with os.popen(); why?: I can't seem to use os read on a pipe created with os popen ; why?.
* How do I run a subprocess with pipes connected to both input and output?::
* How do I access the serial (RS232) port?: How do I access the serial RS232 port?.
* Why doesn't closing sys.stdout (stdin, stderr) really close it?: Why doesn't closing sys stdout stdin stderr really close it?.


File: python.info,  Node: How do I delete a file? And other file questions,  Next: How do I copy a file?,  Up: Input and Output<2>

12.4.4.1 How do I delete a file? (And other file questions...)
..............................................................

Use `os.remove(filename)' or `os.unlink(filename)'; for documentation,
see the *note os: 129. module.  The two functions are identical;
`unlink()' is simply the name of the Unix system call for this function.

  To remove a directory, use *note os.rmdir(): e61.; use *note
os.mkdir(): 10f6. to create one.  `os.makedirs(path)' will create any
intermediate directories in `path' that don't exist.
`os.removedirs(path)' will remove intermediate directories as long as
they're empty; if you want to delete an entire directory tree and its
contents, use *note shutil.rmtree(): e5f.

  To rename a file, use `os.rename(old_path, new_path)'.

  To truncate a file, open it using `f = open(filename, "r+")', and use
`f.truncate(offset)'; offset defaults to the current seek position.
There's also `os.ftruncate(fd, offset)' for files opened with *note
os.open(): 5c3, where `fd' is the file descriptor (a small integer).

  The *note shutil: 155. module also contains a number of functions to
work on files including *note copyfile(): 249, *note copytree(): 24a,
and *note rmtree(): e5f.


File: python.info,  Node: How do I copy a file?,  Next: How do I read or write binary data?,  Prev: How do I delete a file? And other file questions,  Up: Input and Output<2>

12.4.4.2 How do I copy a file?
..............................

The *note shutil: 155. module contains a *note copyfile(): 249.
function.  Note that on MacOS 9 it doesn't copy the resource fork and
Finder info.


File: python.info,  Node: How do I read or write binary data?,  Next: I can't seem to use os read on a pipe created with os popen ; why?,  Prev: How do I copy a file?,  Up: Input and Output<2>

12.4.4.3 How do I read (or write) binary data?
..............................................

To read or write complex binary data formats, it's best to use the
*note struct: 167.  module.  It allows you to take a string containing
binary data (usually numbers) and convert it to Python objects; and
vice versa.

  For example, the following code reads two 2-byte integers and one
4-byte integer in big-endian format from a file:

    import struct

    f = open(filename, "rb")  # Open in binary mode for portability
    s = f.read(8)
    x, y, z = struct.unpack(">hhl", s)

The '>' in the format string forces big-endian data; the letter 'h'
reads one "short integer" (2 bytes), and 'l' reads one "long integer"
(4 bytes) from the string.

  For data that is more regular (e.g. a homogeneous list of ints or
thefloats), you can also use the *note array: e. module.


File: python.info,  Node: I can't seem to use os read on a pipe created with os popen ; why?,  Next: How do I run a subprocess with pipes connected to both input and output?,  Prev: How do I read or write binary data?,  Up: Input and Output<2>

12.4.4.4 I can't seem to use os.read() on a pipe created with os.popen(); why?
..............................................................................

*note os.read(): 8d3. is a low-level function which takes a file
descriptor, a small integer representing the opened file.  *note
os.popen(): 6d7. creates a high-level file object, the same type
returned by the built-in *note open(): 2cb. function.  Thus, to read n
bytes from a pipe p created with *note os.popen(): 6d7, you need to use
`p.read(n)'.


File: python.info,  Node: How do I run a subprocess with pipes connected to both input and output?,  Next: How do I access the serial RS232 port?,  Prev: I can't seem to use os read on a pipe created with os popen ; why?,  Up: Input and Output<2>

12.4.4.5 How do I run a subprocess with pipes connected to both input and output?
.................................................................................

Use the *note popen2: 135. module.  For example:

    import popen2
    fromchild, tochild = popen2.popen2("command")
    tochild.write("input\n")
    tochild.flush()
    output = fromchild.readline()

Warning: in general it is unwise to do this because you can easily
cause a deadlock where your process is blocked waiting for output from
the child while the child is blocked waiting for input from you.  This
can be caused because the parent expects the child to output more text
than it does, or it can be caused by data being stuck in stdio buffers
due to lack of flushing.  The Python parent can of course explicitly
flush the data it sends to the child before it reads any output, but if
the child is a naive C program it may have been written to never
explicitly flush its output, even if it is interactive, since flushing
is normally automatic.

  Note that a deadlock is also possible if you use `popen3()' to read
stdout and stderr. If one of the two is too large for the internal
buffer (increasing the buffer size does not help) and you `read()' the
other one first, there is a deadlock, too.

  Note on a bug in popen2: unless your program calls `wait()' or
`waitpid()', finished child processes are never removed, and eventually
calls to popen2 will fail because of a limit on the number of child
processes.  Calling *note os.waitpid(): 112e. with the *note
os.WNOHANG: 1136. option can prevent this; a good place to insert such
a call would be before calling `popen2' again.

  In many cases, all you really need is to run some data through a
command and get the result back.  Unless the amount of data is very
large, the easiest way to do this is to write it to a temporary file
and run the command with that temporary file as input.  The standard
module *note tempfile: 174. exports a `mktemp()' function to generate
unique temporary file names.

    import tempfile
    import os

    class Popen3:
        """
        This is a deadlock-safe version of popen that returns
        an object with errorlevel, out (a string) and err (a string).
        (capturestderr may not work under windows.)
        Example: print Popen3('grep spam','\n\nhere spam\n\n').out
        """
        def __init__(self,command,input=None,capturestderr=None):
            outfile=tempfile.mktemp()
            command="( %s ) > %s" % (command,outfile)
            if input:
                infile=tempfile.mktemp()
                open(infile,"w").write(input)
                command=command+" <"+infile
            if capturestderr:
                errfile=tempfile.mktemp()
                command=command+" 2>"+errfile
            self.errorlevel=os.system(command) >> 8
            self.out=open(outfile,"r").read()
            os.remove(outfile)
            if input:
                os.remove(infile)
            if capturestderr:
                self.err=open(errfile,"r").read()
                os.remove(errfile)

Note that many interactive programs (e.g. vi) don't work well with pipes
substituted for standard input and output.  You will have to use pseudo
ttys ("ptys") instead of pipes. Or you can use a Python interface to
Don Libes' "expect" library.  A Python extension that interfaces to
expect is called "expy" and available from
<http://expectpy.sourceforge.net>.  A pure Python solution that works
like expect is pexpect(1).

  ---------- Footnotes ----------

  (1) http://pypi.python.org/pypi/pexpect/


File: python.info,  Node: How do I access the serial RS232 port?,  Next: Why doesn't closing sys stdout stdin stderr really close it?,  Prev: How do I run a subprocess with pipes connected to both input and output?,  Up: Input and Output<2>

12.4.4.6 How do I access the serial (RS232) port?
.................................................

For Win32, POSIX (Linux, BSD, etc.), Jython:

     <http://pyserial.sourceforge.net>

  For Unix, see a Usenet post by Mitch Chapman:

     <http://groups.google.com/groups?selm=34A04430.CF9@ohioee.com>


File: python.info,  Node: Why doesn't closing sys stdout stdin stderr really close it?,  Prev: How do I access the serial RS232 port?,  Up: Input and Output<2>

12.4.4.7 Why doesn't closing sys.stdout (stdin, stderr) really close it?
........................................................................

Python file objects are a high-level layer of abstraction on top of C
streams, which in turn are a medium-level layer of abstraction on top
of (among other things) low-level C file descriptors.

  For most file objects you create in Python via the built-in `file'
constructor, `f.close()' marks the Python file object as being closed
from Python's point of view, and also arranges to close the underlying
C stream.  This also happens automatically in `f''s destructor, when
`f' becomes garbage.

  But stdin, stdout and stderr are treated specially by Python, because
of the special status also given to them by C.  Running
`sys.stdout.close()' marks the Python-level file object as being
closed, but does _not_ close the associated C stream.

  To close the underlying C stream for one of these three, you should
first be sure that's what you really want to do (e.g., you may confuse
extension modules trying to do I/O).  If it is, use os.close:

    os.close(0)   # close C's stdin stream
    os.close(1)   # close C's stdout stream
    os.close(2)   # close C's stderr stream



File: python.info,  Node: Network/Internet Programming,  Next: Databases,  Prev: Input and Output<2>,  Up: Library and Extension FAQ

12.4.5 Network/Internet Programming
-----------------------------------

* Menu:

* What WWW tools are there for Python?::
* How can I mimic CGI form submission (METHOD=POST)?: How can I mimic CGI form submission METHOD=POST ?.
* What module should I use to help with generating HTML?::
* How do I send mail from a Python script?::
* How do I avoid blocking in the connect() method of a socket?: How do I avoid blocking in the connect method of a socket?.


File: python.info,  Node: What WWW tools are there for Python?,  Next: How can I mimic CGI form submission METHOD=POST ?,  Up: Network/Internet Programming

12.4.5.1 What WWW tools are there for Python?
.............................................

See the chapters titled *note Internet Protocols and Support: 1b4e. and
*note Internet Data Handling: 1756. in the Library Reference Manual.
Python has many modules that will help you build server-side and
client-side web systems.

  A summary of available frameworks is maintained by Paul Boddie at
<http://wiki.python.org/moin/WebProgramming> .

  Cameron Laird maintains a useful set of pages about Python web
technologies at <http://phaseit.net/claird/comp.lang.python/web_python>.


File: python.info,  Node: How can I mimic CGI form submission METHOD=POST ?,  Next: What module should I use to help with generating HTML?,  Prev: What WWW tools are there for Python?,  Up: Network/Internet Programming

12.4.5.2 How can I mimic CGI form submission (METHOD=POST)?
...........................................................

I would like to retrieve web pages that are the result of POSTing a
form. Is there existing code that would let me do this easily?

  Yes. Here's a simple example that uses httplib:

    #!/usr/local/bin/python

    import httplib, sys, time

    ### build the query string
    qs = "First=Josephine&MI=Q&Last=Public"

    ### connect and send the server a path
    httpobj = httplib.HTTP('www.some-server.out-there', 80)
    httpobj.putrequest('POST', '/cgi-bin/some-cgi-script')
    ### now generate the rest of the HTTP headers...
    httpobj.putheader('Accept', '*/*')
    httpobj.putheader('Connection', 'Keep-Alive')
    httpobj.putheader('Content-type', 'application/x-www-form-urlencoded')
    httpobj.putheader('Content-length', '%d' % len(qs))
    httpobj.endheaders()
    httpobj.send(qs)
    ### find out what the server said in response...
    reply, msg, hdrs = httpobj.getreply()
    if reply != 200:
        sys.stdout.write(httpobj.getfile().read())

Note that in general for percent-encoded POST operations, query strings
must be quoted using *note urllib.quote(): 1bc3.  For example to send
name="Guy Steele, Jr.":

    >>> from urllib import quote
    >>> x = quote("Guy Steele, Jr.")
    >>> x
    'Guy%20Steele,%20Jr.'
    >>> query_string = "name="+x
    >>> query_string
    'name=Guy%20Steele,%20Jr.'



File: python.info,  Node: What module should I use to help with generating HTML?,  Next: How do I send mail from a Python script?,  Prev: How can I mimic CGI form submission METHOD=POST ?,  Up: Network/Internet Programming

12.4.5.3 What module should I use to help with generating HTML?
...............................................................

There are many different modules available:

   * HTMLgen is a class library of objects corresponding to all the
     HTML 3.2 markup tags. It's used when you are writing in Python and
     wish to synthesize HTML pages for generating a web or for CGI
     forms, etc.

   * DocumentTemplate and Zope Page Templates are two different systems
     that are part of Zope.

   * Quixote's PTL uses Python syntax to assemble strings of text.

  Consult the Web Programming wiki pages(1) for more links.

  ---------- Footnotes ----------

  (1) http://wiki.python.org/moin/WebProgramming


File: python.info,  Node: How do I send mail from a Python script?,  Next: How do I avoid blocking in the connect method of a socket?,  Prev: What module should I use to help with generating HTML?,  Up: Network/Internet Programming

12.4.5.4 How do I send mail from a Python script?
.................................................

Use the standard library module *note smtplib: 15b.

  Here's a very simple interactive mail sender that uses it.  This
method will work on any host that supports an SMTP listener.

    import sys, smtplib

    fromaddr = raw_input("From: ")
    toaddrs  = raw_input("To: ").split(',')
    print "Enter message, end with ^D:"
    msg = ''
    while True:
        line = sys.stdin.readline()
        if not line:
            break
        msg += line

    # The actual mail send
    server = smtplib.SMTP('localhost')
    server.sendmail(fromaddr, toaddrs, msg)
    server.quit()

A Unix-only alternative uses sendmail.  The location of the sendmail
program varies between systems; sometimes it is `/usr/lib/sendmail',
sometime `/usr/sbin/sendmail'.  The sendmail manual page will help you
out.  Here's some sample code:

    SENDMAIL = "/usr/sbin/sendmail" # sendmail location
    import os
    p = os.popen("%s -t -i" % SENDMAIL, "w")
    p.write("To: receiver@example.com\n")
    p.write("Subject: test\n")
    p.write("\n") # blank line separating headers from body
    p.write("Some text\n")
    p.write("some more text\n")
    sts = p.close()
    if sts != 0:
        print "Sendmail exit status", sts



File: python.info,  Node: How do I avoid blocking in the connect method of a socket?,  Prev: How do I send mail from a Python script?,  Up: Network/Internet Programming

12.4.5.5 How do I avoid blocking in the connect() method of a socket?
.....................................................................

The select module is commonly used to help with asynchronous I/O on
sockets.

  To prevent the TCP connect from blocking, you can set the socket to
non-blocking mode.  Then when you do the `connect()', you will either
connect immediately (unlikely) or get an exception that contains the
error number as `.errno'.  `errno.EINPROGRESS' indicates that the
connection is in progress, but hasn't finished yet.  Different OSes
will return different values, so you're going to have to check what's
returned on your system.

  You can use the `connect_ex()' method to avoid creating an exception.
It will just return the errno value.  To poll, you can call
`connect_ex()' again later - 0 or `errno.EISCONN' indicate that you're
connected - or you can pass this socket to select to check if it's
writable.


File: python.info,  Node: Databases,  Next: Mathematics and Numerics,  Prev: Network/Internet Programming,  Up: Library and Extension FAQ

12.4.6 Databases
----------------

* Menu:

* Are there any interfaces to database packages in Python?::
* How do you implement persistent objects in Python?::
* Why is cPickle so slow?::
* If my program crashes with a bsddb (or anydbm) database open, it gets corrupted. How come?: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?.
* I tried to open Berkeley DB file, but bsddb produces bsddb.error; (22, 'Invalid argument'). Help! How can I restore my data?: I tried to open Berkeley DB file but bsddb produces bsddb error 22 'Invalid argument' Help! How can I restore my data?.


File: python.info,  Node: Are there any interfaces to database packages in Python?,  Next: How do you implement persistent objects in Python?,  Up: Databases

12.4.6.1 Are there any interfaces to database packages in Python?
.................................................................

Yes.

  Python 2.3 includes the *note bsddb: 1c. package which provides an
interface to the BerkeleyDB library.  Interfaces to disk-based hashes
such as *note DBM: 80.  and *note GDBM: dd. are also included with
standard Python.

  Support for most relational databases is available.  See the
DatabaseProgramming wiki page(1) for details.

  ---------- Footnotes ----------

  (1) http://wiki.python.org/moin/DatabaseProgramming


File: python.info,  Node: How do you implement persistent objects in Python?,  Next: Why is cPickle so slow?,  Prev: Are there any interfaces to database packages in Python?,  Up: Databases

12.4.6.2 How do you implement persistent objects in Python?
...........................................................

The *note pickle: 12e. library module solves this in a very general way
(though you still can't store things like open files, sockets or
windows), and the *note shelve: 153. library module uses pickle and
(g)dbm to create persistent mappings containing arbitrary Python
objects.  For better performance, you can use the *note cPickle: 73.
module.

  A more awkward way of doing things is to use pickle's little sister,
marshal.  The *note marshal: 10c. module provides very fast ways to
store noncircular basic Python types to files and strings, and back
again.  Although marshal does not do fancy things like store instances
or handle shared references properly, it does run extremely fast.  For
example loading a half megabyte of data may take less than a third of a
second.  This often beats doing something more complex and general such
as using gdbm with pickle/shelve.


File: python.info,  Node: Why is cPickle so slow?,  Next: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?,  Prev: How do you implement persistent objects in Python?,  Up: Databases

12.4.6.3 Why is cPickle so slow?
................................

The default format used by the pickle module is a slow one that results
in readable pickles.  Making it the default, but it would break backward
compatibility:

    largeString = 'z' * (100 * 1024)
    myPickle = cPickle.dumps(largeString, protocol=1)



File: python.info,  Node: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?,  Next: I tried to open Berkeley DB file but bsddb produces bsddb error 22 'Invalid argument' Help! How can I restore my data?,  Prev: Why is cPickle so slow?,  Up: Databases

12.4.6.4 If my program crashes with a bsddb (or anydbm) database open, it gets corrupted. How come?
...................................................................................................

Databases opened for write access with the bsddb module (and often by
the anydbm module, since it will preferentially use bsddb) must
explicitly be closed using the `.close()' method of the database.  The
underlying library caches database contents which need to be converted
to on-disk form and written.

  If you have initialized a new bsddb database but not written anything
to it before the program crashes, you will often wind up with a
zero-length file and encounter an exception the next time the file is
opened.


File: python.info,  Node: I tried to open Berkeley DB file but bsddb produces bsddb error 22 'Invalid argument' Help! How can I restore my data?,  Prev: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?,  Up: Databases

12.4.6.5 I tried to open Berkeley DB file, but bsddb produces bsddb.error: (22, 'Invalid argument'). Help! How can I restore my data?
.....................................................................................................................................

Don't panic! Your data is probably intact. The most frequent cause for
the error is that you tried to open an earlier Berkeley DB file with a
later version of the Berkeley DB library.

  Many Linux systems now have all three versions of Berkeley DB
available.  If you are migrating from version 1 to a newer version use
db_dump185 to dump a plain text version of the database.  If you are
migrating from version 2 to version 3 use db2_dump to create a plain
text version of the database.  In either case, use db_load to create a
new native database for the latest version installed on your computer.
If you have version 3 of Berkeley DB installed, you should be able to
use db2_load to create a native version 2 database.

  You should move away from Berkeley DB version 1 files because the
hash file code contains known bugs that can corrupt your data.


File: python.info,  Node: Mathematics and Numerics,  Prev: Databases,  Up: Library and Extension FAQ

12.4.7 Mathematics and Numerics
-------------------------------

* Menu:

* How do I generate random numbers in Python?::


File: python.info,  Node: How do I generate random numbers in Python?,  Up: Mathematics and Numerics

12.4.7.1 How do I generate random numbers in Python?
....................................................

The standard module *note random: 143. implements a random number
generator.  Usage is simple:

    import random
    random.random()

This returns a random floating point number in the range [0, 1).

  There are also many other specialized generators in this module, such
as:

   * `randrange(a, b)' chooses an integer in the range [a, b).

   * `uniform(a, b)' chooses a floating point number in the range [a,
     b).

   * `normalvariate(mean, sdev)' samples the normal (Gaussian)
     distribution.

  Some higher-level functions operate on sequences directly, such as:

   * `choice(S)' chooses random element from a given sequence

   * `shuffle(L)' shuffles a list in-place, i.e. permutes it randomly

  There's also a `Random' class you can instantiate to create
independent multiple random number generators.


File: python.info,  Node: Extending/Embedding FAQ,  Next: Python on Windows FAQ,  Prev: Library and Extension FAQ,  Up: Python Frequently Asked Questions

12.5 Extending/Embedding FAQ
============================

* Menu:

* Can I create my own functions in C?::
* Can I create my own functions in C++?::
* Writing C is hard; are there any alternatives?::
* How can I execute arbitrary Python statements from C?::
* How can I evaluate an arbitrary Python expression from C?::
* How do I extract C values from a Python object?::
* How do I use Py_BuildValue() to create a tuple of arbitrary length?: How do I use Py_BuildValue to create a tuple of arbitrary length?.
* How do I call an object's method from C?::
* How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?.
* How do I access a module written in Python from C?::
* How do I interface to C++ objects from Python?::
* I added a module using the Setup file and the make fails; why?::
* How do I debug an extension?::
* I want to compile a Python module on my Linux system, but some files are missing. Why?: I want to compile a Python module on my Linux system but some files are missing Why?.
* What does "SystemError; _PyImport_FixupExtension; module yourmodule not loaded" mean?: What does "SystemError _PyImport_FixupExtension module yourmodule not loaded" mean?.
* How do I tell "incomplete input" from "invalid input"?::
* How do I find undefined g++ symbols __builtin_new or __pure_virtual?::
* Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?.
* When importing module X, why do I get "undefined symbol; PyUnicodeUCS2*"?: When importing module X why do I get "undefined symbol PyUnicodeUCS2*"?.


File: python.info,  Node: Can I create my own functions in C?,  Next: Can I create my own functions in C++?,  Up: Extending/Embedding FAQ

12.5.1 Can I create my own functions in C?
------------------------------------------

Yes, you can create built-in modules containing functions, variables,
exceptions and even new types in C.  This is explained in the document
*note Extending and Embedding the Python Interpreter: 4e7.

  Most intermediate or advanced Python books will also cover this topic.


File: python.info,  Node: Can I create my own functions in C++?,  Next: Writing C is hard; are there any alternatives?,  Prev: Can I create my own functions in C?,  Up: Extending/Embedding FAQ

12.5.2 Can I create my own functions in C++?
--------------------------------------------

Yes, using the C compatibility features found in C++.  Place `extern
"C" { ... }' around the Python include files and put `extern "C"'
before each function that is going to be called by the Python
interpreter.  Global or static C++ objects with constructors are
probably not a good idea.


File: python.info,  Node: Writing C is hard; are there any alternatives?,  Next: How can I execute arbitrary Python statements from C?,  Prev: Can I create my own functions in C++?,  Up: Extending/Embedding FAQ

12.5.3 Writing C is hard; are there any alternatives?
-----------------------------------------------------

There are a number of alternatives to writing your own C extensions,
depending on what you're trying to do.

  If you need more speed, Psyco(1) generates x86 assembly code from
Python bytecode.  You can use Psyco to compile the most time-critical
functions in your code, and gain a significant improvement with very
little effort, as long as you're running on a machine with an
x86-compatible processor.

  Pyrex(2) is a compiler that accepts a slightly modified form of
Python and generates the corresponding C code.  Pyrex makes it possible
to write an extension without having to learn Python's C API.

  If you need to interface to some C or C++ library for which no Python
extension currently exists, you can try wrapping the library's data
types and functions with a tool such as SWIG(3).  SIP(4), CXX(5)
Boost(6), or Weave(7) are also alternatives for wrapping C++ libraries.

  ---------- Footnotes ----------

  (1) http://psyco.sourceforge.net/

  (2) http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/

  (3) http://www.swig.org

  (4) http://www.riverbankcomputing.co.uk/software/sip/

  (5) http://cxx.sourceforge.net/

  (6) http://www.boost.org/libs/python/doc/index.html

  (7) http://www.scipy.org/Weave


File: python.info,  Node: How can I execute arbitrary Python statements from C?,  Next: How can I evaluate an arbitrary Python expression from C?,  Prev: Writing C is hard; are there any alternatives?,  Up: Extending/Embedding FAQ

12.5.4 How can I execute arbitrary Python statements from C?
------------------------------------------------------------

The highest-level function to do this is *note PyRun_SimpleString():
2973. which takes a single string argument to be executed in the
context of the module `__main__' and returns 0 for success and -1 when
an exception occurred (including `SyntaxError').  If you want more
control, use *note PyRun_String(): 29b7.; see the source for *note
PyRun_SimpleString(): 2973. in `Python/pythonrun.c'.


File: python.info,  Node: How can I evaluate an arbitrary Python expression from C?,  Next: How do I extract C values from a Python object?,  Prev: How can I execute arbitrary Python statements from C?,  Up: Extending/Embedding FAQ

12.5.5 How can I evaluate an arbitrary Python expression from C?
----------------------------------------------------------------

Call the function *note PyRun_String(): 29b7. from the previous
question with the start symbol *note Py_eval_input: 29c4.; it parses an
expression, evaluates it and returns its value.


File: python.info,  Node: How do I extract C values from a Python object?,  Next: How do I use Py_BuildValue to create a tuple of arbitrary length?,  Prev: How can I evaluate an arbitrary Python expression from C?,  Up: Extending/Embedding FAQ

12.5.6 How do I extract C values from a Python object?
------------------------------------------------------

That depends on the object's type.  If it's a tuple, *note
PyTuple_Size(): 2c1d.  returns its length and *note PyTuple_GetItem():
2928. returns the item at a specified index.  Lists have similar
functions, `PyListSize()' and *note PyList_GetItem(): 2929.

  For strings, *note PyString_Size(): 2b72. returns its length and
*note PyString_AsString(): 2b74. a pointer to its value.  Note that
Python strings may contain null bytes so C's `strlen()' should not be
used.

  To test the type of an object, first make sure it isn't _NULL_, and
then use *note PyString_Check(): 2b6e, *note PyTuple_Check(): 2c19,
*note PyList_Check(): 2c27, etc.

  There is also a high-level API to Python objects which is provided by
the so-called 'abstract' interface - read `Include/abstract.h' for
further details.  It allows interfacing with any kind of Python
sequence using calls like *note PySequence_Length(): 2ac0, *note
PySequence_GetItem(): 2993, etc.)  as well as many other useful
protocols.


File: python.info,  Node: How do I use Py_BuildValue to create a tuple of arbitrary length?,  Next: How do I call an object's method from C?,  Prev: How do I extract C values from a Python object?,  Up: Extending/Embedding FAQ

12.5.7 How do I use Py_BuildValue() to create a tuple of arbitrary length?
--------------------------------------------------------------------------

You can't.  Use `t = PyTuple_New(n)' instead, and fill it with objects
using `PyTuple_SetItem(t, i, o)' - note that this "eats" a reference
count of `o', so you have to *note Py_INCREF(): 2903. it.  Lists have
similar functions `PyList_New(n)' and `PyList_SetItem(l, i, o)'.  Note
that you _must_ set all the tuple items to some value before you pass
the tuple to Python code - `PyTuple_New(n)' initializes them to NULL,
which isn't a valid Python value.


File: python.info,  Node: How do I call an object's method from C?,  Next: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?,  Prev: How do I use Py_BuildValue to create a tuple of arbitrary length?,  Up: Extending/Embedding FAQ

12.5.8 How do I call an object's method from C?
-----------------------------------------------

The *note PyObject_CallMethod(): 2a83. function can be used to call an
arbitrary method of an object.  The parameters are the object, the name
of the method to call, a format string like that used with *note
Py_BuildValue(): 397, and the argument values:

    PyObject *
    PyObject_CallMethod(PyObject *object, char *method_name,
                        char *arg_format, ...);

This works for any object that has methods - whether built-in or
user-defined.  You are responsible for eventually *note Py_DECREF():
2909.'ing the return value.

  To call, e.g., a file object's "seek" method with arguments 10, 0
(assuming the file object pointer is "f"):

    res = PyObject_CallMethod(f, "seek", "(ii)", 10, 0);
    if (res == NULL) {
            ... an exception occurred ...
    }
    else {
            Py_DECREF(res);
    }

Note that since *note PyObject_CallObject(): 291a. _always_ wants a
tuple for the argument list, to call a function without arguments, pass
"()" for the format, and to call a function with one argument, surround
the argument in parentheses, e.g. "(i)".


File: python.info,  Node: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?,  Next: How do I access a module written in Python from C?,  Prev: How do I call an object's method from C?,  Up: Extending/Embedding FAQ

12.5.9 How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?
-----------------------------------------------------------------------------------------------

In Python code, define an object that supports the `write()' method.
Assign this object to *note sys.stdout: 853. and *note sys.stderr: 620.
Call print_error, or just allow the standard traceback mechanism to
work. Then, the output will go wherever your `write()' method sends it.

  The easiest way to do this is to use the StringIO class in the
standard library.

  Sample code and use for catching stdout:

    >>> class StdoutCatcher:
    ...     def __init__(self):
    ...         self.data = ''
    ...     def write(self, stuff):
    ...         self.data = self.data + stuff
    ...
    >>> import sys
    >>> sys.stdout = StdoutCatcher()
    >>> print 'foo'
    >>> print 'hello world!'
    >>> sys.stderr.write(sys.stdout.data)
    foo
    hello world!



File: python.info,  Node: How do I access a module written in Python from C?,  Next: How do I interface to C++ objects from Python?,  Prev: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?,  Up: Extending/Embedding FAQ

12.5.10 How do I access a module written in Python from C?
----------------------------------------------------------

You can get a pointer to the module object as follows:

    module = PyImport_ImportModule("<modulename>");

If the module hasn't been imported yet (i.e. it is not yet present in
*note sys.modules: 7f5.), this initializes the module; otherwise it
simply returns the value of `sys.modules["<modulename>"]'.  Note that
it doesn't enter the module into any namespace - it only ensures it has
been initialized and is stored in *note sys.modules: 7f5.

  You can then access the module's attributes (i.e. any name defined in
the module) as follows:

    attr = PyObject_GetAttrString(module, "<attrname>");

Calling *note PyObject_SetAttrString(): 2a74. to assign to variables in
the module also works.


File: python.info,  Node: How do I interface to C++ objects from Python?,  Next: I added a module using the Setup file and the make fails; why?,  Prev: How do I access a module written in Python from C?,  Up: Extending/Embedding FAQ

12.5.11 How do I interface to C++ objects from Python?
------------------------------------------------------

Depending on your requirements, there are many approaches.  To do this
manually, begin by reading *note the "Extending and Embedding"
document: 4e7.  Realize that for the Python run-time system, there
isn't a whole lot of difference between C and C++ - so the strategy of
building a new Python type around a C structure (pointer) type will
also work for C++ objects.

  For C++ libraries, see *note Writing C is hard; are there any
alternatives?: 30cb.


File: python.info,  Node: I added a module using the Setup file and the make fails; why?,  Next: How do I debug an extension?,  Prev: How do I interface to C++ objects from Python?,  Up: Extending/Embedding FAQ

12.5.12 I added a module using the Setup file and the make fails; why?
----------------------------------------------------------------------

Setup must end in a newline, if there is no newline there, the build
process fails.  (Fixing this requires some ugly shell script hackery,
and this bug is so minor that it doesn't seem worth the effort.)


File: python.info,  Node: How do I debug an extension?,  Next: I want to compile a Python module on my Linux system but some files are missing Why?,  Prev: I added a module using the Setup file and the make fails; why?,  Up: Extending/Embedding FAQ

12.5.13 How do I debug an extension?
------------------------------------

When using GDB with dynamically loaded extensions, you can't set a
breakpoint in your extension until your extension is loaded.

  In your `.gdbinit' file (or interactively), add the command:

    br _PyImport_LoadDynamicModule

Then, when you run GDB:

    $ gdb /local/bin/python
    gdb) run myscript.py
    gdb) continue # repeat until your extension is loaded
    gdb) finish   # so that your extension is loaded
    gdb) br myfunction.c:50
    gdb) continue



File: python.info,  Node: I want to compile a Python module on my Linux system but some files are missing Why?,  Next: What does "SystemError _PyImport_FixupExtension module yourmodule not loaded" mean?,  Prev: How do I debug an extension?,  Up: Extending/Embedding FAQ

12.5.14 I want to compile a Python module on my Linux system, but some files are missing. Why?
----------------------------------------------------------------------------------------------

Most packaged versions of Python don't include the
`/usr/lib/python2._x_/config/' directory, which contains various files
required for compiling Python extensions.

  For Red Hat, install the python-devel RPM to get the necessary files.

  For Debian, run `apt-get install python-dev'.


File: python.info,  Node: What does "SystemError _PyImport_FixupExtension module yourmodule not loaded" mean?,  Next: How do I tell "incomplete input" from "invalid input"?,  Prev: I want to compile a Python module on my Linux system but some files are missing Why?,  Up: Extending/Embedding FAQ

12.5.15 What does "SystemError: _PyImport_FixupExtension: module yourmodule not loaded" mean?
---------------------------------------------------------------------------------------------

This means that you have created an extension module named
"yourmodule", but your module init function does not initialize with
that name.

  Every module init function will have a line similar to:

    module = Py_InitModule("yourmodule", yourmodule_functions);

If the string passed to this function is not the same name as your
extension module, the *note SystemError: 91b. exception will be raised.


File: python.info,  Node: How do I tell "incomplete input" from "invalid input"?,  Next: How do I find undefined g++ symbols __builtin_new or __pure_virtual?,  Prev: What does "SystemError _PyImport_FixupExtension module yourmodule not loaded" mean?,  Up: Extending/Embedding FAQ

12.5.16 How do I tell "incomplete input" from "invalid input"?
--------------------------------------------------------------

Sometimes you want to emulate the Python interactive interpreter's
behavior, where it gives you a continuation prompt when the input is
incomplete (e.g. you typed the start of an "if" statement or you didn't
close your parentheses or triple string quotes), but it gives you a
syntax error message immediately when the input is invalid.

  In Python you can use the *note codeop: 64. module, which
approximates the parser's behavior sufficiently.  IDLE uses this, for
example.

  The easiest way to do it in C is to call *note
PyRun_InteractiveLoop(): 29aa. (perhaps in a separate thread) and let
the Python interpreter handle the input for you. You can also set the
`PyOS_ReadlineFunctionPointer()' to point at your custom input
function. See `Modules/readline.c' and `Parser/myreadline.c' for more
hints.

  However sometimes you have to run the embedded Python interpreter in
the same thread as your rest application and you can't allow the *note
PyRun_InteractiveLoop(): 29aa. to stop while waiting for user input.
The one solution then is to call `PyParser_ParseString()' and test for
`e.error' equal to `E_EOF', which means the input is incomplete).
Here's a sample code fragment, untested, inspired by code from Alex
Farber:

    #include <Python.h>
    #include <node.h>
    #include <errcode.h>
    #include <grammar.h>
    #include <parsetok.h>
    #include <compile.h>

    int testcomplete(char *code)
      /* code should end in \n */
      /* return -1 for error, 0 for incomplete, 1 for complete */
    {
      node *n;
      perrdetail e;

      n = PyParser_ParseString(code, &_PyParser_Grammar,
                               Py_file_input, &e);
      if (n == NULL) {
        if (e.error == E_EOF)
          return 0;
        return -1;
      }

      PyNode_Free(n);
      return 1;
    }

Another solution is trying to compile the received string with *note
Py_CompileString(): 29bd. If it compiles without errors, try to execute
the returned code object by calling *note PyEval_EvalCode(): 29bf.
Otherwise save the input for later. If the compilation fails, find out
if it's an error or just more input is required - by extracting the
message string from the exception tuple and comparing it to the string
"unexpected EOF while parsing".  Here is a complete example using the
GNU readline library (you may want to ignore *SIGINT* while calling
readline()):

    #include <stdio.h>
    #include <readline.h>

    #include <Python.h>
    #include <object.h>
    #include <compile.h>
    #include <eval.h>

    int main (int argc, char* argv[])
    {
      int i, j, done = 0;                          /* lengths of line, code */
      char ps1[] = ">>> ";
      char ps2[] = "... ";
      char *prompt = ps1;
      char *msg, *line, *code = NULL;
      PyObject *src, *glb, *loc;
      PyObject *exc, *val, *trb, *obj, *dum;

      Py_Initialize ();
      loc = PyDict_New ();
      glb = PyDict_New ();
      PyDict_SetItemString (glb, "__builtins__", PyEval_GetBuiltins ());

      while (!done)
      {
        line = readline (prompt);

        if (NULL == line)                          /* CTRL-D pressed */
        {
          done = 1;
        }
        else
        {
          i = strlen (line);

          if (i > 0)
            add_history (line);                    /* save non-empty lines */

          if (NULL == code)                        /* nothing in code yet */
            j = 0;
          else
            j = strlen (code);

          code = realloc (code, i + j + 2);
          if (NULL == code)                        /* out of memory */
            exit (1);

          if (0 == j)                              /* code was empty, so */
            code[0] = '\0';                        /* keep strncat happy */

          strncat (code, line, i);                 /* append line to code */
          code[i + j] = '\n';                      /* append '\n' to code */
          code[i + j + 1] = '\0';

          src = Py_CompileString (code, "<stdin>", Py_single_input);

          if (NULL != src)                         /* compiled just fine - */
          {
            if (ps1  == prompt ||                  /* ">>> " or */
                '\n' == code[i + j - 1])           /* "... " and double '\n' */
            {                                               /* so execute it */
              dum = PyEval_EvalCode ((PyCodeObject *)src, glb, loc);
              Py_XDECREF (dum);
              Py_XDECREF (src);
              free (code);
              code = NULL;
              if (PyErr_Occurred ())
                PyErr_Print ();
              prompt = ps1;
            }
          }                                        /* syntax error or E_EOF? */
          else if (PyErr_ExceptionMatches (PyExc_SyntaxError))
          {
            PyErr_Fetch (&exc, &val, &trb);        /* clears exception! */

            if (PyArg_ParseTuple (val, "sO", &msg, &obj) &&
                !strcmp (msg, "unexpected EOF while parsing")) /* E_EOF */
            {
              Py_XDECREF (exc);
              Py_XDECREF (val);
              Py_XDECREF (trb);
              prompt = ps2;
            }
            else                                   /* some other syntax error */
            {
              PyErr_Restore (exc, val, trb);
              PyErr_Print ();
              free (code);
              code = NULL;
              prompt = ps1;
            }
          }
          else                                     /* some non-syntax error */
          {
            PyErr_Print ();
            free (code);
            code = NULL;
            prompt = ps1;
          }

          free (line);
        }
      }

      Py_XDECREF(glb);
      Py_XDECREF(loc);
      Py_Finalize();
      exit(0);
    }



File: python.info,  Node: How do I find undefined g++ symbols __builtin_new or __pure_virtual?,  Next: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?,  Prev: How do I tell "incomplete input" from "invalid input"?,  Up: Extending/Embedding FAQ

12.5.17 How do I find undefined g++ symbols __builtin_new or __pure_virtual?
----------------------------------------------------------------------------

To dynamically load g++ extension modules, you must recompile Python,
relink it using g++ (change LINKCC in the Python Modules Makefile), and
link your extension module using g++ (e.g., `g++ -shared -o mymodule.so
mymodule.o').


File: python.info,  Node: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?,  Next: When importing module X why do I get "undefined symbol PyUnicodeUCS2*"?,  Prev: How do I find undefined g++ symbols __builtin_new or __pure_virtual?,  Up: Extending/Embedding FAQ

12.5.18 Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?
------------------------------------------------------------------------------------------------------------------------

In Python 2.2, you can inherit from built-in classes such as *note int:
1ef, *note list: 3ab, *note dict: 2f6, etc.

  The Boost Python Library (BPL,
<http://www.boost.org/libs/python/doc/index.html>) provides a way of
doing this from C++ (i.e. you can inherit from an extension class
written in C++ using the BPL).


File: python.info,  Node: When importing module X why do I get "undefined symbol PyUnicodeUCS2*"?,  Prev: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?,  Up: Extending/Embedding FAQ

12.5.19 When importing module X, why do I get "undefined symbol: PyUnicodeUCS2*"?
---------------------------------------------------------------------------------

You are using a version of Python that uses a 4-byte representation for
Unicode characters, but some C extension module you are importing was
compiled using a Python that uses a 2-byte representation for Unicode
characters (the default).

  If instead the name of the undefined symbol starts with
`PyUnicodeUCS4', the problem is the reverse: Python was built using
2-byte Unicode characters, and the extension module was compiled using
a Python with 4-byte Unicode characters.

  This can easily occur when using pre-built extension packages.
RedHat Linux 7.x, in particular, provided a "python2" binary that is
compiled with 4-byte Unicode.  This only causes the link failure if the
extension uses any of the `PyUnicode_*()' functions.  It is also a
problem if an extension uses any of the Unicode-related format
specifiers for *note Py_BuildValue(): 397. (or similar) or parameter
specifications for *note PyArg_ParseTuple(): 30b.

  You can check the size of the Unicode character a Python interpreter
is using by checking the value of sys.maxunicode:

    >>> import sys
    >>> if sys.maxunicode > 65535:
    ...     print 'UCS4 build'
    ... else:
    ...     print 'UCS2 build'

The only way to solve this problem is to use extension modules compiled
with a Python binary built using the same size for Unicode characters.


File: python.info,  Node: Python on Windows FAQ,  Next: Graphic User Interface FAQ,  Prev: Extending/Embedding FAQ,  Up: Python Frequently Asked Questions

12.6 Python on Windows FAQ
==========================

* Menu:

* How do I run a Python program under Windows?::
* How do I make Python scripts executable?::
* Why does Python sometimes take so long to start?::
* Where is Freeze for Windows?::
* Is a *.pyd file the same as a DLL?: Is a * pyd file the same as a DLL?.
* How can I embed Python into a Windows application?::
* How do I use Python for CGI?::
* How do I keep editors from inserting tabs into my Python source?::
* How do I check for a keypress without blocking?::
* How do I emulate os.kill() in Windows?: How do I emulate os kill in Windows?.
* Why does os.path.isdir() fail on NT shared directories?: Why does os path isdir fail on NT shared directories?.
* cgi.py (or other CGI programming) doesn't work sometimes on NT or win95!: cgi py or other CGI programming doesn't work sometimes on NT or win95!.
* Why doesn't os.popen() work in PythonWin on NT?: Why doesn't os popen work in PythonWin on NT?.
* Why doesn't os.popen()/win32pipe.popen() work on Win9x?: Why doesn't os popen /win32pipe popen work on Win9x?.
* PyRun_SimpleFile() crashes on Windows but not on Unix; why?: PyRun_SimpleFile crashes on Windows but not on Unix; why?.
* Importing _tkinter fails on Windows 95/98; why?: Importing _tkinter fails on Windows 95/98 why?.
* How do I extract the downloaded documentation on Windows?::
* Missing cw3215mt.dll (or missing cw3215.dll): Missing cw3215mt dll or missing cw3215 dll.
* Warning about CTL3D32 version from installer::


File: python.info,  Node: How do I run a Python program under Windows?,  Next: How do I make Python scripts executable?,  Up: Python on Windows FAQ

12.6.1 How do I run a Python program under Windows?
---------------------------------------------------

This is not necessarily a straightforward question. If you are already
familiar with running programs from the Windows command line then
everything will seem obvious; otherwise, you might need a little more
guidance.  There are also differences between Windows 95, 98, NT, ME,
2000 and XP which can add to the confusion.

Python Development on XP
........................

Python Development on XP(1)

  This series of screencasts aims to get you up and running with Python
on Windows XP.  The knowledge is distilled into 1.5 hours and will get
you up and running with the right Python distribution, coding in your
choice of IDE, and debugging and writing solid code with unit-tests.

  Unless you use some sort of integrated development environment, you
will end up _typing_ Windows commands into what is variously referred
to as a "DOS window" or "Command prompt window".  Usually you can
create such a window from your Start menu; under Windows 2000 the menu
selection is _Start ‣ Programs ‣ Accessories ‣ Command Prompt_.
You should be able to recognize when you have started such a window
because you will see a Windows "command prompt", which usually looks
like this:

    C:\>

The letter may be different, and there might be other things after it,
so you might just as easily see something like:

    D:\Steve\Projects\Python>

depending on how your computer has been set up and what else you have
recently done with it.  Once you have started such a window, you are
well on the way to running Python programs.

  You need to realize that your Python scripts have to be processed by
another program called the Python interpreter.  The interpreter reads
your script, compiles it into bytecodes, and then executes the
bytecodes to run your program. So, how do you arrange for the
interpreter to handle your Python?

  First, you need to make sure that your command window recognises the
word "python" as an instruction to start the interpreter.  If you have
opened a command window, you should try entering the command `python'
and hitting return.  You should then see something like:

    Python 2.2 (#28, Dec 21 2001, 12:21:22) [MSC 32 bit (Intel)] on win32
    Type "help", "copyright", "credits" or "license" for more information.
    >>>

You have started the interpreter in "interactive mode". That means you
can enter Python statements or expressions interactively and have them
executed or evaluated while you wait.  This is one of Python's
strongest features.  Check it by entering a few expressions of your
choice and seeing the results:

    >>> print "Hello"
    Hello
    >>> "Hello" * 3
    HelloHelloHello

Many people use the interactive mode as a convenient yet highly
programmable calculator.  When you want to end your interactive Python
session, hold the Ctrl key down while you enter a Z, then hit the
"Enter" key to get back to your Windows command prompt.

  You may also find that you have a Start-menu entry such as _Start ‣
Programs ‣ Python 2.2 ‣ Python (command line)_ that results in you
seeing the `>>>' prompt in a new window.  If so, the window will
disappear after you enter the Ctrl-Z character; Windows is running a
single "python" command in the window, and closes it when you terminate
the interpreter.

  If the `python' command, instead of displaying the interpreter prompt
`>>>', gives you a message like:

    'python' is not recognized as an internal or external command,
    operable program or batch file.


Adding Python to DOS Path
.........................

Adding Python to DOS Path(2)

  Python is not added to the DOS path by default.  This screencast will
walk you through the steps to add the correct entry to the `System
Path', allowing Python to be executed from the command-line by all
users.

  or:

    Bad command or filename

then you need to make sure that your computer knows where to find the
Python interpreter.  To do this you will have to modify a setting
called PATH, which is a list of directories where Windows will look for
programs.

  You should arrange for Python's installation directory to be added to
the PATH of every command window as it starts.  If you installed Python
fairly recently then the command

    dir C:\py*

will probably tell you where it is installed; the usual location is
something like `C:\Python23'.  Otherwise you will be reduced to a
search of your whole disk ... use _Tools ‣ Find_ or hit the _Search_
button and look for "python.exe".  Supposing you discover that Python is
installed in the `C:\Python23' directory (the default at the time of
writing), you should make sure that entering the command

    c:\Python23\python

starts up the interpreter as above (and don't forget you'll need a
"CTRL-Z" and an "Enter" to get out of it). Once you have verified the
directory, you need to add it to the start-up routines your computer
goes through.  For older versions of Windows the easiest way to do this
is to edit the `C:\AUTOEXEC.BAT' file. You would want to add a line
like the following to `AUTOEXEC.BAT':

    PATH C:\Python23;%PATH%

For Windows NT, 2000 and (I assume) XP, you will need to add a string
such as

    ;C:\Python23

to the current setting for the PATH environment variable, which you
will find in the properties window of "My Computer" under the
"Advanced" tab.  Note that if you have sufficient privilege you might
get a choice of installing the settings either for the Current User or
for System.  The latter is preferred if you want everybody to be able
to run Python on the machine.

  If you aren't confident doing any of these manipulations yourself,
ask for help!  At this stage you may want to reboot your system to make
absolutely sure the new setting has taken effect.  You probably won't
need to reboot for Windows NT, XP or 2000.  You can also avoid it in
earlier versions by editing the file `C:\WINDOWS\COMMAND\CMDINIT.BAT'
instead of `AUTOEXEC.BAT'.

  You should now be able to start a new command window, enter `python'
at the `C:\>' (or whatever) prompt, and see the `>>>' prompt that
indicates the Python interpreter is reading interactive commands.

  Let's suppose you have a program called `pytest.py' in directory
`C:\Steve\Projects\Python'.  A session to run that program might look
like this:

    C:\> cd \Steve\Projects\Python
    C:\Steve\Projects\Python> python pytest.py

Because you added a file name to the command to start the interpreter,
when it starts up it reads the Python script in the named file,
compiles it, executes it, and terminates, so you see another `C:\>'
prompt.  You might also have entered

    C:\> python \Steve\Projects\Python\pytest.py

if you hadn't wanted to change your current directory.

  Under NT, 2000 and XP you may well find that the installation process
has also arranged that the command `pytest.py' (or, if the file isn't
in the current directory, `C:\Steve\Projects\Python\pytest.py') will
automatically recognize the ".py" extension and run the Python
interpreter on the named file. Using this feature is fine, but _some_
versions of Windows have bugs which mean that this form isn't exactly
equivalent to using the interpreter explicitly, so be careful.

  The important things to remember are:

  1. Start Python from the Start Menu, or make sure the PATH is set
     correctly so Windows can find the Python interpreter.

         python

     should give you a '>>>' prompt from the Python interpreter. Don't
     forget the CTRL-Z and ENTER to terminate the interpreter (and, if
     you started the window from the Start Menu, make the window
     disappear).

  2. Once this works, you run programs with commands:

         python {program-file}


  3. When you know the commands to use you can build Windows shortcuts
     to run the Python interpreter on any of your scripts, naming
     particular working directories, and adding them to your menus.
     Take a look at

         python --help

     if your needs are complex.

  4. Interactive mode (where you see the `>>>' prompt) is best used for
     checking that individual statements and expressions do what you
     think they will, and for developing code by experiment.

  ---------- Footnotes ----------

  (1)
http://www.showmedo.com/videos/series?name=pythonOzsvaldPyNewbieSeries

  (2) http://showmedo.com/videos/video?name=960000&fromSeriesID=96


File: python.info,  Node: How do I make Python scripts executable?,  Next: Why does Python sometimes take so long to start?,  Prev: How do I run a Python program under Windows?,  Up: Python on Windows FAQ

12.6.2 How do I make Python scripts executable?
-----------------------------------------------

On Windows 2000, the standard Python installer already associates the
.py extension with a file type (Python.File) and gives that file type
an open command that runs the interpreter (`D:\Program
Files\Python\python.exe "%1" %*').  This is enough to make scripts
executable from the command prompt as 'foo.py'.  If you'd rather be
able to execute the script by simple typing 'foo' with no extension you
need to add .py to the PATHEXT environment variable.

  On Windows NT, the steps taken by the installer as described above
allow you to run a script with 'foo.py', but a longtime bug in the NT
command processor prevents you from redirecting the input or output of
any script executed in this way.  This is often important.

  The incantation for making a Python script executable under WinNT is
to give the file an extension of .cmd and add the following as the
first line:

    @setlocal enableextensions & python -x %~f0 %* & goto :EOF



File: python.info,  Node: Why does Python sometimes take so long to start?,  Next: Where is Freeze for Windows?,  Prev: How do I make Python scripts executable?,  Up: Python on Windows FAQ

12.6.3 Why does Python sometimes take so long to start?
-------------------------------------------------------

Usually Python starts very quickly on Windows, but occasionally there
are bug reports that Python suddenly begins to take a long time to
start up.  This is made even more puzzling because Python will work
fine on other Windows systems which appear to be configured identically.

  The problem may be caused by a misconfiguration of virus checking
software on the problem machine.  Some virus scanners have been known
to introduce startup overhead of two orders of magnitude when the
scanner is configured to monitor all reads from the filesystem.  Try
checking the configuration of virus scanning software on your systems
to ensure that they are indeed configured identically.  McAfee, when
configured to scan all file system read activity, is a particular
offender.


File: python.info,  Node: Where is Freeze for Windows?,  Next: Is a * pyd file the same as a DLL?,  Prev: Why does Python sometimes take so long to start?,  Up: Python on Windows FAQ

12.6.4 Where is Freeze for Windows?
-----------------------------------

"Freeze" is a program that allows you to ship a Python program as a
single stand-alone executable file.  It is _not_ a compiler; your
programs don't run any faster, but they are more easily distributable,
at least to platforms with the same OS and CPU.  Read the README file
of the freeze program for more disclaimers.

  You can use freeze on Windows, but you must download the source tree
(see <http://www.python.org/download/source>).  The freeze program is
in the `Tools\freeze' subdirectory of the source tree.

  You need the Microsoft VC++ compiler, and you probably need to build
Python.  The required project files are in the PCbuild directory.


File: python.info,  Node: Is a * pyd file the same as a DLL?,  Next: How can I embed Python into a Windows application?,  Prev: Where is Freeze for Windows?,  Up: Python on Windows FAQ

12.6.5 Is a `*.pyd' file the same as a DLL?
-------------------------------------------

Yes, .pyd files are dll's, but there are a few differences.  If you
have a DLL named `foo.pyd', then it must have a function `initfoo()'.
You can then write Python "import foo", and Python will search for
foo.pyd (as well as foo.py, foo.pyc) and if it finds it, will attempt
to call `initfoo()' to initialize it.  You do not link your .exe with
foo.lib, as that would cause Windows to require the DLL to be present.

  Note that the search path for foo.pyd is PYTHONPATH, not the same as
the path that Windows uses to search for foo.dll.  Also, foo.pyd need
not be present to run your program, whereas if you linked your program
with a dll, the dll is required.  Of course, foo.pyd is required if you
want to say `import foo'.  In a DLL, linkage is declared in the source
code with `__declspec(dllexport)'.  In a .pyd, linkage is defined in a
list of available functions.


File: python.info,  Node: How can I embed Python into a Windows application?,  Next: How do I use Python for CGI?,  Prev: Is a * pyd file the same as a DLL?,  Up: Python on Windows FAQ

12.6.6 How can I embed Python into a Windows application?
---------------------------------------------------------

Embedding the Python interpreter in a Windows app can be summarized as
follows:

  1. Do _not_ build Python into your .exe file directly.  On Windows,
     Python must be a DLL to handle importing modules that are
     themselves DLL's.  (This is the first key undocumented fact.)
     Instead, link to `python_NN_.dll'; it is typically installed in
     `C:\Windows\System'.  _NN_ is the Python version, a number such as
     "23" for Python 2.3.

     You can link to Python in two different ways.  Load-time linking
     means linking against `python_NN_.lib', while run-time linking
     means linking against `python_NN_.dll'.  (General note:
     `python_NN_.lib' is the so-called "import lib" corresponding to
     `python_NN_.dll'.  It merely defines symbols for the linker.)

     Run-time linking greatly simplifies link options; everything
     happens at run time.  Your code must load `python_NN_.dll' using
     the Windows `LoadLibraryEx()' routine.  The code must also use
     access routines and data in `python_NN_.dll' (that is, Python's C
     API's) using pointers obtained by the Windows `GetProcAddress()'
     routine.  Macros can make using these pointers transparent to any
     C code that calls routines in Python's C API.

     Borland note: convert `python_NN_.lib' to OMF format using
     Coff2Omf.exe first.

  2. If you use SWIG, it is easy to create a Python "extension module"
     that will make the app's data and methods available to Python.
     SWIG will handle just about all the grungy details for you.  The
     result is C code that you link _into_ your .exe file (!)  You do
     _not_ have to create a DLL file, and this also simplifies linking.

  3. SWIG will create an init function (a C function) whose name
     depends on the name of the extension module.  For example, if the
     name of the module is leo, the init function will be called
     initleo().  If you use SWIG shadow classes, as you should, the
     init function will be called initleoc().  This initializes a
     mostly hidden helper class used by the shadow class.

     The reason you can link the C code in step 2 into your .exe file
     is that calling the initialization function is equivalent to
     importing the module into Python! (This is the second key
     undocumented fact.)

  4. In short, you can use the following code to initialize the Python
     interpreter with your extension module.

         #include "python.h"
         ...
         Py_Initialize();  // Initialize Python.
         initmyAppc();  // Initialize (import) the helper class.
         PyRun_SimpleString("import myApp") ;  // Import the shadow class.


  5. There are two problems with Python's C API which will become
     apparent if you use a compiler other than MSVC, the compiler used
     to build pythonNN.dll.

     Problem 1: The so-called "Very High Level" functions that take
     FILE * arguments will not work in a multi-compiler environment
     because each compiler's notion of a struct FILE will be different.
     From an implementation standpoint these are very _low_ level
     functions.

     Problem 2: SWIG generates the following code when generating
     wrappers to void functions:

         Py_INCREF(Py_None);
         _resultobj = Py_None;
         return _resultobj;

     Alas, Py_None is a macro that expands to a reference to a complex
     data structure called _Py_NoneStruct inside pythonNN.dll.  Again,
     this code will fail in a mult-compiler environment.  Replace such
     code by:

         return Py_BuildValue("");

     It may be possible to use SWIG's `%typemap' command to make the
     change automatically, though I have not been able to get this to
     work (I'm a complete SWIG newbie).

  6. Using a Python shell script to put up a Python interpreter window
     from inside your Windows app is not a good idea; the resulting
     window will be independent of your app's windowing system.
     Rather, you (or the wxPythonWindow class) should create a "native"
     interpreter window.  It is easy to connect that window to the
     Python interpreter.  You can redirect Python's i/o to _any_ object
     that supports read and write, so all you need is a Python object
     (defined in your extension module) that contains read() and
     write() methods.


File: python.info,  Node: How do I use Python for CGI?,  Next: How do I keep editors from inserting tabs into my Python source?,  Prev: How can I embed Python into a Windows application?,  Up: Python on Windows FAQ

12.6.7 How do I use Python for CGI?
-----------------------------------

On the Microsoft IIS server or on the Win95 MS Personal Web Server you
set up Python in the same way that you would set up any other scripting
engine.

  Run regedt32 and go to:

    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\Parameters\ScriptMap

and enter the following line (making any specific changes that your
system may need):

    .py :REG_SZ: c:\<path to python>\python.exe -u %s %s

This line will allow you to call your script with a simple reference
like: `http://yourserver/scripts/yourscript.py' provided "scripts" is an
"executable" directory for your server (which it usually is by
default).  The *note -u: 466. flag specifies unbuffered and binary mode
for stdin - needed when working with binary data.

  In addition, it is recommended that using ".py" may not be a good
idea for the file extensions when used in this context (you might want
to reserve `*.py' for support modules and use `*.cgi' or `*.cgp' for
"main program" scripts).

  In order to set up Internet Information Services 5 to use Python for
CGI processing, please see the following links:

     <http://www.e-coli.net/pyiis_server.html> (for Win2k Server)
     <http://www.e-coli.net/pyiis.html> (for Win2k pro)

  Configuring Apache is much simpler.  In the Apache configuration file
`httpd.conf', add the following line at the end of the file:

    ScriptInterpreterSource Registry

Then, give your Python CGI-scripts the extension .py and put them in
the cgi-bin directory.


File: python.info,  Node: How do I keep editors from inserting tabs into my Python source?,  Next: How do I check for a keypress without blocking?,  Prev: How do I use Python for CGI?,  Up: Python on Windows FAQ

12.6.8 How do I keep editors from inserting tabs into my Python source?
-----------------------------------------------------------------------

The FAQ does not recommend using tabs, and the Python style guide, PEP
8(1), recommends 4 spaces for distributed Python code; this is also the
Emacs python-mode default.

  Under any editor, mixing tabs and spaces is a bad idea.  MSVC is no
different in this respect, and is easily configured to use spaces: Take
_Tools ‣ Options ‣ Tabs_, and for file type "Default" set "Tab
size" and "Indent size" to 4, and select the "Insert spaces" radio
button.

  If you suspect mixed tabs and spaces are causing problems in leading
whitespace, run Python with the *note -t: 3bf. switch or run
`Tools/Scripts/tabnanny.py' to check a directory tree in batch mode.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0008


File: python.info,  Node: How do I check for a keypress without blocking?,  Next: How do I emulate os kill in Windows?,  Prev: How do I keep editors from inserting tabs into my Python source?,  Up: Python on Windows FAQ

12.6.9 How do I check for a keypress without blocking?
------------------------------------------------------

Use the msvcrt module.  This is a standard Windows-specific extension
module.  It defines a function `kbhit()' which checks whether a
keyboard hit is present, and `getch()' which gets one character without
echoing it.


File: python.info,  Node: How do I emulate os kill in Windows?,  Next: Why does os path isdir fail on NT shared directories?,  Prev: How do I check for a keypress without blocking?,  Up: Python on Windows FAQ

12.6.10 How do I emulate os.kill() in Windows?
----------------------------------------------

Prior to Python 2.7 and 3.2, to terminate a process, you can use *note
ctypes: 78.:

    import ctypes

    def kill(pid):
        """kill function for Win32"""
        kernel32 = ctypes.windll.kernel32
        handle = kernel32.OpenProcess(1, 0, pid)
        return (0 != kernel32.TerminateProcess(handle, 0))

In 2.7 and 3.2, *note os.kill(): 2c6. is implemented similar to the
above function, with the additional feature of being able to send
CTRL+C and CTRL+BREAK to console subprocesses which are designed to
handle those signals. See *note os.kill(): 2c6. for further details.


File: python.info,  Node: Why does os path isdir fail on NT shared directories?,  Next: cgi py or other CGI programming doesn't work sometimes on NT or win95!,  Prev: How do I emulate os kill in Windows?,  Up: Python on Windows FAQ

12.6.11 Why does os.path.isdir() fail on NT shared directories?
---------------------------------------------------------------

The solution appears to be always append the "\" on the end of shared
drives.

    >>> import os
    >>> os.path.isdir( '\\\\rorschach\\public')
    0
    >>> os.path.isdir( '\\\\rorschach\\public\\')
    1

It helps to think of share points as being like drive letters.  Example:

    k: is not a directory
    k:\ is a directory
    k:\media is a directory
    k:\media\ is not a directory

The same rules apply if you substitute "k:" with "\conkyfoo":

    \\conky\foo  is not a directory
    \\conky\foo\ is a directory
    \\conky\foo\media is a directory
    \\conky\foo\media\ is not a directory



File: python.info,  Node: cgi py or other CGI programming doesn't work sometimes on NT or win95!,  Next: Why doesn't os popen work in PythonWin on NT?,  Prev: Why does os path isdir fail on NT shared directories?,  Up: Python on Windows FAQ

12.6.12 cgi.py (or other CGI programming) doesn't work sometimes on NT or win95!
--------------------------------------------------------------------------------

Be sure you have the latest python.exe, that you are using python.exe
rather than a GUI version of Python and that you have configured the
server to execute

    "...\python.exe -u ..."

for the CGI execution.  The *note -u: 466. (unbuffered) option on NT
and Win95 prevents the interpreter from altering newlines in the
standard input and output.  Without it post/multipart requests will
seem to have the wrong length and binary (e.g. GIF) responses may get
garbled (resulting in broken images, PDF files, and other binary
downloads failing).


File: python.info,  Node: Why doesn't os popen work in PythonWin on NT?,  Next: Why doesn't os popen /win32pipe popen work on Win9x?,  Prev: cgi py or other CGI programming doesn't work sometimes on NT or win95!,  Up: Python on Windows FAQ

12.6.13 Why doesn't os.popen() work in PythonWin on NT?
-------------------------------------------------------

The reason that os.popen() doesn't work from within PythonWin is due to
a bug in Microsoft's C Runtime Library (CRT). The CRT assumes you have
a Win32 console attached to the process.

  You should use the win32pipe module's popen() instead which doesn't
depend on having an attached Win32 console.

  Example:

    import win32pipe
    f = win32pipe.popen('dir /c c:\\')
    print f.readlines()
    f.close()



File: python.info,  Node: Why doesn't os popen /win32pipe popen work on Win9x?,  Next: PyRun_SimpleFile crashes on Windows but not on Unix; why?,  Prev: Why doesn't os popen work in PythonWin on NT?,  Up: Python on Windows FAQ

12.6.14 Why doesn't os.popen()/win32pipe.popen() work on Win9x?
---------------------------------------------------------------

There is a bug in Win9x that prevents os.popen/win32pipe.popen* from
working. The good news is there is a way to work around this problem.
The Microsoft Knowledge Base article that you need to lookup is:
Q150956. You will find links to the knowledge base at:
<http://support.microsoft.com/>.


File: python.info,  Node: PyRun_SimpleFile crashes on Windows but not on Unix; why?,  Next: Importing _tkinter fails on Windows 95/98 why?,  Prev: Why doesn't os popen /win32pipe popen work on Win9x?,  Up: Python on Windows FAQ

12.6.15 PyRun_SimpleFile() crashes on Windows but not on Unix; why?
-------------------------------------------------------------------

This is very sensitive to the compiler vendor, version and (perhaps)
even options.  If the FILE* structure in your embedding program isn't
the same as is assumed by the Python interpreter it won't work.

  The Python 1.5.* DLLs (`python15.dll') are all compiled with MS VC++
5.0 and with multithreading-DLL options (`/MD').

  If you can't change compilers or flags, try using
`Py_RunSimpleString()'.  A trick to get it to run an arbitrary file is
to construct a call to *note execfile(): 425. with the name of your
file as argument.

  Also note that you can not mix-and-match Debug and Release versions.
If you wish to use the Debug Multithreaded DLL, then your module _must_
have an "_d" appended to the base name.


File: python.info,  Node: Importing _tkinter fails on Windows 95/98 why?,  Next: How do I extract the downloaded documentation on Windows?,  Prev: PyRun_SimpleFile crashes on Windows but not on Unix; why?,  Up: Python on Windows FAQ

12.6.16 Importing _tkinter fails on Windows 95/98: why?
-------------------------------------------------------

Sometimes, the import of _tkinter fails on Windows 95 or 98,
complaining with a message like the following:

    ImportError: DLL load failed: One of the library files needed
    to run this application cannot be found.

It could be that you haven't installed Tcl/Tk, but if you did install
Tcl/Tk, and the Wish application works correctly, the problem may be
that its installer didn't manage to edit the autoexec.bat file
correctly.  It tries to add a statement that changes the PATH
environment variable to include the Tcl/Tk 'bin' subdirectory, but
sometimes this edit doesn't quite work.  Opening it with notepad
usually reveals what the problem is.

  (One additional hint, noted by David Szafranski: you can't use long
filenames here; e.g. use `C:\PROGRA~1\Tcl\bin' instead of `C:\Program
Files\Tcl\bin'.)


File: python.info,  Node: How do I extract the downloaded documentation on Windows?,  Next: Missing cw3215mt dll or missing cw3215 dll,  Prev: Importing _tkinter fails on Windows 95/98 why?,  Up: Python on Windows FAQ

12.6.17 How do I extract the downloaded documentation on Windows?
-----------------------------------------------------------------

Sometimes, when you download the documentation package to a Windows
machine using a web browser, the file extension of the saved file ends
up being .EXE.  This is a mistake; the extension should be .TGZ.

  Simply rename the downloaded file to have the .TGZ extension, and
WinZip will be able to handle it.  (If your copy of WinZip doesn't, get
a newer one from <http://www.winzip.com>.)


File: python.info,  Node: Missing cw3215mt dll or missing cw3215 dll,  Next: Warning about CTL3D32 version from installer,  Prev: How do I extract the downloaded documentation on Windows?,  Up: Python on Windows FAQ

12.6.18 Missing cw3215mt.dll (or missing cw3215.dll)
----------------------------------------------------

Sometimes, when using Tkinter on Windows, you get an error that
cw3215mt.dll or cw3215.dll is missing.

  Cause: you have an old Tcl/Tk DLL built with cygwin in your path
(probably `C:\Windows').  You must use the Tcl/Tk DLLs from the
standard Tcl/Tk installation (Python 1.5.2 comes with one).


File: python.info,  Node: Warning about CTL3D32 version from installer,  Prev: Missing cw3215mt dll or missing cw3215 dll,  Up: Python on Windows FAQ

12.6.19 Warning about CTL3D32 version from installer
----------------------------------------------------

The Python installer issues a warning like this:

    This version uses CTL3D32.DLL which is not the correct version.
    This version is used for windows NT applications only.

Tim Peters:

     This is a Microsoft DLL, and a notorious source of problems.  The
     message means what it says: you have the wrong version of this DLL
     for your operating system.  The Python installation did not cause
     this - something else you installed previous to this overwrote the
     DLL that came with your OS (probably older shareware of some sort,
     but there's no way to tell now).  If you search for "CTL3D32"
     using any search engine (AltaVista, for example), you'll find
     hundreds and hundreds of web pages complaining about the same
     problem with all sorts of installation programs.  They'll point
     you to ways to get the correct version reinstalled on your system
     (since Python doesn't cause this, we can't fix it).

  David A Burton has written a little program to fix this.  Go to
<http://www.burtonsys.com/downloads.html> and click on "ctl3dfix.zip".


File: python.info,  Node: Graphic User Interface FAQ,  Next: "Why is Python Installed on my Computer?" FAQ,  Prev: Python on Windows FAQ,  Up: Python Frequently Asked Questions

12.7 Graphic User Interface FAQ
===============================

* Menu:

* What platform-independent GUI toolkits exist for Python?::
* What platform-specific GUI toolkits exist for Python?::
* Tkinter questions::

What platform-independent GUI toolkits exist for Python?

* Tkinter::
* wxWidgets::
* Qt::
* Gtk+::
* FLTK::
* FOX::
* OpenGL::

Tkinter questions

* How do I freeze Tkinter applications?::
* Can I have Tk events handled while waiting for I/O?::
* I can't get key bindings to work in Tkinter; why?: I can't get key bindings to work in Tkinter why?.


File: python.info,  Node: What platform-independent GUI toolkits exist for Python?,  Next: What platform-specific GUI toolkits exist for Python?,  Up: Graphic User Interface FAQ

12.7.1 What platform-independent GUI toolkits exist for Python?
---------------------------------------------------------------

Depending on what platform(s) you are aiming at, there are several.

* Menu:

* Tkinter::
* wxWidgets::
* Qt::
* Gtk+::
* FLTK::
* FOX::
* OpenGL::


File: python.info,  Node: Tkinter,  Next: wxWidgets,  Up: What platform-independent GUI toolkits exist for Python?

12.7.1.1 Tkinter
................

Standard builds of Python include an object-oriented interface to the
Tcl/Tk widget set, called Tkinter.  This is probably the easiest to
install and use.  For more info about Tk, including pointers to the
source, see the Tcl/Tk home page at <http://www.tcl.tk>.  Tcl/Tk is
fully portable to the MacOS, Windows, and Unix platforms.


File: python.info,  Node: wxWidgets,  Next: Qt,  Prev: Tkinter,  Up: What platform-independent GUI toolkits exist for Python?

12.7.1.2 wxWidgets
..................

wxWidgets (<http://www.wxwidgets.org>) is a free, portable GUI class
library written in C++ that provides a native look and feel on a number
of platforms, with Windows, MacOS X, GTK, X11, all listed as current
stable targets.  Language bindings are available for a number of
languages including Python, Perl, Ruby, etc.

  wxPython (<http://www.wxpython.org>) is the Python binding for
wxwidgets.  While it often lags slightly behind the official wxWidgets
releases, it also offers a number of features via pure Python
extensions that are not available in other language bindings.  There is
an active wxPython user and developer community.

  Both wxWidgets and wxPython are free, open source, software with
permissive licences that allow their use in commercial products as well
as in freeware or shareware.


File: python.info,  Node: Qt,  Next: Gtk+,  Prev: wxWidgets,  Up: What platform-independent GUI toolkits exist for Python?

12.7.1.3 Qt
...........

There are bindings available for the Qt toolkit (PyQt(1)) and for KDE
(PyKDE(2)).  If you're writing open source software, you don't need to
pay for PyQt, but if you want to write proprietary applications, you
must buy a PyQt license from Riverbank Computing(3) and (up to Qt 4.4;
Qt 4.5 upwards is licensed under the LGPL license) a Qt license from
Trolltech(4).

  ---------- Footnotes ----------

  (1) http://www.riverbankcomputing.co.uk/software/pyqt/

  (2) http://www.riverbankcomputing.co.uk/software/pykde/intro

  (3) http://www.riverbankcomputing.co.uk

  (4) http://www.trolltech.com


File: python.info,  Node: Gtk+,  Next: FLTK,  Prev: Qt,  Up: What platform-independent GUI toolkits exist for Python?

12.7.1.4 Gtk+
.............

PyGtk bindings for the Gtk+ toolkit(1) have been implemented by James
Henstridge; see <<http://www.pygtk.org>>.

  ---------- Footnotes ----------

  (1) http://www.gtk.org


File: python.info,  Node: FLTK,  Next: FOX,  Prev: Gtk+,  Up: What platform-independent GUI toolkits exist for Python?

12.7.1.5 FLTK
.............

Python bindings for the FLTK toolkit(1), a simple yet powerful and
mature cross-platform windowing system, are available from the PyFLTK
project(2).

  ---------- Footnotes ----------

  (1) http://www.fltk.org

  (2) http://pyfltk.sourceforge.net


File: python.info,  Node: FOX,  Next: OpenGL,  Prev: FLTK,  Up: What platform-independent GUI toolkits exist for Python?

12.7.1.6 FOX
............

A wrapper for the FOX toolkit(1) called FXpy(2) is available.  FOX
supports both Unix variants and Windows.

  ---------- Footnotes ----------

  (1) http://www.fox-toolkit.org/

  (2) http://fxpy.sourceforge.net/


File: python.info,  Node: OpenGL,  Prev: FOX,  Up: What platform-independent GUI toolkits exist for Python?

12.7.1.7 OpenGL
...............

For OpenGL bindings, see PyOpenGL(1).

  ---------- Footnotes ----------

  (1) http://pyopengl.sourceforge.net


File: python.info,  Node: What platform-specific GUI toolkits exist for Python?,  Next: Tkinter questions,  Prev: What platform-independent GUI toolkits exist for Python?,  Up: Graphic User Interface FAQ

12.7.2 What platform-specific GUI toolkits exist for Python?
------------------------------------------------------------

The Mac port(1) by Jack Jansen has a rich and ever-growing set of
modules that support the native Mac toolbox calls.  The port supports
MacOS X's Carbon libraries.

  By installing the PyObjc Objective-C bridge(2), Python programs can
use MacOS X's Cocoa libraries. See the documentation that comes with
the Mac port.

  *note Pythonwin: 30dc. by Mark Hammond includes an interface to the
Microsoft Foundation Classes and a Python programming environment
that's written mostly in Python using the MFC classes.

  ---------- Footnotes ----------

  (1) http://python.org/download/mac

  (2) http://pyobjc.sourceforge.net


File: python.info,  Node: Tkinter questions,  Prev: What platform-specific GUI toolkits exist for Python?,  Up: Graphic User Interface FAQ

12.7.3 Tkinter questions
------------------------

* Menu:

* How do I freeze Tkinter applications?::
* Can I have Tk events handled while waiting for I/O?::
* I can't get key bindings to work in Tkinter; why?: I can't get key bindings to work in Tkinter why?.


File: python.info,  Node: How do I freeze Tkinter applications?,  Next: Can I have Tk events handled while waiting for I/O?,  Up: Tkinter questions

12.7.3.1 How do I freeze Tkinter applications?
..............................................

Freeze is a tool to create stand-alone applications.  When freezing
Tkinter applications, the applications will not be truly stand-alone,
as the application will still need the Tcl and Tk libraries.

  One solution is to ship the application with the Tcl and Tk
libraries, and point to them at run-time using the `TCL_LIBRARY' and `TK_LIBRARY'
environment variables.

  To get truly stand-alone applications, the Tcl scripts that form the
library have to be integrated into the application as well. One tool
supporting that is SAM (stand-alone modules), which is part of the Tix
distribution (<http://tix.sourceforge.net/>).

  Build Tix with SAM enabled, perform the appropriate call to
`Tclsam_init()', etc. inside Python's `Modules/tkappinit.c', and link
with libtclsam and libtksam (you might include the Tix libraries as
well).


File: python.info,  Node: Can I have Tk events handled while waiting for I/O?,  Next: I can't get key bindings to work in Tkinter why?,  Prev: How do I freeze Tkinter applications?,  Up: Tkinter questions

12.7.3.2 Can I have Tk events handled while waiting for I/O?
............................................................

Yes, and you don't even need threads!  But you'll have to restructure
your I/O code a bit.  Tk has the equivalent of Xt's `XtAddInput()'
call, which allows you to register a callback function which will be
called from the Tk mainloop when I/O is possible on a file descriptor.
Here's what you need:

    from Tkinter import tkinter
    tkinter.createfilehandler(file, mask, callback)

The file may be a Python file or socket object (actually, anything with
a fileno() method), or an integer file descriptor.  The mask is one of
the constants tkinter.READABLE or tkinter.WRITABLE.  The callback is
called as follows:

    callback(file, mask)

You must unregister the callback when you're done, using

    tkinter.deletefilehandler(file)

Note: since you don't know _how many bytes_ are available for reading,
you can't use the Python file object's read or readline methods, since
these will insist on reading a predefined number of bytes.  For
sockets, the `recv()' or `recvfrom()' methods will work fine; for other
files, use `os.read(file.fileno(), maxbytecount)'.


File: python.info,  Node: I can't get key bindings to work in Tkinter why?,  Prev: Can I have Tk events handled while waiting for I/O?,  Up: Tkinter questions

12.7.3.3 I can't get key bindings to work in Tkinter: why?
..........................................................

An often-heard complaint is that event handlers bound to events with the
`bind()' method don't get handled even when the appropriate key is
pressed.

  The most common cause is that the widget to which the binding applies
doesn't have "keyboard focus".  Check out the Tk documentation for the
focus command.  Usually a widget is given the keyboard focus by
clicking in it (but not for labels; see the takefocus option).


File: python.info,  Node: "Why is Python Installed on my Computer?" FAQ,  Prev: Graphic User Interface FAQ,  Up: Python Frequently Asked Questions

12.8 "Why is Python Installed on my Computer?" FAQ
==================================================

* Menu:

* What is Python?: What is Python?<2>.
* Why is Python installed on my machine?::
* Can I delete Python?::


File: python.info,  Node: What is Python?<2>,  Next: Why is Python installed on my machine?,  Up: "Why is Python Installed on my Computer?" FAQ

12.8.1 What is Python?
----------------------

Python is a programming language.  It's used for many different
applications.  It's used in some high schools and colleges as an
introductory programming language because Python is easy to learn, but
it's also used by professional software developers at places such as
Google, NASA, and Lucasfilm Ltd.

  If you wish to learn more about Python, start with the Beginner's
Guide to Python(1).

  ---------- Footnotes ----------

  (1) http://wiki.python.org/moin/BeginnersGuide


File: python.info,  Node: Why is Python installed on my machine?,  Next: Can I delete Python?,  Prev: What is Python?<2>,  Up: "Why is Python Installed on my Computer?" FAQ

12.8.2 Why is Python installed on my machine?
---------------------------------------------

If you find Python installed on your system but don't remember
installing it, there are several possible ways it could have gotten
there.

   * Perhaps another user on the computer wanted to learn programming
     and installed it; you'll have to figure out who's been using the
     machine and might have installed it.

   * A third-party application installed on the machine might have been
     written in Python and included a Python installation.  For a home
     computer, the most common such application is PySol(1), a
     solitaire game that includes over 1000 different games and
     variations.

   * Some Windows machines also have Python installed.  At this writing
     we're aware of computers from Hewlett-Packard and Compaq that
     include Python.  Apparently some of HP/Compaq's administrative
     tools are written in Python.

   * All Apple computers running Mac OS X have Python installed; it's
     included in the base installation.

  ---------- Footnotes ----------

  (1) http://pysolfc.sourceforge.net/


File: python.info,  Node: Can I delete Python?,  Prev: Why is Python installed on my machine?,  Up: "Why is Python Installed on my Computer?" FAQ

12.8.3 Can I delete Python?
---------------------------

That depends on where Python came from.

  If someone installed it deliberately, you can remove it without
hurting anything.  On Windows, use the Add/Remove Programs icon in the
Control Panel.

  If Python was installed by a third-party application, you can also
remove it, but that application will no longer work.  You should use
that application's uninstaller rather than removing Python directly.

  If Python came with your operating system, removing it is not
recommended.  If you remove it, whatever tools were written in Python
will no longer run, and some of them might be important to you.
Reinstalling the whole system would then be required to fix things
again.


File: python.info,  Node: Glossary,  Next: About these documents,  Prev: Python Frequently Asked Questions,  Up: Top

13 Glossary
***********

`>>>'
     The default Python prompt of the interactive shell.  Often seen
     for code examples which can be executed interactively in the
     interpreter.

`...'
     The default Python prompt of the interactive shell when entering
     code for an indented code block or within a pair of matching left
     and right delimiters (parentheses, square brackets or curly
     braces).

2to3
     A tool that tries to convert Python 2.x code to Python 3.x code by
     handling most of the incompatibilities which can be detected by
     parsing the source and traversing the parse tree.

     2to3 is available in the standard library as *note lib2to3: ff.; a
     standalone entry point is provided as `Tools/scripts/2to3'.  See
     *note 2to3 - Automated Python 2 to 3 code translation: 622.

abstract base class
     *note ABCs - abstract base classes: b12. complement *note
     duck-typing: 310a. by providing a way to define interfaces when
     other techniques like *note hasattr(): 31f. would be clumsy.
     Python comes with many built-in ABCs for data structures (in the
     *note collections: 65. module), numbers (in the *note numbers:
     126. module), and streams (in the *note io: fa. module). You can
     create your own ABC with the *note abc: 4. module.

argument
     A value passed to a function or method, assigned to a named local
     variable in the function body.  A function or method may have both
     positional arguments and keyword arguments in its definition.
     Positional and keyword arguments may be variable-length: `*'
     accepts or passes (if in the function definition or call) several
     positional arguments in a list, while `**' does the same for
     keyword arguments in a dictionary.

     Any expression may be used within the argument list, and the
     evaluated value is passed to the local variable.

attribute
     A value associated with an object which is referenced by name using
     dotted expressions.  For example, if an object _o_ has an attribute
     _a_ it would be referenced as _o.a_.

BDFL
     Benevolent Dictator For Life, a.k.a. Guido van Rossum(1), Python's
     creator.

bytecode
     Python source code is compiled into bytecode, the internal
     representation of a Python program in the interpreter.  The
     bytecode is also cached in `.pyc' and `.pyo' files so that
     executing the same file is faster the second time (recompilation
     from source to bytecode can be avoided).  This "intermediate
     language" is said to run on a *note virtual machine: 310e.  that
     executes the machine code corresponding to each bytecode.

     A list of bytecode instructions can be found in the documentation
     for *note the dis module: 255f.

class
     A template for creating user-defined objects. Class definitions
     normally contain method definitions which operate on instances of
     the class.

classic class
     Any class which does not inherit from *note object: 1ee.  See
     *note new-style class: 5b1.  Classic classes will be removed in
     Python 3.0.

coercion
     The implicit conversion of an instance of one type to another
     during an operation which involves two arguments of the same type.
     For example, `int(3.15)' converts the floating point number to
     the integer `3', but in `3+4.5', each argument is of a different
     type (one int, one float), and both must be converted to the same
     type before they can be added or it will raise a `TypeError'.
     Coercion between two operands can be performed with the `coerce'
     built-in function; thus, `3+4.5' is equivalent to calling
     `operator.add(*coerce(3, 4.5))' and results in `operator.add(3.0,
     4.5)'.  Without coercion, all arguments of even compatible types
     would have to be normalized to the same value by the programmer,
     e.g., `float(3)+4.5' rather than just `3+4.5'.

complex number
     An extension of the familiar real number system in which all
     numbers are expressed as a sum of a real part and an imaginary
     part.  Imaginary numbers are real multiples of the imaginary unit
     (the square root of `-1'), often written `i' in mathematics or `j'
     in engineering.  Python has built-in support for complex numbers,
     which are written with this latter notation; the imaginary part is
     written with a `j' suffix, e.g., `3+1j'.  To get access to complex
     equivalents of the *note math: 10d. module, use *note cmath: 60.
     Use of complex numbers is a fairly advanced mathematical feature.
     If you're not aware of a need for them, it's almost certain you
     can safely ignore them.

context manager
     An object which controls the environment seen in a *note with: 1bd.
     statement by defining *note __enter__(): 1fc. and *note
     __exit__(): 1fd. methods.  See PEP 343(2).

CPython
     The canonical implementation of the Python programming language, as
     distributed on python.org(3).  The term "CPython" is used when
     necessary to distinguish this implementation from others such as
     Jython or IronPython.

decorator
     A function returning another function, usually applied as a
     function transformation using the `@wrapper' syntax.  Common
     examples for decorators are *note classmethod(): 3e5. and *note
     staticmethod(): 3e4.

     The decorator syntax is merely syntactic sugar, the following two
     function definitions are semantically equivalent:

         def f(...):
             ...
         f = staticmethod(f)

         @staticmethod
         def f(...):
             ...

     See *note the documentation for function definition: 6d2. for more
     about decorators.

descriptor
     Any _new-style_ object which defines the methods *note __get__():
     6ea, *note __set__(): 6eb, or *note __delete__(): 6ec.  When a
     class attribute is a descriptor, its special binding behavior is
     triggered upon attribute lookup.  Normally, using _a.b_ to get,
     set or delete an attribute looks up the object named _b_ in the
     class dictionary for _a_, but if _b_ is a descriptor, the
     respective descriptor method gets called.  Understanding
     descriptors is a key to a deep understanding of Python because
     they are the basis for many features including functions, methods,
     properties, class methods, static methods, and reference to super
     classes.

     For more information about descriptors' methods, see *note
     Implementing Descriptors: 6d5.

dictionary
     An associative array, where arbitrary keys are mapped to values.
     The keys can be any object with *note __hash__(): 324. function
     and *note __eq__(): 219.  methods. Called a hash in Perl.

docstring
     A string literal which appears as the first expression in a class,
     function or module.  While ignored when the suite is executed, it
     is recognized by the compiler and put into the `__doc__' attribute
     of the enclosing class, function or module.  Since it is available
     via introspection, it is the canonical place for documentation of
     the object.

duck-typing
     A programming style which does not look at an object's type to
     determine if it has the right interface; instead, the method or
     attribute is simply called or used ("If it looks like a duck and
     quacks like a duck, it must be a duck.")  By emphasizing
     interfaces rather than specific types, well-designed code improves
     its flexibility by allowing polymorphic substitution.  Duck-typing
     avoids tests using *note type(): 47d. or *note isinstance(): 30e.
     (Note, however, that duck-typing can be complemented with *note
     abstract base class: 874.es.)  Instead, it typically employs *note
     hasattr(): 31f. tests or *note EAFP: 10e6. programming.

EAFP
     Easier to ask for forgiveness than permission.  This common Python
     coding style assumes the existence of valid keys or attributes and
     catches exceptions if the assumption proves false.  This clean and
     fast style is characterized by the presence of many *note try:
     384. and *note except: 386.  statements.  The technique contrasts
     with the *note LBYL: 3115. style common to many other languages
     such as C.

expression
     A piece of syntax which can be evaluated to some value.  In other
     words, an expression is an accumulation of expression elements
     like literals, names, attribute access, operators or function
     calls which all return a value.  In contrast to many other
     languages, not all language constructs are expressions.  There are
     also *note statement: d84.s which cannot be used as expressions,
     such as *note print: 4cd. or *note if: 41b.  Assignments are also
     statements, not expressions.

extension module
     A module written in C or C++, using Python's C API to interact
     with the core and with user code.

finder
     An object that tries to find the *note loader: 7f8. for a module.
     It must implement a method named `find_module()'. See PEP 302(4)
     for details.

floor division
     Mathematical division that rounds down to nearest integer.  The
     floor division operator is `//'.  For example, the expression `11
     // 4' evaluates to `2' in contrast to the `2.75' returned by float
     true division.  Note that `(-11) // 4' is `-3' because that is
     `-2.75' rounded _downward_. See PEP 238(5).

function
     A series of statements which returns some value to a caller. It
     can also be passed zero or more arguments which may be used in the
     execution of the body. See also *note argument: 310b. and *note
     method: 3119.

__future__
     A pseudo-module which programmers can use to enable new language
     features which are not compatible with the current interpreter.
     For example, the expression `11/4' currently evaluates to `2'. If
     the module in which it is executed had enabled _true division_ by
     executing:

         from __future__ import division

     the expression `11/4' would evaluate to `2.75'.  By importing the
     *note __future__: 1. module and evaluating its variables, you can
     see when a new feature was first added to the language and when it
     will become the default:

         >>> import __future__
         >>> __future__.division
         _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)


garbage collection
     The process of freeing memory when it is not used anymore.  Python
     performs garbage collection via reference counting and a cyclic
     garbage collector that is able to detect and break reference
     cycles.

generator
     A function which returns an iterator.  It looks like a normal
     function except that it contains *note yield: 2e8. statements for
     producing a series a values usable in a for-loop or that can be
     retrieved one at a time with the *note next(): 388. function. Each
     *note yield: 2e8. temporarily suspends processing, remembering the
     location execution state (including local variables and pending
     try-statements).  When the generator resumes, it picks-up where it
     left-off (in contrast to functions which start fresh on every
     invocation).

generator expression
     An expression that returns an iterator.  It looks like a normal
     expression followed by a *note for: 2e1. expression defining a
     loop variable, range, and an optional *note if: 41b. expression.
     The combined expression generates values for an enclosing function:

         >>> sum(i*i for i in range(10))         # sum of squares 0, 1, 4, ... 81
         285


GIL
     See *note global interpreter lock: 14e1.

global interpreter lock
     The mechanism used by the *note CPython: 3113. interpreter to
     assure that only one thread executes Python *note bytecode: 567.
     at a time.  This simplifies the CPython implementation by making
     the object model (including critical built-in types such as *note
     dict: 2f6.) implicitly safe against concurrent access.  Locking
     the entire interpreter makes it easier for the interpreter to be
     multi-threaded, at the expense of much of the parallelism afforded
     by multi-processor machines.

     However, some extension modules, either standard or third-party,
     are designed so as to release the GIL when doing
     computationally-intensive tasks such as compression or hashing.
     Also, the GIL is always released when doing I/O.

     Past efforts to create a "free-threaded" interpreter (one which
     locks shared data at a much finer granularity) have not been
     successful because performance suffered in the common
     single-processor case. It is believed that overcoming this
     performance issue would make the implementation much more
     complicated and therefore costlier to maintain.

hashable
     An object is _hashable_ if it has a hash value which never changes
     during its lifetime (it needs a *note __hash__(): 324. method),
     and can be compared to other objects (it needs an *note __eq__():
     219. or *note __cmp__(): 21e. method).  Hashable objects which
     compare equal must have the same hash value.

     Hashability makes an object usable as a dictionary key and a set
     member, because these data structures use the hash value
     internally.

     All of Python's immutable built-in objects are hashable, while no
     mutable containers (such as lists or dictionaries) are.  Objects
     which are instances of user-defined classes are hashable by
     default; they all compare unequal, and their hash value is their
     *note id(): 3a1.

IDLE
     An Integrated Development Environment for Python.  IDLE is a basic
     editor and interpreter environment which ships with the standard
     distribution of Python.

immutable
     An object with a fixed value.  Immutable objects include numbers,
     strings and tuples.  Such an object cannot be altered.  A new
     object has to be created if a different value has to be stored.
     They play an important role in places where a constant hash value
     is needed, for example as a key in a dictionary.

integer division
     Mathematical division discarding any remainder.  For example, the
     expression `11/4' currently evaluates to `2' in contrast to the
     `2.75' returned by float division.  Also called _floor division_.
     When dividing two integers the outcome will always be another
     integer (having the floor function applied to it). However, if one
     of the operands is another numeric type (such as a *note float:
     1e8.), the result will be coerced (see *note coercion: a52.) to a
     common type.  For example, an integer divided by a float will
     result in a float value, possibly with a decimal fraction.
     Integer division can be forced by using the `//' operator instead
     of the `/' operator.  See also *note __future__: 311a.

importer
     An object that both finds and loads a module; both a *note finder:
     7f7. and *note loader: 7f8. object.

interactive
     Python has an interactive interpreter which means you can enter
     statements and expressions at the interpreter prompt, immediately
     execute them and see their results.  Just launch `python' with no
     arguments (possibly by selecting it from your computer's main
     menu). It is a very powerful way to test out new ideas or inspect
     modules and packages (remember `help(x)').

interpreted
     Python is an interpreted language, as opposed to a compiled one,
     though the distinction can be blurry because of the presence of the
     bytecode compiler.  This means that source files can be run
     directly without explicitly creating an executable which is then
     run.  Interpreted languages typically have a shorter
     development/debug cycle than compiled ones, though their programs
     generally also run more slowly.  See also *note interactive: 3120.

iterable
     A container object capable of returning its members one at a time.
     Examples of iterables include all sequence types (such as *note
     list: 3ab, *note str: 1e7, and *note tuple: 3f7.) and some
     non-sequence types like *note dict: 2f6. and *note file: 1f6. and
     objects of any classes you define with an *note __iter__(): 310.
     or *note __getitem__(): 43e. method.  Iterables can be used in a
     *note for: 2e1. loop and in many other places where a sequence is
     needed (*note zip(): 3f4, *note map(): 2f5, ...).  When an iterable
     object is passed as an argument to the built-in function *note
     iter(): 2a8, it returns an iterator for the object.  This iterator
     is good for one pass over the set of values.  When using
     iterables, it is usually not necessary to call *note iter(): 2a8.
     or deal with iterator objects yourself.  The `for' statement does
     that automatically for you, creating a temporary unnamed variable
     to hold the iterator for the duration of the loop.  See also *note
     iterator: 84a, *note sequence: b3d, and *note generator: 5bb.

iterator
     An object representing a stream of data.  Repeated calls to the
     iterator's *note next(): 388. method return successive items in
     the stream.  When no more data are available a *note
     StopIteration: 322. exception is raised instead.  At this point,
     the iterator object is exhausted and any further calls to its
     *note next(): 388. method just raise *note StopIteration: 322.
     again.  Iterators are required to have an *note __iter__(): 310.
     method that returns the iterator object itself so every iterator
     is also iterable and may be used in most places where other
     iterables are accepted.  One notable exception is code which
     attempts multiple iteration passes.  A container object (such as a
     *note list: 3ab.) produces a fresh new iterator each time you pass
     it to the *note iter(): 2a8. function or use it in a *note for:
     2e1. loop.  Attempting this with an iterator will just return the
     same exhausted iterator object used in the previous iteration
     pass, making it appear like an empty container.

     More information can be found in *note Iterator Types: 701.

key function
     A key function or collation function is a callable that returns a
     value used for sorting or ordering.  For example, *note
     locale.strxfrm(): 1fa5. is used to produce a sort key that is
     aware of locale specific sort conventions.

     A number of tools in Python accept key functions to control how
     elements are ordered or grouped.  They include *note min(): 221,
     *note max(): 222, *note sorted(): 220, `list.sort()', *note
     heapq.nsmallest(): b49, *note heapq.nlargest(): b48, and *note
     itertools.groupby(): d23.

     There are several ways to create a key function.  For example. the
     *note str.lower(): 894. method can serve as a key function for
     case insensitive sorts.  Alternatively, an ad-hoc key function can
     be built from a *note lambda: 3f2. expression such as `lambda r:
     (r[0], r[2])'.  Also, the *note operator: 127. module provides
     three key function constuctors: *note attrgetter(): da6, *note
     itemgetter(): da7, and *note methodcaller(): da8.  See the *note
     Sorting HOW TO: 2fd6. for examples of how to create and use key
     functions.

keyword argument
     Arguments which are preceded with a `variable_name=' in the call.
     The variable name designates the local name in the function to
     which the value is assigned.  `**' is used to accept or pass a
     dictionary of keyword arguments.  See *note argument: 310b.

lambda
     An anonymous inline function consisting of a single *note
     expression: 231e.  which is evaluated when the function is called.
     The syntax to create a lambda function is `lambda [arguments]:
     expression'

LBYL
     Look before you leap.  This coding style explicitly tests for
     pre-conditions before making calls or lookups.  This style
     contrasts with the *note EAFP: 10e6. approach and is characterized
     by the presence of many *note if: 41b. statements.

list
     A built-in Python *note sequence: b3d.  Despite its name it is
     more akin to an array in other languages than to a linked list
     since access to elements are O(1).

list comprehension
     A compact way to process all or part of the elements in a sequence
     and return a list with the results.  `result = ["0x%02x" % x for x
     in range(256) if x % 2 == 0]' generates a list of strings
     containing even hex numbers (0x..) in the range from 0 to 255. The
     *note if: 41b.  clause is optional.  If omitted, all elements in
     `range(256)' are processed.

loader
     An object that loads a module. It must define a method named
     `load_module()'. A loader is typically returned by a *note finder:
     7f7. See PEP 302(6) for details.

mapping
     A container object that supports arbitrary key lookups and
     implements the methods specified in the `Mapping' or
     `MutableMapping' *note abstract base classes: b12. Examples include
     *note dict: 2f6, *note collections.defaultdict: 8c0, *note
     collections.OrderedDict: 1b5. and *note collections.Counter: 1b6.

metaclass
     The class of a class.  Class definitions create a class name, a
     class dictionary, and a list of base classes.  The metaclass is
     responsible for taking those three arguments and creating the
     class.  Most object oriented programming languages provide a
     default implementation.  What makes Python special is that it is
     possible to create custom metaclasses.  Most users never need this
     tool, but when the need arises, metaclasses can provide powerful,
     elegant solutions.  They have been used for logging attribute
     access, adding thread-safety, tracking object creation,
     implementing singletons, and many other tasks.

     More information can be found in *note Customizing class creation:
     6f2.

method
     A function which is defined inside a class body.  If called as an
     attribute of an instance of that class, the method will get the
     instance object as its first *note argument: 310b. (which is
     usually called `self').  See *note function: 3118. and *note
     nested scope: 3126.

mutable
     Mutable objects can change their value but keep their *note id():
     3a1.  See also *note immutable: 311d.

named tuple
     Any tuple-like class whose indexable elements are also accessible
     using named attributes (for example, *note time.localtime(): a9c.
     returns a tuple-like object where the _year_ is accessible either
     with an index such as `t[0]' or with a named attribute like
     `t.tm_year').

     A named tuple can be a built-in type such as *note
     time.struct_time: a9b, or it can be created with a regular class
     definition.  A full featured named tuple can also be created with
     the factory function *note collections.namedtuple(): 1cc.  The
     latter approach automatically provides extra features such as a
     self-documenting representation like `Employee(name='jones',
     title='programmer')'.

namespace
     The place where a variable is stored.  Namespaces are implemented
     as dictionaries.  There are the local, global and built-in
     namespaces as well as nested namespaces in objects (in methods).
     Namespaces support modularity by preventing naming conflicts.  For
     instance, the functions `__builtin__.open()' and *note os.open():
     5c3. are distinguished by their namespaces.  Namespaces also aid
     readability and maintainability by making it clear which module
     implements a function.  For instance, writing *note random.seed():
     d04. or *note itertools.izip(): 3f5. makes it clear that those
     functions are implemented by the *note random: 143. and *note
     itertools: fb.  modules, respectively.

nested scope
     The ability to refer to a variable in an enclosing definition.  For
     instance, a function defined inside another function can refer to
     variables in the outer function.  Note that nested scopes work
     only for reference and not for assignment which will always write
     to the innermost scope.  In contrast, local variables both read
     and write in the innermost scope.  Likewise, global variables read
     and write to the global namespace.

new-style class
     Any class which inherits from *note object: 1ee.  This includes
     all built-in types like *note list: 3ab. and *note dict: 2f6.
     Only new-style classes can use Python's newer, versatile features
     like *note __slots__: 478, descriptors, properties, and *note
     __getattribute__(): 32a.

     More information can be found in *note New-style and classic
     classes: 6db.

object
     Any data with state (attributes or value) and defined behavior
     (methods).  Also the ultimate base class of any *note new-style
     class: 5b1.

positional argument
     The arguments assigned to local names inside a function or method,
     determined by the order in which they were given in the call.  `*'
     is used to either accept multiple positional arguments (when in the
     definition), or pass several arguments as a list to a function.
     See *note argument: 310b.

Python 3000
     Nickname for the next major Python version, 3.0 (coined long ago
     when the release of version 3 was something in the distant
     future.)  This is also abbreviated "Py3k".

Pythonic
     An idea or piece of code which closely follows the most common
     idioms of the Python language, rather than implementing code using
     concepts common to other languages.  For example, a common idiom
     in Python is to loop over all elements of an iterable using a
     *note for: 2e1.  statement.  Many other languages don't have this
     type of construct, so people unfamiliar with Python sometimes use
     a numerical counter instead:

         for i in range(len(food)):
             print food[i]

     As opposed to the cleaner, Pythonic method:

         for piece in food:
             print piece


reference count
     The number of references to an object.  When the reference count
     of an object drops to zero, it is deallocated.  Reference counting
     is generally not visible to Python code, but it is a key element
     of the *note CPython: 3113. implementation.  The *note sys: 16e.
     module defines a `getrefcount()' function that programmers can
     call to return the reference count for a particular object.

__slots__
     A declaration inside a *note new-style class: 5b1. that saves
     memory by pre-declaring space for instance attributes and
     eliminating instance dictionaries.  Though popular, the technique
     is somewhat tricky to get right and is best reserved for rare
     cases where there are large numbers of instances in a
     memory-critical application.

sequence
     An *note iterable: 893. which supports efficient element access
     using integer indices via the *note __getitem__(): 43e. special
     method and defines a *note len(): 50a. method that returns the
     length of the sequence.  Some built-in sequence types are *note
     list: 3ab, *note str: 1e7, *note tuple: 3f7, and *note unicode:
     1f2. Note that *note dict: 2f6. also supports *note __getitem__():
     43e. and *note __len__(): 3f9, but is considered a mapping rather
     than a sequence because the lookups use arbitrary *note immutable:
     311d. keys rather than integers.

slice
     An object usually containing a portion of a *note sequence: b3d.
     A slice is created using the subscript notation, `[]' with colons
     between numbers when several are given, such as in
     `variable_name[1:3:5]'.  The bracket (subscript) notation uses
     *note slice: 43f. objects internally (or in older versions, *note
     __getslice__(): 6fb. and *note __setslice__(): 706.).

special method
     A method that is called implicitly by Python to execute a certain
     operation on a type, such as addition.  Such methods have names
     starting and ending with double underscores.  Special methods are
     documented in *note Special method names: 693.

statement
     A statement is part of a suite (a "block" of code).  A statement
     is either an *note expression: 231e. or a one of several
     constructs with a keyword, such as *note if: 41b, *note while:
     515. or *note print: 4cd.

triple-quoted string
     A string which is bound by three instances of either a quotation
     mark (") or an apostrophe (').  While they don't provide any
     functionality not available with single-quoted strings, they are
     useful for a number of reasons.  They allow you to include
     unescaped single and double quotes within a string and they can
     span multiple lines without the use of the continuation character,
     making them especially useful when writing docstrings.

type
     The type of a Python object determines what kind of object it is;
     every object has a type.  An object's type is accessible as its
     `__class__' attribute or can be retrieved with `type(obj)'.

view
     The objects returned from *note dict.viewkeys(): 1e1, *note
     dict.viewvalues(): 1e2, and *note dict.viewitems(): 1e3. are
     called dictionary views.  They are lazy sequences that will see
     changes in the underlying dictionary.  To force the dictionary
     view to become a full list use `list(dictview)'.  See *note
     Dictionary view objects: 8cc.

virtual machine
     A computer defined entirely in software.  Python's virtual machine
     executes the *note bytecode: 567. emitted by the bytecode compiler.

Zen of Python
     Listing of Python design principles and philosophies that are
     helpful in understanding and using the language.  The listing can
     be found by typing "`import this'" at the interactive prompt.

  ---------- Footnotes ----------

  (1) http://www.python.org/~guido/

  (2) http://www.python.org/dev/peps/pep-0343

  (3) http://python.org

  (4) http://www.python.org/dev/peps/pep-0302

  (5) http://www.python.org/dev/peps/pep-0238

  (6) http://www.python.org/dev/peps/pep-0302


File: python.info,  Node: About these documents,  Next: Reporting Bugs,  Prev: Glossary,  Up: Top

14 About these documents
************************

These documents are generated from reStructuredText(1) sources by
Sphinx(2), a document processor specifically written for the Python
documentation.

  Development of the documentation and its toolchain takes place on the
<docs@python.org> mailing list.  We're always looking for volunteers
wanting to help with the docs, so feel free to send a mail there!

  Many thanks go to:

   * Fred L. Drake, Jr., the creator of the original Python
     documentation toolset and writer of much of the content;

   * the Docutils(3) project for creating reStructuredText and the
     Docutils suite;

   * Fredrik Lundh for his Alternative Python Reference(4) project from
     which Sphinx got many good ideas.

  See *note Reporting Bugs: 2f02. for information how to report bugs in
this documentation, or Python itself.

* Menu:

* Contributors to the Python Documentation::

  ---------- Footnotes ----------

  (1) http://docutils.sf.net/rst.html

  (2) http://sphinx.pocoo.org/

  (3) http://docutils.sf.net/

  (4) http://effbot.org/zone/pyref.htm


File: python.info,  Node: Contributors to the Python Documentation,  Up: About these documents

14.1 Contributors to the Python Documentation
=============================================

This section lists people who have contributed in some way to the Python
documentation.  It is probably not complete - if you feel that you or
anyone else should be on this list, please let us know (send email to
<docs@python.org>), and we'll be glad to correct the problem.

  Aahz, Michael Abbott, Steve Alexander, Jim Ahlstrom, Fred Allen, A.
Amoroso, Pehr Anderson, Oliver Andrich, Heidi Annexstad, Jesús Cea
Avión, Manuel Balsera, Daniel Barclay, Chris Barker, Don Bashford,
Anthony Baxter, Alexander Belopolsky, Bennett Benson, Jonathan Black,
Robin Boerdijk, Michal Bozon, Aaron Brancotti, Georg Brandl, Keith
Briggs, Ian Bruntlett, Lee Busby, Lorenzo M. Catucci, Carl Cerecke,
Mauro Cicognini, Gilles Civario, Mike Clarkson, Steve Clift, Dave Cole,
Matthew Cowles, Jeremy Craven, Andrew Dalke, Ben Darnell, L. Peter
Deutsch, Robert Donohue, Fred L. Drake, Jr., Josip Dzolonga, Jeff
Epler, Michael Ernst, Blame Andy Eskilsson, Carey Evans, Martijn
Faassen, Carl Feynman, Dan Finnie, Hernán Martínez Foffani, Stefan
Franke, Jim Fulton, Peter Funk, Lele Gaifax, Matthew Gallagher, Gabriel
Genellina, Ben Gertzfield, Nadim Ghaznavi, Jonathan Giddy, Shelley
Gooch, Nathaniel Gray, Grant Griffin, Thomas Guettler, Anders
Hammarquist, Mark Hammond, Harald Hanche-Olsen, Manus Hand, Gerhard
Häring, Travis B. Hartwell, Tim Hatch, Janko Hauser, Thomas Heller,
Bernhard Herzog, Magnus L. Hetland, Konrad Hinsen, Stefan Hoffmeister,
Albert Hofkamp, Gregor Hoffleit, Steve Holden, Thomas Holenstein,
Gerrit Holl, Rob Hooft, Brian Hooper, Randall Hopper, Michael Hudson,
Eric Huss, Jeremy Hylton, Roger Irwin, Jack Jansen, Philip H. Jensen,
Pedro Diaz Jimenez, Kent Johnson, Lucas de Jonge, Andreas Jung, Robert
Kern, Jim Kerr, Jan Kim, Greg Kochanski, Guido Kollerie, Peter A.
Koren, Daniel Kozan, Andrew M. Kuchling, Dave Kuhlman, Erno Kuusela,
Ross Lagerwall, Thomas Lamb, Detlef Lannert, Piers Lauder, Glyph
Lefkowitz, Robert Lehmann, Marc-André Lemburg, Ross Light, Ulf A.
Lindgren, Everett Lipman, Mirko Liss, Martin von Löwis, Fredrik Lundh,
Jeff MacDonald, John Machin, Andrew MacIntyre, Vladimir Marangozov,
Vincent Marchetti, Westley Martínez, Laura Matson, Daniel May, Rebecca
McCreary, Doug Mennella, Paolo Milani, Skip Montanaro, Paul Moore, Ross
Moore, Sjoerd Mullender, Dale Nagata, Michal Nowikowski, Ng Pheng
Siong, Koray Oner, Tomas Oppelstrup, Denis S. Otkidach, Zooko
O'Whielacronx, Shriphani Palakodety, William Park, Joonas Paalasmaa,
Harri Pasanen, Bo Peng, Tim Peters, Benjamin Peterson, Christopher
Petrilli, Justin D. Pettit, Chris Phoenix, François Pinard, Paul
Prescod, Eric S. Raymond, Edward K. Ream, Terry J. Reedy, Sean
Reifschneider, Bernhard Reiter, Armin Rigo, Wes Rishel, Armin Ronacher,
Jim Roskind, Guido van Rossum, Donald Wallace Rouse II, Mark Russell,
Nick Russo, Chris Ryland, Constantina S., Hugh Sasse, Bob Savage, Scott
Schram, Neil Schemenauer, Barry Scott, Joakim Sernbrant, Justin Sheehy,
Charlie Shepherd, Michael Simcich, Ionel Simionescu, Michael Sloan,
Gregory P. Smith, Roy Smith, Clay Spence, Nicholas Spies, Tage
Stabell-Kulo, Frank Stajano, Anthony Starks, Greg Stein, Peter Stoehr,
Mark Summerfield, Reuben Sumner, Kalle Svensson, Jim Tittsler, David
Turner, Ville Vainio, Martijn Vries, Charles G. Waldman, Greg Ward,
Barry Warsaw, Corran Webster, Glyn Webster, Bob Weiner, Eddy Welbourne,
Jeff Wheeler, Mats Wichmann, Gerry Wiener, Timothy Wild, Paul Winkler,
Collin Winter, Blake Winton, Dan Wolfe, Steven Work, Thomas Wouters,
Ka-Ping Yee, Rory Yorke, Moshe Zadka, Milan Zamazal, Cheng Zhang.

  It is only with the input and contributions of the Python community
that Python has such wonderful documentation - Thank You!


File: python.info,  Node: Reporting Bugs,  Next: Copyright,  Prev: About these documents,  Up: Top

15 Reporting Bugs
*****************

Python is a mature programming language which has established a
reputation for stability.  In order to maintain this reputation, the
developers would like to know of any deficiencies you find in Python.

* Menu:

* Documentation bugs::
* Using the Python issue tracker::


File: python.info,  Node: Documentation bugs,  Next: Using the Python issue tracker,  Up: Reporting Bugs

15.1 Documentation bugs
=======================

If you find a bug in this documentation or would like to propose an
improvement, please send an e-mail to <docs@python.org> describing the
bug and where you found it.  If you have a suggestion how to fix it,
include that as well.

  <docs@python.org> is a mailing list run by volunteers; your request
will be noticed, even if it takes a while to be processed.

  Of course, if you want a more persistent record of your issue, you
can use the issue tracker for documentation bugs as well.


File: python.info,  Node: Using the Python issue tracker,  Prev: Documentation bugs,  Up: Reporting Bugs

15.2 Using the Python issue tracker
===================================

Bug reports for Python itself should be submitted via the Python Bug
Tracker (<http://bugs.python.org/>).  The bug tracker offers a Web form
which allows pertinent information to be entered and submitted to the
developers.

  The first step in filing a report is to determine whether the problem
has already been reported.  The advantage in doing so, aside from
saving the developers time, is that you learn what has been done to fix
it; it may be that the problem has already been fixed for the next
release, or additional information is needed (in which case you are
welcome to provide it if you can!).  To do this, search the bug
database using the search box on the top of the page.

  If the problem you're reporting is not already in the bug tracker, go
back to the Python Bug Tracker and log in.  If you don't already have a
tracker account, select the "Register" link or, if you use OpenID, one
of the OpenID provider logos in the sidebar.  It is not possible to
submit a bug report anonymously.

  Being now logged in, you can submit a bug.  Select the "Create New"
link in the sidebar to open the bug reporting form.

  The submission form has a number of fields.  For the "Title" field,
enter a _very_ short description of the problem; less than ten words is
good.  In the "Type" field, select the type of your problem; also
select the "Component" and "Versions" to which the bug relates.

  In the "Comment" field, describe the problem in detail, including
what you expected to happen and what did happen.  Be sure to include
whether any extension modules were involved, and what hardware and
software platform you were using (including version information as
appropriate).

  Each bug report will be assigned to a developer who will determine
what needs to be done to correct the problem.  You will receive an
update each time action is taken on the bug.  See
<http://www.python.org/dev/workflow/> for a detailed description of the
issue workflow.

See also
........

How to Report Bugs Effectively(1)
     Article which goes into some detail about how to create a useful
     bug report.  This describes what kind of information is useful and
     why it is useful.

Bug Writing Guidelines(2)
     Information about writing a good bug report.  Some of this is
     specific to the Mozilla project, but describes general good
     practices.

  ---------- Footnotes ----------

  (1) http://www.chiark.greenend.org.uk/~sgtatham/bugs.html

  (2) http://developer.mozilla.org/en/docs/Bug_writing_guidelines


File: python.info,  Node: Copyright,  Next: History and License,  Prev: Reporting Bugs,  Up: Top

16 Copyright
************

Python and this documentation is:

  Copyright © 2001-2010 Python Software Foundation. All rights
reserved.

  Copyright © 2000 BeOpen.com. All rights reserved.

  Copyright © 1995-2000 Corporation for National Research Initiatives.
All rights reserved.

  Copyright © 1991-1995 Stichting Mathematisch Centrum. All rights
reserved.

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  See *note History and License: 2f3d. for complete license and
permissions information.


File: python.info,  Node: History and License,  Next: Python Module Index,  Prev: Copyright,  Up: Top

17 History and License
**********************

* Menu:

* History of the software::
* Terms and conditions for accessing or otherwise using Python::
* Licenses and Acknowledgements for Incorporated Software::


File: python.info,  Node: History of the software,  Next: Terms and conditions for accessing or otherwise using Python,  Up: History and License

17.1 History of the software
============================

Python was created in the early 1990s by Guido van Rossum at Stichting
Mathematisch Centrum (CWI, see <http://www.cwi.nl/>) in the Netherlands
as a successor of a language called ABC.  Guido remains Python's
principal author, although it includes many contributions from others.

  In 1995, Guido continued his work on Python at the Corporation for
National Research Initiatives (CNRI, see
<http://www.cnri.reston.va.us/>) in Reston, Virginia where he released
several versions of the software.

  In May 2000, Guido and the Python core development team moved to
BeOpen.com to form the BeOpen PythonLabs team.  In October of the same
year, the PythonLabs team moved to Digital Creations (now Zope
Corporation; see <http://www.zope.com/>).  In 2001, the Python Software
Foundation (PSF, see <http://www.python.org/psf/>) was formed, a
non-profit organization created specifically to own Python-related
Intellectual Property.  Zope Corporation is a sponsoring member of the
PSF.

  All Python releases are Open Source (see <http://www.opensource.org/>
for the Open Source Definition). Historically, most, but not all,
Python releases have also been GPL-compatible; the table below
summarizes the various releases.

Release              Derived from       Year            Owner            GPL compatible?
----------------------------------------------------------------------------------------------- 
0.9.0 thru 1.2       n/a                1991-1995       CWI              yes
1.3 thru 1.5.2       1.2                1995-1999       CNRI             yes
1.6                  1.5.2              2000            CNRI             no
2.0                  1.6                2000            BeOpen.com       no
1.6.1                1.6                2001            CNRI             no
2.1                  2.0+1.6.1          2001            PSF              no
2.0.1                2.0+1.6.1          2001            PSF              yes
2.1.1                2.1+2.0.1          2001            PSF              yes
2.2                  2.1.1              2001            PSF              yes
2.1.2                2.1.1              2002            PSF              yes
2.1.3                2.1.2              2002            PSF              yes
2.2.1                2.2                2002            PSF              yes
2.2.2                2.2.1              2002            PSF              yes
2.2.3                2.2.2              2002-2003       PSF              yes
2.3                  2.2.2              2002-2003       PSF              yes
2.3.1                2.3                2002-2003       PSF              yes
2.3.2                2.3.1              2003            PSF              yes
2.3.3                2.3.2              2003            PSF              yes
2.3.4                2.3.3              2004            PSF              yes
2.3.5                2.3.4              2005            PSF              yes
2.4                  2.3                2004            PSF              yes
2.4.1                2.4                2005            PSF              yes
2.4.2                2.4.1              2005            PSF              yes
2.4.3                2.4.2              2006            PSF              yes
2.4.4                2.4.3              2006            PSF              yes
2.5                  2.4                2006            PSF              yes
2.5.1                2.5                2007            PSF              yes
2.5.2                2.5.1              2008            PSF              yes
2.5.3                2.5.2              2008            PSF              yes
2.6                  2.5                2008            PSF              yes
2.6.1                2.6                2008            PSF              yes
2.6.2                2.6.1              2009            PSF              yes
2.6.3                2.6.2              2009            PSF              yes
2.6.4                2.6.3              2010            PSF              yes
2.7                  2.6                2010            PSF              yes

     Note: GPL-compatible doesn't mean that we're distributing Python
     under the GPL.  All Python licenses, unlike the GPL, let you
     distribute a modified version without making your changes open
     source. The GPL-compatible licenses make it possible to combine
     Python with other software that is released under the GPL; the
     others don't.

  Thanks to the many outside volunteers who have worked under Guido's
direction to make these releases possible.


File: python.info,  Node: Terms and conditions for accessing or otherwise using Python,  Next: Licenses and Acknowledgements for Incorporated Software,  Prev: History of the software,  Up: History and License

17.2 Terms and conditions for accessing or otherwise using Python
=================================================================

                PSF LICENSE AGREEMENT FOR PYTHON 2.7.2

  1. This LICENSE AGREEMENT is between the Python Software Foundation
     ("PSF"), and the Individual or Organization ("Licensee") accessing
     and otherwise using Python 2.7.2 software in source or binary form
     and its associated documentation.

  2. Subject to the terms and conditions of this License Agreement, PSF
     hereby grants Licensee a nonexclusive, royalty-free, world-wide
     license to reproduce, analyze, test, perform and/or display
     publicly, prepare derivative works, distribute, and otherwise use
     Python 2.7.2 alone or in any derivative version, provided,
     however, that PSF's License Agreement and PSF's notice of
     copyright, i.e., "Copyright © 2001-2010 Python Software
     Foundation; All Rights Reserved" are retained in Python 2.7.2
     alone or in any derivative version prepared by Licensee.

  3. In the event Licensee prepares a derivative work that is based on
     or incorporates Python 2.7.2 or any part thereof, and wants to
     make the derivative work available to others as provided herein,
     then Licensee hereby agrees to include in any such work a brief
     summary of the changes made to Python 2.7.2.

  4. PSF is making Python 2.7.2 available to Licensee on an "AS IS"
     basis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
     DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.7.2
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
     2.7.2 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR
     LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING
     PYTHON 2.7.2, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE
     POSSIBILITY THEREOF.

  6. This License Agreement will automatically terminate upon a
     material breach of its terms and conditions.

  7. Nothing in this License Agreement shall be deemed to create any
     relationship of agency, partnership, or joint venture between PSF
     and Licensee.  This License Agreement does not grant permission to
     use PSF trademarks or trade name in a trademark sense to endorse
     or promote products or services of Licensee, or any third party.

  8. By copying, installing or otherwise using Python 2.7.2, Licensee
     agrees to be bound by the terms and conditions of this License
     Agreement.

              BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0

         BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1

  1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an
     office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the
     Individual or Organization ("Licensee") accessing and otherwise
     using this software in source or binary form and its associated
     documentation ("the Software").

  2. Subject to the terms and conditions of this BeOpen Python License
     Agreement, BeOpen hereby grants Licensee a non-exclusive,
     royalty-free, world-wide license to reproduce, analyze, test,
     perform and/or display publicly, prepare derivative works,
     distribute, and otherwise use the Software alone or in any
     derivative version, provided, however, that the BeOpen Python
     License is retained in the Software, alone or in any derivative
     version prepared by Licensee.

  3. BeOpen is making the Software available to Licensee on an "AS IS"
     basis.  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO
     AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE
     SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR
     LOSS AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE,
     OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY
     THEREOF.

  5. This License Agreement will automatically terminate upon a
     material breach of its terms and conditions.

  6. This License Agreement shall be governed by and interpreted in all
     respects by the law of the State of California, excluding conflict
     of law provisions.  Nothing in this License Agreement shall be
     deemed to create any relationship of agency, partnership, or joint
     venture between BeOpen and Licensee.  This License Agreement does
     not grant permission to use BeOpen trademarks or trade names in a
     trademark sense to endorse or promote products or services of
     Licensee, or any third party.  As an exception, the "BeOpen
     Python" logos available at <http://www.pythonlabs.com/logos.html>
     may be used according to the permissions granted on that web page.

  7. By copying, installing or otherwise using the software, Licensee
     agrees to be bound by the terms and conditions of this License
     Agreement.

                CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1

  1. This LICENSE AGREEMENT is between the Corporation for National
     Research Initiatives, having an office at 1895 Preston White
     Drive, Reston, VA 20191 ("CNRI"), and the Individual or
     Organization ("Licensee") accessing and otherwise using Python
     1.6.1 software in source or binary form and its associated
     documentation.

  2. Subject to the terms and conditions of this License Agreement,
     CNRI hereby grants Licensee a nonexclusive, royalty-free,
     world-wide license to reproduce, analyze, test, perform and/or
     display publicly, prepare derivative works, distribute, and
     otherwise use Python 1.6.1 alone or in any derivative version,
     provided, however, that CNRI's License Agreement and CNRI's notice
     of copyright, i.e., "Copyright © 1995-2001 Corporation for
     National Research Initiatives; All Rights Reserved" are retained
     in Python 1.6.1 alone or in any derivative version prepared by
     Licensee.  Alternately, in lieu of CNRI's License Agreement,
     Licensee may substitute the following text (omitting the quotes):
     "Python 1.6.1 is made available subject to the terms and
     conditions in CNRI's License Agreement.  This Agreement together
     with Python 1.6.1 may be located on the Internet using the
     following unique, persistent identifier (known as a handle):
     1895.22/1013.  This Agreement may also be obtained from a proxy
     server on the Internet using the following URL:
     <http://hdl.handle.net/1895.22/1013>."

  3. In the event Licensee prepares a derivative work that is based on
     or incorporates Python 1.6.1 or any part thereof, and wants to
     make the derivative work available to others as provided herein,
     then Licensee hereby agrees to include in any such work a brief
     summary of the changes made to Python 1.6.1.

  4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS"
     basis.  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND
     DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
     1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR
     LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING
     PYTHON 1.6.1, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE
     POSSIBILITY THEREOF.

  6. This License Agreement will automatically terminate upon a
     material breach of its terms and conditions.

  7. This License Agreement shall be governed by the federal
     intellectual property law of the United States, including without
     limitation the federal copyright law, and, to the extent such U.S.
     federal law does not apply, by the law of the Commonwealth of
     Virginia, excluding Virginia's conflict of law provisions.
     Notwithstanding the foregoing, with regard to derivative works
     based on Python 1.6.1 that incorporate non-separable material that
     was previously distributed under the GNU General Public License
     (GPL), the law of the Commonwealth of Virginia shall govern this
     License Agreement only as to issues arising under or with respect
     to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in
     this License Agreement shall be deemed to create any relationship
     of agency, partnership, or joint venture between CNRI and
     Licensee.  This License Agreement does not grant permission to use
     CNRI trademarks or trade name in a trademark sense to endorse or
     promote products or services of Licensee, or any third party.

  8. By clicking on the "ACCEPT" button where indicated, or by copying,
     installing or otherwise using Python 1.6.1, Licensee agrees to be
     bound by the terms and conditions of this License Agreement.

                                ACCEPT

          CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2

  Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam,
The Netherlands.  All rights reserved.

  Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.

  STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: python.info,  Node: Licenses and Acknowledgements for Incorporated Software,  Prev: Terms and conditions for accessing or otherwise using Python,  Up: History and License

17.3 Licenses and Acknowledgements for Incorporated Software
============================================================

This section is an incomplete, but growing list of licenses and
acknowledgements for third-party software incorporated in the Python
distribution.

* Menu:

* Mersenne Twister::
* Sockets: Sockets<2>.
* Floating point exception control::
* MD5 message digest algorithm::
* Asynchronous socket services::
* Cookie management::
* Profiling::
* Execution tracing::
* UUencode and UUdecode functions::
* XML Remote Procedure Calls::
* test_epoll::
* Select kqueue::
* strtod and dtoa::
* OpenSSL::
* expat::
* libffi::
* zlib::


File: python.info,  Node: Mersenne Twister,  Next: Sockets<2>,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.1 Mersenne Twister
-----------------------

The `_random' module includes code based on a download from
<http://www.math.keio.ac.jp/> matumoto/MT2002/emt19937ar.html. The
following are the verbatim comments from the original code:

    A C-program for MT19937, with initialization improved 2002/1/26.
    Coded by Takuji Nishimura and Makoto Matsumoto.

    Before using, initialize the state by using init_genrand(seed)
    or init_by_array(init_key, key_length).

    Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


    Any feedback is very welcome.
    http://www.math.keio.ac.jp/matumoto/emt.html
    email: matumoto@math.keio.ac.jp



File: python.info,  Node: Sockets<2>,  Next: Floating point exception control,  Prev: Mersenne Twister,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.2 Sockets
--------------

The *note socket: 15d. module uses the functions, `getaddrinfo()', and
`getnameinfo()', which are coded in separate source files from the WIDE
Project, <http://www.wide.ad.jp/>.

    Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
    3. Neither the name of the project nor the names of its contributors
       may be used to endorse or promote products derived from this software
       without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
    GAI_ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
    FOR GAI_ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON GAI_ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN GAI_ANY WAY
    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.



File: python.info,  Node: Floating point exception control,  Next: MD5 message digest algorithm,  Prev: Sockets<2>,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.3 Floating point exception control
---------------------------------------

The source for the *note fpectl: d5. module includes the following
notice:

      ---------------------------------------------------------------------
     /                       Copyright (c) 1996.                           \
    |          The Regents of the University of California.                 |
    |                        All rights reserved.                           |
    |                                                                       |
    |   Permission to use, copy, modify, and distribute this software for   |
    |   any purpose without fee is hereby granted, provided that this en-   |
    |   tire notice is included in all copies of any software which is or   |
    |   includes  a  copy  or  modification  of  this software and in all   |
    |   copies of the supporting documentation for such software.           |
    |                                                                       |
    |   This  work was produced at the University of California, Lawrence   |
    |   Livermore National Laboratory under  contract  no.  W-7405-ENG-48   |
    |   between  the  U.S.  Department  of  Energy and The Regents of the   |
    |   University of California for the operation of UC LLNL.              |
    |                                                                       |
    |                              DISCLAIMER                               |
    |                                                                       |
    |   This  software was prepared as an account of work sponsored by an   |
    |   agency of the United States Government. Neither the United States   |
    |   Government  nor the University of California nor any of their em-   |
    |   ployees, makes any warranty, express or implied, or  assumes  any   |
    |   liability  or  responsibility  for the accuracy, completeness, or   |
    |   usefulness of any information,  apparatus,  product,  or  process   |
    |   disclosed,   or  represents  that  its  use  would  not  infringe   |
    |   privately-owned rights. Reference herein to any specific  commer-   |
    |   cial  products,  process,  or  service  by trade name, trademark,   |
    |   manufacturer, or otherwise, does not  necessarily  constitute  or   |
    |   imply  its endorsement, recommendation, or favoring by the United   |
    |   States Government or the University of California. The views  and   |
    |   opinions  of authors expressed herein do not necessarily state or   |
    |   reflect those of the United States Government or  the  University   |
    |   of  California,  and shall not be used for advertising or product   |
     \  endorsement purposes.                                              /
      ---------------------------------------------------------------------



File: python.info,  Node: MD5 message digest algorithm,  Next: Asynchronous socket services,  Prev: Floating point exception control,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.4 MD5 message digest algorithm
-----------------------------------

The source code for the *note md5: 10e. module contains the following
notice:

    Copyright (C) 1999, 2002 Aladdin Enterprises.  All rights reserved.

    This software is provided 'as-is', without any express or implied
    warranty.  In no event will the authors be held liable for any damages
    arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercial applications, and to alter it and redistribute it
    freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
       claim that you wrote the original software. If you use this software
       in a product, an acknowledgment in the product documentation would be
       appreciated but is not required.
    2. Altered source versions must be plainly marked as such, and must not be
       misrepresented as being the original software.
    3. This notice may not be removed or altered from any source distribution.

    L. Peter Deutsch
    ghost@aladdin.com

    Independent implementation of MD5 (RFC 1321).

    This code implements the MD5 Algorithm defined in RFC 1321, whose
    text is available at
          http://www.ietf.org/rfc/rfc1321.txt
    The code is derived from the text of the RFC, including the test suite
    (section A.5) but excluding the rest of Appendix A.  It does not include
    any code or documentation that is identified in the RFC as being
    copyrighted.

    The original and principal author of md5.h is L. Peter Deutsch
    <ghost@aladdin.com>.  Other authors are noted in the change history
    that follows (in reverse chronological order):

    2002-04-13 lpd Removed support for non-ANSI compilers; removed
          references to Ghostscript; clarified derivation from RFC 1321;
          now handles byte order either statically or dynamically.
    1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
    1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);
          added conditionalization for C++ compilation from Martin
          Purschke <purschke@bnl.gov>.
    1999-05-03 lpd Original version.



File: python.info,  Node: Asynchronous socket services,  Next: Cookie management,  Prev: MD5 message digest algorithm,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.5 Asynchronous socket services
-----------------------------------

The *note asynchat: 10. and *note asyncore: 11. modules contain the
following notice:

    Copyright 1996 by Sam Rushing

                            All Rights Reserved

    Permission to use, copy, modify, and distribute this software and
    its documentation for any purpose and without fee is hereby
    granted, provided that the above copyright notice appear in all
    copies and that both that copyright notice and this permission
    notice appear in supporting documentation, and that the name of Sam
    Rushing not be used in advertising or publicity pertaining to
    distribution of the software without specific, written prior
    permission.

    SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
    INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
    NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
    CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
    OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
    NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
    CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.



File: python.info,  Node: Cookie management,  Next: Profiling,  Prev: Asynchronous socket services,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.6 Cookie management
------------------------

The *note Cookie: 6f. module contains the following notice:

    Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>

                   All Rights Reserved

    Permission to use, copy, modify, and distribute this software
    and its documentation for any purpose and without fee is hereby
    granted, provided that the above copyright notice appear in all
    copies and that both that copyright notice and this permission
    notice appear in supporting documentation, and that the name of
    Timothy O'Malley  not be used in advertising or publicity
    pertaining to distribution of the software without specific, written
    prior permission.

    Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
    SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
    ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
    WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
    ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.



File: python.info,  Node: Profiling,  Next: Execution tracing,  Prev: Cookie management,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.7 Profiling
----------------

The *note profile: 13a. and *note pstats: 13b. modules contain the
following notice:

    Copyright 1994, by InfoSeek Corporation, all rights reserved.
    Written by James Roskind

    Permission to use, copy, modify, and distribute this Python software
    and its associated documentation for any purpose (subject to the
    restriction in the following sentence) without fee is hereby granted,
    provided that the above copyright notice appears in all copies, and
    that both that copyright notice and this permission notice appear in
    supporting documentation, and that the name of InfoSeek not be used in
    advertising or publicity pertaining to distribution of the software
    without specific, written prior permission.  This permission is
    explicitly restricted to the copying and modification of the software
    to remain in Python, compiled Python, or other languages (such as C)
    wherein the modified or derived code is exclusively imported into a
    Python module.

    INFOSEEK CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
    SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS. IN NO EVENT SHALL INFOSEEK CORPORATION BE LIABLE FOR ANY
    SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
    RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
    CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
    CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.



File: python.info,  Node: Execution tracing,  Next: UUencode and UUdecode functions,  Prev: Profiling,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.8 Execution tracing
------------------------

The *note trace: 181. module contains the following notice:

    portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
    err...  reserved and offered to the public under the terms of the
    Python 2.2 license.
    Author: Zooko O'Whielacronx
    http://zooko.com/
    mailto:zooko@zooko.com

    Copyright 2000, Mojam Media, Inc., all rights reserved.
    Author: Skip Montanaro

    Copyright 1999, Bioreason, Inc., all rights reserved.
    Author: Andrew Dalke

    Copyright 1995-1997, Automatrix, Inc., all rights reserved.
    Author: Skip Montanaro

    Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.


    Permission to use, copy, modify, and distribute this Python software and
    its associated documentation for any purpose without fee is hereby
    granted, provided that the above copyright notice appears in all copies,
    and that both that copyright notice and this permission notice appear in
    supporting documentation, and that the name of neither Automatrix,
    Bioreason or Mojam Media be used in advertising or publicity pertaining to
    distribution of the software without specific, written prior permission.



File: python.info,  Node: UUencode and UUdecode functions,  Next: XML Remote Procedure Calls,  Prev: Execution tracing,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.9 UUencode and UUdecode functions
--------------------------------------

The *note uu: 190. module contains the following notice:

    Copyright 1994 by Lance Ellinghouse
    Cathedral City, California Republic, United States of America.
                           All Rights Reserved
    Permission to use, copy, modify, and distribute this software and its
    documentation for any purpose and without fee is hereby granted,
    provided that the above copyright notice appear in all copies and that
    both that copyright notice and this permission notice appear in
    supporting documentation, and that the name of Lance Ellinghouse
    not be used in advertising or publicity pertaining to distribution
    of the software without specific, written prior permission.
    LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
    THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
    FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
    OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

    Modified by Jack Jansen, CWI, July 1995:
    - Use binascii module to do the actual line-by-line conversion
      between ascii and binary. This results in a 1000-fold speedup. The C
      version is still 5 times faster, though.
    - Arguments more compliant with Python standard



File: python.info,  Node: XML Remote Procedure Calls,  Next: test_epoll,  Prev: UUencode and UUdecode functions,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.10 XML Remote Procedure Calls
----------------------------------

The *note xmlrpclib: 1aa. module contains the following notice:

        The XML-RPC client interface is

    Copyright (c) 1999-2002 by Secret Labs AB
    Copyright (c) 1999-2002 by Fredrik Lundh

    By obtaining, using, and/or copying this software and/or its
    associated documentation, you agree that you have read, understood,
    and will comply with the following terms and conditions:

    Permission to use, copy, modify, and distribute this software and
    its associated documentation for any purpose and without fee is
    hereby granted, provided that the above copyright notice appears in
    all copies, and that both that copyright notice and this permission
    notice appear in supporting documentation, and that the name of
    Secret Labs AB or the author not be used in advertising or publicity
    pertaining to distribution of the software without specific, written
    prior permission.

    SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
    TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
    ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
    BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
    DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
    WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
    ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
    OF THIS SOFTWARE.



File: python.info,  Node: test_epoll,  Next: Select kqueue,  Prev: XML Remote Procedure Calls,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.11 test_epoll
------------------

The `test_epoll' contains the following notice:

    Copyright (c) 2001-2006 Twisted Matrix Laboratories.

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



File: python.info,  Node: Select kqueue,  Next: strtod and dtoa,  Prev: test_epoll,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.12 Select kqueue
---------------------

The *note select: 14f. and contains the following notice for the kqueue
interface:

    Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.



File: python.info,  Node: strtod and dtoa,  Next: OpenSSL,  Prev: Select kqueue,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.13 strtod and dtoa
-----------------------

The file `Python/dtoa.c', which supplies C functions dtoa and strtod
for conversion of C doubles to and from strings, is derived from the
file of the same name by David M. Gay, currently available from
<http://www.netlib.org/fp/>.  The original file, as retrieved on March
16, 2009, contains the following copyright and licensing notice:

    /****************************************************************
     *
     * The author of this software is David M. Gay.
     *
     * Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
     *
     * Permission to use, copy, modify, and distribute this software for any
     * purpose without fee is hereby granted, provided that this entire notice
     * is included in all copies of any software which is or includes a copy
     * or modification of this software and in all copies of the supporting
     * documentation for such software.
     *
     * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
     * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
     * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
     * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
     *
     ***************************************************************/



File: python.info,  Node: OpenSSL,  Next: expat,  Prev: strtod and dtoa,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.14 OpenSSL
---------------

The modules *note hashlib: e7, *note posix: 137, *note ssl: 161, *note
crypt: 75. use the OpenSSL library for added performance if made
available by the operating system. Additionally, the Windows installers
for Python include a copy of the OpenSSL libraries, so we include a
copy of the OpenSSL license here:

     LICENSE ISSUES
     ==============

     The OpenSSL toolkit stays under a dual license, i.e. both the conditions of
     the OpenSSL License and the original SSLeay license apply to the toolkit.
     See below for the actual license texts. Actually both licenses are BSD-style
     Open Source licenses. In case of any license issues related to OpenSSL
     please contact openssl-core@openssl.org.

     OpenSSL License
     ---------------

       /* ====================================================================
        * Copyright (c) 1998-2008 The OpenSSL Project.  All rights reserved.
        *
        * Redistribution and use in source and binary forms, with or without
        * modification, are permitted provided that the following conditions
        * are met:
        *
        * 1. Redistributions of source code must retain the above copyright
        *    notice, this list of conditions and the following disclaimer.
        *
        * 2. Redistributions in binary form must reproduce the above copyright
        *    notice, this list of conditions and the following disclaimer in
        *    the documentation and/or other materials provided with the
        *    distribution.
        *
        * 3. All advertising materials mentioning features or use of this
        *    software must display the following acknowledgment:
        *    "This product includes software developed by the OpenSSL Project
        *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
        *
        * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        *    endorse or promote products derived from this software without
        *    prior written permission. For written permission, please contact
        *    openssl-core@openssl.org.
        *
        * 5. Products derived from this software may not be called "OpenSSL"
        *    nor may "OpenSSL" appear in their names without prior written
        *    permission of the OpenSSL Project.
        *
        * 6. Redistributions of any form whatsoever must retain the following
        *    acknowledgment:
        *    "This product includes software developed by the OpenSSL Project
        *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
        *
        * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        * OF THE POSSIBILITY OF SUCH DAMAGE.
        * ====================================================================
        *
        * This product includes cryptographic software written by Eric Young
        * (eay@cryptsoft.com).  This product includes software written by Tim
        * Hudson (tjh@cryptsoft.com).
        *
        */

    Original SSLeay License
    -----------------------

       /* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        * All rights reserved.
        *
        * This package is an SSL implementation written
        * by Eric Young (eay@cryptsoft.com).
        * The implementation was written so as to conform with Netscapes SSL.
        *
        * This library is free for commercial and non-commercial use as long as
        * the following conditions are aheared to.  The following conditions
        * apply to all code found in this distribution, be it the RC4, RSA,
        * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        * included with this distribution is covered by the same copyright terms
        * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        *
        * Copyright remains Eric Young's, and as such any Copyright notices in
        * the code are not to be removed.
        * If this package is used in a product, Eric Young should be given attribution
        * as the author of the parts of the library used.
        * This can be in the form of a textual message at program startup or
        * in documentation (online or textual) provided with the package.
        *
        * Redistribution and use in source and binary forms, with or without
        * modification, are permitted provided that the following conditions
        * are met:
        * 1. Redistributions of source code must retain the copyright
        *    notice, this list of conditions and the following disclaimer.
        * 2. Redistributions in binary form must reproduce the above copyright
        *    notice, this list of conditions and the following disclaimer in the
        *    documentation and/or other materials provided with the distribution.
        * 3. All advertising materials mentioning features or use of this software
        *    must display the following acknowledgement:
        *    "This product includes cryptographic software written by
        *     Eric Young (eay@cryptsoft.com)"
        *    The word 'cryptographic' can be left out if the rouines from the library
        *    being used are not cryptographic related :-).
        * 4. If you include any Windows specific code (or a derivative thereof) from
        *    the apps directory (application code) you must include an acknowledgement:
        *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        *
        * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        * SUCH DAMAGE.
        *
        * The licence and distribution terms for any publically available version or
        * derivative of this code cannot be changed.  i.e. this code cannot simply be
        * copied and put under another distribution licence
        * [including the GNU Public Licence.]
        */



File: python.info,  Node: expat,  Next: libffi,  Prev: OpenSSL,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.15 expat
-------------

The `pyexpat' extension is built using an included copy of the expat
sources unless the build is configured `--with-system-expat':

    Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
                                   and Clark Cooper

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



File: python.info,  Node: libffi,  Next: zlib,  Prev: expat,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.16 libffi
--------------

The `_ctypes' extension is built using an included copy of the libffi
sources unless the build is configured `--with-system-libffi':

    Copyright (c) 1996-2008  Red Hat, Inc and others.

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    ``Software''), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.



File: python.info,  Node: zlib,  Prev: libffi,  Up: Licenses and Acknowledgements for Incorporated Software

17.3.17 zlib
------------

The *note zlib: 1ad. extension is built using an included copy of the
zlib sources unless the zlib version found on the system is too old to
be used for the build:

    Copyright (C) 1995-2010 Jean-loup Gailly and Mark Adler

    This software is provided 'as-is', without any express or implied
    warranty.  In no event will the authors be held liable for any damages
    arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercial applications, and to alter it and redistribute it
    freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
       claim that you wrote the original software. If you use this software
       in a product, an acknowledgment in the product documentation would be
       appreciated but is not required.

    2. Altered source versions must be plainly marked as such, and must not be
       misrepresented as being the original software.

    3. This notice may not be removed or altered from any source distribution.

    Jean-loup Gailly        Mark Adler
    jloup@gzip.org          madler@alumni.caltech.edu



File: python.info,  Node: Python Module Index,  Next: Index,  Prev: History and License,  Up: Top

Python Module Index
*******************

* Menu:

* __builtin__: 0. The module that provides the built-in namespace.
* __future__: 1. Future statement definitions
* __main__: 2. The environment where the top-level script is run.
* _winreg: 3. Routines and objects for manipulating the Windows
                        registry.
* abc: 4. Abstract base classes according to PEP 3119.
* aepack: 5. Conversion between Python variables and AppleEvent
                        data containers.
* aetools: 6. Basic support for sending Apple Events
* aetypes: 7. Python representation of the Apple Event Object Model.
* aifc: 8. Read and write audio files in AIFF or AIFC format.
* al: 9. Audio functions on the SGI.
* AL: a. Constants used with the al module.
* anydbm: b. Generic interface to DBM-style database modules.
* applesingle: c. Rudimentary decoder for AppleSingle format files.
* argparse: d. Command-line option and argument-parsing library.
* array: e. Space efficient arrays of uniformly typed numeric
                        values.
* ast: f. Abstract Syntax Tree classes and manipulation.
* asynchat: 10. Support for asynchronous command/response protocols.
* asyncore: 11. A base class for developing asynchronous socket
                        handling services.
* atexit: 12. Register and execute cleanup functions.
* audioop: 13. Manipulate raw audio data.
* autoGIL: 14. Global Interpreter Lock handling in event loops.
* base64: 15. RFC 3548: Base16, Base32, Base64 Data
                        Encodings
* BaseHTTPServer: 16. Basic HTTP server (base class for SimpleHTTPServer and
                        CGIHTTPServer).
* Bastion: 17. Providing restricted access to objects.
* bdb: 18. Debugger framework.
* binascii: 19. Tools for converting between binary and various ASCII-
                        encoded binary representations.
* binhex: 1a. Encode and decode files in binhex4 format.
* bisect: 1b. Array bisection algorithms for binary searching.
* bsddb: 1c. Interface to Berkeley DB database library
* buildtools: 1d. Helper module for BuildApplet, BuildApplication
                        and macfreeze.
* bz2: 1e. Interface to compression and decompression routines
                        compatible with bzip2.
* calendar: 1f. Functions for working with calendars, including
                        some emulation of the Unix cal program.
* Carbon.AE: 20. Interface to the Apple Events toolbox.
* Carbon.AH: 21. Interface to the Apple Help manager.
* Carbon.App: 22. Interface to the Appearance Manager.
* Carbon.Appearance: 23. Constant definitions for the interface to the
                        Appearance Manager.
* Carbon.CarbonEvents: 24. Constants for the interface to the Carbon Event
                        Manager.
* Carbon.CarbonEvt: 25. Interface to the Carbon Event Manager.
* Carbon.CF: 26. Interface to the Core Foundation.
* Carbon.CG: 27. Interface to Core Graphics.
* Carbon.Cm: 28. Interface to the Component Manager.
* Carbon.Components: 29. Constants for the interface to the Component Manager.
* Carbon.ControlAccessor: 2a. Accessor functions for the interface to the Control
                          Manager.
* Carbon.Controls: 2b. Constants for the interface to the Control Manager.
* Carbon.CoreFounation: 2c. Constants for the interface to CoreFoundation.
* Carbon.CoreGraphics: 2d. Constants for the interface to CoreGraphics.
* Carbon.Ctl: 2e. Interface to the Control Manager.
* Carbon.Dialogs: 2f. Constants for the interface to the Dialog Manager.
* Carbon.Dlg: 30. Interface to the Dialog Manager.
* Carbon.Drag: 31. Interface to the Drag and Drop Manager.
* Carbon.Dragconst: 32. Constants for the interface to the Drag and Drop
                        Manager.
* Carbon.Events: 33. Constants for the interface to the classic Event
                        Manager.
* Carbon.Evt: 34. Interface to the classic Event Manager.
* Carbon.File: 35. Interface to the File Manager.
* Carbon.Files: 36. Constants for the interface to the File Manager.
* Carbon.Fm: 37. Interface to the Font Manager.
* Carbon.Folder: 38. Interface to the Folder Manager.
* Carbon.Folders: 39. Constants for the interface to the Folder Manager.
* Carbon.Fonts: 3a. Constants for the interface to the Font Manager.
* Carbon.Help: 3b. Interface to the Carbon Help Manager.
* Carbon.IBCarbon: 3c. Interface to the Carbon InterfaceBuilder support
                        libraries.
* Carbon.IBCarbonRuntime: 3d. Constants for the interface to the Carbon
                          InterfaceBuilder support libraries.
* Carbon.Icns: 3e. Interface to the Carbon Icon Manager
* Carbon.Icons: 3f. Constants for the interface to the Carbon Icon Manager
* Carbon.Launch: 40. Interface to the Carbon Launch Services.
* Carbon.LaunchServices: 41. Constants for the interface to the Carbon Launch
                         Services.
* Carbon.List: 42. Interface to the List Manager.
* Carbon.Lists: 43. Constants for the interface to the List Manager.
* Carbon.MacHelp: 44. Constants for the interface to the Carbon Help
                        Manager.
* Carbon.MediaDescr: 45. Parsers and generators for Quicktime Media descriptors
* Carbon.Menu: 46. Interface to the Menu Manager.
* Carbon.Menus: 47. Constants for the interface to the Menu Manager.
* Carbon.Mlte: 48. Interface to the MultiLingual Text Editor.
* Carbon.OSA: 49. Interface to the Carbon OSA Library.
* Carbon.OSAconst: 4a. Constants for the interface to the Carbon OSA Library.
* Carbon.Qd: 4b. Interface to the QuickDraw toolbox.
* Carbon.Qdoffs: 4c. Interface to the QuickDraw Offscreen APIs.
* Carbon.QDOffscreen: 4d. Constants for the interface to the QuickDraw Offscreen
                        APIs.
* Carbon.Qt: 4e. Interface to the QuickTime toolbox.
* Carbon.QuickDraw: 4f. Constants for the interface to the QuickDraw toolbox.
* Carbon.QuickTime: 50. Constants for the interface to the QuickTime toolbox.
* Carbon.Res: 51. Interface to the Resource Manager and Handles.
* Carbon.Resources: 52. Constants for the interface to the Resource Manager
                        and Handles.
* Carbon.Scrap: 53. The Scrap Manager provides basic services for
                        implementing cut & paste and clipboard operations.
* Carbon.Snd: 54. Interface to the Sound Manager.
* Carbon.Sound: 55. Constants for the interface to the Sound Manager.
* Carbon.TE: 56. Interface to TextEdit.
* Carbon.TextEdit: 57. Constants for the interface to TextEdit.
* Carbon.Win: 58. Interface to the Window Manager.
* Carbon.Windows: 59. Constants for the interface to the Window Manager.
* cd: 5a. Interface to the CD-ROM on Silicon Graphics systems.
* cfmfile: 5b. Code Fragment Resource module.
* cgi: 5c. Helpers for running Python scripts via the Common
                        Gateway Interface.
* CGIHTTPServer: 5d. This module provides a request handler for HTTP
                        servers which can run CGI scripts.
* cgitb: 5e. Configurable traceback handler for CGI scripts.
* chunk: 5f. Module to read IFF chunks.
* cmath: 60. Mathematical functions for complex numbers.
* cmd: 61. Build line-oriented command interpreters.
* code: 62. Facilities to implement read-eval-print loops.
* codecs: 63. Encode and decode data and streams.
* codeop: 64. Compile (possibly incomplete) Python code.
* collections: 65. High-performance datatypes
* ColorPicker: 66. Interface to the standard color selection dialog.
* colorsys: 67. Conversion functions between RGB and other color
                        systems.
* commands: 68. Utility functions for running external commands.
* compileall: 69. Tools for byte-compiling all Python source files in a
                        directory tree.
* compiler: 6a. Python code compiler written in Python.
* compiler.ast: 6b.
* compiler.visitor: 6c.
* ConfigParser: 6d. Configuration file parser.
* contextlib: 6e. Utilities for with-statement contexts.
* Cookie: 6f. Support for HTTP state management (cookies).
* cookielib: 70. Classes for automatic handling of HTTP cookies.
* copy: 71. Shallow and deep copy operations.
* copy_reg: 72. Register pickle support functions.
* cPickle: 73. Faster version of pickle, but not subclassable.
* cProfile: 74. Python profiler
* crypt: 75. The crypt() function used to check Unix passwords.
* cStringIO: 76. Faster version of StringIO, but not
                        subclassable.
* csv: 77. Write and read tabular data to and from delimited
                        files.
* ctypes: 78. A foreign function library for Python.
* curses: 79. An interface to the curses library, providing
                        portable terminal handling.
* curses.ascii: 7a. Constants and set-membership functions for ASCII
                        characters.
* curses.panel: 7b. A panel stack extension that adds depth to curses
                        windows.
* curses.textpad: 7c. Emacs-like input editing in a curses window.
* curses.wrapper: 7d. Terminal configuration wrapper for curses programs.
* datetime: 7e. Basic date and time types.
* dbhash: 7f. DBM-style interface to the BSD database library.
* dbm: 80. The standard "database" interface, based on
                        ndbm.
* decimal: 81. Implementation of the General Decimal Arithmetic
                        Specification.
* DEVICE: 82. Constants used with the gl module.
* difflib: 83. Helpers for computing differences between objects.
* dircache: 84. Return directory listing, with cache mechanism.
* dis: 85. Disassembler for Python bytecode.
* distutils: 86. Support for building and installing Python modules
                        into an existing Python installation.
* distutils.archive_util: 87. Utility functions for creating archive files
                          (tarballs, zip files, ...)
* distutils.bcppcompiler: 88.
* distutils.ccompiler: 89. Abstract CCompiler class
* distutils.cmd: 8a. This module provides the abstract base class Command.
                        This class is subclassed by the modules in the
                        distutils.command subpackage.
* distutils.command: 8b. This subpackage contains one module for each standard
                        Distutils command.
* distutils.command.bdist: 8c. Build a binary installer for a package
* distutils.command.bdist_dumb: 8d. Build a "dumb" installer - a simple archive of
                                files
* distutils.command.bdist_msi: 8e. Build a binary distribution as a Windows MSI
                               file
* distutils.command.bdist_packager: 8f. Abstract base class for packagers
* distutils.command.bdist_rpm: 90. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: 91. Build a Windows installer
* distutils.command.build: 92. Build all files of a package
* distutils.command.build_clib: 93. Build any C libraries in a package
* distutils.command.build_ext: 94. Build any extensions in a package
* distutils.command.build_py: 95. Build the .py/.pyc files of a package
* distutils.command.build_scripts: 96. Build the scripts of a package
* distutils.command.check: 97. Check the metadata of a package
* distutils.command.clean: 98. Clean a package build area
* distutils.command.config: 99. Perform package configuration
* distutils.command.install: 9a. Install a package
* distutils.command.install_data: 9b. Install data files from a package
* distutils.command.install_headers: 9c. Install C/C++ header files from a package
* distutils.command.install_lib: 9d. Install library files from a package
* distutils.command.install_scripts: 9e. Install script files from a package
* distutils.command.register: 9f. Register a module with the Python Package Index
* distutils.command.sdist: a0. Build a source distribution
* distutils.core: a1. The core Distutils functionality
* distutils.cygwinccompiler: a2.
* distutils.debug: a3. Provides the debug flag for distutils
* distutils.dep_util: a4. Utility functions for simple dependency checking
* distutils.dir_util: a5. Utility functions for operating on directories and
                        directory trees
* distutils.dist: a6. Provides the Distribution class, which
                        represents the module distribution being
                        built/installed/distributed
* distutils.emxccompiler: a7. OS/2 EMX Compiler support
* distutils.errors: a8. Provides standard distutils exceptions
* distutils.extension: a9. Provides the Extension class, used to describe
                        C/C++ extension modules in setup scripts
* distutils.fancy_getopt: aa. Additional getopt functionality
* distutils.file_util: ab. Utility functions for operating on single files
* distutils.filelist: ac. The FileList class, used for poking about the
                        file system and building lists of files.
* distutils.log: ad. A simple logging mechanism, 282-style
* distutils.msvccompiler: ae. Microsoft Compiler
* distutils.spawn: af. Provides the spawn() function
* distutils.sysconfig: b0. Low-level access to configuration information of the
                        Python interpreter.
* distutils.text_file: b1. provides the TextFile class, a simple interface
                        to text files
* distutils.unixccompiler: b2. UNIX C Compiler
* distutils.util: b3. Miscellaneous other utility functions
* distutils.version: b4. implements classes that represent module version
                        numbers.
* dl: b5. Call C functions in shared objects.
* doctest: b6. Test pieces of code within docstrings.
* DocXMLRPCServer: b7. Self-documenting XML-RPC server implementation.
* dumbdbm: b8. Portable implementation of the simple DBM interface.
* dummy_thread: b9. Drop-in replacement for the thread module.
* dummy_threading: ba. Drop-in replacement for the threading module.
* EasyDialogs: bb. Basic Macintosh dialogs.
* email: bc. Package supporting the parsing,
                        manipulating, and generating email
                        messages, including MIME documents.
* email.charset: bd. Character Sets
* email.encoders: be. Encoders for email message payloads.
* email.errors: bf. The exception classes used by the email package.
* email.generator: c0. Generate flat text email messages from a message
                        structure.
* email.header: c1. Representing non-ASCII headers
* email.iterators: c2. Iterate over a message object tree.
* email.message: c3. The base class representing email messages.
* email.mime: c4. Build MIME messages.
* email.parser: c5. Parse flat text email messages to produce a message
                        object structure.
* email.utils: c6. Miscellaneous email package utilities.
* encodings.idna: c7. Internationalized Domain Names implementation
* encodings.utf_8_sig: c8. UTF-8 codec with BOM signature
* errno: c9. Standard errno system symbols.
* exceptions: ca. Standard exception classes.
* fcntl: cb. The fcntl() and ioctl() system calls.
* filecmp: cc. Compare files efficiently.
* fileinput: cd. Loop over standard input or a list of files.
* findertools: ce. Wrappers around the finder's Apple Events interface.
* FL: cf. Constants used with the fl module.
* fl: d0. FORMS library for applications with graphical user
                        interfaces.
* flp: d1. Functions for loading stored FORMS designs.
* fm: d2. Font Manager interface for SGI workstations.
* fnmatch: d3. Unix shell style filename pattern matching.
* formatter: d4. Generic output formatter and device interface.
* fpectl: d5. Provide control for floating point exception handling.
* fpformat: d6. General floating point formatting functions.
* fractions: d7. Rational numbers.
* FrameWork: d8. Interactive application framework.
* ftplib: d9. FTP protocol client (requires sockets).
* functools: da. Higher order functions and operations on callable
                        objects.
* future_builtins: db.
* gc: dc. Interface to the cycle-detecting garbage collector.
* gdbm: dd. GNU's reinterpretation of dbm.
* gensuitemodule: de. Create a stub package from an OSA dictionary
* getopt: df. Portable parser for command line options; support both
                        short and long option names.
* getpass: e0. Portable reading of passwords and retrieval of the
                        userid.
* gettext: e1. Multilingual internationalization services.
* gl: e2. Functions from the Silicon Graphics Graphics Library.
* GL: e3. Constants used with the gl module.
* glob: e4. Unix shell style pathname pattern expansion.
* grp: e5. The group database (getgrnam() and friends).
* gzip: e6. Interfaces for gzip compression and decompression
                        using file objects.
* hashlib: e7. Secure hash and message digest algorithms.
* heapq: e8. Heap queue algorithm (a.k.a. priority queue).
* hmac: e9. Keyed-Hashing for Message Authentication (HMAC)
                        implementation for Python.
* hotshot: ea. High performance logging profiler, mostly
                        written in C.
* hotshot.stats: eb. Statistical analysis for Hotshot
* htmlentitydefs: ec. Definitions of HTML general entities.
* htmllib: ed. A parser for HTML documents.
* HTMLParser: ee. A simple parser that can handle HTML and XHTML.
* httplib: ef. HTTP and HTTPS protocol client (requires sockets).
* ic: f0. Access to the Mac OS X Internet Config.
* icopen: f1. Internet Config replacement for open().
* imageop: f2. Manipulate raw image data.
* imaplib: f3. IMAP4 protocol client (requires sockets).
* imgfile: f4. Support for SGI imglib files.
* imghdr: f5. Determine the type of image contained in a file or
                        byte stream.
* imp: f6. Access the implementation of the import statement.
* importlib: f7. Convenience wrappers for __import__
* imputil: f8. Manage and augment the import process.
* inspect: f9. Extract information and source code from live objects.
* io: fa. Core tools for working with streams.
* itertools: fb. Functions creating iterators for efficient looping.
* jpeg: fc. Read and write image files in compressed JPEG format.
* json: fd. Encode and decode the JSON format.
* keyword: fe. Test whether a string is a keyword in Python.
* lib2to3: ff. the 2to3 library
* linecache: 100. This module provides random access to individual lines
                        from text files.
* locale: 101. Internationalization services.
* logging: 102. Flexible event logging system for applications.
* logging.config: 103. Configuration of the logging module.
* logging.handlers: 104. Handlers for the logging module.
* macerrors: 105. Constant definitions for many Mac OS error codes.
* MacOS: 106. Access to Mac OS-specific interpreter features.
* macostools: 107. Convenience routines for file manipulation.
* macpath: 108. Mac OS 9 path manipulation functions.
* macresource: 109. Locate script resources.
* mailbox: 10a. Manipulate mailboxes in various formats
* mailcap: 10b. Mailcap file handling.
* marshal: 10c. Convert Python objects to streams of bytes and back
                        (with different constraints).
* math: 10d. Mathematical functions (sin() etc.).
* md5: 10e. RSA's MD5 message digest algorithm.
* mhlib: 10f. Manipulate MH mailboxes from Python.
* mimetools: 110. Tools for parsing MIME-style message bodies.
* mimetypes: 111. Mapping of filename extensions to MIME types.
* MimeWriter: 112. Write MIME format files.
* mimify: 113. Mimification and unmimification of mail messages.
* MiniAEFrame: 114. Support to act as an Open Scripting Architecture (OSA)
                        server ("Apple Events").
* mmap: 115. Interface to memory-mapped files for Unix and Windows.
* modulefinder: 116. Find modules used by a script.
* msilib: 117. Creation of Microsoft Installer files, and CAB
                        files.
* msvcrt: 118. Miscellaneous useful routines from the MS VC++
                        runtime.
* multifile: 119. Support for reading files which contain distinct
                        parts, such as some MIME data.
* multiprocessing: 11a. Process-based "threading" interface.
* multiprocessing.connection: 11b. API for dealing with sockets.
* multiprocessing.dummy: 11c. Dumb wrapper around threading.
* multiprocessing.managers: 11d. Share data between process with shared objects.
* multiprocessing.pool: 11e. Create pools of processes.
* multiprocessing.sharedctypes: 11f. Allocate ctypes objects from shared memory.
* mutex: 120. Lock and queue for mutual exclusion.
* Nav: 121. Interface to Navigation Services.
* netrc: 122. Loading of .netrc files.
* new: 123. Interface to the creation of runtime implementation
                        objects.
* nis: 124. Interface to Sun's NIS (Yellow Pages) library.
* nntplib: 125. NNTP protocol client (requires sockets).
* numbers: 126. Numeric abstract base classes (Complex,
                        Real, Integral, etc.).
* operator: 127. Functions corresponding to the standard operators.
* optparse: 128. Command-line option parsing library.
* os: 129. Miscellaneous operating system interfaces.
* os.path: 12a. Operations on pathnames.
* ossaudiodev: 12b. Access to OSS-compatible audio devices.
* parser: 12c. Access parse trees for Python source code.
* pdb: 12d. The Python debugger for interactive interpreters.
* pickle: 12e. Convert Python objects to streams of bytes and back.
* pickletools: 12f. Contains extensive comments about the pickle protocols
                        and pickle-machine opcodes, as well as some
                        useful functions.
* pipes: 130. A Python interface to Unix shell pipelines.
* PixMapWrapper: 131. Wrapper for PixMap objects.
* pkgutil: 132. Utilities for the import system.
* platform: 133. Retrieves as much platform identifying data as
                        possible.
* plistlib: 134. Generate and parse Mac OS X plist files.
* popen2: 135. Subprocesses with accessible standard I/O streams.
* poplib: 136. POP3 protocol client (requires sockets).
* posix: 137. The most common POSIX system calls (normally used via
                        module os).
* posixfile: 138. A file-like object with support for locking.
* pprint: 139. Data pretty printer.
* profile: 13a. Python source profiler.
* pstats: 13b. Statistics object for use with the profiler.
* pty: 13c. Pseudo-Terminal Handling for Linux.
* pwd: 13d. The password database (getpwnam() and friends).
* py_compile: 13e. Generate byte-code files from Python source files.
* pyclbr: 13f. Supports information extraction for a Python class
                        browser.
* pydoc: 140. Documentation generator and online help system.
* Queue: 141. A synchronized queue class.
* quopri: 142. Encode and decode files using the MIME quoted-
                        printable encoding.
* random: 143. Generate pseudo-random numbers with various common
                        distributions.
* re: 144. Regular expression operations.
* readline: 145. GNU readline support for Python.
* repr: 146. Alternate repr() implementation with size limits.
* resource: 147. An interface to provide resource usage information on
                        the current process.
* rexec: 148. Basic restricted execution framework.
* rfc822: 149. Parse 2822 style mail messages.
* rlcompleter: 14a. Python identifier completion, suitable for the
                        GNU readline library.
* robotparser: 14b. Loads a robots.txt file and answers questions about
                        fetchability of other URLs.
* runpy: 14c. Locate and run Python modules without importing them
                        first.
* sched: 14d. General purpose event scheduler.
* ScrolledText: 14e. Text widget with a vertical scroll bar.
* select: 14f. Wait for I/O completion on multiple streams.
* sets: 150. Implementation of sets of unique elements.
* sgmllib: 151. Only as much of an SGML parser as needed to parse
                        HTML.
* sha: 152. NIST's secure hash algorithm, SHA.
* shelve: 153. Python object persistence.
* shlex: 154. Simple lexical analysis for Unix shell-like languages.
* shutil: 155. High-level file operations, including copying.
* signal: 156. Set handlers for asynchronous events.
* SimpleHTTPServer: 157. This module provides a basic request handler for HTTP
                        servers.
* SimpleXMLRPCServer: 158. Basic XML-RPC server implementation.
* site: 159. A standard way to reference site-specific modules.
* smtpd: 15a. A SMTP server implementation in Python.
* smtplib: 15b. SMTP protocol client (requires sockets).
* sndhdr: 15c. Determine type of a sound file.
* socket: 15d. Low-level networking interface.
* SocketServer: 15e. A framework for network servers.
* spwd: 15f. The shadow password database (getspnam() and friends).
* sqlite3: 160. A DB-API 2.0 implementation using SQLite 3.x.
* ssl: 161. TLS/SSL wrapper for socket objects
* stat: 162. Utilities for interpreting the results of
                        os.stat(), os.lstat() and os.fstat().
* statvfs: 163. Constants for interpreting the result of os.statvfs().
* string: 164. Common string operations.
* StringIO: 165. Read and write strings as if they were files.
* stringprep: 166. String preparation, as per RFC 3453
* struct: 167. Interpret strings as packed binary data.
* subprocess: 168. Subprocess management.
* sunau: 169. Provide an interface to the Sun AU sound format.
* sunaudiodev: 16a. Access to Sun audio hardware.
* SUNAUDIODEV: 16b. Constants for use with sunaudiodev.
* symbol: 16c. Constants representing internal nodes of the parse
                        tree.
* symtable: 16d. Interface to the compiler's internal symbol tables.
* sys: 16e. Access system-specific parameters and functions.
* sysconfig: 16f. Python's configuration information
* syslog: 170. An interface to the Unix syslog library routines.
* tabnanny: 171. Tool for detecting white space related problems in
                        Python source files in a directory tree.
* tarfile: 172. Read and write tar-format archive files.
* telnetlib: 173. Telnet client class.
* tempfile: 174. Generate temporary files and directories.
* termios: 175. POSIX style tty control.
* test: 176. Regression tests package containing the testing suite
                        for Python.
* test.test_support: 177. Support for Python regression tests.
* textwrap: 178. Text wrapping and filling
* thread: 179. Create multiple threads of control within one
                        interpreter.
* threading: 17a. Higher-level threading interface.
* time: 17b. Time access and conversions.
* timeit: 17c. Measure the execution time of small code snippets.
* Tix: 17d. Tk Extension Widgets for Tkinter
* Tkinter: 17e. Interface to Tcl/Tk for graphical user interfaces
* token: 17f. Constants representing terminal nodes of the parse
                        tree.
* tokenize: 180. Lexical scanner for Python source code.
* trace: 181. Trace or track Python statement execution.
* traceback: 182. Print or retrieve a stack traceback.
* ttk: 183. Tk themed widget set
* tty: 184. Utility functions that perform common terminal control
                        operations.
* turtle: 185. Turtle graphics for Tk
* types: 186. Names for built-in types.
* unicodedata: 187. Access the Unicode Database.
* unittest: 188. Unit testing framework for Python.
* urllib: 189. Open an arbitrary network resource by URL (requires
                        sockets).
* urllib2: 18a. Next generation URL opening library.
* urlparse: 18b. Parse URLs into or assemble them from components.
* user: 18c. A standard way to reference user-specific modules.
* UserDict: 18d. Class wrapper for dictionary objects.
* UserList: 18e. Class wrapper for list objects.
* UserString: 18f. Class wrapper for string objects.
* uu: 190. Encode and decode files in uuencode format.
* uuid: 191. UUID objects (universally unique identifiers)
                        according to RFC 4122
* videoreader: 192. Read QuickTime movies frame by frame for further
                        processing.
* W: 193. Widgets for the Mac, built on top of FrameWork.
* warnings: 194. Issue warning messages and control their disposition.
* wave: 195. Provide an interface to the WAV sound format.
* weakref: 196. Support for weak references and weak dictionaries.
* webbrowser: 197. Easy-to-use controller for Web browsers.
* whichdb: 198. Guess which DBM-style module created a given database.
* winsound: 199. Access to the sound-playing machinery for Windows.
* wsgiref: 19a. WSGI Utilities and Reference Implementation.
* wsgiref.handlers: 19b. WSGI server/gateway base classes.
* wsgiref.headers: 19c. WSGI response header tools.
* wsgiref.simple_server: 19d. A simple WSGI HTTP server.
* wsgiref.util: 19e. WSGI environment utilities.
* wsgiref.validate: 19f. WSGI conformance checker.
* xdrlib: 1a0. Encoders and decoders for the External Data
                        Representation (XDR).
* xml.dom: 1a1. Document Object Model API for Python.
* xml.dom.minidom: 1a2. Lightweight Document Object Model (DOM)
                        implementation.
* xml.dom.pulldom: 1a3. Support for building partial DOM trees from SAX
                        events.
* xml.etree.ElementTree: 1a4. Implementation of the ElementTree API.
* xml.parsers.expat: 1a5. An interface to the Expat non-validating XML parser.
* xml.sax: 1a6. Package containing SAX2 base classes and convenience
                        functions.
* xml.sax.handler: 1a7. Base classes for SAX event handlers.
* xml.sax.saxutils: 1a8. Convenience functions and classes for use with SAX.
* xml.sax.xmlreader: 1a9. Interface which SAX-compliant XML parsers must
                        implement.
* xmlrpclib: 1aa. XML-RPC client access.
* zipfile: 1ab. Read and write ZIP-format archive files.
* zipimport: 1ac. support for importing Python modules from ZIP
                        archives.
* zlib: 1ad. Low-level interface to compression and decompression
                        routines compatible with gzip.

