This is python.info, produced by makeinfo version 4.8 from
build/texinfo/python.texi.

Generated by Sphinx 1.1pre.
INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY

     Python 2.7.2, April 02, 2012

     Georg Brandl

     Copyright (C) 1990-2012, Python Software Foundation


File: python.info,  Node: For extension writers and programs that embed Python,  Next: Access to message catalogs,  Prev: Background details hints tips and caveats,  Up: locale --- Internationalization services

5.22.2.2 For extension writers and programs that embed Python
.............................................................

Extension modules should never call *note setlocale(): 933, except to
find out what the current locale is.  But since the return value can
only be used portably to restore it, that is not very useful (except
perhaps to find out whether or not the locale is `C').

  When Python code uses the *note locale: 101. module to change the
locale, this also affects the embedding application.  If the embedding
application doesn't want this to happen, it should remove the `_locale'
extension module (which does all the work) from the table of built-in
modules in the `config.c' file, and make sure that the `_locale' module
is not accessible as a shared library.


File: python.info,  Node: Access to message catalogs,  Prev: For extension writers and programs that embed Python,  Up: locale --- Internationalization services

5.22.2.3 Access to message catalogs
...................................

The locale module exposes the C library's gettext interface on systems
that provide this interface.  It consists of the functions *note
gettext(): e1, `dgettext()', `dcgettext()', `textdomain()',
`bindtextdomain()', and `bind_textdomain_codeset()'.  These are similar
to the same functions in the *note gettext: e1. module, but use the C
library's binary format for message catalogs, and the C library's
search algorithms for locating message catalogs.

  Python applications should normally find no need to invoke these
functions, and should use *note gettext: e1. instead.  A known
exception to this rule are applications that link with additional C
libraries which internally invoke `gettext()' or `dcgettext()'.  For
these applications, it may be necessary to bind the text domain, so
that the libraries can properly locate their message catalogs.


File: python.info,  Node: Program Frameworks,  Next: Graphical User Interfaces with Tk,  Prev: Internationalization,  Up: The Python Standard Library

5.23 Program Frameworks
=======================

The modules described in this chapter are frameworks that will largely
dictate the structure of your program.  Currently the modules described
here are all oriented toward writing command-line interfaces.

  The full list of modules described in this chapter is:

* Menu:

* cmd: cmd --- Support for line-oriented command interpreters. Support for line-oriented command interpreters
* shlex: shlex --- Simple lexical analysis. Simple lexical analysis

cmd --- Support for line-oriented command interpreters

* Cmd Objects::

shlex --- Simple lexical analysis

* shlex Objects::
* Parsing Rules::


File: python.info,  Node: cmd --- Support for line-oriented command interpreters,  Next: shlex --- Simple lexical analysis,  Up: Program Frameworks

5.23.1 `cmd' -- Support for line-oriented command interpreters
--------------------------------------------------------------

The *note Cmd: 1fb8. class provides a simple framework for writing
line-oriented command interpreters.  These are often useful for test
harnesses, administrative tools, and prototypes that will later be
wrapped in a more sophisticated interface.

See also
........

Latest version of the cmd module Python source code(1)

 -- Class: cmd.Cmd ([completekey[, stdin[, stdout]]])
     A *note Cmd: 1fb8. instance or subclass instance is a
     line-oriented interpreter framework.  There is no good reason to
     instantiate *note Cmd: 1fb8. itself; rather, it's useful as a
     superclass of an interpreter class you define yourself in order to
     inherit *note Cmd: 1fb8.'s methods and encapsulate action methods.

     The optional argument _completekey_ is the *note readline: 145.
     name of a completion key; it defaults to `Tab'. If _completekey_
     is not *note None: 389. and *note readline: 145. is available,
     command completion is done automatically.

     The optional arguments _stdin_ and _stdout_ specify the  input and
     output file objects that the Cmd instance or subclass  instance
     will use for input and output. If not specified, they will default
     to *note sys.stdin: 611. and *note sys.stdout: 853.

     If you want a given _stdin_ to be used, make sure to set the
     instance's *note use_rawinput: 1fb9. attribute to `False',
     otherwise _stdin_ will be ignored.

     Changed in version 2.3: The _stdin_ and _stdout_ parameters were
     added.

* Menu:

* Cmd Objects::

  ---------- Footnotes ----------

  (1)
http://svn.python.org/view/python/branches/release27-maint/Lib/cmd.py?view=markup


File: python.info,  Node: Cmd Objects,  Up: cmd --- Support for line-oriented command interpreters

5.23.1.1 Cmd Objects
....................

A *note Cmd: 1fb8. instance has the following methods:

 -- Method: Cmd.cmdloop ([intro])
     Repeatedly issue a prompt, accept input, parse an initial prefix
     off the received input, and dispatch to action methods, passing
     them the remainder of the line as argument.

     The optional argument is a banner or intro string to be issued
     before the first prompt (this overrides the *note intro: 1fbd.
     class member).

     If the *note readline: 145. module is loaded, input will
     automatically inherit *bash*-like history-list editing (e.g.
     `Control-P' scrolls back to the last command, `Control-N' forward
     to the next one, `Control-F' moves the cursor to the right
     non-destructively, `Control-B' moves the cursor to the left
     non-destructively, etc.).

     An end-of-file on input is passed back as the string `'EOF''.

     An interpreter instance will recognize a command name `foo' if and
     only if it has a method `do_foo()'.  As a special case, a line
     beginning with the character `'?'' is dispatched to the method
     `do_help()'.  As another special case, a line beginning with the
     character `'!'' is dispatched to the method `do_shell()' (if such
     a method is defined).

     This method will return when the *note postcmd(): 1fbe. method
     returns a true value.  The _stop_ argument to *note postcmd():
     1fbe. is the return value from the command's corresponding
     `do_*()' method.

     If completion is enabled, completing commands will be done
     automatically, and completing of commands args is done by calling
     `complete_foo()' with arguments _text_, _line_, _begidx_, and
     _endidx_.  _text_ is the string prefix we are attempting to match:
     all returned matches must begin with it. _line_ is the current
     input line with leading whitespace removed, _begidx_ and _endidx_
     are the beginning and ending indexes of the prefix text, which
     could be used to provide different completion depending upon which
     position the argument is in.

     All subclasses of *note Cmd: 1fb8. inherit a predefined
     `do_help()'.  This method, called with an argument `'bar'',
     invokes the corresponding method `help_bar()', and if that is not
     present, prints the docstring of `do_bar()', if available.  With
     no argument, `do_help()' lists all available help topics (that is,
     all commands with corresponding `help_*()' methods or commands
     that have docstrings), and also lists any undocumented commands.

 -- Method: Cmd.onecmd (str)
     Interpret the argument as though it had been typed in response to
     the prompt.  This may be overridden, but should not normally need
     to be; see the *note precmd(): 1fc0. and *note postcmd(): 1fbe.
     methods for useful execution hooks.  The return value is a flag
     indicating whether interpretation of commands by the interpreter
     should stop.  If there is a `do_*()' method for the command _str_,
     the return value of that method is returned, otherwise the return
     value from the *note default(): 1fc1. method is returned.

 -- Method: Cmd.emptyline ()
     Method called when an empty line is entered in response to the
     prompt. If this method is not overridden, it repeats the last
     nonempty command entered.

 -- Method: Cmd.default (line)
     Method called on an input line when the command prefix is not
     recognized. If this method is not overridden, it prints an error
     message and returns.

 -- Method: Cmd.completedefault (text, line, begidx, endidx)
     Method called to complete an input line when no command-specific
     `complete_*()' method is available.  By default, it returns an
     empty list.

 -- Method: Cmd.precmd (line)
     Hook method executed just before the command line _line_ is
     interpreted, but after the input prompt is generated and issued.
     This method is a stub in *note Cmd: 1fb8.; it exists to be
     overridden by subclasses.  The return value is used as the command
     which will be executed by the *note onecmd(): 1fbf. method; the
     *note precmd(): 1fc0. implementation may re-write the command or
     simply return _line_ unchanged.

 -- Method: Cmd.postcmd (stop, line)
     Hook method executed just after a command dispatch is finished.
     This method is a stub in *note Cmd: 1fb8.; it exists to be
     overridden by subclasses.  _line_ is the command line which was
     executed, and _stop_ is a flag which indicates whether execution
     will be terminated after the call to *note postcmd(): 1fbe.; this
     will be the return value of the *note onecmd(): 1fbf. method.  The
     return value of this method will be used as the new value for the
     internal flag which corresponds to _stop_; returning false will
     cause interpretation to continue.

 -- Method: Cmd.preloop ()
     Hook method executed once when *note cmdloop(): 1fbc. is called.
     This method is a stub in *note Cmd: 1fb8.; it exists to be
     overridden by subclasses.

 -- Method: Cmd.postloop ()
     Hook method executed once when *note cmdloop(): 1fbc. is about to
     return. This method is a stub in *note Cmd: 1fb8.; it exists to be
     overridden by subclasses.

  Instances of *note Cmd: 1fb8. subclasses have some public instance
variables:

 -- Attribute: Cmd.prompt
     The prompt issued to solicit input.

 -- Attribute: Cmd.identchars
     The string of characters accepted for the command prefix.

 -- Attribute: Cmd.lastcmd
     The last nonempty command prefix seen.

 -- Attribute: Cmd.intro
     A string to issue as an intro or banner.  May be overridden by
     giving the *note cmdloop(): 1fbc. method an argument.

 -- Attribute: Cmd.doc_header
     The header to issue if the help output has a section for
     documented commands.

 -- Attribute: Cmd.misc_header
     The header to issue if the help output has a section for
     miscellaneous  help topics (that is, there are `help_*()' methods
     without corresponding `do_*()' methods).

 -- Attribute: Cmd.undoc_header
     The header to issue if the help output has a section for
     undocumented  commands (that is, there are `do_*()' methods
     without corresponding `help_*()' methods).

 -- Attribute: Cmd.ruler
     The character used to draw separator lines under the help-message
     headers.  If empty, no ruler line is drawn.  It defaults to `'=''.

 -- Attribute: Cmd.use_rawinput
     A flag, defaulting to true.  If true, *note cmdloop(): 1fbc. uses
     *note raw_input(): 83a. to display a prompt and read the next
     command; if false, `sys.stdout.write()' and `sys.stdin.readline()'
     are used. (This means that by importing *note readline: 145, on
     systems that support it, the interpreter will automatically
     support *Emacs*-like line editing  and command-history keystrokes.)


File: python.info,  Node: shlex --- Simple lexical analysis,  Prev: cmd --- Support for line-oriented command interpreters,  Up: Program Frameworks

5.23.2 `shlex' -- Simple lexical analysis
-----------------------------------------

New in version 1.5.2.

  The *note shlex: 154. class makes it easy to write lexical analyzers
for simple syntaxes resembling that of the Unix shell.  This will often
be useful for writing minilanguages, (for example, in run control files
for Python applications) or for parsing quoted strings.

     Note: The *note shlex: 154. module currently does not support
     Unicode input.

  The *note shlex: 154. module defines the following functions:

 -- Function: shlex.split (s[, comments[, posix]])
     Split the string _s_ using shell-like syntax. If _comments_ is
     *note False: 3a0.  (the default), the parsing of comments in the
     given string will be disabled (setting the `commenters' member of
     the *note shlex: 154. instance to the empty string).  This
     function operates in POSIX mode by default, but uses non-POSIX
     mode if the _posix_ argument is false.

     New in version 2.3.

     Changed in version 2.6: Added the _posix_ parameter.

          Note: Since the *note split(): 1674. function instantiates a
          *note shlex: 154. instance, passing `None' for _s_ will read
          the string to split from standard input.

  The *note shlex: 154. module defines the following class:

 -- Class: shlex.shlex ([instream[, infile[, posix]]])
     A *note shlex: 154. instance or subclass instance is a lexical
     analyzer object.  The initialization argument, if present,
     specifies where to read characters from. It must be a
     file-/stream-like object with `read()' and *note readline(): 145.
     methods, or a string (strings are accepted since Python 2.3).  If
     no argument is given, input will be taken from `sys.stdin'.  The
     second optional argument is a filename string, which sets the
     initial value of the *note infile: 1fd0. member.  If the
     _instream_ argument is omitted or equal to `sys.stdin', this
     second argument defaults to "stdin".  The _posix_ argument was
     introduced in Python 2.3, and defines the operational mode.  When
     _posix_ is not true (default), the *note shlex: 154. instance will
     operate in compatibility mode.  When operating in POSIX mode,
     *note shlex: 154. will try to be as close as possible to the POSIX
     shell parsing rules.

See also
........

Module *note ConfigParser: 6d.
     Parser for configuration files similar to the Windows `.ini' files.

* Menu:

* shlex Objects::
* Parsing Rules::


File: python.info,  Node: shlex Objects,  Next: Parsing Rules,  Up: shlex --- Simple lexical analysis

5.23.2.1 shlex Objects
......................

A *note shlex: 154. instance has the following methods:

 -- Method: shlex.get_token ()
     Return a token.  If tokens have been stacked using *note
     push_token(): 1fd4, pop a token off the stack.  Otherwise, read
     one from the input stream.  If reading encounters an immediate
     end-of-file, `self.eof' is returned (the empty string (`''') in
     non-POSIX mode, and `None' in POSIX mode).

 -- Method: shlex.push_token (str)
     Push the argument onto the token stack.

 -- Method: shlex.read_token ()
     Read a raw token.  Ignore the pushback stack, and do not interpret
     source requests.  (This is not ordinarily a useful entry point,
     and is documented here only for the sake of completeness.)

 -- Method: shlex.sourcehook (filename)
     When *note shlex: 154. detects a source request (see *note source:
     1fd7. below) this method is given the following token as argument,
     and expected to return a tuple consisting of a filename and an
     open file-like object.

     Normally, this method first strips any quotes off the argument.
     If the result is an absolute pathname, or there was no previous
     source request in effect, or the previous source was a stream
     (such as `sys.stdin'), the result is left alone.  Otherwise, if
     the result is a relative pathname, the directory part of the name
     of the file immediately before it on the source inclusion stack is
     prepended (this behavior is like the way the C preprocessor
     handles `#include "file.h"').

     The result of the manipulations is treated as a filename, and
     returned as the first component of the tuple, with *note open():
     2cb. called on it to yield the second component. (Note: this is
     the reverse of the order of arguments in instance initialization!)

     This hook is exposed so that you can use it to implement directory
     search paths, addition of file extensions, and other namespace
     hacks. There is no corresponding 'close' hook, but a shlex
     instance will call the `close()' method of the sourced input
     stream when it returns EOF.

     For more explicit control of source stacking, use the *note
     push_source(): 1fd8. and *note pop_source(): 1fd9. methods.

 -- Method: shlex.push_source (stream[, filename])
     Push an input source stream onto the input stack.  If the filename
     argument is specified it will later be available for use in error
     messages.  This is the same method used internally by the *note
     sourcehook(): 1fd6. method.

     New in version 2.1.

 -- Method: shlex.pop_source ()
     Pop the last-pushed input source from the input stack. This is the
     same method used internally when the lexer reaches EOF on a
     stacked input stream.

     New in version 2.1.

 -- Method: shlex.error_leader ([file[, line]])
     This method generates an error message leader in the format of a
     Unix C compiler error label; the format is `'"%s", line %d: '',
     where the `%s' is replaced with the name of the current source
     file and the `%d' with the current input line number (the optional
     arguments can be used to override these).

     This convenience is provided to encourage *note shlex: 154. users
     to generate error messages in the standard, parseable format
     understood by Emacs and other Unix tools.

  Instances of *note shlex: 154. subclasses have some public instance
variables which either control lexical analysis or can be used for
debugging:

 -- Attribute: shlex.commenters
     The string of characters that are recognized as comment beginners.
     All characters from the comment beginner to end of line are
     ignored. Includes just `'#'' by default.

 -- Attribute: shlex.wordchars
     The string of characters that will accumulate into multi-character
     tokens.  By default, includes all ASCII alphanumerics and
     underscore.

 -- Attribute: shlex.whitespace
     Characters that will be considered whitespace and skipped.
     Whitespace bounds tokens.  By default, includes space, tab,
     linefeed and carriage-return.

 -- Attribute: shlex.escape
     Characters that will be considered as escape. This will be only
     used in POSIX mode, and includes just `'\'' by default.

     New in version 2.3.

 -- Attribute: shlex.quotes
     Characters that will be considered string quotes.  The token
     accumulates until the same quote is encountered again (thus,
     different quote types protect each other as in the shell.)  By
     default, includes ASCII single and double quotes.

 -- Attribute: shlex.escapedquotes
     Characters in *note quotes: 1fdf. that will interpret escape
     characters defined in *note escape: 1fde.  This is only used in
     POSIX mode, and includes just `'"'' by default.

     New in version 2.3.

 -- Attribute: shlex.whitespace_split
     If `True', tokens will only be split in whitespaces. This is
     useful, for example, for parsing command lines with *note shlex:
     154, getting tokens in a similar way to shell arguments.

     New in version 2.3.

 -- Attribute: shlex.infile
     The name of the current input file, as initially set at class
     instantiation time or stacked by later source requests.  It may be
     useful to examine this when constructing error messages.

 -- Attribute: shlex.instream
     The input stream from which this *note shlex: 154. instance is
     reading characters.

 -- Attribute: shlex.source
     This member is `None' by default.  If you assign a string to it,
     that string will be recognized as a lexical-level inclusion
     request similar to the `source' keyword in various shells.  That
     is, the immediately following token will opened as a filename and
     input taken from that stream until EOF, at which point the
     `close()' method of that stream will be called and the input
     source will again become the original input stream. Source
     requests may be stacked any number of levels deep.

 -- Attribute: shlex.debug
     If this member is numeric and `1' or more, a *note shlex: 154.
     instance will print verbose progress output on its behavior.  If
     you need to use this, you can read the module source code to learn
     the details.

 -- Attribute: shlex.lineno
     Source line number (count of newlines seen so far plus one).

 -- Attribute: shlex.token
     The token buffer.  It may be useful to examine this when catching
     exceptions.

 -- Attribute: shlex.eof
     Token used to determine end of file. This will be set to the empty
     string (`'''), in non-POSIX mode, and to `None' in POSIX mode.

     New in version 2.3.


File: python.info,  Node: Parsing Rules,  Prev: shlex Objects,  Up: shlex --- Simple lexical analysis

5.23.2.2 Parsing Rules
......................

When operating in non-POSIX mode, *note shlex: 154. will try to obey to
the following rules.

   * Quote characters are not recognized within words
     (`Do"Not"Separate' is parsed as the single word `Do"Not"Separate');

   * Escape characters are not recognized;

   * Enclosing characters in quotes preserve the literal value of all
     characters within the quotes;

   * Closing quotes separate words (`"Do"Separate' is parsed as `"Do"'
     and `Separate');

   * If `whitespace_split' is `False', any character not declared to be
     a word character, whitespace, or a quote will be returned as a
     single-character token. If it is `True', *note shlex: 154. will
     only split words in whitespaces;

   * EOF is signaled with an empty string (`''');

   * It's not possible to parse empty strings, even if quoted.

  When operating in POSIX mode, *note shlex: 154. will try to obey to
the following parsing rules.

   * Quotes are stripped out, and do not separate words
     (`"Do"Not"Separate"' is parsed as the single word `DoNotSeparate');

   * Non-quoted escape characters (e.g. `'\'') preserve the literal
     value of the next character that follows;

   * Enclosing characters in quotes which are not part of
     `escapedquotes' (e.g. `"'"') preserve the literal value of all
     characters within the quotes;

   * Enclosing characters in quotes which are part of `escapedquotes'
     (e.g.  `'"'') preserves the literal value of all characters within
     the quotes, with the exception of the characters mentioned in
     `escape'. The escape characters retain its special meaning only
     when followed by the quote in use, or the escape character itself.
     Otherwise the escape character will be considered a normal
     character.

   * EOF is signaled with a *note None: 389. value;

   * Quoted empty strings (`''') are allowed;


File: python.info,  Node: Graphical User Interfaces with Tk,  Next: Development Tools,  Prev: Program Frameworks,  Up: The Python Standard Library

5.24 Graphical User Interfaces with Tk
======================================

Tk/Tcl has long been an integral part of Python.  It provides a robust
and platform independent windowing toolkit, that is available to Python
programmers using the *note Tkinter: 17e. module, and its extensions,
the *note Tix: 17d. and the *note ttk: 183. modules.

  The *note Tkinter: 17e. module is a thin object-oriented layer on top
of Tcl/Tk. To use *note Tkinter: 17e, you don't need to write Tcl code,
but you will need to consult the Tk documentation, and occasionally the
Tcl documentation.  *note Tkinter: 17e. is a set of wrappers that
implement the Tk widgets as Python classes.  In addition, the internal
module `_tkinter' provides a threadsafe mechanism which allows Python
and Tcl to interact.

  *note Tkinter: 17e.'s chief virtues are that it is fast, and that it
usually comes bundled with Python. Although its standard documentation
is weak, good material is available, which includes: references,
tutorials, a book and others. *note Tkinter: 17e. is also famous for
having an outdated look and feel, which has been vastly improved in Tk
8.5. Nevertheless, there are many other GUI libraries that you could be
interested in. For more information about alternatives, see the *note
Other Graphical User Interface Packages: 1fec. section.

* Menu:

* Tkinter: Tkinter --- Python interface to Tcl/Tk. Python interface to Tcl/Tk
* ttk: ttk --- Tk themed widgets. Tk themed widgets
* Tix: Tix --- Extension widgets for Tk. Extension widgets for Tk
* ScrolledText: ScrolledText --- Scrolled Text Widget. Scrolled Text Widget
* turtle: turtle --- Turtle graphics for Tk. Turtle graphics for Tk
* IDLE::
* Other Graphical User Interface Packages::

Tkinter --- Python interface to Tcl/Tk

* Tkinter Modules::
* Tkinter Life Preserver::
* A (Very) Quick Look at Tcl/Tk: A Very Quick Look at Tcl/Tk.
* Mapping Basic Tk into Tkinter::
* How Tk and Tkinter are Related::
* Handy Reference::

Tkinter Life Preserver

* How To Use This Section::
* A Simple Hello World Program::

Handy Reference

* Setting Options::
* The Packer::
* Packer Options::
* Coupling Widget Variables::
* The Window Manager::
* Tk Option Data Types::
* Bindings and Events::
* The index Parameter::
* Images::

ttk --- Tk themed widgets

* Using Ttk::
* Ttk Widgets::
* Widget::
* Combobox::
* Notebook::
* Progressbar::
* Separator::
* Sizegrip::
* Treeview::
* Ttk Styling::

Widget

* Standard Options::
* Scrollable Widget Options::
* Label Options::
* Compatibility Options::
* Widget States::
* ttk.Widget: ttk Widget.

Combobox

* Options::
* Virtual events::
* ttk.Combobox: ttk Combobox.

Notebook

* Options: Options<2>.
* Tab Options::
* Tab Identifiers::
* Virtual Events::
* ttk.Notebook: ttk Notebook.

Progressbar

* Options: Options<3>.
* ttk.Progressbar: ttk Progressbar.

Separator

* Options: Options<4>.

Sizegrip

* Platform-specific notes::
* Bugs::

Treeview

* Options: Options<5>.
* Item Options::
* Tag Options::
* Column Identifiers::
* Virtual Events: Virtual Events<2>.
* ttk.Treeview: ttk Treeview.

Ttk Styling

* Layouts::

Tix --- Extension widgets for Tk

* Using Tix::
* Tix Widgets::
* Tix Commands::

Tix Widgets

* Basic Widgets::
* File Selectors::
* Hierarchical ListBox::
* Tabular ListBox::
* Manager Widgets::
* Image Types::
* Miscellaneous Widgets::
* Form Geometry Manager::

turtle --- Turtle graphics for Tk

* Introduction: Introduction<9>.
* Overview over available Turtle and Screen methods::
* Methods of RawTurtle/Turtle and corresponding functions::
* Methods of TurtleScreen/Screen and corresponding functions::
* The public classes of the module turtle::
* Help and configuration::
* Demo scripts::

Overview over available Turtle and Screen methods

* Turtle methods::
* Methods of TurtleScreen/Screen::

Methods of RawTurtle/Turtle and corresponding functions

* Turtle motion::
* Tell Turtle's state::
* Settings for measurement::
* Pen control::
* Turtle state::
* Using events::
* Special Turtle methods::
* Excursus about the use of compound shapes::

Pen control

* Drawing state::
* Color control::
* Filling::
* More drawing control::

Turtle state

* Visibility::
* Appearance::

Methods of TurtleScreen/Screen and corresponding functions

* Window control::
* Animation control::
* Using screen events::
* Settings and special methods::
* Methods specific to Screen, not inherited from TurtleScreen: Methods specific to Screen not inherited from TurtleScreen.

Help and configuration

* How to use help::
* Translation of docstrings into different languages::
* How to configure Screen and Turtles::

IDLE

* Menus::
* Basic editing and navigation::
* Syntax colors::
* Startup::

Menus

* File menu::
* Edit menu::
* Windows menu::
* Debug menu (in the Python Shell window only): Debug menu in the Python Shell window only.

Basic editing and navigation

* Automatic indentation::
* Python Shell window::

Startup

* Command line usage::


File: python.info,  Node: Tkinter --- Python interface to Tcl/Tk,  Next: ttk --- Tk themed widgets,  Up: Graphical User Interfaces with Tk

5.24.1 `Tkinter' -- Python interface to Tcl/Tk
----------------------------------------------

The *note Tkinter: 17e. module ("Tk interface") is the standard Python
interface to the Tk GUI toolkit.  Both Tk and *note Tkinter: 17e. are
available on most Unix platforms, as well as on Windows systems.  (Tk
itself is not part of Python; it is maintained at ActiveState.)

     Note: *note Tkinter: 17e. has been renamed to `tkinter' in Python
     3.0.  The *note 2to3: bbf. tool will automatically adapt imports
     when converting your sources to 3.0.

See also
........

Python Tkinter Resources(1)
     The Python Tkinter Topic Guide provides a great deal of
     information on using Tk from Python and links to other sources of
     information on Tk.

An Introduction to Tkinter(2)
     Fredrik Lundh's on-line reference material.

Tkinter reference: a GUI for Python(3)
     On-line reference material.

Python and Tkinter Programming(4)
     The book by John Grayson (ISBN 1-884777-81-3).

* Menu:

* Tkinter Modules::
* Tkinter Life Preserver::
* A (Very) Quick Look at Tcl/Tk: A Very Quick Look at Tcl/Tk.
* Mapping Basic Tk into Tkinter::
* How Tk and Tkinter are Related::
* Handy Reference::

  ---------- Footnotes ----------

  (1) http://www.python.org/topics/tkinter/

  (2) http://www.pythonware.com/library/an-introduction-to-tkinter.htm

  (3) http://infohost.nmt.edu/tcc/help/pubs/lang.html

  (4) http://www.amazon.com/exec/obidos/ASIN/1884777813


File: python.info,  Node: Tkinter Modules,  Next: Tkinter Life Preserver,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.1 Tkinter Modules
........................

Most of the time, the *note Tkinter: 17e. module is all you really
need, but a number of additional modules are available as well.  The Tk
interface is located in a binary module named `_tkinter'. This module
contains the low-level interface to Tk, and should never be used
directly by application programmers.  It is usually a shared library
(or DLL), but might in some cases be statically linked with the Python
interpreter.

  In addition to the Tk interface module, *note Tkinter: 17e. includes
a number of Python modules. The two most important modules are the
*note Tkinter: 17e. module itself, and a module called `Tkconstants'.
The former automatically imports the latter, so to use Tkinter, all you
need to do is to import one module:

    import Tkinter

Or, more often:

    from Tkinter import *


 -- Class: Tkinter.Tk (screenName=None, baseName=None, className='Tk',
          useTk=1)
     The *note Tk: 1ff0. class is instantiated without arguments. This
     creates a toplevel widget of Tk which usually is the main window
     of an application. Each instance has its own associated Tcl
     interpreter.

     Changed in version 2.4: The _useTk_ parameter was added.

 -- Function: Tkinter.Tcl (screenName=None, baseName=None,
          className='Tk', useTk=0)
     The *note Tcl(): 1ff1. function is a factory function which
     creates an object much like that created by the *note Tk: 1ff0.
     class, except that it does not initialize the Tk subsystem.  This
     is most often useful when driving the Tcl interpreter in an
     environment where one doesn't want to create extraneous toplevel
     windows, or where one cannot (such as Unix/Linux systems without
     an X server).  An object created by the *note Tcl(): 1ff1. object
     can have a Toplevel window created (and the Tk subsystem
     initialized) by calling its `loadtk()' method.

     New in version 2.4.

  Other modules that provide Tk support include:

*note ScrolledText: 14e.
     Text widget with a vertical scroll bar built in.

`tkColorChooser'
     Dialog to let the user choose a color.

`tkCommonDialog'
     Base class for the dialogs defined in the other modules listed
     here.

`tkFileDialog'
     Common dialogs to allow the user to specify a file to open or save.

`tkFont'
     Utilities to help work with fonts.

`tkMessageBox'
     Access to standard Tk dialog boxes.

`tkSimpleDialog'
     Basic dialogs and convenience functions.

`Tkdnd'
     Drag-and-drop support for *note Tkinter: 17e. This is experimental
     and should become deprecated when it is replaced  with the Tk DND.

*note turtle: 185.
     Turtle graphics in a Tk window.

  These have been renamed as well in Python 3.0; they were all made
submodules of the new `tkinter' package.


File: python.info,  Node: Tkinter Life Preserver,  Next: A Very Quick Look at Tcl/Tk,  Prev: Tkinter Modules,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.2 Tkinter Life Preserver
...............................

This section is not designed to be an exhaustive tutorial on either Tk
or Tkinter.  Rather, it is intended as a stop gap, providing some
introductory orientation on the system.

  Credits:

   * Tkinter was written by Steen Lumholt and Guido van Rossum.

   * Tk was written by John Ousterhout while at Berkeley.

   * This Life Preserver was written by Matt Conway at the University
     of Virginia.

   * The html rendering, and some liberal editing, was produced from a
     FrameMaker version by Ken Manheimer.

   * Fredrik Lundh elaborated and revised the class interface
     descriptions, to get them current with Tk 4.2.

   * Mike Clarkson converted the documentation to LaTeX, and compiled
     the  User Interface chapter of the reference manual.

* Menu:

* How To Use This Section::
* A Simple Hello World Program::


File: python.info,  Node: How To Use This Section,  Next: A Simple Hello World Program,  Up: Tkinter Life Preserver

5.24.1.3 How To Use This Section
................................

This section is designed in two parts: the first half (roughly) covers
background material, while the second half can be taken to the keyboard
as a handy reference.

  When trying to answer questions of the form "how do I do blah", it is
often best to find out how to do"blah" in straight Tk, and then convert
this back into the corresponding *note Tkinter: 17e. call. Python
programmers can often guess at the correct Python command by looking at
the Tk documentation. This means that in order to use Tkinter, you will
have to know a little bit about Tk. This document can't fulfill that
role, so the best we can do is point you to the best documentation that
exists. Here are some hints:

   * The authors strongly suggest getting a copy of the Tk man pages.
     Specifically, the man pages in the `mann' directory are most
     useful. The `man3' man pages describe the C interface to the Tk
     library and thus are not especially helpful for script writers.

   * Addison-Wesley publishes a book called Tcl and the Tk Toolkit by
     John Ousterhout (ISBN 0-201-63337-X) which is a good introduction
     to Tcl and Tk for the novice.  The book is not exhaustive, and for
     many details it defers to the man pages.

   * `Tkinter.py' is a last resort for most, but can be a good place to
     go when nothing else makes sense.

See also
........

ActiveState Tcl Home Page(1)
     The Tk/Tcl development is largely taking place at ActiveState.

Tcl and the Tk Toolkit(2)
     The book by John Ousterhout, the inventor of Tcl .

Practical Programming in Tcl and Tk(3)
     Brent Welch's encyclopedic book.

  ---------- Footnotes ----------

  (1) http://tcl.activestate.com/

  (2) http://www.amazon.com/exec/obidos/ASIN/020163337X

  (3) http://www.amazon.com/exec/obidos/ASIN/0130220280


File: python.info,  Node: A Simple Hello World Program,  Prev: How To Use This Section,  Up: Tkinter Life Preserver

5.24.1.4 A Simple Hello World Program
.....................................

    from Tkinter import *

    class Application(Frame):
        def say_hi(self):
            print "hi there, everyone!"

        def createWidgets(self):
            self.QUIT = Button(self)
            self.QUIT["text"] = "QUIT"
            self.QUIT["fg"]   = "red"
            self.QUIT["command"] =  self.quit

            self.QUIT.pack({"side": "left"})

            self.hi_there = Button(self)
            self.hi_there["text"] = "Hello",
            self.hi_there["command"] = self.say_hi

            self.hi_there.pack({"side": "left"})

        def __init__(self, master=None):
            Frame.__init__(self, master)
            self.pack()
            self.createWidgets()

    root = Tk()
    app = Application(master=root)
    app.mainloop()
    root.destroy()



File: python.info,  Node: A Very Quick Look at Tcl/Tk,  Next: Mapping Basic Tk into Tkinter,  Prev: Tkinter Life Preserver,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.5 A (Very) Quick Look at Tcl/Tk
......................................

The class hierarchy looks complicated, but in actual practice,
application programmers almost always refer to the classes at the very
bottom of the hierarchy.

  Notes:

   * These classes are provided for the purposes of organizing certain
     functions under one namespace. They aren't meant to be
     instantiated independently.

   * The *note Tk: 1ff0. class is meant to be instantiated only once in
     an application.  Application programmers need not instantiate one
     explicitly, the system creates one whenever any of the other
     classes are instantiated.

   * The `Widget' class is not meant to be instantiated, it is meant
     only for subclassing to make "real" widgets (in C++, this is
     called an 'abstract class').

  To make use of this reference material, there will be times when you
will need to know how to read short passages of Tk and how to identify
the various parts of a Tk command.   (See section *note Mapping Basic
Tk into Tkinter: 1ff6. for the *note Tkinter: 17e. equivalents of
what's below.)

  Tk scripts are Tcl programs.  Like all Tcl programs, Tk scripts are
just lists of tokens separated by spaces.  A Tk widget is just its
_class_, the _options_ that help configure it, and the _actions_ that
make it do useful things.

  To make a widget in Tk, the command is always of the form:

    classCommand newPathname options


_classCommand_
     denotes which kind of widget to make (a button, a label, a menu...)

_newPathname_
     is the new name for this widget.  All names in Tk must be unique.
     To help enforce this, widgets in Tk are named with _pathnames_,
     just like files in a file system.  The top level widget, the
     _root_, is called `.' (period) and children are delimited by more
     periods.  For example, `.myApp.controlPanel.okButton' might be the
     name of a widget.

_options_
     configure the widget's appearance and in some cases, its behavior.
     The options come in the form of a list of flags and values. Flags
     are preceded by a '-', like Unix shell command flags, and values
     are put in quotes if they are more than one word.

  For example:

    button   .fred   -fg red -text "hi there"
       ^       ^     \_____________________/
       |       |                |
     class    new            options
    command  widget  (-opt val -opt val ...)

Once created, the pathname to the widget becomes a new command.  This
new _widget command_ is the programmer's handle for getting the new
widget to perform some _action_.  In C, you'd express this as
someAction(fred, someOptions), in C++, you would express this as
fred.someAction(someOptions), and in Tk, you say:

    .fred someAction someOptions

Note that the object name, `.fred', starts with a dot.

  As you'd expect, the legal values for _someAction_ will depend on the
widget's class: `.fred disable' works if fred is a button (fred gets
greyed out), but does not work if fred is a label (disabling of labels
is not supported in Tk).

  The legal values of _someOptions_ is action dependent.  Some actions,
like `disable', require no arguments, others, like a text-entry box's
`delete' command, would need arguments to specify what range of text to
delete.


File: python.info,  Node: Mapping Basic Tk into Tkinter,  Next: How Tk and Tkinter are Related,  Prev: A Very Quick Look at Tcl/Tk,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.6 Mapping Basic Tk into Tkinter
......................................

Class commands in Tk correspond to class constructors in Tkinter.

    button .fred                =====>  fred = Button()

The master of an object is implicit in the new name given to it at
creation time.  In Tkinter, masters are specified explicitly.

    button .panel.fred          =====>  fred = Button(panel)

The configuration options in Tk are given in lists of hyphened tags
followed by values.  In Tkinter, options are specified as
keyword-arguments in the instance constructor, and keyword-args for
configure calls or as instance indices, in dictionary style, for
established instances.  See section *note Setting Options: 1ff8. on
setting options.

    button .fred -fg red        =====>  fred = Button(panel, fg = "red")
    .fred configure -fg red     =====>  fred["fg"] = red
                                OR ==>  fred.config(fg = "red")

In Tk, to perform an action on a widget, use the widget name as a
command, and follow it with an action name, possibly with arguments
(options).  In Tkinter, you call methods on the class instance to
invoke actions on the widget.  The actions (methods) that a given
widget can perform are listed in the Tkinter.py module.

    .fred invoke                =====>  fred.invoke()

To give a widget to the packer (geometry manager), you call pack with
optional arguments.  In Tkinter, the Pack class holds all this
functionality, and the various forms of the pack command are
implemented as methods.  All widgets in *note Tkinter: 17e. are
subclassed from the Packer, and so inherit all the packing methods. See
the *note Tix: 17d. module documentation for additional information on
the Form geometry manager.

    pack .fred -side left       =====>  fred.pack(side = "left")



File: python.info,  Node: How Tk and Tkinter are Related,  Next: Handy Reference,  Prev: Mapping Basic Tk into Tkinter,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.7 How Tk and Tkinter are Related
.......................................

From the top down:

Your App Here (Python)
     A Python application makes a *note Tkinter: 17e. call.

Tkinter (Python Module)
     This call (say, for example, creating a button widget), is
     implemented in the _Tkinter_ module, which is written in Python.
     This Python function will parse the commands and the arguments and
     convert them into a form that makes them look as if they had come
     from a Tk script instead of a Python script.

tkinter (C)
     These commands and their arguments will be passed to a C function
     in the _tkinter_ - note the lowercase - extension module.

Tk Widgets (C and Tcl)
     This C function is able to make calls into other C modules,
     including the C functions that make up the Tk library.  Tk is
     implemented in C and some Tcl.  The Tcl part of the Tk widgets is
     used to bind certain default behaviors to widgets, and is executed
     once at the point where the Python *note Tkinter: 17e.  module is
     imported. (The user never sees this stage).

Tk (C)
     The Tk part of the Tk Widgets implement the final mapping to ...

Xlib (C)
     the Xlib library to draw graphics on the screen.


File: python.info,  Node: Handy Reference,  Prev: How Tk and Tkinter are Related,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.8 Handy Reference
........................

* Menu:

* Setting Options::
* The Packer::
* Packer Options::
* Coupling Widget Variables::
* The Window Manager::
* Tk Option Data Types::
* Bindings and Events::
* The index Parameter::
* Images::


File: python.info,  Node: Setting Options,  Next: The Packer,  Up: Handy Reference

5.24.1.9 Setting Options
........................

Options control things like the color and border width of a widget.
Options can be set in three ways:

At object creation time, using keyword arguments
         fred = Button(self, fg = "red", bg = "blue")


After object creation, treating the option name like a dictionary index
         fred["fg"] = "red"
         fred["bg"] = "blue"


Use the config() method to update multiple attrs subsequent to object creation
         fred.config(fg = "red", bg = "blue")



  For a complete explanation of a given option and its behavior, see
the Tk man pages for the widget in question.

  Note that the man pages list "STANDARD OPTIONS" and "WIDGET SPECIFIC
OPTIONS" for each widget.  The former is a list of options that are
common to many widgets, the latter are the options that are
idiosyncratic to that particular widget.  The Standard Options are
documented on the `options(3)' man page.

  No distinction between standard and widget-specific options is made
in this document.  Some options don't apply to some kinds of widgets.
Whether a given widget responds to a particular option depends on the
class of the widget; buttons have a `command' option, labels do not.

  The options supported by a given widget are listed in that widget's
man page, or can be queried at runtime by calling the `config()' method
without arguments, or by calling the `keys()' method on that widget.
The return value of these calls is a dictionary whose key is the name
of the option as a string (for example, `'relief'') and whose values
are 5-tuples.

  Some options, like `bg' are synonyms for common options with long
names (`bg' is shorthand for "background"). Passing the `config()'
method the name of a shorthand option will return a 2-tuple, not
5-tuple. The 2-tuple passed back will contain the name of the synonym
and the "real" option (such as `('bg', 'background')').

Index       Meaning                               Example
--------------------------------------------------------------------- 
0           option name                           `'relief''
1           option name for database lookup       `'relief''
2           option class for database lookup      `'Relief''
3           default value                         `'raised''
4           current value                         `'groove''

  Example:

    >>> print fred.config()
    {'relief' : ('relief', 'relief', 'Relief', 'raised', 'groove')}

Of course, the dictionary printed will include all the options
available and their values.  This is meant only as an example.


File: python.info,  Node: The Packer,  Next: Packer Options,  Prev: Setting Options,  Up: Handy Reference

5.24.1.10 The Packer
....................

The packer is one of Tk's geometry-management mechanisms.    Geometry
managers are used to specify the relative positioning of the
positioning of widgets within their container - their mutual _master_.
In contrast to the more cumbersome _placer_ (which is used less
commonly, and we do not cover here), the packer takes qualitative
relationship specification - _above_, _to the left of_, _filling_, etc
- and works everything out to determine the exact placement coordinates
for you.

  The size of any _master_ widget is determined by the size of the
"slave widgets" inside.  The packer is used to control where slave
widgets appear inside the master into which they are packed.  You can
pack widgets into frames, and frames into other frames, in order to
achieve the kind of layout you desire.  Additionally, the arrangement
is dynamically adjusted to accommodate incremental changes to the
configuration, once it is packed.

  Note that widgets do not appear until they have had their geometry
specified with a geometry manager.  It's a common early mistake to
leave out the geometry specification, and then be surprised when the
widget is created but nothing appears.  A widget will appear only after
it has had, for example, the packer's `pack()' method applied to it.

  The pack() method can be called with keyword-option/value pairs that
control where the widget is to appear within its container, and how it
is to behave when the main application window is resized.  Here are
some examples:

    fred.pack()                     # defaults to side = "top"
    fred.pack(side = "left")
    fred.pack(expand = 1)



File: python.info,  Node: Packer Options,  Next: Coupling Widget Variables,  Prev: The Packer,  Up: Handy Reference

5.24.1.11 Packer Options
........................

For more extensive information on the packer and the options that it
can take, see the man pages and page 183 of John Ousterhout's book.

anchor
     Anchor type.  Denotes where the packer is to place each slave in
     its parcel.

expand
     Boolean, `0' or `1'.

fill
     Legal values: `'x'', `'y'', `'both'', `'none''.

ipadx and ipady
     A distance - designating internal padding on each side of the
     slave widget.

padx and pady
     A distance - designating external padding on each side of the
     slave widget.

side
     Legal values are: `'left'', `'right'', `'top'', `'bottom''.


File: python.info,  Node: Coupling Widget Variables,  Next: The Window Manager,  Prev: Packer Options,  Up: Handy Reference

5.24.1.12 Coupling Widget Variables
...................................

The current-value setting of some widgets (like text entry widgets) can
be connected directly to application variables by using special
options.  These options are `variable', `textvariable', `onvalue',
`offvalue', and `value'.  This connection works both ways: if the
variable changes for any reason, the widget it's connected to will be
updated to reflect the new value.

  Unfortunately, in the current implementation of *note Tkinter: 17e.
it is not possible to hand over an arbitrary Python variable to a
widget through a `variable' or `textvariable' option.  The only kinds
of variables for which this works are variables that are subclassed
from a class called Variable, defined in the *note Tkinter: 17e. module.

  There are many useful subclasses of Variable already defined:
`StringVar', `IntVar', `DoubleVar', and `BooleanVar'.  To read the
current value of such a variable, call the `get()' method on it, and to
change its value you call the `set()' method.  If you follow this
protocol, the widget will always track the value of the variable, with
no further intervention on your part.

  For example:

    class App(Frame):
        def __init__(self, master=None):
            Frame.__init__(self, master)
            self.pack()

            self.entrythingy = Entry()
            self.entrythingy.pack()

            # here is the application variable
            self.contents = StringVar()
            # set it to some value
            self.contents.set("this is a variable")
            # tell the entry widget to watch this variable
            self.entrythingy["textvariable"] = self.contents

            # and here we get a callback when the user hits return.
            # we will have the program print out the value of the
            # application variable when the user hits return
            self.entrythingy.bind('<Key-Return>',
                                  self.print_contents)

        def print_contents(self, event):
            print "hi. contents of entry is now ---->", \
                  self.contents.get()



File: python.info,  Node: The Window Manager,  Next: Tk Option Data Types,  Prev: Coupling Widget Variables,  Up: Handy Reference

5.24.1.13 The Window Manager
............................

In Tk, there is a utility command, `wm', for interacting with the window
manager.  Options to the `wm' command allow you to control things like
titles, placement, icon bitmaps, and the like.  In *note Tkinter: 17e,
these commands have been implemented as methods on the `Wm' class.
Toplevel widgets are subclassed from the `Wm' class, and so can call
the `Wm' methods directly.

  To get at the toplevel window that contains a given widget, you can
often just refer to the widget's master.  Of course if the widget has
been packed inside of a frame, the master won't represent a toplevel
window.  To get at the toplevel window that contains an arbitrary
widget, you can call the `_root()' method.  This method begins with an
underscore to denote the fact that this function is part of the
implementation, and not an interface to Tk functionality.

  Here are some examples of typical usage:

    from Tkinter import *
    class App(Frame):
        def __init__(self, master=None):
            Frame.__init__(self, master)
            self.pack()


    # create the application
    myapp = App()

    #
    # here are method calls to the window manager class
    #
    myapp.master.title("My Do-Nothing Application")
    myapp.master.maxsize(1000, 400)

    # start the program
    myapp.mainloop()



File: python.info,  Node: Tk Option Data Types,  Next: Bindings and Events,  Prev: The Window Manager,  Up: Handy Reference

5.24.1.14 Tk Option Data Types
..............................

anchor
     Legal values are points of the compass: `"n"', `"ne"', `"e"',
     `"se"', `"s"', `"sw"', `"w"', `"nw"', and also `"center"'.

bitmap
     There are eight built-in, named bitmaps: `'error'', `'gray25'',
     `'gray50'', `'hourglass'', `'info'', `'questhead'', `'question'',
     `'warning''.  To specify an X bitmap filename, give the full path
     to the file, preceded with an `@', as in
     `"@/usr/contrib/bitmap/gumby.bit"'.

boolean
     You can pass integers 0 or 1 or the strings `"yes"' or `"no"' .

callback
     This is any Python function that takes no arguments.  For example:

         def print_it():
                 print "hi there"
         fred["command"] = print_it


color
     Colors can be given as the names of X colors in the rgb.txt file,
     or as strings representing RGB values in 4 bit: `"#RGB"', 8 bit:
     `"#RRGGBB"', 12 bit" `"#RRRGGGBBB"', or 16 bit `"#RRRRGGGGBBBB"'
     ranges, where R,G,B here represent any legal hex digit.  See page
     160 of Ousterhout's book for details.

cursor
     The standard X cursor names from `cursorfont.h' can be used,
     without the `XC_' prefix.  For example to get a hand cursor
     (`XC_hand2'), use the string `"hand2"'.  You can also specify a
     bitmap and mask file of your own.  See page 179 of Ousterhout's
     book.

distance
     Screen distances can be specified in either pixels or absolute
     distances.  Pixels are given as numbers and absolute distances as
     strings, with the trailing character denoting units: `c' for
     centimetres, `i' for inches, `m' for millimetres, `p' for
     printer's points.  For example, 3.5 inches is expressed as
     `"3.5i"'.

font
     Tk uses a list font name format, such as `{courier 10 bold}'. Font
     sizes with positive numbers are measured in points; sizes with
     negative numbers are measured in pixels.

geometry
     This is a string of the form `widthxheight', where width and
     height are measured in pixels for most widgets (in characters for
     widgets displaying text).  For example: `fred["geometry"] =
     "200x100"'.

justify
     Legal values are the strings: `"left"', `"center"', `"right"', and
     `"fill"'.

region
     This is a string with four space-delimited elements, each of which
     is a legal distance (see above).  For example: `"2 3 4 5"' and
     `"3i 2i 4.5i 2i"' and `"3c 2c 4c 10.43c"'  are all legal regions.

relief
     Determines what the border style of a widget will be.  Legal
     values are: `"raised"', `"sunken"', `"flat"', `"groove"', and
     `"ridge"'.

scrollcommand
     This is almost always the `set()' method of some scrollbar widget,
     but can be any widget method that takes a single argument.   Refer
     to the file `Demo/tkinter/matt/canvas-with-scrollbars.py' in the
     Python source distribution for an example.

wrap:
     Must be one of: `"none"', `"char"', or `"word"'.


File: python.info,  Node: Bindings and Events,  Next: The index Parameter,  Prev: Tk Option Data Types,  Up: Handy Reference

5.24.1.15 Bindings and Events
.............................

The bind method from the widget command allows you to watch for certain
events and to have a callback function trigger when that event type
occurs.  The form of the bind method is:

    def bind(self, sequence, func, add=''):

where:

sequence
     is a string that denotes the target kind of event.  (See the bind
     man page and page 201 of John Ousterhout's book for details).

func
     is a Python function, taking one argument, to be invoked when the
     event occurs.  An Event instance will be passed as the argument.
     (Functions deployed this way are commonly known as _callbacks_.)

add
     is optional, either `''' or `'+''.  Passing an empty string
     denotes that this binding is to replace any other bindings that
     this event is associated with.  Passing a `'+'' means that this
     function is to be added to the list of functions bound to this
     event type.

  For example:

    def turnRed(self, event):
        event.widget["activeforeground"] = "red"

    self.button.bind("<Enter>", self.turnRed)

Notice how the widget field of the event is being accessed in the
`turnRed()' callback.  This field contains the widget that caught the X
event.  The following table lists the other event fields you can
access, and how they are denoted in Tk, which can be useful when
referring to the Tk man pages.

    Tk      Tkinter Event Field             Tk      Tkinter Event Field
    --      -------------------             --      -------------------
    %f      focus                           %A      char
    %h      height                          %E      send_event
    %k      keycode                         %K      keysym
    %s      state                           %N      keysym_num
    %t      time                            %T      type
    %w      width                           %W      widget
    %x      x                               %X      x_root
    %y      y                               %Y      y_root



File: python.info,  Node: The index Parameter,  Next: Images,  Prev: Bindings and Events,  Up: Handy Reference

5.24.1.16 The index Parameter
.............................

A number of widgets require"index" parameters to be passed.  These are
used to point at a specific place in a Text widget, or to particular
characters in an Entry widget, or to particular menu items in a Menu
widget.

Entry widget indexes (index, view index, etc.)
     Entry widgets have options that refer to character positions in
     the text being displayed.  You can use these *note Tkinter: 17e.
     functions to access these special points in text widgets:

    AtEnd()
          refers to the last position in the text

    AtInsert()
          refers to the point where the text cursor is

    AtSelFirst()
          indicates the beginning point of the selected text

    AtSelLast()
          denotes the last point of the selected text and finally

    At(x[, y])
          refers to the character at pixel location _x_, _y_ (with _y_
          not used in the case of a text entry widget, which contains a
          single line of text).

Text widget indexes
     The index notation for Text widgets is very rich and is best
     described in the Tk man pages.

Menu indexes (menu.invoke(), menu.entryconfig(), etc.)
     Some options and methods for menus manipulate specific menu
     entries. Anytime a menu index is needed for an option or a
     parameter, you may pass in:

        * an integer which refers to the numeric position of the entry
          in the widget, counted from the top, starting with 0;

        * the string `'active'', which refers to the menu position that
          is currently under the cursor;

        * the string `"last"' which refers to the last menu item;

        * An integer preceded by `@', as in `@6', where the integer is
          interpreted as a y pixel coordinate in the menu's coordinate
          system;

        * the string `"none"', which indicates no menu entry at all,
          most often used with menu.activate() to deactivate all
          entries, and finally,

        * a text string that is pattern matched against the label of
          the menu entry, as scanned from the top of the menu to the
          bottom.  Note that this index type is considered after all
          the others, which means that matches for menu items labelled
          `last', `active', or `none' may be interpreted as the above
          literals, instead.


File: python.info,  Node: Images,  Prev: The index Parameter,  Up: Handy Reference

5.24.1.17 Images
................

Bitmap/Pixelmap images can be created through the subclasses of
`Tkinter.Image':

   * `BitmapImage' can be used for X11 bitmap data.

   * `PhotoImage' can be used for GIF and PPM/PGM color bitmaps.

  Either type of image is created through either the `file' or the
`data' option (other options are available as well).

  The image object can then be used wherever an `image' option is
supported by some widget (e.g. labels, buttons, menus). In these cases,
Tk will not keep a reference to the image. When the last Python
reference to the image object is deleted, the image data is deleted as
well, and Tk will display an empty box wherever the image was used.


File: python.info,  Node: ttk --- Tk themed widgets,  Next: Tix --- Extension widgets for Tk,  Prev: Tkinter --- Python interface to Tcl/Tk,  Up: Graphical User Interfaces with Tk

5.24.2 `ttk' -- Tk themed widgets
---------------------------------

The *note ttk: 183. module provides access to the Tk themed widget set,
which has been introduced in Tk 8.5. If Python is not compiled against
Tk 8.5 code may still use this module as long as Tile is installed.
However, some features provided by the new Tk, like anti-aliased font
rendering under X11, window transparency (on X11 you will need a
composition window manager) will be missing.

  The basic idea of *note ttk: 183. is to separate, to the extent
possible, the code implementing a widget's behavior from the code
implementing its appearance.

See also
........

Tk Widget Styling Support(1)
     The document which brought up theming support for Tk

* Menu:

* Using Ttk::
* Ttk Widgets::
* Widget::
* Combobox::
* Notebook::
* Progressbar::
* Separator::
* Sizegrip::
* Treeview::
* Ttk Styling::

  ---------- Footnotes ----------

  (1) http://www.tcl.tk/cgi-bin/tct/tip/48


File: python.info,  Node: Using Ttk,  Next: Ttk Widgets,  Up: ttk --- Tk themed widgets

5.24.2.1 Using Ttk
..................

To start using Ttk, import its module:

    import ttk

But code like this:

    from Tkinter import *

may optionally want to use this:

    from Tkinter import *
    from ttk import *

And then several *note ttk: 183. widgets (`Button', `Checkbutton',
`Entry', `Frame', `Label', `LabelFrame', `Menubutton', `PanedWindow',
`Radiobutton', `Scale' and `Scrollbar') will automatically substitute
for the Tk widgets.

  This has the direct benefit of using the new widgets, giving better
look & feel across platforms, but be aware that they are not totally
compatible. The main difference is that widget options such as "fg",
"bg" and others related to widget styling are no longer present in Ttk
widgets. Use *note ttk.Style: 2007. to achieve the same (or better)
styling.

See also
........

Converting existing applications to use the Tile widgets(1)
     A text which talks in Tcl terms about differences typically found
     when converting applications to use the new widgets.

  ---------- Footnotes ----------

  (1) http://tktable.sourceforge.net/tile/doc/converting.txt


File: python.info,  Node: Ttk Widgets,  Next: Widget,  Prev: Using Ttk,  Up: ttk --- Tk themed widgets

5.24.2.2 Ttk Widgets
....................

Ttk comes with 17 widgets, 11 of which already exist in Tkinter:
`Button', `Checkbutton', `Entry', `Frame', `Label', `LabelFrame',
`Menubutton', `PanedWindow', `Radiobutton', `Scale' and `Scrollbar'.
The 6 new widget classes are: *note Combobox: 2009, *note Notebook:
200a, *note Progressbar: 200b, `Separator', `Sizegrip' and *note
Treeview: 200c.  All of these classes are subclasses of *note Widget:
200d.

  As said previously, you will notice changes in look-and-feel as well
in the styling code. To demonstrate the latter, a very simple example
is shown below.

  Tk code:

    l1 = Tkinter.Label(text="Test", fg="black", bg="white")
    l2 = Tkinter.Label(text="Test", fg="black", bg="white")

Corresponding Ttk code:

    style = ttk.Style()
    style.configure("BW.TLabel", foreground="black", background="white")

    l1 = ttk.Label(text="Test", style="BW.TLabel")
    l2 = ttk.Label(text="Test", style="BW.TLabel")

For more information about *note TtkStyling: 200e. read the *note
Style: 2007. class documentation.


File: python.info,  Node: Widget,  Next: Combobox,  Prev: Ttk Widgets,  Up: ttk --- Tk themed widgets

5.24.2.3 Widget
...............

*note ttk.Widget: 200d. defines standard options and methods supported
by Tk themed widgets and is not supposed to be directly instantiated.

* Menu:

* Standard Options::
* Scrollable Widget Options::
* Label Options::
* Compatibility Options::
* Widget States::
* ttk.Widget: ttk Widget.


File: python.info,  Node: Standard Options,  Next: Scrollable Widget Options,  Up: Widget

5.24.2.4 Standard Options
.........................

All the *note ttk: 183. widgets accept the following options:

      Option          Description
     ----------------------------------------------------------------------------------- 
     class           Specifies the window class. The class is used when querying the
                     option database for the window's other options, to determine the
                     default bindtags for the window, and to select the widget's
                     default layout and style. This is a read-only option which may
                     only be specified when the window is created.
     cursor          Specifies the mouse cursor to be used for the widget. If set to
                     the empty string (the default), the cursor is inherited from the
                     parent widget.
     takefocus       Determines whether the window accepts the focus during keyboard
                     traversal. 0, 1 or an empty string is returned.  If 0, the window
                     should be skipped entirely during keyboard traversal. If 1, the
                     window should receive the input focus as long as it is viewable.
                     An empty string means that the traversal scripts make the
                     decision about whether or not to focus on the window.
     style           May be used to specify a custom widget style.



File: python.info,  Node: Scrollable Widget Options,  Next: Label Options,  Prev: Standard Options,  Up: Widget

5.24.2.5 Scrollable Widget Options
..................................

The following options are supported by widgets that are controlled by a
scrollbar.

      option               description
     ----------------------------------------------------------------------------------- 
     xscrollcommand       Used to communicate with horizontal scrollbars.
                          
                          When the view in the widget's window changes, the widget
                          will generate a Tcl command based on the scrollcommand.
                          
                          Usually this option consists of the `Scrollbar.set()' method
                          of some scrollbar. This will cause the scrollbar to be
                          updated whenever the view in the window changes.
     yscrollcommand       Used to communicate with vertical scrollbars.  For more
                          information, see above.



File: python.info,  Node: Label Options,  Next: Compatibility Options,  Prev: Scrollable Widget Options,  Up: Widget

5.24.2.6 Label Options
......................

The following options are supported by labels, buttons and other
button-like widgets.

      option             description
     ----------------------------------------------------------------------------------- 
     text               Specifies a text string to be displayed inside the widget.
     textvariable       Specifies a name whose value will be used in place of the text
                        option resource.
     underline          If set, specifies the index (0-based) of a character to
                        underline in the text string. The underline character is used
                        for mnemonic activation.
     image              Specifies an image to display. This is a list of 1 or more
                        elements. The first element is the default image name. The
                        rest of the list is a sequence of statespec/value pairs as
                        defined by *note Style.map(): 2013, specifying different images
                        to use when the widget is in a particular state or a
                        combination of states. All images in the list should have the
                        same size.
     compound           Specifies how to display the image relative to the text, in
                        the case both text and image options are present.  Valid
                        values are:
                        
                           * text: display text only
                        
                           * image: display image only
                        
                           * top, bottom, left, right: display image above, below,
                             left of, or right of the text, respectively.
                        
                           * none: the default. display the image if present,
                             otherwise the text.
     width              If greater than zero, specifies how much space, in character
                        widths, to allocate for the text label; if less than zero,
                        specifies a minimum width. If zero or unspecified, the natural
                        width of the text label is used.



File: python.info,  Node: Compatibility Options,  Next: Widget States,  Prev: Label Options,  Up: Widget

5.24.2.7 Compatibility Options
..............................

      option       description
     ---------------------------------------------------------------------------------- 
     state        May be set to "normal" or "disabled" to control the "disabled"
                  state bit. This is a write-only option: setting it changes the
                  widget state, but the *note Widget.state(): 2015. method does not
                  affect this option.



File: python.info,  Node: Widget States,  Next: ttk Widget,  Prev: Compatibility Options,  Up: Widget

5.24.2.8 Widget States
......................

The widget state is a bitmap of independent state flags.

      flag             description
     ----------------------------------------------------------------------------------- 
     active           The mouse cursor is over the widget and pressing a mouse button
                      will cause some action to occur.
     disabled         Widget is disabled under program control.
     focus            Widget has keyboard focus.
     pressed          Widget is being pressed.
     selected         "On", "true", or "current" for things like Checkbuttons and
                      radiobuttons.
     background       Windows and Mac have a notion of an "active" or foreground
                      window. The _background_ state is set for widgets in a
                      background window, and cleared for those in the foreground
                      window.
     readonly         Widget should not allow user modification.
     alternate        A widget-specific alternate display format.
     invalid          The widget's value is invalid.


  A state specification is a sequence of state names, optionally
prefixed with an exclamation point indicating that the bit is off.


File: python.info,  Node: ttk Widget,  Prev: Widget States,  Up: Widget

5.24.2.9 ttk.Widget
...................

Besides the methods described below, the *note ttk.Widget: 200d. class
supports the `Tkinter.Widget.cget()' and `Tkinter.Widget.configure()'
methods.

 -- Class: ttk.Widget
      -- Method: identify (x, y)
          Returns the name of the element at position _x_ _y_, or the
          empty string if the point does not lie within any element.

          _x_ and _y_ are pixel coordinates relative to the widget.

      -- Method: instate (statespec[, callback=None[, *args[, **kw]]])
          Test the widget's state. If a callback is not specified,
          returns True if the widget state matches _statespec_ and
          False otherwise. If callback is specified then it is called
          with _args_ if widget state matches _statespec_.

      -- Method: state ([statespec=None])
          Modify or read widget state. If _statespec_ is specified,
          sets the widget state accordingly and returns a new
          _statespec_ indicating which flags were changed. If
          _statespec_ is not specified, returns the currently-enabled
          state flags.

     _statespec_ will usually be a list or a tuple.


File: python.info,  Node: Combobox,  Next: Notebook,  Prev: Widget,  Up: ttk --- Tk themed widgets

5.24.2.10 Combobox
..................

The *note ttk.Combobox: 2009. widget combines a text field with a
pop-down list of values. This widget is a subclass of `Entry'.

  Besides the methods inherited from *note Widget: 200d.
(`Widget.cget()', `Widget.configure()', *note Widget.identify(): 2018,
*note Widget.instate(): 2019.  and *note Widget.state(): 2015.) and
those inherited from `Entry' (`Entry.bbox()', `Entry.delete()',
`Entry.icursor()', `Entry.index()', `Entry.inset()',
`Entry.selection()', `Entry.xview()'), this class has some other
methods, described at *note ttk.Combobox: 2009.

* Menu:

* Options::
* Virtual events::
* ttk.Combobox: ttk Combobox.


File: python.info,  Node: Options,  Next: Virtual events,  Up: Combobox

5.24.2.11 Options
.................

This widget accepts the following options:

      option                description
     ----------------------------------------------------------------------------------- 
     exportselection       Boolean value. If set, the widget selection is linked to
                           the Window Manager selection (which can be returned by
                           invoking `Misc.selection_get()', for example).
     justify               Specifies how the text is aligned within the widget.  One
                           of "left", "center", or "right".
     height                Specifies the height of the pop-down listbox, in rows.
     postcommand           A script (possibly registered with `Misc.register()') that
                           is called immediately before displaying the values. It may
                           specify which values to display.
     state                 One of "normal", "readonly", or "disabled". In the
                           "readonly" state, the value may not be edited directly, and
                           the user can only select one of the values from the
                           dropdown list. In the "normal" state, the text field is
                           directly editable. In the "disabled" state, no interaction
                           is possible.
     textvariable          Specifies a name whose value is linked to the widget value.
                           Whenever the value associated with that name changes, the
                           widget value is updated, and vice versa.  See
                           `Tkinter.StringVar'.
     values                Specifies the list of values to display in the drop-down
                           listbox.
     width                 Specifies an integer value indicating the desired width of
                           the entry window, in average-size characters of the
                           widget's font.



File: python.info,  Node: Virtual events,  Next: ttk Combobox,  Prev: Options,  Up: Combobox

5.24.2.12 Virtual events
........................

The combobox widget generates a *<<ComboboxSelected>>* virtual event
when the user selects an element from the list of values.


File: python.info,  Node: ttk Combobox,  Prev: Virtual events,  Up: Combobox

5.24.2.13 ttk.Combobox
......................

 -- Class: ttk.Combobox
      -- Method: current ([newindex=None])
          If _newindex_ is specified, sets the combobox value to the
          element position _newindex_. Otherwise, returns the index of
          the current value or -1 if the current value is not in the
          values list.

      -- Method: get ()
          Returns the current value of the combobox.

      -- Method: set (value)
          Sets the value of the combobox to _value_.


File: python.info,  Node: Notebook,  Next: Progressbar,  Prev: Combobox,  Up: ttk --- Tk themed widgets

5.24.2.14 Notebook
..................

The Ttk Notebook widget manages a collection of windows and displays a
single one at a time. Each child window is associated with a tab, which
the user may select to change the currently-displayed window.

* Menu:

* Options: Options<2>.
* Tab Options::
* Tab Identifiers::
* Virtual Events::
* ttk.Notebook: ttk Notebook.


File: python.info,  Node: Options<2>,  Next: Tab Options,  Up: Notebook

5.24.2.15 Options
.................

This widget accepts the following specific options:

      option        description
     ----------------------------------------------------------------------------------- 
     height        If present and greater than zero, specifies the desired height of
                   the pane area (not including internal padding or tabs).  Otherwise,
                   the maximum height of all panes is used.
     padding       Specifies the amount of extra space to add around the outside of
                   the notebook. The padding is a list of up to four length
                   specifications: left top right bottom. If fewer than four elements
                   are specified, bottom defaults to top, right defaults to left, and
                   top defaults to left.
     width         If present and greater than zero, specifies the desired width of
                   the pane area (not including internal padding). Otherwise, the
                   maximum width of all panes is used.



File: python.info,  Node: Tab Options,  Next: Tab Identifiers,  Prev: Options<2>,  Up: Notebook

5.24.2.16 Tab Options
.....................

There are also specific options for tabs:

      option          description
     ----------------------------------------------------------------------------------- 
     state           Either "normal", "disabled" or "hidden". If "disabled", then the
                     tab is not selectable. If "hidden", then the tab is not shown.
     sticky          Specifies how the child window is positioned within the pane
                     area. Value is a string containing zero or more of the characters
                     "n", "s", "e" or "w". Each letter refers to a side (north, south,
                     east or west) that the child window will stick to, as per the
                     `grid()' geometry manager.
     padding         Specifies the amount of extra space to add between the notebook
                     and this pane. Syntax is the same as for the option padding used
                     by this widget.
     text            Specifies a text to be displayed in the tab.
     image           Specifies an image to display in the tab. See the option image
                     described in *note Widget: 200d.
     compound        Specifies how to display the image relative to the text, in the
                     case both text and image options are present. See *note Label
                     Options: 2012. for legal values.
     underline       Specifies the index (0-based) of a character to underline in the
                     text string. The underlined character is used for mnemonic
                     activation if *note Notebook.enable_traversal(): 2024. is called.



File: python.info,  Node: Tab Identifiers,  Next: Virtual Events,  Prev: Tab Options,  Up: Notebook

5.24.2.17 Tab Identifiers
.........................

The _tab_id_ present in several methods of *note ttk.Notebook: 200a.
may take any of the following forms:

   * An integer between zero and the number of tabs.

   * The name of a child window.

   * A positional specification of the form "@x,y", which identifies
     the tab.

   * The literal string "current", which identifies the
     currently-selected tab.

   * The literal string "end", which returns the number of tabs (only
     valid for *note Notebook.index(): 2026.).


File: python.info,  Node: Virtual Events,  Next: ttk Notebook,  Prev: Tab Identifiers,  Up: Notebook

5.24.2.18 Virtual Events
........................

This widget generates a *<<NotebookTabChanged>>* virtual event after a
new tab is selected.


File: python.info,  Node: ttk Notebook,  Prev: Virtual Events,  Up: Notebook

5.24.2.19 ttk.Notebook
......................

 -- Class: ttk.Notebook
      -- Method: add (child, **kw)
          Adds a new tab to the notebook.

          If window is currently managed by the notebook but hidden, it
          is restored to its previous position.

          See *note Tab Options: 2023. for the list of available
          options.

      -- Method: forget (tab_id)
          Removes the tab specified by _tab_id_, unmaps and unmanages
          the associated window.

      -- Method: hide (tab_id)
          Hides the tab specified by _tab_id_.

          The tab will not be displayed, but the associated window
          remains managed by the notebook and its configuration
          remembered. Hidden tabs may be restored with the *note add():
          2029. command.

      -- Method: identify (x, y)
          Returns the name of the tab element at position _x_, _y_, or
          the empty string if none.

      -- Method: index (tab_id)
          Returns the numeric index of the tab specified by _tab_id_,
          or the total number of tabs if _tab_id_ is the string "end".

      -- Method: insert (pos, child, **kw)
          Inserts a pane at the specified position.

          _pos_ is either the string "end", an integer index, or the
          name of a managed child. If _child_ is already managed by the
          notebook, moves it to the specified position.

          See *note Tab Options: 2023. for the list of available
          options.

      -- Method: select ([tab_id])
          Selects the specified _tab_id_.

          The associated child window will be displayed, and the
          previously-selected window (if different) is unmapped. If
          _tab_id_ is omitted, returns the widget name of the currently
          selected pane.

      -- Method: tab (tab_id[, option=None[, **kw]])
          Query or modify the options of the specific _tab_id_.

          If _kw_ is not given, returns a dictionary of the tab option
          values. If _option_ is specified, returns the value of that
          _option_. Otherwise, sets the options to the corresponding
          values.

      -- Method: tabs ()
          Returns a list of windows managed by the notebook.

      -- Method: enable_traversal ()
          Enable keyboard traversal for a toplevel window containing
          this notebook.

          This will extend the bindings for the toplevel window
          containing the notebook as follows:

             * Control-Tab: selects the tab following the currently
               selected one.

             * Shift-Control-Tab: selects the tab preceding the
               currently selected one.

             * Alt-K: where K is the mnemonic (underlined) character of
               any tab, will select that tab.

          Multiple notebooks in a single toplevel may be enabled for
          traversal, including nested notebooks. However, notebook
          traversal only works properly if all panes have the notebook
          they are in as master.


File: python.info,  Node: Progressbar,  Next: Separator,  Prev: Notebook,  Up: ttk --- Tk themed widgets

5.24.2.20 Progressbar
.....................

The *note ttk.Progressbar: 200b. widget shows the status of a
long-running operation. It can operate in two modes: determinate mode
shows the amount completed relative to the total amount of work to be
done, and indeterminate mode provides an animated display to let the
user know that something is happening.

* Menu:

* Options: Options<3>.
* ttk.Progressbar: ttk Progressbar.


File: python.info,  Node: Options<3>,  Next: ttk Progressbar,  Up: Progressbar

5.24.2.21 Options
.................

This widget accepts the following specific options:

      option         description
     ----------------------------------------------------------------------------------- 
     orient         One of "horizontal" or "vertical". Specifies the orientation of
                    the progress bar.
     length         Specifies the length of the long axis of the progress bar (width
                    if horizontal, height if vertical).
     mode           One of "determinate" or "indeterminate".
     maximum        A number specifying the maximum value. Defaults to 100.
     value          The current value of the progress bar. In "determinate" mode, this
                    represents the amount of work completed. In "indeterminate" mode,
                    it is interpreted as modulo _maximum_; that is, the progress bar
                    completes one "cycle" when its value increases by _maximum_.
     variable       A name which is linked to the option value. If specified, the
                    value of the progress bar is automatically set to the value of
                    this name whenever the latter is modified.
     phase          Read-only option. The widget periodically increments the value of
                    this option whenever its value is greater than 0 and, in
                    determinate mode, less than maximum. This option may be used by
                    the current theme to provide additional animation effects.



File: python.info,  Node: ttk Progressbar,  Prev: Options<3>,  Up: Progressbar

5.24.2.22 ttk.Progressbar
.........................

 -- Class: ttk.Progressbar
      -- Method: start ([interval])
          Begin autoincrement mode: schedules a recurring timer event
          that calls *note Progressbar.step(): 2035. every _interval_
          milliseconds. If omitted, _interval_ defaults to 50
          milliseconds.

      -- Method: step ([amount])
          Increments the progress bar's value by _amount_.

          _amount_ defaults to 1.0 if omitted.

      -- Method: stop ()
          Stop autoincrement mode: cancels any recurring timer event
          initiated by *note Progressbar.start(): 2034. for this
          progress bar.


File: python.info,  Node: Separator,  Next: Sizegrip,  Prev: Progressbar,  Up: ttk --- Tk themed widgets

5.24.2.23 Separator
...................

The `ttk.Separator' widget displays a horizontal or vertical separator
bar.

  It has no other methods besides the ones inherited from *note
ttk.Widget: 200d.

* Menu:

* Options: Options<4>.


File: python.info,  Node: Options<4>,  Up: Separator

5.24.2.24 Options
.................

This widget accepts the following specific option:

      option       description
     ---------------------------------------------------------------------------------- 
     orient       One of "horizontal" or "vertical". Specifies the orientation of the
                  separator.



File: python.info,  Node: Sizegrip,  Next: Treeview,  Prev: Separator,  Up: ttk --- Tk themed widgets

5.24.2.25 Sizegrip
..................

The `ttk.Sizegrip' widget (also known as a grow box) allows the user to
resize the containing toplevel window by pressing and dragging the grip.

  This widget has neither specific options nor specific methods,
besides the ones inherited from *note ttk.Widget: 200d.

* Menu:

* Platform-specific notes::
* Bugs::


File: python.info,  Node: Platform-specific notes,  Next: Bugs,  Up: Sizegrip

5.24.2.26 Platform-specific notes
.................................

   * On Mac OS X, toplevel windows automatically include a built-in
     size grip by default. Adding a `Sizegrip' is harmless, since the
     built-in grip will just mask the widget.


File: python.info,  Node: Bugs,  Prev: Platform-specific notes,  Up: Sizegrip

5.24.2.27 Bugs
..............

   * If the containing toplevel's position was specified relative to
     the right or bottom of the screen (e.g. ....), the `Sizegrip'
     widget will not resize the window.

   * This widget supports only "southeast" resizing.


File: python.info,  Node: Treeview,  Next: Ttk Styling,  Prev: Sizegrip,  Up: ttk --- Tk themed widgets

5.24.2.28 Treeview
..................

The *note ttk.Treeview: 200c. widget displays a hierarchical collection
of items.  Each item has a textual label, an optional image, and an
optional list of data values. The data values are displayed in
successive columns after the tree label.

  The order in which data values are displayed may be controlled by
setting the widget option `displaycolumns'. The tree widget can also
display column headings. Columns may be accessed by number or symbolic
names listed in the widget option columns. See *note Column
Identifiers: 203d.

  Each item is identified by an unique name. The widget will generate
item IDs if they are not supplied by the caller. There is a
distinguished root item, named `{}'. The root item itself is not
displayed; its children appear at the top level of the hierarchy.

  Each item also has a list of tags, which can be used to associate
event bindings with individual items and control the appearance of the
item.

  The Treeview widget supports horizontal and vertical scrolling,
according to the options described in *note Scrollable Widget Options:
2011. and the methods *note Treeview.xview(): 203e. and *note
Treeview.yview(): 203f.

* Menu:

* Options: Options<5>.
* Item Options::
* Tag Options::
* Column Identifiers::
* Virtual Events: Virtual Events<2>.
* ttk.Treeview: ttk Treeview.


File: python.info,  Node: Options<5>,  Next: Item Options,  Up: Treeview

5.24.2.29 Options
.................

This widget accepts the following specific options:

      option               description
     ---------------------------------------------------------------------------------- 
     columns              A list of column identifiers, specifying the number of
                          columns and their names.
     displaycolumns       A list of column identifiers (either symbolic or integer
                          indices) specifying which data columns are displayed and
                          the order in which they appear, or the string "#all".
     height               Specifies the number of rows which should be visible.
                          Note: the requested width is determined from the sum of the
                          column widths.
     padding              Specifies the internal padding for the widget. The padding
                          is a list of up to four length specifications.
     selectmode           Controls how the built-in class bindings manage the
                          selection. One of "extended", "browse" or "none".  If set
                          to "extended" (the default), multiple items may be
                          selected. If "browse", only a single item will be selected
                          at a time. If "none", the selection will not be changed.
                          
                          Note that the application code and tag bindings can set the
                          selection however they wish, regardless of the value  of
                          this option.
     show                 A list containing zero or more of the following values,
                          specifying which elements of the tree to display.
                          
                             * tree: display tree labels in column #0.
                          
                             * headings: display the heading row.
                          The default is "tree headings", i.e., show all elements.
                          
                          *Note*: Column #0 always refers to the tree column, even if
                          show="tree" is not specified.



File: python.info,  Node: Item Options,  Next: Tag Options,  Prev: Options<5>,  Up: Treeview

5.24.2.30 Item Options
......................

The following item options may be specified for items in the insert and
item widget commands.

      option       description
     --------------------------------------------------------------------------------- 
     text         The textual label to display for the item.
     image        A Tk Image, displayed to the left of the label.
     values       The list of values associated with the item.
                  
                  Each item should have the same number of values as the widget
                  option columns. If there are fewer values than columns, the
                  remaining values are assumed empty. If there are more values than
                  columns, the extra values are ignored.
     open         True/False value indicating whether the item's children should be
                  displayed or hidden.
     tags         A list of tags associated with this item.



File: python.info,  Node: Tag Options,  Next: Column Identifiers,  Prev: Item Options,  Up: Treeview

5.24.2.31 Tag Options
.....................

The following options may be specified on tags:

      option           description
     --------------------------------------------------------------------------------- 
     foreground       Specifies the text foreground color.
     background       Specifies the cell or item background color.
     font             Specifies the font to use when drawing text.
     image            Specifies the item image, in case the item's image option is
                      empty.



File: python.info,  Node: Column Identifiers,  Next: Virtual Events<2>,  Prev: Tag Options,  Up: Treeview

5.24.2.32 Column Identifiers
............................

Column identifiers take any of the following forms:

   * A symbolic name from the list of columns option.

   * An integer n, specifying the nth data column.

   * A string of the form #n, where n is an integer, specifying the nth
     display column.

  Notes:

   * Item's option values may be displayed in a different order than
     the order in which they are stored.

   * Column #0 always refers to the tree column, even if show="tree" is
     not specified.

  A data column number is an index into an item's option values list; a
display column number is the column number in the tree where the values
are displayed.  Tree labels are displayed in column #0. If option
displaycolumns is not set, then data column n is displayed in column
#n+1. Again, *column #0 always refers to the tree column*.


File: python.info,  Node: Virtual Events<2>,  Next: ttk Treeview,  Prev: Column Identifiers,  Up: Treeview

5.24.2.33 Virtual Events
........................

The Treeview widget generates the following virtual events.

      event                    description
     -------------------------------------------------------------------------------- 
     <<TreeviewSelect>>       Generated whenever the selection changes.
     <<TreeviewOpen>>         Generated just before settings the focus item to
                              open=True.
     <<TreeviewClose>>        Generated just after setting the focus item to
                              open=False.


  The *note Treeview.focus(): 2044. and *note Treeview.selection():
2045. methods can be used to determine the affected item or items.


File: python.info,  Node: ttk Treeview,  Prev: Virtual Events<2>,  Up: Treeview

5.24.2.34 ttk.Treeview
......................

 -- Class: ttk.Treeview
      -- Method: bbox (item[, column=None])
          Returns the bounding box (relative to the treeview widget's
          window) of the specified _item_ in the form (x, y, width,
          height).

          If _column_ is specified, returns the bounding box of that
          cell. If the _item_ is not visible (i.e., if it is a
          descendant of a closed item or is scrolled offscreen),
          returns an empty string.

      -- Method: get_children ([item])
          Returns the list of children belonging to _item_.

          If _item_ is not specified, returns root children.

      -- Method: set_children (item, *newchildren)
          Replaces _item_'s child with _newchildren_.

          Children present in _item_ that are not present in
          _newchildren_ are detached from the tree. No items in
          _newchildren_ may be an ancestor of _item_. Note that not
          specifying _newchildren_ results in detaching _item_'s
          children.

      -- Method: column (column[, option=None[, **kw]])
          Query or modify the options for the specified _column_.

          If _kw_ is not given, returns a dict of the column option
          values. If _option_ is specified then the value for that
          _option_ is returned.  Otherwise, sets the options to the
          corresponding values.

          The valid options/values are:

             *
              id
                    Returns the column name. This is a read-only option.

             *
              anchor: One of the standard Tk anchor values.
                    Specifies how the text in this column should be
                    aligned with respect to the cell.

             *
              minwidth: width
                    The minimum width of the column in pixels. The
                    treeview widget will not make the column any
                    smaller than specified by this option when the
                    widget is resized or the user drags a column.

             *
              stretch: True/False
                    Specifies whether the column's width should be
                    adjusted when the widget is resized.

             *
              width: width
                    The width of the column in pixels.

          To configure the tree column, call this with column = "#0"

      -- Method: delete (*items)
          Delete all specified _items_ and all their descendants.

          The root item may not be deleted.

      -- Method: detach (*items)
          Unlinks all of the specified _items_ from the tree.

          The items and all of their descendants are still present, and
          may be reinserted at another point in the tree, but will not
          be displayed.

          The root item may not be detached.

      -- Method: exists (item)
          Returns True if the specified _item_ is present in the tree.

      -- Method: focus ([item=None])
          If _item_ is specified, sets the focus item to _item_.
          Otherwise, returns the current focus item, or '' if there is
          none.

      -- Method: heading (column[, option=None[, **kw]])
          Query or modify the heading options for the specified
          _column_.

          If _kw_ is not given, returns a dict of the heading option
          values. If _option_ is specified then the value for that
          _option_ is returned.  Otherwise, sets the options to the
          corresponding values.

          The valid options/values are:

             *
              text: text
                    The text to display in the column heading.

             *
              image: imageName
                    Specifies an image to display to the right of the
                    column heading.

             *
              anchor: anchor
                    Specifies how the heading text should be aligned.
                    One of the standard Tk anchor values.

             *
              command: callback
                    A callback to be invoked when the heading label is
                    pressed.

          To configure the tree column heading, call this with column =
          "#0".

      -- Method: identify (component, x, y)
          Returns a description of the specified _component_ under the
          point given by _x_ and _y_, or the empty string if no such
          _component_ is present at that position.

      -- Method: identify_row (y)
          Returns the item ID of the item at position _y_.

      -- Method: identify_column (x)
          Returns the data column identifier of the cell at position
          _x_.

          The tree column has ID #0.

      -- Method: identify_region (x, y)
          Returns one of:

          region          meaning
          ----------------------------------------------------------- 
          heading         Tree heading area.
          separator       Space between two columns headings.
          tree            The tree area.
          cell            A data cell.

          Availability: Tk 8.6.

      -- Method: identify_element (x, y)
          Returns the element at position _x_, _y_.

          Availability: Tk 8.6.

      -- Method: index (item)
          Returns the integer index of _item_ within its parent's list
          of children.

      -- Method: insert (parent, index[, iid=None[, **kw]])
          Creates a new item and returns the item identifier of the
          newly created item.

          _parent_ is the item ID of the parent item, or the empty
          string to create a new top-level item. _index_ is an integer,
          or the value "end", specifying where in the list of parent's
          children to insert the new item.  If _index_ is less than or
          equal to zero, the new node is inserted at the beginning; if
          _index_ is greater than or equal to the current number of
          children, it is inserted at the end. If _iid_ is specified,
          it is used as the item identifier; _iid_ must not already
          exist in the tree.  Otherwise, a new unique identifier is
          generated.

          See *note Item Options: 2041. for the list of available
          points.

      -- Method: item (item[, option[, **kw]])
          Query or modify the options for the specified _item_.

          If no options are given, a dict with options/values for the
          item is returned.  If _option_ is specified then the value
          for that option is returned.  Otherwise, sets the options to
          the corresponding values as given by _kw_.

      -- Method: move (item, parent, index)
          Moves _item_ to position _index_ in _parent_'s list of
          children.

          It is illegal to move an item under one of its descendants.
          If _index_ is less than or equal to zero, _item_ is moved to
          the beginning; if greater than or equal to the number of
          children, it is moved to the end. If _item_ was detached it
          is reattached.

      -- Method: next (item)
          Returns the identifier of _item_'s next sibling, or '' if
          _item_ is the last child of its parent.

      -- Method: parent (item)
          Returns the ID of the parent of _item_, or '' if _item_ is at
          the top level of the hierarchy.

      -- Method: prev (item)
          Returns the identifier of _item_'s previous sibling, or '' if
          _item_ is the first child of its parent.

      -- Method: reattach (item, parent, index)
          An alias for *note Treeview.move(): 2057.

      -- Method: see (item)
          Ensure that _item_ is visible.

          Sets all of _item_'s ancestors open option to True, and
          scrolls the widget if necessary so that _item_ is within the
          visible portion of the tree.

      -- Method: selection ([selop=None[, items=None]])
          If _selop_ is not specified, returns selected items.
          Otherwise, it will act according to the following selection
          methods.

      -- Method: selection_set (items)
          _items_ becomes the new selection.

      -- Method: selection_add (items)
          Add _items_ to the selection.

      -- Method: selection_remove (items)
          Remove _items_ from the selection.

      -- Method: selection_toggle (items)
          Toggle the selection state of each item in _items_.

      -- Method: set (item[, column=None[, value=None]])
          With one argument, returns a dictionary of column/value pairs
          for the specified _item_. With two arguments, returns the
          current value of the specified _column_. With three
          arguments, sets the value of given _column_ in given _item_
          to the specified _value_.

      -- Method: tag_bind (tagname[, sequence=None[, callback=None]])
          Bind a callback for the given event _sequence_ to the tag
          _tagname_.  When an event is delivered to an item, the
          callbacks for each of the item's tags option are called.

      -- Method: tag_configure (tagname[, option=None[, **kw]])
          Query or modify the options for the specified _tagname_.

          If _kw_ is not given, returns a dict of the option settings
          for _tagname_. If _option_ is specified, returns the value
          for that _option_ for the specified _tagname_. Otherwise,
          sets the options to the corresponding values for the given
          _tagname_.

      -- Method: tag_has (tagname[, item])
          If _item_ is specified, returns 1 or 0 depending on whether
          the specified _item_ has the given _tagname_. Otherwise,
          returns a list of all items that have the specified tag.

          Availability: Tk 8.6

      -- Method: xview (*args)
          Query or modify horizontal position of the treeview.

      -- Method: yview (*args)
          Query or modify vertical position of the treeview.


File: python.info,  Node: Ttk Styling,  Prev: Treeview,  Up: ttk --- Tk themed widgets

5.24.2.35 Ttk Styling
.....................

Each widget in *note ttk: 183. is assigned a style, which specifies the
set of elements making up the widget and how they are arranged, along
with dynamic and default settings for element options. By default the
style name is the same as the widget's class name, but it may be
overridden by the widget's style option. If the class name of a widget
is unknown, use the method `Misc.winfo_class()'
(somewidget.winfo_class()).

See also
........

Tcl'2004 conference presentation(1)
     This document explains how the theme engine works

 -- Class: ttk.Style
     This class is used to manipulate the style database.

      -- Method: configure (style, query_opt=None, **kw)
          Query or set the default value of the specified option(s) in
          _style_.

          Each key in _kw_ is an option and each value is a string
          identifying the value for that option.

          For example, to change every default button to be a flat
          button with some padding and a different background color do:

              import ttk
              import Tkinter

              root = Tkinter.Tk()

              ttk.Style().configure("TButton", padding=6, relief="flat",
                 background="#ccc")

              btn = ttk.Button(text="Sample")
              btn.pack()

              root.mainloop()



      -- Method: map (style, query_opt=None, **kw)
          Query or sets dynamic values of the specified option(s) in
          _style_.

          Each key in _kw_ is an option and each value should be a list
          or a tuple (usually) containing statespecs grouped in tuples,
          lists, or something else of your preference. A statespec is a
          compound of one or more states and then a value.

          An example:

              import Tkinter
              import ttk

              root = Tkinter.Tk()

              style = ttk.Style()
              style.map("C.TButton",
                  foreground=[('pressed', 'red'), ('active', 'blue')],
                  background=[('pressed', '!disabled', 'black'), ('active', 'white')]
                  )

              colored_btn = ttk.Button(text="Test", style="C.TButton").pack()

              root.mainloop()

          Note that the order of the (states, value) sequences for an
          option matters.  In the previous example, if you change the
          order to `[('active', 'blue'), ('pressed', 'red')]' in the
          foreground option, for example, you would get a blue
          foreground when the widget is in the active or pressed states.

      -- Method: lookup (style, option[, state=None[, default=None]])
          Returns the value specified for _option_ in _style_.

          If _state_ is specified, it is expected to be a sequence of
          one or more states. If the _default_ argument is set, it is
          used as a fallback value in case no specification for option
          is found.

          To check what font a Button uses by default, do:

              import ttk

              print ttk.Style().lookup("TButton", "font")



      -- Method: layout (style[, layoutspec=None])
          Define the widget layout for given _style_. If _layoutspec_
          is omitted, return the layout specification for given style.

          _layoutspec_, if specified, is expected to be a list or some
          other sequence type (excluding strings), where each item
          should be a tuple and the first item is the layout name and
          the second item should have the format described described in
          *note Layouts: 2069.

          To understand the format, see the following example (it is not
          intended to do anything useful):

              import ttk
              import Tkinter

              root = Tkinter.Tk()

              style = ttk.Style()
              style.layout("TMenubutton", [
                 ("Menubutton.background", None),
                 ("Menubutton.button", {"children":
                     [("Menubutton.focus", {"children":
                         [("Menubutton.padding", {"children":
                             [("Menubutton.label", {"side": "left", "expand": 1})]
                         })]
                     })]
                 }),
              ])

              mbtn = ttk.Menubutton(text='Text')
              mbtn.pack()
              root.mainloop()



      -- Method: element_create (elementname, etype, *args, **kw)
          Create a new element in the current theme, of the given
          _etype_ which is expected to be either "image", "from" or
          "vsapi". The latter is only available in Tk 8.6a for Windows
          XP and Vista and is not described here.

          If "image" is used, _args_ should contain the default image
          name followed by statespec/value pairs (this is the
          imagespec), and _kw_ may have the following options:

                  *
                   border=padding
                         padding is a list of up to four integers,
                         specifying the left, top, right, and bottom
                         borders, respectively.

                  *
                   height=height
                         Specifies a minimum height for the element. If
                         less than zero, the base image's height is
                         used as a default.

                  *
                   padding=padding
                         Specifies the element's interior padding.
                         Defaults to border's value if not specified.

                  *
                   sticky=spec
                         Specifies how the image is placed within the
                         final parcel. spec contains zero or more
                         characters “n”, “s”, “w”, or
                         “e”.

                  *
                   width=width
                         Specifies a minimum width for the element. If
                         less than zero, the base image's width is used
                         as a default.

          If "from" is used as the value of _etype_, *note
          element_create(): 206a. will clone an existing element.
          _args_ is expected to contain a themename, from which the
          element will be cloned, and optionally an element to clone
          from.  If this element to clone from is not specified, an
          empty element will be used. _kw_ is discarded.

      -- Method: element_names ()
          Returns the list of elements defined in the current theme.

      -- Method: element_options (elementname)
          Returns the list of _elementname_'s options.

      -- Method: theme_create (themename[, parent=None[,
               settings=None]])
          Create a new theme.

          It is an error if _themename_ already exists. If _parent_ is
          specified, the new theme will inherit styles, elements and
          layouts from the parent theme. If _settings_ are present they
          are expected to have the same syntax used for *note
          theme_settings(): 206e.

      -- Method: theme_settings (themename, settings)
          Temporarily sets the current theme to _themename_, apply
          specified _settings_ and then restore the previous theme.

          Each key in _settings_ is a style and each value may contain
          the keys 'configure', 'map', 'layout' and 'element create'
          and they are expected to have the same format as specified by
          the methods *note Style.configure(): 2066, *note Style.map():
          2013, *note Style.layout(): 2068. and *note
          Style.element_create(): 206a. respectively.

          As an example, let's change the Combobox for the default
          theme a bit:

              import ttk
              import Tkinter

              root = Tkinter.Tk()

              style = ttk.Style()
              style.theme_settings("default", {
                 "TCombobox": {
                     "configure": {"padding": 5},
                     "map": {
                         "background": [("active", "green2"),
                                        ("!disabled", "green4")],
                         "fieldbackground": [("!disabled", "green3")],
                         "foreground": [("focus", "OliveDrab1"),
                                        ("!disabled", "OliveDrab2")]
                     }
                 }
              })

              combo = ttk.Combobox().pack()

              root.mainloop()



      -- Method: theme_names ()
          Returns a list of all known themes.

      -- Method: theme_use ([themename])
          If _themename_ is not given, returns the theme in use.
          Otherwise, sets the current theme to _themename_, refreshes
          all widgets and emits a <<ThemeChanged>> event.

* Menu:

* Layouts::

  ---------- Footnotes ----------

  (1) http://tktable.sourceforge.net/tile/tile-tcl2004.pdf


File: python.info,  Node: Layouts,  Up: Ttk Styling

5.24.2.36 Layouts
.................

A layout can be just None, if it takes no options, or a dict of options
specifying how to arrange the element. The layout mechanism uses a
simplified version of the pack geometry manager: given an initial
cavity, each element is allocated a parcel. Valid options/values are:

        *
         side: whichside
               Specifies which side of the cavity to place the element;
               one of top, right, bottom or left. If omitted, the
               element occupies the entire cavity.

        *
         sticky: nswe
               Specifies where the element is placed inside its
               allocated parcel.

        *
         unit: 0 or 1
               If set to 1, causes the element and all of its
               descendants to be treated as a single element for the
               purposes of *note Widget.identify(): 2018. et al. It's
               used for things like scrollbar thumbs with grips.

        *
         children: [sublayout... ]
               Specifies a list of elements to place inside the
               element. Each element is a tuple (or other sequence
               type) where the first item is the layout name, and the
               other is a *note Layout: 2069.


File: python.info,  Node: Tix --- Extension widgets for Tk,  Next: ScrolledText --- Scrolled Text Widget,  Prev: ttk --- Tk themed widgets,  Up: Graphical User Interfaces with Tk

5.24.3 `Tix' -- Extension widgets for Tk
----------------------------------------

The *note Tix: 17d. (Tk Interface Extension) module provides an
additional rich set of widgets. Although the standard Tk library has
many useful widgets, they are far from complete. The *note Tix: 17d.
library provides most of the commonly needed widgets that are missing
from standard Tk: *note HList: 2075, *note ComboBox: 2076, *note
Control: 2077. (a.k.a. SpinBox) and an assortment of scrollable widgets.
*note Tix: 17d. also includes many more widgets that are generally
useful in a wide range of applications: *note NoteBook: 2078, *note
FileEntry: 2079, *note PanedWindow: 207a, etc; there are more than 40
of them.

  With all these new widgets, you can introduce new interaction
techniques into applications, creating more useful and more intuitive
user interfaces. You can design your application by choosing the most
appropriate widgets to match the special needs of your application and
users.

     Note: *note Tix: 17d. has been renamed to `tkinter.tix' in Python
     3.0.  The *note 2to3: bbf. tool will automatically adapt imports
     when converting your sources to 3.0.

See also
........

Tix Homepage(1)
     The home page for *note Tix: 17d.  This includes links to
     additional documentation and downloads.

Tix Man Pages(2)
     On-line version of the man pages and reference material.

Tix Programming Guide(3)
     On-line version of the programmer's reference material.

Tix Development Applications(4)
     Tix applications for development of Tix and Tkinter programs. Tide
     applications work under Tk or Tkinter, and include *TixInspect*,
     an inspector to remotely modify and debug Tix/Tk/Tkinter
     applications.

* Menu:

* Using Tix::
* Tix Widgets::
* Tix Commands::

  ---------- Footnotes ----------

  (1) http://tix.sourceforge.net/

  (2) http://tix.sourceforge.net/dist/current/man/

  (3)
http://tix.sourceforge.net/dist/current/docs/tix-book/tix.book.html

  (4) http://tix.sourceforge.net/Tixapps/src/Tide.html


File: python.info,  Node: Using Tix,  Next: Tix Widgets,  Up: Tix --- Extension widgets for Tk

5.24.3.1 Using Tix
..................

 -- Class: Tix.Tix (screenName[, baseName[, className]])
     Toplevel widget of Tix which represents mostly the main window of
     an application. It has an associated Tcl interpreter.

     Classes in the *note Tix: 17d. module subclasses the classes in
     the *note Tkinter: 17e.  module. The former imports the latter, so
     to use *note Tix: 17d. with Tkinter, all you need to do is to
     import one module. In general, you can just import *note Tix: 17d,
     and replace the toplevel call to *note Tkinter.Tk: 1ff0. with
     `Tix.Tk':

         import Tix
         from Tkconstants import *
         root = Tix.Tk()



  To use *note Tix: 17d, you must have the *note Tix: 17d. widgets
installed, usually alongside your installation of the Tk widgets. To
test your installation, try the following:

    import Tix
    root = Tix.Tk()
    root.tk.eval('package require Tix')

If this fails, you have a Tk installation problem which must be
resolved before proceeding. Use the environment variable `TIX_LIBRARY'
to point to the installed *note Tix: 17d. library directory, and make
sure you have the dynamic object library (`tix8183.dll' or
`libtix8183.so') in  the same directory that contains your Tk dynamic
object library (`tk8183.dll' or `libtk8183.so'). The directory with the
dynamic object library should also have a file called `pkgIndex.tcl'
(case sensitive), which contains the line:

    package ifneeded Tix 8.1 [list load "[file join $dir tix8183.dll]" Tix]



File: python.info,  Node: Tix Widgets,  Next: Tix Commands,  Prev: Using Tix,  Up: Tix --- Extension widgets for Tk

5.24.3.2 Tix Widgets
....................

Tix(1) introduces over 40 widget classes to the *note Tkinter: 17e.
repertoire.  There is a demo of all the *note Tix: 17d. widgets in the
`Demo/tix' directory of the standard distribution.

* Menu:

* Basic Widgets::
* File Selectors::
* Hierarchical ListBox::
* Tabular ListBox::
* Manager Widgets::
* Image Types::
* Miscellaneous Widgets::
* Form Geometry Manager::

  ---------- Footnotes ----------

  (1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/TixIntro.htm


File: python.info,  Node: Basic Widgets,  Next: File Selectors,  Up: Tix Widgets

5.24.3.3 Basic Widgets
......................

 -- Class: Tix.Balloon
     A Balloon(1) that pops up over a widget to provide help.  When the
     user moves the cursor inside a widget to which a Balloon widget
     has been bound, a small pop-up window with a descriptive message
     will be shown on the screen.

 -- Class: Tix.ButtonBox
     The ButtonBox(2) widget creates a box of buttons, such as is
     commonly used for `Ok Cancel'.

 -- Class: Tix.ComboBox
     The ComboBox(3) widget is similar to the combo box control in MS
     Windows. The user can select a choice by either typing in the
     entry subwdget or selecting from the listbox subwidget.

 -- Class: Tix.Control
     The Control(4) widget is also known as the `SpinBox' widget. The
     user can adjust the value by pressing the two arrow buttons or by
     entering the value directly into the entry. The new value will be
     checked against the user-defined upper and lower limits.

 -- Class: Tix.LabelEntry
     The LabelEntry(5) widget packages an entry widget and a label into
     one mega widget. It can be used be used to simplify the creation
     of "entry-form" type of interface.

 -- Class: Tix.LabelFrame
     The LabelFrame(6) widget packages a frame widget and a label into
     one mega widget.  To create widgets inside a LabelFrame widget,
     one creates the new widgets relative to the `frame' subwidget and
     manage them inside the `frame' subwidget.

 -- Class: Tix.Meter
     The Meter(7) widget can be used to show the progress of a
     background job which may take a long time to execute.

 -- Class: Tix.OptionMenu
     The OptionMenu(8) creates a menu button of options.

 -- Class: Tix.PopupMenu
     The PopupMenu(9) widget can be used as a replacement of the
     `tk_popup' command. The advantage of the *note Tix: 17d. *note
     PopupMenu: 2085. widget is it requires less application code to
     manipulate.

 -- Class: Tix.Select
     The Select(10) widget is a container of button subwidgets. It can
     be used to provide radio-box or check-box style of selection
     options for the user.

 -- Class: Tix.StdButtonBox
     The StdButtonBox(11) widget is a group of standard buttons for
     Motif-like dialog boxes.

  ---------- Footnotes ----------

  (1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixBalloon.htm

  (2)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixButtonBox.htm

  (3)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixComboBox.htm

  (4)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixControl.htm

  (5)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixLabelEntry.htm

  (6)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixLabelFrame.htm

  (7)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixMeter.htm

  (8)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixOptionMenu.htm

  (9)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixPopupMenu.htm

  (10)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixSelect.htm

  (11)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixStdButtonBox.htm


File: python.info,  Node: File Selectors,  Next: Hierarchical ListBox,  Prev: Basic Widgets,  Up: Tix Widgets

5.24.3.4 File Selectors
.......................

 -- Class: Tix.DirList
     The DirList(1) widget displays a list view of a directory, its
     previous directories and its sub-directories. The user can choose
     one of the directories displayed in the list or change to another
     directory.

 -- Class: Tix.DirTree
     The DirTree(2) widget displays a tree view of a directory, its
     previous directories and its sub-directories. The user can choose
     one of the directories displayed in the list or change to another
     directory.

 -- Class: Tix.DirSelectDialog
     The DirSelectDialog(3) widget presents the directories in the file
     system in a dialog window.  The user can use this dialog window to
     navigate through the file system to select the desired directory.

 -- Class: Tix.DirSelectBox
     The *note DirSelectBox: 208c. is similar to the standard Motif(TM)
     directory-selection box. It is generally used for the user to
     choose a directory.  DirSelectBox stores the directories mostly
     recently selected into a ComboBox widget so that they can be
     quickly selected again.

 -- Class: Tix.ExFileSelectBox
     The ExFileSelectBox(4) widget is usually embedded in a
     tixExFileSelectDialog widget. It provides an convenient method for
     the user to select files. The style of the *note ExFileSelectBox:
     208d. widget is very similar to the standard file dialog on MS
     Windows 3.1.

 -- Class: Tix.FileSelectBox
     The FileSelectBox(5) is similar to the standard Motif(TM)
     file-selection box. It is generally used for the user to choose a
     file. FileSelectBox stores the files mostly recently selected into
     a *note ComboBox: 2076. widget so that they can be quickly selected
     again.

 -- Class: Tix.FileEntry
     The FileEntry(6) widget can be used to input a filename. The user
     can type in the filename manually. Alternatively, the user can
     press the button widget that sits next to the entry, which will
     bring up a file selection dialog.

  ---------- Footnotes ----------

  (1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirList.htm

  (2)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirTree.htm

  (3)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirSelectDialog.htm

  (4)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixExFileSelectBox.htm

  (5)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixFileSelectBox.htm

  (6)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixFileEntry.htm


File: python.info,  Node: Hierarchical ListBox,  Next: Tabular ListBox,  Prev: File Selectors,  Up: Tix Widgets

5.24.3.5 Hierarchical ListBox
.............................

 -- Class: Tix.HList
     The HList(1) widget can be used to display any data that have a
     hierarchical structure, for example, file system directory trees.
     The list entries are indented and connected by branch lines
     according to their places in the hierarchy.

 -- Class: Tix.CheckList
     The CheckList(2) widget displays a list of items to be selected by
     the user. CheckList acts similarly to the Tk checkbutton or
     radiobutton widgets, except it is capable of handling many more
     items than checkbuttons or radiobuttons.

 -- Class: Tix.Tree
     The Tree(3) widget can be used to display hierarchical data in a
     tree form. The user can adjust the view of the tree by opening or
     closing parts of the tree.

  ---------- Footnotes ----------

  (1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixHList.htm

  (2)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixCheckList.htm

  (3)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixTree.htm


File: python.info,  Node: Tabular ListBox,  Next: Manager Widgets,  Prev: Hierarchical ListBox,  Up: Tix Widgets

5.24.3.6 Tabular ListBox
........................

 -- Class: Tix.TList
     The TList(1) widget can be used to display data in a tabular
     format. The list entries of a *note TList: 2093. widget are
     similar to the entries in the Tk listbox widget.  The main
     differences are (1) the *note TList: 2093. widget can display the
     list entries in a two dimensional format and (2) you can use
     graphical images as well as multiple colors and fonts for the list
     entries.

  ---------- Footnotes ----------

  (1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixTList.htm


File: python.info,  Node: Manager Widgets,  Next: Image Types,  Prev: Tabular ListBox,  Up: Tix Widgets

5.24.3.7 Manager Widgets
........................

 -- Class: Tix.PanedWindow
     The PanedWindow(1) widget allows the user to interactively
     manipulate the sizes of several panes.  The panes can be arranged
     either vertically or horizontally.  The user changes the sizes of
     the panes by dragging the resize handle between two panes.

 -- Class: Tix.ListNoteBook
     The ListNoteBook(2) widget is very similar to the `TixNoteBook'
     widget: it can be used to display many windows in a limited space
     using a notebook metaphor. The notebook is divided into a stack of
     pages (windows). At one time only one of these pages can be shown.
     The user can navigate through these pages by choosing the name of
     the desired page in the `hlist' subwidget.

 -- Class: Tix.NoteBook
     The NoteBook(3) widget can be used to display many windows in a
     limited space using a notebook metaphor. The notebook is divided
     into a stack of pages. At one time only one of these pages can be
     shown. The user can navigate through these pages by choosing the
     visual "tabs" at the top of the NoteBook widget.

  ---------- Footnotes ----------

  (1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixPanedWindow.htm

  (2)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixListNoteBook.htm

  (3)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixNoteBook.htm


File: python.info,  Node: Image Types,  Next: Miscellaneous Widgets,  Prev: Manager Widgets,  Up: Tix Widgets

5.24.3.8 Image Types
....................

The *note Tix: 17d. module adds:

   * pixmap(1) capabilities to all *note Tix: 17d. and *note Tkinter:
     17e. widgets to create color images from XPM files.

   * Compound(2) image types can be used to create images that consists
     of multiple horizontal lines; each line is composed of a series of
     items (texts, bitmaps, images or spaces) arranged from left to
     right. For example, a compound image can be used to display a
     bitmap and a text string simultaneously in a Tk `Button' widget.


  ---------- Footnotes ----------

  (1) http://tix.sourceforge.net/dist/current/man/html/TixCmd/pixmap.htm

  (2)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/compound.htm


File: python.info,  Node: Miscellaneous Widgets,  Next: Form Geometry Manager,  Prev: Image Types,  Up: Tix Widgets

5.24.3.9 Miscellaneous Widgets
..............................

 -- Class: Tix.InputOnly
     The InputOnly(1) widgets are to accept inputs from the user, which
     can be done with the `bind' command (Unix only).

  ---------- Footnotes ----------

  (1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixInputOnly.htm


File: python.info,  Node: Form Geometry Manager,  Prev: Miscellaneous Widgets,  Up: Tix Widgets

5.24.3.10 Form Geometry Manager
...............................

In addition, *note Tix: 17d. augments *note Tkinter: 17e. by providing:

 -- Class: Tix.Form
     The Form(1) geometry manager based on attachment rules for all Tk
     widgets.

  ---------- Footnotes ----------

  (1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixForm.htm


File: python.info,  Node: Tix Commands,  Prev: Tix Widgets,  Up: Tix --- Extension widgets for Tk

5.24.3.11 Tix Commands
......................

 -- Class: Tix.tixCommand
     The tix commands(1) provide access to miscellaneous elements of
     *note Tix: 17d.'s internal state and the *note Tix: 17d.
     application context.  Most of the information manipulated by these
     methods pertains to the application as a whole, or to a screen or
     display, rather than to a particular window.

     To view the current settings, the common usage is:

         import Tix
         root = Tix.Tk()
         print root.tix_configure()



 -- Method: tixCommand.tix_configure ([cnf], **kw)
     Query or modify the configuration options of the Tix application
     context. If no option is specified, returns a dictionary all of
     the available options.  If option is specified with no value, then
     the method returns a list describing the one named option (this
     list will be identical to the corresponding sublist of the value
     returned if no option is specified).  If one or more option-value
     pairs are specified, then the method modifies the given option(s)
     to have the given value(s); in this case the method returns an
     empty string. Option may be any of the configuration options.

 -- Method: tixCommand.tix_cget (option)
     Returns the current value of the configuration option given by
     _option_. Option may be any of the configuration options.

 -- Method: tixCommand.tix_getbitmap (name)
     Locates a bitmap file of the name `name.xpm' or `name' in one of
     the bitmap directories (see the *note tix_addbitmapdir(): 20a0.
     method).  By using *note tix_getbitmap(): 209f, you can avoid hard
     coding the pathnames of the bitmap files in your application. When
     successful, it returns the complete pathname of the bitmap file,
     prefixed with the character `@'.  The returned value can be used
     to configure the `bitmap' option of the Tk and Tix widgets.

 -- Method: tixCommand.tix_addbitmapdir (directory)
     Tix maintains a list of directories under which the *note
     tix_getimage(): 20a1. and *note tix_getbitmap(): 209f. methods
     will search for image files.  The standard bitmap directory is
     `$TIX_LIBRARY/bitmaps'. The *note tix_addbitmapdir(): 20a0. method
     adds _directory_ into this list. By using this method, the image
     files of an applications can also be located using the *note
     tix_getimage(): 20a1. or *note tix_getbitmap(): 209f. method.

 -- Method: tixCommand.tix_filedialog ([dlgclass])
     Returns the file selection dialog that may be shared among
     different calls from this application.  This method will create a
     file selection dialog widget when it is called the first time.
     This dialog will be returned by all subsequent calls to *note
     tix_filedialog(): 20a2.  An optional dlgclass parameter can be
     passed as a string to specified what type of file selection dialog
     widget is desired.  Possible options are `tix', `FileSelectDialog'
     or `tixExFileSelectDialog'.

 -- Method: tixCommand.tix_getimage (self, name)
     Locates an image file of the name `name.xpm', `name.xbm' or
     `name.ppm' in one of the bitmap directories (see the *note
     tix_addbitmapdir(): 20a0. method above). If more than one file
     with the same name (but different extensions) exist, then the
     image type is chosen according to the depth of the X display: xbm
     images are chosen on monochrome displays and color images are
     chosen on color displays. By using *note tix_getimage(): 20a1, you
     can avoid hard coding the pathnames of the image files in your
     application. When successful, this method returns the name of the
     newly created image, which can be used to configure the `image'
     option of the Tk and Tix widgets.

 -- Method: tixCommand.tix_option_get (name)
     Gets the options maintained by the Tix scheme mechanism.

 -- Method: tixCommand.tix_resetoptions (newScheme, newFontSet[,
          newScmPrio])
     Resets the scheme and fontset of the Tix application to
     _newScheme_ and _newFontSet_, respectively.  This affects only
     those widgets created after this call.  Therefore, it is best to
     call the resetoptions method before the creation of any widgets in
     a Tix application.

     The optional parameter _newScmPrio_ can be given to reset the
     priority level of the Tk options set by the Tix schemes.

     Because of the way Tk handles the X option database, after Tix has
     been has imported and inited, it is not possible to reset the
     color schemes and font sets using the `tix_config()' method.
     Instead, the *note tix_resetoptions(): 20a4.  method must be used.

  ---------- Footnotes ----------

  (1) http://tix.sourceforge.net/dist/current/man/html/TixCmd/tix.htm


File: python.info,  Node: ScrolledText --- Scrolled Text Widget,  Next: turtle --- Turtle graphics for Tk,  Prev: Tix --- Extension widgets for Tk,  Up: Graphical User Interfaces with Tk

5.24.4 `ScrolledText' -- Scrolled Text Widget
---------------------------------------------

The *note ScrolledText: 14e. module provides a class of the same name
which implements a basic text widget which has a vertical scroll bar
configured to do the "right thing."  Using the *note ScrolledText: 14e.
class is a lot easier than setting up a text widget and scroll bar
directly.  The constructor is the same as that of the `Tkinter.Text'
class.

     Note: *note ScrolledText: 14e. has been renamed to
     `tkinter.scrolledtext' in Python 3.0.  The *note 2to3: bbf. tool
     will automatically adapt imports when converting your sources to
     3.0.

  The text widget and scrollbar are packed together in a `Frame', and
the methods of the `Grid' and `Pack' geometry managers are acquired
from the `Frame' object.  This allows the *note ScrolledText: 14e.
widget to be used directly to achieve most normal geometry management
behavior.

  Should more specific control be necessary, the following attributes
are available:

 -- Attribute: ScrolledText.frame
     The frame which surrounds the text and scroll bar widgets.

 -- Attribute: ScrolledText.vbar
     The scroll bar widget.


File: python.info,  Node: turtle --- Turtle graphics for Tk,  Next: IDLE,  Prev: ScrolledText --- Scrolled Text Widget,  Up: Graphical User Interfaces with Tk

5.24.5 `turtle' -- Turtle graphics for Tk
-----------------------------------------

* Menu:

* Introduction: Introduction<9>.
* Overview over available Turtle and Screen methods::
* Methods of RawTurtle/Turtle and corresponding functions::
* Methods of TurtleScreen/Screen and corresponding functions::
* The public classes of the module turtle::
* Help and configuration::
* Demo scripts::


File: python.info,  Node: Introduction<9>,  Next: Overview over available Turtle and Screen methods,  Up: turtle --- Turtle graphics for Tk

5.24.5.1 Introduction
.....................

Turtle graphics is a popular way for introducing programming to kids.
It was part of the original Logo programming language developed by
Wally Feurzig and Seymour Papert in 1966.

  Imagine a robotic turtle starting at (0, 0) in the x-y plane.  Give
it the command `turtle.forward(15)', and it moves (on-screen!) 15
pixels in the direction it is facing, drawing a line as it moves.  Give
it the command `turtle.left(25)', and it rotates in-place 25 degrees
clockwise.

  By combining together these and similar commands, intricate shapes
and pictures can easily be drawn.

  The *note turtle: 185. module is an extended reimplementation of the
same-named module from the Python standard distribution up to version
Python 2.5.

  It tries to keep the merits of the old turtle module and to be
(nearly) 100% compatible with it.  This means in the first place to
enable the learning programmer to use all the commands, classes and
methods interactively when using the module from within IDLE run with
the `-n' switch.

  The turtle module provides turtle graphics primitives, in both
object-oriented and procedure-oriented ways.  Because it uses *note
Tkinter: 17e. for the underlying graphics, it needs a version of Python
installed with Tk support.

  The object-oriented interface uses essentially two+two classes:

  1. The *note TurtleScreen: 20ac. class defines graphics windows as a
     playground for the drawing turtles.  Its constructor needs a
     `Tkinter.Canvas' or a *note ScrolledCanvas: 20ad. as argument.  It
     should be used when *note turtle: 185. is used as part of some
     application.

     The function *note Screen(): 20ae. returns a singleton object of a
     *note TurtleScreen: 20ac. subclass. This function should be used
     when *note turtle: 185. is used as a standalone tool for doing
     graphics.  As a singleton object, inheriting from its class is not
     possible.

     All methods of TurtleScreen/Screen also exist as functions, i.e.
     as part of the procedure-oriented interface.

  2. *note RawTurtle: 20af. (alias: *note RawPen: 20b0.) defines Turtle
     objects which draw on a *note TurtleScreen: 20ac.  Its constructor
     needs a Canvas, ScrolledCanvas or TurtleScreen as argument, so the
     RawTurtle objects know where to draw.

     Derived from RawTurtle is the subclass *note Turtle: 20b1. (alias:
     `Pen'), which draws on "the" *note Screen: 20ae. - instance which
     is automatically created, if not already present.

     All methods of RawTurtle/Turtle also exist as functions, i.e. part
     of the procedure-oriented interface.

  The procedural interface provides functions which are derived from
the methods of the classes *note Screen: 20ae. and *note Turtle: 20b1.
They have the same names as the corresponding methods.  A screen object
is automatically created whenever a function derived from a Screen
method is called.  An (unnamed) turtle object is automatically created
whenever any of the functions derived from a Turtle method is called.

  To use multiple turtles an a screen one has to use the
object-oriented interface.

     Note: In the following documentation the argument list for
     functions is given.  Methods, of course, have the additional first
     argument _self_ which is omitted here.


File: python.info,  Node: Overview over available Turtle and Screen methods,  Next: Methods of RawTurtle/Turtle and corresponding functions,  Prev: Introduction<9>,  Up: turtle --- Turtle graphics for Tk

5.24.5.2 Overview over available Turtle and Screen methods
..........................................................

* Menu:

* Turtle methods::
* Methods of TurtleScreen/Screen::


File: python.info,  Node: Turtle methods,  Next: Methods of TurtleScreen/Screen,  Up: Overview over available Turtle and Screen methods

5.24.5.3 Turtle methods
.......................

Turtle motion

    Move and draw
              *note forward(): 20b4. | *note fd(): 20b5. 
              *note backward(): 20b6. | *note bk(): 20b7. | *note back(): 20b8. 
              *note right(): 20b9. | *note rt(): 20ba. 
              *note left(): 20bb. | *note lt(): 20bc. 
              *note goto(): 20bd. | *note setpos(): 20be. | *note setposition(): 20bf. 
              *note setx(): 20c0. 
              *note sety(): 20c1. 
              *note setheading(): 20c2. | *note seth(): 20c3. 
              *note home(): 20c4. 
              *note circle(): 20c5. 
              *note dot(): 20c6. 
              *note stamp(): 20c7. 
              *note clearstamp(): 20c8. 
              *note clearstamps(): 20c9. 
              *note undo(): 20ca. 
              *note speed(): 20cb. 

    Tell Turtle's state
              *note position(): 20cc. | *note pos(): 20cd. 
              *note towards(): 20ce. 
              *note xcor(): 20cf. 
              *note ycor(): 20d0. 
              *note heading(): 20d1. 
              *note distance(): 20d2. 

    Setting and measurement
              *note degrees(): 20d3. 
              *note radians(): 20d4. 


Pen control

    Drawing state
              *note pendown(): 20d5. | *note pd(): 20d6. | *note down(): 20d7. 
              *note penup(): 20d8. | *note pu(): 20d9. | *note up(): 20da. 
              *note pensize(): 20db. | *note width(): 20dc. 
              *note pen(): 20dd. 
              *note isdown(): 20de. 

    Color control
              *note color(): 20df. 
              *note pencolor(): 20e0. 
              *note fillcolor(): 20e1. 

    Filling
              *note fill(): 20e2. 
              *note begin_fill(): 20e3. 
              *note end_fill(): 20e4. 

    More drawing control
              *note reset(): 20e5. 
              *note clear(): 20e6. 
              *note write(): 20e7. 


Turtle state

    Visibility
              *note showturtle(): 20e8. | *note st(): 20e9. 
              *note hideturtle(): 20ea. | *note ht(): 20eb. 
              *note isvisible(): 20ec. 

    Appearance
              *note shape(): 20ed. 
              *note resizemode(): 20ee. 
              *note shapesize(): 20ef. | *note turtlesize(): 20f0. 
              *note settiltangle(): 20f1. 
              *note tiltangle(): 20f2. 
              *note tilt(): 20f3. 


Using events
         *note onclick(): 20f4. 
         *note onrelease(): 20f5. 
         *note ondrag(): 20f6. 

Special Turtle methods
         *note begin_poly(): 20f7. 
         *note end_poly(): 20f8. 
         *note get_poly(): 20f9. 
         *note clone(): 20fa. 
         *note getturtle(): 20fb. | *note getpen(): 20fc. 
         *note getscreen(): 20fd. 
         *note setundobuffer(): 20fe. 
         *note undobufferentries(): 20ff. 
         *note tracer(): 2100. 
         *note window_width(): 2101. 
         *note window_height(): 2102. 



File: python.info,  Node: Methods of TurtleScreen/Screen,  Prev: Turtle methods,  Up: Overview over available Turtle and Screen methods

5.24.5.4 Methods of TurtleScreen/Screen
.......................................

Window control
         *note bgcolor(): 2104. 
         *note bgpic(): 2105. 
         *note clear(): 20e6. | *note clearscreen(): 2106. 
         *note reset(): 20e5. | *note resetscreen(): 2107. 
         *note screensize(): 2108. 
         *note setworldcoordinates(): 2109. 

Animation control
         *note delay(): 210a. 
         *note tracer(): 2100. 
         *note update(): 210b. 

Using screen events
         *note listen(): 210c. 
         *note onkey(): 210d. 
         *note onclick(): 20f4. | *note onscreenclick(): 210e. 
         *note ontimer(): 210f. 

Settings and special methods
         *note mode(): 2110. 
         *note colormode(): 2111. 
         *note getcanvas(): 2112. 
         *note getshapes(): 2113. 
         *note register_shape(): 2114. | *note addshape(): 2115. 
         *note turtles(): 2116. 
         *note window_height(): 2102. 
         *note window_width(): 2101. 

Methods specific to Screen
         *note bye(): 2117. 
         *note exitonclick(): 2118. 
         *note setup(): 2119. 
         *note title(): 211a. 



File: python.info,  Node: Methods of RawTurtle/Turtle and corresponding functions,  Next: Methods of TurtleScreen/Screen and corresponding functions,  Prev: Overview over available Turtle and Screen methods,  Up: turtle --- Turtle graphics for Tk

5.24.5.5 Methods of RawTurtle/Turtle and corresponding functions
................................................................

Most of the examples in this section refer to a Turtle instance called
`turtle'.

* Menu:

* Turtle motion::
* Tell Turtle's state::
* Settings for measurement::
* Pen control::
* Turtle state::
* Using events::
* Special Turtle methods::
* Excursus about the use of compound shapes::


File: python.info,  Node: Turtle motion,  Next: Tell Turtle's state,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.6 Turtle motion
......................

 -- Function: turtle.forward (distance)
 -- Function: turtle.fd (distance)
          Parameters: *distance* - a number (integer or float)

     Move the turtle forward by the specified _distance_, in the
     direction the turtle is headed.

         >>> turtle.position()
         (0.00,0.00)
         >>> turtle.forward(25)
         >>> turtle.position()
         (25.00,0.00)
         >>> turtle.forward(-75)
         >>> turtle.position()
         (-50.00,0.00)



 -- Function: turtle.back (distance)
 -- Function: turtle.bk (distance)
 -- Function: turtle.backward (distance)
          Parameters: *distance* - a number

     Move the turtle backward by _distance_, opposite to the direction
     the turtle is headed.  Do not change the turtle's heading.

         >>> turtle.position()
         (0.00,0.00)
         >>> turtle.backward(30)
         >>> turtle.position()
         (-30.00,0.00)



 -- Function: turtle.right (angle)
 -- Function: turtle.rt (angle)
          Parameters: *angle* - a number (integer or float)

     Turn turtle right by _angle_ units.  (Units are by default
     degrees, but can be set via the *note degrees(): 20d3. and *note
     radians(): 20d4. functions.)  Angle orientation depends on the
     turtle mode, see *note mode(): 2110.

         >>> turtle.heading()
         22.0
         >>> turtle.right(45)
         >>> turtle.heading()
         337.0



 -- Function: turtle.left (angle)
 -- Function: turtle.lt (angle)
          Parameters: *angle* - a number (integer or float)

     Turn turtle left by _angle_ units.  (Units are by default degrees,
     but can be set via the *note degrees(): 20d3. and *note radians():
     20d4. functions.)  Angle orientation depends on the turtle mode,
     see *note mode(): 2110.

         >>> turtle.heading()
         22.0
         >>> turtle.left(45)
         >>> turtle.heading()
         67.0



 -- Function: turtle.goto (x, y=None)
 -- Function: turtle.setpos (x, y=None)
 -- Function: turtle.setposition (x, y=None)
          Parameters:

             * *x* - a number or a pair/vector of numbers

             * *y* - a number or `None'

     If _y_ is `None', _x_ must be a pair of coordinates or a *note
     Vec2D: 211d.  (e.g. as returned by *note pos(): 20cd.).

     Move turtle to an absolute position.  If the pen is down, draw
     line.  Do not change the turtle's orientation.

         >>> tp = turtle.pos()
         >>> tp
         (0.00,0.00)
         >>> turtle.setpos(60,30)
         >>> turtle.pos()
         (60.00,30.00)
         >>> turtle.setpos((20,80))
         >>> turtle.pos()
         (20.00,80.00)
         >>> turtle.setpos(tp)
         >>> turtle.pos()
         (0.00,0.00)



 -- Function: turtle.setx (x)
          Parameters: *x* - a number (integer or float)

     Set the turtle's first coordinate to _x_, leave second coordinate
     unchanged.

         >>> turtle.position()
         (0.00,240.00)
         >>> turtle.setx(10)
         >>> turtle.position()
         (10.00,240.00)



 -- Function: turtle.sety (y)
          Parameters: *y* - a number (integer or float)

     Set the turtle's second coordinate to _y_, leave first coordinate
     unchanged.

         >>> turtle.position()
         (0.00,40.00)
         >>> turtle.sety(-10)
         >>> turtle.position()
         (0.00,-10.00)



 -- Function: turtle.setheading (to_angle)
 -- Function: turtle.seth (to_angle)
          Parameters: *to_angle* - a number (integer or float)

     Set the orientation of the turtle to _to_angle_.  Here are some
     common directions in degrees:

     standard mode           logo mode
     ------------------------------------------------- 
     0 - east                0 - north
     90 - north              90 - east
     180 - west              180 - south
     270 - south             270 - west

         >>> turtle.setheading(90)
         >>> turtle.heading()
         90.0



 -- Function: turtle.home ()
     Move turtle to the origin - coordinates (0,0) - and set its
     heading to its start-orientation (which depends on the mode, see
     *note mode(): 2110.).

         >>> turtle.heading()
         90.0
         >>> turtle.position()
         (0.00,-10.00)
         >>> turtle.home()
         >>> turtle.position()
         (0.00,0.00)
         >>> turtle.heading()
         0.0



 -- Function: turtle.circle (radius, extent=None, steps=None)
          Parameters:

             * *radius* - a number

             * *extent* - a number (or `None')

             * *steps* - an integer (or `None')

     Draw a circle with given _radius_.  The center is _radius_ units
     left of the turtle; _extent_ - an angle - determines which part of
     the circle is drawn.  If _extent_ is not given, draw the entire
     circle.  If _extent_ is not a full circle, one endpoint of the arc
     is the current pen position.  Draw the arc in counterclockwise
     direction if _radius_ is positive, otherwise in clockwise
     direction.  Finally the direction of the turtle is changed by the
     amount of _extent_.

     As the circle is approximated by an inscribed regular polygon,
     _steps_ determines the number of steps to use.  If not given, it
     will be calculated automatically.  May be used to draw regular
     polygons.

         >>> turtle.home()
         >>> turtle.position()
         (0.00,0.00)
         >>> turtle.heading()
         0.0
         >>> turtle.circle(50)
         >>> turtle.position()
         (-0.00,0.00)
         >>> turtle.heading()
         0.0
         >>> turtle.circle(120, 180)  # draw a semicircle
         >>> turtle.position()
         (0.00,240.00)
         >>> turtle.heading()
         180.0



 -- Function: turtle.dot (size=None, *color)
          Parameters:

             * *size* - an integer >= 1 (if given)

             * *color* - a colorstring or a numeric color tuple

     Draw a circular dot with diameter _size_, using _color_.  If
     _size_ is not given, the maximum of pensize+4 and 2*pensize is
     used.

         >>> turtle.home()
         >>> turtle.dot()
         >>> turtle.fd(50); turtle.dot(20, "blue"); turtle.fd(50)
         >>> turtle.position()
         (100.00,-0.00)
         >>> turtle.heading()
         0.0



 -- Function: turtle.stamp ()
     Stamp a copy of the turtle shape onto the canvas at the current
     turtle position.  Return a stamp_id for that stamp, which can be
     used to delete it by calling `clearstamp(stamp_id)'.

         >>> turtle.color("blue")
         >>> turtle.stamp()
         11
         >>> turtle.fd(50)



 -- Function: turtle.clearstamp (stampid)
          Parameters: *stampid* - an integer, must be return value of
          previous *note stamp(): 20c7. call

     Delete stamp with given _stampid_.

         >>> turtle.position()
         (150.00,-0.00)
         >>> turtle.color("blue")
         >>> astamp = turtle.stamp()
         >>> turtle.fd(50)
         >>> turtle.position()
         (200.00,-0.00)
         >>> turtle.clearstamp(astamp)
         >>> turtle.position()
         (200.00,-0.00)



 -- Function: turtle.clearstamps (n=None)
          Parameters: *n* - an integer (or `None')

     Delete all or first/last _n_ of turtle's stamps.  If _n_ is None,
     delete all stamps, if _n_ > 0 delete first _n_ stamps, else if _n_
     < 0 delete last _n_ stamps.

         >>> for i in range(8):
         ...     turtle.stamp(); turtle.fd(30)
         13
         14
         15
         16
         17
         18
         19
         20
         >>> turtle.clearstamps(2)
         >>> turtle.clearstamps(-2)
         >>> turtle.clearstamps()



 -- Function: turtle.undo ()
     Undo (repeatedly) the last turtle action(s).  Number of available
     undo actions is determined by the size of the undobuffer.

         >>> for i in range(4):
         ...     turtle.fd(50); turtle.lt(80)
         ...
         >>> for i in range(8):
         ...     turtle.undo()



 -- Function: turtle.speed (speed=None)
          Parameters: *speed* - an integer in the range 0..10 or a
          speedstring (see below)

     Set the turtle's speed to an integer value in the range 0..10.  If
     no argument is given, return current speed.

     If input is a number greater than 10 or smaller than 0.5, speed is
     set to 0.  Speedstrings are mapped to speedvalues as follows:

        * "fastest":  0

        * "fast":  10

        * "normal":  6

        * "slow":  3

        * "slowest":  1

     Speeds from 1 to 10 enforce increasingly faster animation of line
     drawing and turtle turning.

     Attention: _speed_ = 0 means that _no_ animation takes place.
     forward/back makes turtle jump and likewise left/right make the
     turtle turn instantly.

         >>> turtle.speed()
         3
         >>> turtle.speed('normal')
         >>> turtle.speed()
         6
         >>> turtle.speed(9)
         >>> turtle.speed()
         9




File: python.info,  Node: Tell Turtle's state,  Next: Settings for measurement,  Prev: Turtle motion,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.7 Tell Turtle's state
............................

 -- Function: turtle.position ()
 -- Function: turtle.pos ()
     Return the turtle's current location (x,y) (as a *note Vec2D:
     211d. vector).

         >>> turtle.pos()
         (440.00,-0.00)



 -- Function: turtle.towards (x, y=None)
          Parameters:

             * *x* - a number or a pair/vector of numbers or a turtle
               instance

             * *y* - a number if _x_ is a number, else `None'

     Return the angle between the line from turtle position to position
     specified by (x,y), the vector or the other turtle.  This depends
     on the turtle's start orientation which depends on the mode -
     "standard"/"world" or "logo").

         >>> turtle.goto(10, 10)
         >>> turtle.towards(0,0)
         225.0



 -- Function: turtle.xcor ()
     Return the turtle's x coordinate.

         >>> turtle.home()
         >>> turtle.left(50)
         >>> turtle.forward(100)
         >>> turtle.pos()
         (64.28,76.60)
         >>> print turtle.xcor()
         64.2787609687



 -- Function: turtle.ycor ()
     Return the turtle's y coordinate.

         >>> turtle.home()
         >>> turtle.left(60)
         >>> turtle.forward(100)
         >>> print turtle.pos()
         (50.00,86.60)
         >>> print turtle.ycor()
         86.6025403784



 -- Function: turtle.heading ()
     Return the turtle's current heading (value depends on the turtle
     mode, see *note mode(): 2110.).

         >>> turtle.home()
         >>> turtle.left(67)
         >>> turtle.heading()
         67.0



 -- Function: turtle.distance (x, y=None)
          Parameters:

             * *x* - a number or a pair/vector of numbers or a turtle
               instance

             * *y* - a number if _x_ is a number, else `None'

     Return the distance from the turtle to (x,y), the given vector, or
     the given other turtle, in turtle step units.

         >>> turtle.home()
         >>> turtle.distance(30,40)
         50.0
         >>> turtle.distance((30,40))
         50.0
         >>> joe = Turtle()
         >>> joe.forward(77)
         >>> turtle.distance(joe)
         77.0




File: python.info,  Node: Settings for measurement,  Next: Pen control,  Prev: Tell Turtle's state,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.8 Settings for measurement
.................................

 -- Function: turtle.degrees (fullcircle=360.0)
          Parameters: *fullcircle* - a number

     Set angle measurement units, i.e. set number of "degrees" for a
     full circle.  Default value is 360 degrees.

         >>> turtle.home()
         >>> turtle.left(90)
         >>> turtle.heading()
         90.0

         Change angle measurement unit to grad (also known as gon,
         grade, or gradian and equals 1/100-th of the right angle.)
         >>> turtle.degrees(400.0)
         >>> turtle.heading()
         100.0
         >>> turtle.degrees(360)
         >>> turtle.heading()
         90.0



 -- Function: turtle.radians ()
     Set the angle measurement units to radians.  Equivalent to
     `degrees(2*math.pi)'.

         >>> turtle.home()
         >>> turtle.left(90)
         >>> turtle.heading()
         90.0
         >>> turtle.radians()
         >>> turtle.heading()
         1.5707963267948966




File: python.info,  Node: Pen control,  Next: Turtle state,  Prev: Settings for measurement,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.9 Pen control
....................

* Menu:

* Drawing state::
* Color control::
* Filling::
* More drawing control::


File: python.info,  Node: Drawing state,  Next: Color control,  Up: Pen control

5.24.5.10 Drawing state
.......................

 -- Function: turtle.pendown ()
 -- Function: turtle.pd ()
 -- Function: turtle.down ()
     Pull the pen down - drawing when moving.

 -- Function: turtle.penup ()
 -- Function: turtle.pu ()
 -- Function: turtle.up ()
     Pull the pen up - no drawing when moving.

 -- Function: turtle.pensize (width=None)
 -- Function: turtle.width (width=None)
          Parameters: *width* - a positive number

     Set the line thickness to _width_ or return it.  If resizemode is
     set to "auto" and turtleshape is a polygon, that polygon is drawn
     with the same line thickness.  If no argument is given, the
     current pensize is returned.

         >>> turtle.pensize()
         1
         >>> turtle.pensize(10)   # from here on lines of width 10 are drawn



 -- Function: turtle.pen (pen=None, **pendict)
          Parameters:

             * *pen* - a dictionary with some or all of the below
               listed keys

             * *pendict* - one or more keyword-arguments with the below
               listed keys as keywords

     Return or set the pen's attributes in a "pen-dictionary" with the
     following key/value pairs:

        * "shown": True/False

        * "pendown": True/False

        * "pencolor": color-string or color-tuple

        * "fillcolor": color-string or color-tuple

        * "pensize": positive number

        * "speed": number in range 0..10

        * "resizemode": "auto" or "user" or "noresize"

        * "stretchfactor": (positive number, positive number)

        * "outline": positive number

        * "tilt": number

     This dictionary can be used as argument for a subsequent call to
     *note pen(): 20dd.  to restore the former pen-state.  Moreover one
     or more of these attributes can be provided as keyword-arguments.
     This can be used to set several pen attributes in one statement.

         >>> turtle.pen(fillcolor="black", pencolor="red", pensize=10)
         >>> sorted(turtle.pen().items())
         [('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),
          ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),
          ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]
         >>> penstate=turtle.pen()
         >>> turtle.color("yellow", "")
         >>> turtle.penup()
         >>> sorted(turtle.pen().items())
         [('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow'),
          ('pendown', False), ('pensize', 10), ('resizemode', 'noresize'),
          ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]
         >>> turtle.pen(penstate, fillcolor="green")
         >>> sorted(turtle.pen().items())
         [('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red'),
          ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),
          ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]



 -- Function: turtle.isdown ()
     Return `True' if pen is down, `False' if it's up.

         >>> turtle.penup()
         >>> turtle.isdown()
         False
         >>> turtle.pendown()
         >>> turtle.isdown()
         True




File: python.info,  Node: Color control,  Next: Filling,  Prev: Drawing state,  Up: Pen control

5.24.5.11 Color control
.......................

 -- Function: turtle.pencolor (*args)
     Return or set the pencolor.

     Four input formats are allowed:

    `pencolor()'
          Return the current pencolor as color specification string or
          as a tuple (see example).  May be used as input to another
          color/pencolor/fillcolor call.

    `pencolor(colorstring)'
          Set pencolor to _colorstring_, which is a Tk color
          specification string, such as `"red"', `"yellow"', or
          `"#33cc8c"'.

    `pencolor((r, g, b))'
          Set pencolor to the RGB color represented by the tuple of
          _r_, _g_, and _b_.  Each of _r_, _g_, and _b_ must be in the
          range 0..colormode, where colormode is either 1.0 or 255 (see
          *note colormode(): 2111.).

    `pencolor(r, g, b)'
               Set pencolor to the RGB color represented by _r_, _g_,
               and _b_.  Each of _r_, _g_, and _b_ must be in the range
               0..colormode.

          If turtleshape is a polygon, the outline of that polygon is
          drawn with the newly set pencolor.

         >>> colormode()
         1.0
         >>> turtle.pencolor()
         'red'
         >>> turtle.pencolor("brown")
         >>> turtle.pencolor()
         'brown'
         >>> tup = (0.2, 0.8, 0.55)
         >>> turtle.pencolor(tup)
         >>> turtle.pencolor()
         (0.2, 0.8, 0.5490196078431373)
         >>> colormode(255)
         >>> turtle.pencolor()
         (51, 204, 140)
         >>> turtle.pencolor('#32c18f')
         >>> turtle.pencolor()
         (50, 193, 143)



 -- Function: turtle.fillcolor (*args)
     Return or set the fillcolor.

     Four input formats are allowed:

    `fillcolor()'
          Return the current fillcolor as color specification string,
          possibly in tuple format (see example).  May be used as input
          to another color/pencolor/fillcolor call.

    `fillcolor(colorstring)'
          Set fillcolor to _colorstring_, which is a Tk color
          specification string, such as `"red"', `"yellow"', or
          `"#33cc8c"'.

    `fillcolor((r, g, b))'
          Set fillcolor to the RGB color represented by the tuple of
          _r_, _g_, and _b_.  Each of _r_, _g_, and _b_ must be in the
          range 0..colormode, where colormode is either 1.0 or 255 (see
          *note colormode(): 2111.).

    `fillcolor(r, g, b)'
               Set fillcolor to the RGB color represented by _r_, _g_,
               and _b_.  Each of _r_, _g_, and _b_ must be in the range
               0..colormode.

          If turtleshape is a polygon, the interior of that polygon is
          drawn with the newly set fillcolor.

         >>> turtle.fillcolor("violet")
         >>> turtle.fillcolor()
         'violet'
         >>> col = turtle.pencolor()
         >>> col
         (50, 193, 143)
         >>> turtle.fillcolor(col)
         >>> turtle.fillcolor()
         (50, 193, 143)
         >>> turtle.fillcolor('#ffffff')
         >>> turtle.fillcolor()
         (255, 255, 255)



 -- Function: turtle.color (*args)
     Return or set pencolor and fillcolor.

     Several input formats are allowed.  They use 0 to 3 arguments as
     follows:

    `color()'
          Return the current pencolor and the current fillcolor as a
          pair of color specification strings or tuples as returned by
          *note pencolor(): 20e0. and *note fillcolor(): 20e1.

    `color(colorstring)', `color((r,g,b))', `color(r,g,b)'
          Inputs as in *note pencolor(): 20e0, set both, fillcolor and
          pencolor, to the given value.

    `color(colorstring1, colorstring2)', `color((r1,g1,b1), (r2,g2,b2))'
               Equivalent to `pencolor(colorstring1)' and
               `fillcolor(colorstring2)' and analogously if the other
               input format is used.

          If turtleshape is a polygon, outline and interior of that
          polygon is drawn with the newly set colors.

         >>> turtle.color("red", "green")
         >>> turtle.color()
         ('red', 'green')
         >>> color("#285078", "#a0c8f0")
         >>> color()
         ((40, 80, 120), (160, 200, 240))



  See also: Screen method *note colormode(): 2111.


File: python.info,  Node: Filling,  Next: More drawing control,  Prev: Color control,  Up: Pen control

5.24.5.12 Filling
.................

 -- Function: turtle.fill (flag)
          Parameters: *flag* - True/False (or 1/0 respectively)

     Call `fill(True)' before drawing the shape you want to fill, and
     `fill(False)' when done.  When used without argument: return
     fillstate (`True' if filling, `False' else).

         >>> turtle.fill(True)
         >>> for _ in range(3):
         ...    turtle.forward(100)
         ...    turtle.left(120)
         ...
         >>> turtle.fill(False)



 -- Function: turtle.begin_fill ()
     Call just before drawing a shape to be filled.  Equivalent to
     `fill(True)'.

 -- Function: turtle.end_fill ()
     Fill the shape drawn after the last call to *note begin_fill():
     20e3.  Equivalent to `fill(False)'.

         >>> turtle.color("black", "red")
         >>> turtle.begin_fill()
         >>> turtle.circle(80)
         >>> turtle.end_fill()




File: python.info,  Node: More drawing control,  Prev: Filling,  Up: Pen control

5.24.5.13 More drawing control
..............................

 -- Function: turtle.reset ()
     Delete the turtle's drawings from the screen, re-center the turtle
     and set variables to the default values.

         >>> turtle.goto(0,-22)
         >>> turtle.left(100)
         >>> turtle.position()
         (0.00,-22.00)
         >>> turtle.heading()
         100.0
         >>> turtle.reset()
         >>> turtle.position()
         (0.00,0.00)
         >>> turtle.heading()
         0.0



 -- Function: turtle.clear ()
     Delete the turtle's drawings from the screen.  Do not move turtle.
     State and position of the turtle as well as drawings of other
     turtles are not affected.

 -- Function: turtle.write (arg, move=False, align="left",
          font=("Arial", 8, "normal"))
          Parameters:

             * *arg* - object to be written to the TurtleScreen

             * *move* - True/False

             * *align* - one of the strings "left", "center" or right"

             * *font* - a triple (fontname, fontsize, fonttype)

     Write text - the string representation of _arg_ - at the current
     turtle position according to _align_ ("left", "center" or right")
     and with the given font.  If _move_ is True, the pen is moved to
     the bottom-right corner of the text.  By default, _move_ is False.

         >>> turtle.write("Home = ", True, align="center")
         >>> turtle.write((0,0), True)




File: python.info,  Node: Turtle state,  Next: Using events,  Prev: Pen control,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.14 Turtle state
......................

* Menu:

* Visibility::
* Appearance::


File: python.info,  Node: Visibility,  Next: Appearance,  Up: Turtle state

5.24.5.15 Visibility
....................

 -- Function: turtle.hideturtle ()
 -- Function: turtle.ht ()
     Make the turtle invisible.  It's a good idea to do this while
     you're in the middle of doing some complex drawing, because hiding
     the turtle speeds up the drawing observably.

         >>> turtle.hideturtle()



 -- Function: turtle.showturtle ()
 -- Function: turtle.st ()
     Make the turtle visible.

         >>> turtle.showturtle()



 -- Function: turtle.isvisible ()
     Return True if the Turtle is shown, False if it's hidden.

         >>> turtle.hideturtle()
         >>> turtle.isvisible()
         False
         >>> turtle.showturtle()
         >>> turtle.isvisible()
         True




File: python.info,  Node: Appearance,  Prev: Visibility,  Up: Turtle state

5.24.5.16 Appearance
....................

 -- Function: turtle.shape (name=None)
          Parameters: *name* - a string which is a valid shapename

     Set turtle shape to shape with given _name_ or, if name is not
     given, return name of current shape.  Shape with _name_ must exist
     in the TurtleScreen's shape dictionary.  Initially there are the
     following polygon shapes: "arrow", "turtle", "circle", "square",
     "triangle", "classic".  To learn about how to deal with shapes see
     Screen method *note register_shape(): 2114.

         >>> turtle.shape()
         'classic'
         >>> turtle.shape("turtle")
         >>> turtle.shape()
         'turtle'



 -- Function: turtle.resizemode (rmode=None)
          Parameters: *rmode* - one of the strings "auto", "user",
          "noresize"

     Set resizemode to one of the values: "auto", "user", "noresize".
     If _rmode_ is not given, return current resizemode.  Different
     resizemodes have the following effects:

        - "auto": adapts the appearance of the turtle corresponding to
          the value of pensize.

        - "user": adapts the appearance of the turtle according to the
          values of stretchfactor and outlinewidth (outline), which are
          set by *note shapesize(): 20ef.

        - "noresize": no adaption of the turtle's appearance takes
          place.

     resizemode("user") is called by *note shapesize(): 20ef. when used
     with arguments.

         >>> turtle.resizemode()
         'noresize'
         >>> turtle.resizemode("auto")
         >>> turtle.resizemode()
         'auto'



 -- Function: turtle.shapesize (stretch_wid=None, stretch_len=None,
          outline=None)
 -- Function: turtle.turtlesize (stretch_wid=None, stretch_len=None,
          outline=None)
          Parameters:

             * *stretch_wid* - positive number

             * *stretch_len* - positive number

             * *outline* - positive number

     Return or set the pen's attributes x/y-stretchfactors and/or
     outline.  Set resizemode to "user".  If and only if resizemode is
     set to "user", the turtle will be displayed stretched according to
     its stretchfactors: _stretch_wid_ is stretchfactor perpendicular
     to its orientation, _stretch_len_ is stretchfactor in direction of
     its orientation, _outline_ determines the width of the shapes's
     outline.

         >>> turtle.shapesize()
         (1, 1, 1)
         >>> turtle.resizemode("user")
         >>> turtle.shapesize(5, 5, 12)
         >>> turtle.shapesize()
         (5, 5, 12)
         >>> turtle.shapesize(outline=8)
         >>> turtle.shapesize()
         (5, 5, 8)



 -- Function: turtle.tilt (angle)
          Parameters: *angle* - a number

     Rotate the turtleshape by _angle_ from its current tilt-angle, but
     do _not_ change the turtle's heading (direction of movement).

         >>> turtle.reset()
         >>> turtle.shape("circle")
         >>> turtle.shapesize(5,2)
         >>> turtle.tilt(30)
         >>> turtle.fd(50)
         >>> turtle.tilt(30)
         >>> turtle.fd(50)



 -- Function: turtle.settiltangle (angle)
          Parameters: *angle* - a number

     Rotate the turtleshape to point in the direction specified by
     _angle_, regardless of its current tilt-angle.  _Do not_ change
     the turtle's heading (direction of movement).

         >>> turtle.reset()
         >>> turtle.shape("circle")
         >>> turtle.shapesize(5,2)
         >>> turtle.settiltangle(45)
         >>> turtle.fd(50)
         >>> turtle.settiltangle(-45)
         >>> turtle.fd(50)



 -- Function: turtle.tiltangle ()
     Return the current tilt-angle, i.e. the angle between the
     orientation of the turtleshape and the heading of the turtle (its
     direction of movement).

         >>> turtle.reset()
         >>> turtle.shape("circle")
         >>> turtle.shapesize(5,2)
         >>> turtle.tilt(45)
         >>> turtle.tiltangle()
         45.0




File: python.info,  Node: Using events,  Next: Special Turtle methods,  Prev: Turtle state,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.17 Using events
......................

 -- Function: turtle.onclick (fun, btn=1, add=None)
          Parameters:

             * *fun* - a function with two arguments which will be
               called with the coordinates of the clicked point on the
               canvas

             * *num* - number of the mouse-button, defaults to 1 (left
               mouse button)

             * *add* - `True' or `False' - if `True', a new binding
               will be added, otherwise it will replace a former binding

     Bind _fun_ to mouse-click events on this turtle.  If _fun_ is
     `None', existing bindings are removed.  Example for the anonymous
     turtle, i.e. the procedural way:

         >>> def turn(x, y):
         ...     left(180)
         ...
         >>> onclick(turn)  # Now clicking into the turtle will turn it.
         >>> onclick(None)  # event-binding will be removed



 -- Function: turtle.onrelease (fun, btn=1, add=None)
          Parameters:

             * *fun* - a function with two arguments which will be
               called with the coordinates of the clicked point on the
               canvas

             * *num* - number of the mouse-button, defaults to 1 (left
               mouse button)

             * *add* - `True' or `False' - if `True', a new binding
               will be added, otherwise it will replace a former binding

     Bind _fun_ to mouse-button-release events on this turtle.  If
     _fun_ is `None', existing bindings are removed.

         >>> class MyTurtle(Turtle):
         ...     def glow(self,x,y):
         ...         self.fillcolor("red")
         ...     def unglow(self,x,y):
         ...         self.fillcolor("")
         ...
         >>> turtle = MyTurtle()
         >>> turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor red,
         >>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent.



 -- Function: turtle.ondrag (fun, btn=1, add=None)
          Parameters:

             * *fun* - a function with two arguments which will be
               called with the coordinates of the clicked point on the
               canvas

             * *num* - number of the mouse-button, defaults to 1 (left
               mouse button)

             * *add* - `True' or `False' - if `True', a new binding
               will be added, otherwise it will replace a former binding

     Bind _fun_ to mouse-move events on this turtle.  If _fun_ is
     `None', existing bindings are removed.

     Remark: Every sequence of mouse-move-events on a turtle is
     preceded by a mouse-click event on that turtle.

         >>> turtle.ondrag(turtle.goto)

     Subsequently, clicking and dragging the Turtle will move it across
     the screen thereby producing handdrawings (if pen is down).


File: python.info,  Node: Special Turtle methods,  Next: Excursus about the use of compound shapes,  Prev: Using events,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.18 Special Turtle methods
................................

 -- Function: turtle.begin_poly ()
     Start recording the vertices of a polygon.  Current turtle
     position is first vertex of polygon.

 -- Function: turtle.end_poly ()
     Stop recording the vertices of a polygon.  Current turtle position
     is last vertex of polygon.  This will be connected with the first
     vertex.

 -- Function: turtle.get_poly ()
     Return the last recorded polygon.

         >>> turtle.home()
         >>> turtle.begin_poly()
         >>> turtle.fd(100)
         >>> turtle.left(20)
         >>> turtle.fd(30)
         >>> turtle.left(60)
         >>> turtle.fd(50)
         >>> turtle.end_poly()
         >>> p = turtle.get_poly()
         >>> register_shape("myFavouriteShape", p)



 -- Function: turtle.clone ()
     Create and return a clone of the turtle with same position,
     heading and turtle properties.

         >>> mick = Turtle()
         >>> joe = mick.clone()



 -- Function: turtle.getturtle ()
 -- Function: turtle.getpen ()
     Return the Turtle object itself.  Only reasonable use: as a
     function to return the "anonymous turtle":

         >>> pet = getturtle()
         >>> pet.fd(50)
         >>> pet
         <turtle.Turtle object at 0x...>



 -- Function: turtle.getscreen ()
     Return the *note TurtleScreen: 20ac. object the turtle is drawing
     on.  TurtleScreen methods can then be called for that object.

         >>> ts = turtle.getscreen()
         >>> ts
         <turtle._Screen object at 0x...>
         >>> ts.bgcolor("pink")



 -- Function: turtle.setundobuffer (size)
          Parameters: *size* - an integer or `None'

     Set or disable undobuffer.  If _size_ is an integer an empty
     undobuffer of given size is installed.  _size_ gives the maximum
     number of turtle actions that can be undone by the *note undo():
     20ca. method/function.  If _size_ is `None', the undobuffer is
     disabled.

         >>> turtle.setundobuffer(42)



 -- Function: turtle.undobufferentries ()
     Return number of entries in the undobuffer.

         >>> while undobufferentries():
         ...     undo()



 -- Function: turtle.tracer (flag=None, delay=None)
     A replica of the corresponding TurtleScreen method.

     Deprecated since version 2.6.

 -- Function: turtle.window_width ()
 -- Function: turtle.window_height ()
     Both are replicas of the corresponding TurtleScreen methods.

     Deprecated since version 2.6.


File: python.info,  Node: Excursus about the use of compound shapes,  Prev: Special Turtle methods,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.19 Excursus about the use of compound shapes
...................................................

To use compound turtle shapes, which consist of several polygons of
different color, you must use the helper class *note Shape: 212c.
explicitly as described below:

  1. Create an empty Shape object of type "compound".

  2. Add as many components to this object as desired, using the
     `addcomponent()' method.

     For example:

         >>> s = Shape("compound")
         >>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5))
         >>> s.addcomponent(poly1, "red", "blue")
         >>> poly2 = ((0,0),(10,-5),(-10,-5))
         >>> s.addcomponent(poly2, "blue", "red")


  3. Now add the Shape to the Screen's shapelist and use it:

         >>> register_shape("myshape", s)
         >>> shape("myshape")



     Note: The *note Shape: 212c. class is used internally by the *note
     register_shape(): 2114.  method in different ways.  The
     application programmer has to deal with the Shape class _only_
     when using compound shapes like shown above!


File: python.info,  Node: Methods of TurtleScreen/Screen and corresponding functions,  Next: The public classes of the module turtle,  Prev: Methods of RawTurtle/Turtle and corresponding functions,  Up: turtle --- Turtle graphics for Tk

5.24.5.20 Methods of TurtleScreen/Screen and corresponding functions
....................................................................

Most of the examples in this section refer to a TurtleScreen instance
called `screen'.

* Menu:

* Window control::
* Animation control::
* Using screen events::
* Settings and special methods::
* Methods specific to Screen, not inherited from TurtleScreen: Methods specific to Screen not inherited from TurtleScreen.


File: python.info,  Node: Window control,  Next: Animation control,  Up: Methods of TurtleScreen/Screen and corresponding functions

5.24.5.21 Window control
........................

 -- Function: turtle.bgcolor (*args)
          Parameters: *args* - a color string or three numbers in the
          range 0..colormode or a 3-tuple of such numbers

     Set or return background color of the TurtleScreen.

         >>> screen.bgcolor("orange")
         >>> screen.bgcolor()
         'orange'
         >>> screen.bgcolor("#800080")
         >>> screen.bgcolor()
         (128, 0, 128)



 -- Function: turtle.bgpic (picname=None)
          Parameters: *picname* - a string, name of a gif-file or
          `"nopic"', or `None'

     Set background image or return name of current backgroundimage.
     If _picname_ is a filename, set the corresponding image as
     background.  If _picname_ is `"nopic"', delete background image,
     if present.  If _picname_ is `None', return the filename of the
     current backgroundimage.

         >>> screen.bgpic()
         'nopic'
         >>> screen.bgpic("landscape.gif")
         >>> screen.bgpic()
         "landscape.gif"



 -- Function: turtle.clear ()
 -- Function: turtle.clearscreen ()
     Delete all drawings and all turtles from the TurtleScreen.  Reset
     the now empty TurtleScreen to its initial state: white background,
     no background image, no event bindings and tracing on.

          Note: This TurtleScreen method is available as a global
          function only under the name `clearscreen'.  The global
          function `clear' is another one derived from the Turtle
          method `clear'.

 -- Function: turtle.reset ()
 -- Function: turtle.resetscreen ()
     Reset all Turtles on the Screen to their initial state.

          Note: This TurtleScreen method is available as a global
          function only under the name `resetscreen'.  The global
          function `reset' is another one derived from the Turtle
          method `reset'.

 -- Function: turtle.screensize (canvwidth=None, canvheight=None,
          bg=None)
          Parameters:

             * *canvwidth* - positive integer, new width of canvas in
               pixels

             * *canvheight* - positive integer, new height of canvas in
               pixels

             * *bg* - colorstring or color-tuple, new background color

     If no arguments are given, return current (canvaswidth,
     canvasheight).  Else resize the canvas the turtles are drawing on.
     Do not alter the drawing window.  To observe hidden parts of the
     canvas, use the scrollbars. With this method, one can make visible
     those parts of a drawing which were outside the canvas before.

         >>> screen.screensize()
         (400, 300)
         >>> screen.screensize(2000,1500)
         >>> screen.screensize()
         (2000, 1500)

     e.g. to search for an erroneously escaped turtle ;-)

 -- Function: turtle.setworldcoordinates (llx, lly, urx, ury)
          Parameters:

             * *llx* - a number, x-coordinate of lower left corner of
               canvas

             * *lly* - a number, y-coordinate of lower left corner of
               canvas

             * *urx* - a number, x-coordinate of upper right corner of
               canvas

             * *ury* - a number, y-coordinate of upper right corner of
               canvas

     Set up user-defined coordinate system and switch to mode "world" if
     necessary.  This performs a `screen.reset()'.  If mode "world" is
     already active, all drawings are redrawn according to the new
     coordinates.

     *ATTENTION*: in user-defined coordinate systems angles may appear
     distorted.

         >>> screen.reset()
         >>> screen.setworldcoordinates(-50,-7.5,50,7.5)
         >>> for _ in range(72):
         ...     left(10)
         ...
         >>> for _ in range(8):
         ...     left(45); fd(2)   # a regular octagon




File: python.info,  Node: Animation control,  Next: Using screen events,  Prev: Window control,  Up: Methods of TurtleScreen/Screen and corresponding functions

5.24.5.22 Animation control
...........................

 -- Function: turtle.delay (delay=None)
          Parameters: *delay* - positive integer

     Set or return the drawing _delay_ in milliseconds.  (This is
     approximately the time interval between two consecutive canvas
     updates.)  The longer the drawing delay, the slower the animation.

     Optional argument:

         >>> screen.delay()
         10
         >>> screen.delay(5)
         >>> screen.delay()
         5



 -- Function: turtle.tracer (n=None, delay=None)
          Parameters:

             * *n* - nonnegative integer

             * *delay* - nonnegative integer

     Turn turtle animation on/off and set delay for update drawings.
     If _n_ is given, only each n-th regular screen update is really
     performed.  (Can be used to accelerate the drawing of complex
     graphics.)  Second argument sets delay value (see *note delay():
     210a.).

         >>> screen.tracer(8, 25)
         >>> dist = 2
         >>> for i in range(200):
         ...     fd(dist)
         ...     rt(90)
         ...     dist += 2



 -- Function: turtle.update ()
     Perform a TurtleScreen update. To be used when tracer is turned
     off.

  See also the RawTurtle/Turtle method *note speed(): 20cb.


File: python.info,  Node: Using screen events,  Next: Settings and special methods,  Prev: Animation control,  Up: Methods of TurtleScreen/Screen and corresponding functions

5.24.5.23 Using screen events
.............................

 -- Function: turtle.listen (xdummy=None, ydummy=None)
     Set focus on TurtleScreen (in order to collect key-events).  Dummy
     arguments are provided in order to be able to pass *note listen():
     210c. to the onclick method.

 -- Function: turtle.onkey (fun, key)
          Parameters:

             * *fun* - a function with no arguments or `None'

             * *key* - a string: key (e.g. "a") or key-symbol (e.g.
               "space")

     Bind _fun_ to key-release event of key.  If _fun_ is `None', event
     bindings are removed. Remark: in order to be able to register
     key-events, TurtleScreen must have the focus. (See method *note
     listen(): 210c.)

         >>> def f():
         ...     fd(50)
         ...     lt(60)
         ...
         >>> screen.onkey(f, "Up")
         >>> screen.listen()



 -- Function: turtle.onclick (fun, btn=1, add=None)
 -- Function: turtle.onscreenclick (fun, btn=1, add=None)
          Parameters:

             * *fun* - a function with two arguments which will be
               called with the coordinates of the clicked point on the
               canvas

             * *num* - number of the mouse-button, defaults to 1 (left
               mouse button)

             * *add* - `True' or `False' - if `True', a new binding
               will be added, otherwise it will replace a former binding

     Bind _fun_ to mouse-click events on this screen.  If _fun_ is
     `None', existing bindings are removed.

     Example for a TurtleScreen instance named `screen' and a Turtle
     instance named turtle:

         >>> screen.onclick(turtle.goto) # Subsequently clicking into the TurtleScreen will
         >>>                             # make the turtle move to the clicked point.
         >>> screen.onclick(None)        # remove event binding again


          Note: This TurtleScreen method is available as a global
          function only under the name `onscreenclick'.  The global
          function `onclick' is another one derived from the Turtle
          method `onclick'.

 -- Function: turtle.ontimer (fun, t=0)
          Parameters:

             * *fun* - a function with no arguments

             * *t* - a number >= 0

     Install a timer that calls _fun_ after _t_ milliseconds.

         >>> running = True
         >>> def f():
         ...     if running:
         ...         fd(50)
         ...         lt(60)
         ...         screen.ontimer(f, 250)
         >>> f()   ### makes the turtle march around
         >>> running = False




File: python.info,  Node: Settings and special methods,  Next: Methods specific to Screen not inherited from TurtleScreen,  Prev: Using screen events,  Up: Methods of TurtleScreen/Screen and corresponding functions

5.24.5.24 Settings and special methods
......................................

 -- Function: turtle.mode (mode=None)
          Parameters: *mode* - one of the strings "standard", "logo" or
          "world"

     Set turtle mode ("standard", "logo" or "world") and perform reset.
     If mode is not given, current mode is returned.

     Mode "standard" is compatible with old *note turtle: 185.  Mode
     "logo" is compatible with most Logo turtle graphics.  Mode "world"
     uses user-defined "world coordinates". *Attention*: in this mode
     angles appear distorted if `x/y' unit-ratio doesn't equal 1.

     Mode             Initial turtle heading        positive angles
     ----------------------------------------------------------------------- 
     "standard"       to the right (east)           counterclockwise
     "logo"           upward    (north)             clockwise

         >>> mode("logo")   # resets turtle heading to north
         >>> mode()
         'logo'



 -- Function: turtle.colormode (cmode=None)
          Parameters: *cmode* - one of the values 1.0 or 255

     Return the colormode or set it to 1.0 or 255.  Subsequently _r_,
     _g_, _b_ values of color triples have to be in the range
     0.._cmode_.

         >>> screen.colormode(1)
         >>> turtle.pencolor(240, 160, 80)
         Traceback (most recent call last):
              ...
         TurtleGraphicsError: bad color sequence: (240, 160, 80)
         >>> screen.colormode()
         1.0
         >>> screen.colormode(255)
         >>> screen.colormode()
         255
         >>> turtle.pencolor(240,160,80)



 -- Function: turtle.getcanvas ()
     Return the Canvas of this TurtleScreen.  Useful for insiders who
     know what to do with a Tkinter Canvas.

         >>> cv = screen.getcanvas()
         >>> cv
         <turtle.ScrolledCanvas instance at 0x...>



 -- Function: turtle.getshapes ()
     Return a list of names of all currently available turtle shapes.

         >>> screen.getshapes()
         ['arrow', 'blank', 'circle', ..., 'turtle']



 -- Function: turtle.register_shape (name, shape=None)
 -- Function: turtle.addshape (name, shape=None)
     There are three different ways to call this function:

       1. _name_ is the name of a gif-file and _shape_ is `None':
          Install the corresponding image shape.

              >>> screen.register_shape("turtle.gif")


               Note: Image shapes _do not_ rotate when turning the
               turtle, so they do not display the heading of the turtle!

       2. _name_ is an arbitrary string and _shape_ is a tuple of pairs
          of coordinates: Install the corresponding polygon shape.

              >>> screen.register_shape("triangle", ((5,-3), (0,5), (-5,-3)))


       3. _name_ is an arbitrary string and shape is a (compound) *note
          Shape: 212c.  object: Install the corresponding compound
          shape.

     Add a turtle shape to TurtleScreen's shapelist.  Only thusly
     registered shapes can be used by issuing the command
     `shape(shapename)'.

 -- Function: turtle.turtles ()
     Return the list of turtles on the screen.

         >>> for turtle in screen.turtles():
         ...     turtle.color("red")



 -- Function: turtle.window_height ()
     Return the height of the turtle window.

         >>> screen.window_height()
         480



 -- Function: turtle.window_width ()
     Return the width of the turtle window.

         >>> screen.window_width()
         640




File: python.info,  Node: Methods specific to Screen not inherited from TurtleScreen,  Prev: Settings and special methods,  Up: Methods of TurtleScreen/Screen and corresponding functions

5.24.5.25 Methods specific to Screen, not inherited from TurtleScreen
.....................................................................

 -- Function: turtle.bye ()
     Shut the turtlegraphics window.

 -- Function: turtle.exitonclick ()
     Bind bye() method to mouse clicks on the Screen.

     If the value "using_IDLE" in the configuration dictionary is
     `False' (default value), also enter mainloop.  Remark: If IDLE
     with the `-n' switch (no subprocess) is used, this value should be
     set to `True' in `turtle.cfg'.  In this case IDLE's own mainloop
     is active also for the client script.

 -- Function: turtle.setup (width=_CFG["width"], height=_CFG["height"],
          startx=_CFG["leftright"], starty=_CFG["topbottom"])
     Set the size and position of the main window.  Default values of
     arguments are stored in the configuration dictionary and can be
     changed via a `turtle.cfg' file.

          Parameters:

             * *width* - if an integer, a size in pixels, if a float, a
               fraction of the screen; default is 50% of screen

             * *height* - if an integer, the height in pixels, if a
               float, a fraction of the screen; default is 75% of screen

             * *startx* - if positive, starting position in pixels from
               the left edge of the screen, if negative from the right
               edge, if None, center window horizontally

             * *startx* - if positive, starting position in pixels from
               the top edge of the screen, if negative from the bottom
               edge, if None, center window vertically

         >>> screen.setup (width=200, height=200, startx=0, starty=0)
         >>>              # sets window to 200x200 pixels, in upper left of screen
         >>> screen.setup(width=.75, height=0.5, startx=None, starty=None)
         >>>              # sets window to 75% of screen by 50% of screen and centers



 -- Function: turtle.title (titlestring)
          Parameters: *titlestring* - a string that is shown in the
          titlebar of the turtle graphics window

     Set title of turtle window to _titlestring_.

         >>> screen.title("Welcome to the turtle zoo!")




File: python.info,  Node: The public classes of the module turtle,  Next: Help and configuration,  Prev: Methods of TurtleScreen/Screen and corresponding functions,  Up: turtle --- Turtle graphics for Tk

5.24.5.26 The public classes of the module `turtle'
...................................................

 -- Class: turtle.RawTurtle (canvas)
 -- Class: turtle.RawPen (canvas)
          Parameters: *canvas* - a `Tkinter.Canvas', a *note
          ScrolledCanvas: 20ad. or a *note TurtleScreen: 20ac.

     Create a turtle.  The turtle has all methods described above as
     "methods of Turtle/RawTurtle".

 -- Class: turtle.Turtle
     Subclass of RawTurtle, has the same interface but draws on a
     default *note Screen: 20ae. object created automatically when
     needed for the first time.

 -- Class: turtle.TurtleScreen (cv)
          Parameters: *cv* - a `Tkinter.Canvas'

     Provides screen oriented methods like `setbg()' etc. that are
     described above.

 -- Class: turtle.Screen
     Subclass of TurtleScreen, with *note four methods added: 2132.

 -- Class: turtle.ScrolledCanvas (master)
          Parameters: *master* - some Tkinter widget to contain the
          ScrolledCanvas, i.e.  a Tkinter-canvas with scrollbars added

     Used by class Screen, which thus automatically provides a
     ScrolledCanvas as playground for the turtles.

 -- Class: turtle.Shape (type_, data)
          Parameters: *type_* - one of the strings "polygon", "image",
          "compound"

     Data structure modeling shapes.  The pair `(type_, data)' must
     follow this specification:

     _type__         _data_
     ------------------------------------------------------------------------------- 
     "polygon"       a polygon-tuple, i.e. a tuple of pairs of coordinates
     "image"         an image  (in this form only used internally!)
     "compound"      `None' (a compound shape has to be constructed using the
                     *note addcomponent(): 2135. method)

      -- Method: addcomponent (poly, fill, outline=None)
               Parameters:

                  * *poly* - a polygon, i.e. a tuple of pairs of numbers

                  * *fill* - a color the _poly_ will be filled with

                  * *outline* - a color for the poly's outline (if
                    given)

          Example:

              >>> poly = ((0,0),(10,-5),(0,10),(-10,-5))
              >>> s = Shape("compound")
              >>> s.addcomponent(poly, "red", "blue")
              >>> # ... add more components and then use register_shape()

          See *note Excursus about the use of compound shapes: 212a.

 -- Class: turtle.Vec2D (x, y)
     A two-dimensional vector class, used as a helper class for
     implementing turtle graphics.  May be useful for turtle graphics
     programs too.  Derived from tuple, so a vector is a tuple!

     Provides (for _a_, _b_ vectors, _k_ number):

        * `a + b' vector addition

        * `a - b' vector subtraction

        * `a * b' inner product

        * `k * a' and `a * k' multiplication with scalar

        * `abs(a)' absolute value of a

        * `a.rotate(angle)' rotation


File: python.info,  Node: Help and configuration,  Next: Demo scripts,  Prev: The public classes of the module turtle,  Up: turtle --- Turtle graphics for Tk

5.24.5.27 Help and configuration
................................

* Menu:

* How to use help::
* Translation of docstrings into different languages::
* How to configure Screen and Turtles::


File: python.info,  Node: How to use help,  Next: Translation of docstrings into different languages,  Up: Help and configuration

5.24.5.28 How to use help
.........................

The public methods of the Screen and Turtle classes are documented
extensively via docstrings.  So these can be used as online-help via
the Python help facilities:

   - When using IDLE, tooltips show the signatures and first lines of
     the docstrings of typed in function-/method calls.

   - Calling *note help(): 487. on methods or functions displays the
     docstrings:

         >>> help(Screen.bgcolor)
         Help on method bgcolor in module turtle:

         bgcolor(self, *args) unbound turtle.Screen method
             Set or return backgroundcolor of the TurtleScreen.

             Arguments (if given): a color string or three numbers
             in the range 0..colormode or a 3-tuple of such numbers.


               >>> screen.bgcolor("orange")
               >>> screen.bgcolor()
               "orange"
               >>> screen.bgcolor(0.5,0,0.5)
               >>> screen.bgcolor()
               "#800080"

         >>> help(Turtle.penup)
         Help on method penup in module turtle:

         penup(self) unbound turtle.Turtle method
             Pull the pen up -- no drawing when moving.

             Aliases: penup | pu | up

             No argument

             >>> turtle.penup()


   - The docstrings of the functions which are derived from methods
     have a modified form:

         >>> help(bgcolor)
         Help on function bgcolor in module turtle:

         bgcolor(*args)
             Set or return backgroundcolor of the TurtleScreen.

             Arguments (if given): a color string or three numbers
             in the range 0..colormode or a 3-tuple of such numbers.

             Example::

               >>> bgcolor("orange")
               >>> bgcolor()
               "orange"
               >>> bgcolor(0.5,0,0.5)
               >>> bgcolor()
               "#800080"

         >>> help(penup)
         Help on function penup in module turtle:

         penup()
             Pull the pen up -- no drawing when moving.

             Aliases: penup | pu | up

             No argument

             Example:
             >>> penup()



  These modified docstrings are created automatically together with the
function definitions that are derived from the methods at import time.


File: python.info,  Node: Translation of docstrings into different languages,  Next: How to configure Screen and Turtles,  Prev: How to use help,  Up: Help and configuration

5.24.5.29 Translation of docstrings into different languages
............................................................

There is a utility to create a dictionary the keys of which are the
method names and the values of which are the docstrings of the public
methods of the classes Screen and Turtle.

 -- Function: turtle.write_docstringdict
          (filename="turtle_docstringdict")
          Parameters: *filename* - a string, used as filename

     Create and write docstring-dictionary to a Python script with the
     given filename.  This function has to be called explicitly (it is
     not used by the turtle graphics classes).  The docstring
     dictionary will be written to the Python script `_filename_.py'.
     It is intended to serve as a template for translation of the
     docstrings into different languages.

  If you (or your students) want to use *note turtle: 185. with online
help in your native language, you have to translate the docstrings and
save the resulting file as e.g. `turtle_docstringdict_german.py'.

  If you have an appropriate entry in your `turtle.cfg' file this
dictionary will be read in at import time and will replace the original
English docstrings.

  At the time of this writing there are docstring dictionaries in
German and in Italian.  (Requests please to <glingl@aon.at>.)


File: python.info,  Node: How to configure Screen and Turtles,  Prev: Translation of docstrings into different languages,  Up: Help and configuration

5.24.5.30 How to configure Screen and Turtles
.............................................

The built-in default configuration mimics the appearance and behaviour
of the old turtle module in order to retain best possible compatibility
with it.

  If you want to use a different configuration which better reflects
the features of this module or which better fits to your needs, e.g.
for use in a classroom, you can prepare a configuration file
`turtle.cfg' which will be read at import time and modify the
configuration according to its settings.

  The built in configuration would correspond to the following
turtle.cfg:

    width = 0.5
    height = 0.75
    leftright = None
    topbottom = None
    canvwidth = 400
    canvheight = 300
    mode = standard
    colormode = 1.0
    delay = 10
    undobuffersize = 1000
    shape = classic
    pencolor = black
    fillcolor = black
    resizemode = noresize
    visible = True
    language = english
    exampleturtle = turtle
    examplescreen = screen
    title = Python Turtle Graphics
    using_IDLE = False

Short explanation of selected entries:

   - The first four lines correspond to the arguments of the
     `Screen.setup()' method.

   - Line 5 and 6 correspond to the arguments of the method
     `Screen.screensize()'.

   - _shape_ can be any of the built-in shapes, e.g: arrow, turtle,
     etc.  For more info try `help(shape)'.

   - If you want to use no fillcolor (i.e. make the turtle
     transparent), you have to write `fillcolor = ""' (but all nonempty
     strings must not have quotes in the cfg-file).

   - If you want to reflect the turtle its state, you have to use
     `resizemode = auto'.

   - If you set e.g. `language = italian' the docstringdict
     `turtle_docstringdict_italian.py' will be loaded at import time (if
     present on the import path, e.g. in the same directory as *note
     turtle: 185.

   - The entries _exampleturtle_ and _examplescreen_ define the names
     of these objects as they occur in the docstrings.  The
     transformation of method-docstrings to function-docstrings will
     delete these names from the docstrings.

   - _using_IDLE_: Set this to `True' if you regularly work with IDLE
     and its -n switch ("no subprocess").  This will prevent *note
     exitonclick(): 2118. to enter the mainloop.

  There can be a `turtle.cfg' file in the directory where *note turtle:
185. is stored and an additional one in the current working directory.
The latter will override the settings of the first one.

  The `Demo/turtle' directory contains a `turtle.cfg' file.  You can
study it as an example and see its effects when running the demos
(preferably not from within the demo-viewer).


File: python.info,  Node: Demo scripts,  Prev: Help and configuration,  Up: turtle --- Turtle graphics for Tk

5.24.5.31 Demo scripts
......................

There is a set of demo scripts in the turtledemo directory located in
the `Demo/turtle' directory in the source distribution.

  It contains:

   - a set of 15 demo scripts demonstrating different features of the
     new module *note turtle: 185.

   - a demo viewer `turtleDemo.py' which can be used to view the
     sourcecode of the scripts and run them at the same time. 14 of the
     examples can be accessed via the Examples menu; all of them can
     also be run standalone.

   - The example `turtledemo_two_canvases.py' demonstrates the
     simultaneous use of two canvases with the turtle module.
     Therefore it only can be run standalone.

   - There is a `turtle.cfg' file in this directory, which also serves
     as an example for how to write and use such files.

  The demoscripts are:

Name                 Description                        Features
bytedesign           complex classical turtlegraphics   *note tracer(): 2100,
                     pattern                            delay, *note update():
                                                        210b.
chaos                graphs Verhulst dynamics, shows    world coordinates
                     that computer's computations can   
                     generate results sometimes         
                     against the common sense           
                     expectations                       
clock                analog clock showing time of your  turtles as clock's hands,
                     computer                           ontimer
colormixer           experiment with r, g, b            *note ondrag(): 20f6.
fractalcurves        Hilbert & Koch curves              recursion
lindenmayer          ethnomathematics (indian kolams)   L-System
minimal_hanoi        Towers of Hanoi                    Rectangular Turtles as
                                                        Hanoi discs (shape,
                                                        shapesize)
paint                super minimalistic drawing program *note onclick(): 20f4.
peace                elementary                         turtle: appearance and
                                                        animation
penrose              aperiodic tiling with kites and    *note stamp(): 20c7.
                     darts                              
planet_and_moon      simulation of gravitational system compound shapes, *note
                                                        Vec2D: 211d.
tree                 a (graphical) breadth first tree   *note clone(): 20fa.
                     (using generators)                 
wikipedia            a pattern from the wikipedia       *note clone(): 20fa, *note
                     article on turtle graphics         undo(): 20ca.
yingyang             another elementary example         *note circle(): 20c5.

  Have fun!


File: python.info,  Node: IDLE,  Next: Other Graphical User Interface Packages,  Prev: turtle --- Turtle graphics for Tk,  Up: Graphical User Interfaces with Tk

5.24.6 IDLE
-----------

IDLE is the Python IDE built with the `tkinter' GUI toolkit.

  IDLE has the following features:

   * coded in 100% pure Python, using the `tkinter' GUI toolkit

   * cross-platform: works on Windows and Unix

   * multi-window text editor with multiple undo, Python colorizing and
     many other features, e.g. smart indent and call tips

   * Python shell window (a.k.a. interactive interpreter)

   * debugger (not complete, but you can set breakpoints, view  and
     step)

* Menu:

* Menus::
* Basic editing and navigation::
* Syntax colors::
* Startup::

Menus

* File menu::
* Edit menu::
* Windows menu::
* Debug menu (in the Python Shell window only): Debug menu in the Python Shell window only.

Basic editing and navigation

* Automatic indentation::
* Python Shell window::

Startup

* Command line usage::


File: python.info,  Node: Menus,  Next: Basic editing and navigation,  Up: IDLE

5.24.6.1 Menus
..............

* Menu:

* File menu::
* Edit menu::
* Windows menu::
* Debug menu (in the Python Shell window only): Debug menu in the Python Shell window only.


File: python.info,  Node: File menu,  Next: Edit menu,  Up: Menus

5.24.6.2 File menu
..................

New window
     create a new editing window

Open...
     open an existing file

Open module...
     open an existing module (searches sys.path)

Class browser
     show classes and methods in current file

Path browser
     show sys.path directories, modules, classes and methods

Save
     save current window to the associated file (unsaved windows have a
     * before and after the window title)

Save As...
     save current window to new file, which becomes the associated file

Save Copy As...
     save current window to different file without changing the
     associated file

Close
     close current window (asks to save if unsaved)

Exit
     close all windows and quit IDLE (asks to save if unsaved)


File: python.info,  Node: Edit menu,  Next: Windows menu,  Prev: File menu,  Up: Menus

5.24.6.3 Edit menu
..................

Undo
     Undo last change to current window (max 1000 changes)

Redo
     Redo last undone change to current window

Cut
     Copy selection into system-wide clipboard; then delete selection

Copy
     Copy selection into system-wide clipboard

Paste
     Insert system-wide clipboard into window

Select All
     Select the entire contents of the edit buffer

Find...
     Open a search dialog box with many options

Find again
     Repeat last search

Find selection
     Search for the string in the selection

Find in Files...
     Open a search dialog box for searching files

Replace...
     Open a search-and-replace dialog box

Go to line
     Ask for a line number and show that line

Indent region
     Shift selected lines right 4 spaces

Dedent region
     Shift selected lines left 4 spaces

Comment out region
     Insert ## in front of selected lines

Uncomment region
     Remove leading # or ## from selected lines

Tabify region
     Turns _leading_ stretches of spaces into tabs

Untabify region
     Turn _all_ tabs into the right number of spaces

Expand word
     Expand the word you have typed to match another word in the same
     buffer; repeat to get a different expansion

Format Paragraph
     Reformat the current blank-line-separated paragraph

Import module
     Import or reload the current module

Run script
     Execute the current file in the __main__ namespace


File: python.info,  Node: Windows menu,  Next: Debug menu in the Python Shell window only,  Prev: Edit menu,  Up: Menus

5.24.6.4 Windows menu
.....................

Zoom Height
     toggles the window between normal size (24x80) and maximum height.

  The rest of this menu lists the names of all open windows; select one
to bring it to the foreground (deiconifying it if necessary).


File: python.info,  Node: Debug menu in the Python Shell window only,  Prev: Windows menu,  Up: Menus

5.24.6.5 Debug menu (in the Python Shell window only)
.....................................................

Go to file/line
     look around the insert point for a filename and linenumber, open
     the file, and show the line.

Open stack viewer
     show the stack traceback of the last exception

Debugger toggle
     Run commands in the shell under the debugger

JIT Stack viewer toggle
     Open stack viewer on traceback


File: python.info,  Node: Basic editing and navigation,  Next: Syntax colors,  Prev: Menus,  Up: IDLE

5.24.6.6 Basic editing and navigation
.....................................

   * `Backspace' deletes to the left; `Del' deletes to the right

   * Arrow keys and `Page Up'/`Page Down' to move around

   * `Home'/`End' go to begin/end of line

   * `C-Home'/`C-End' go to begin/end of file

   * Some *Emacs* bindings may also work, including `C-B', `C-P',
     `C-A', `C-E', `C-D', `C-L'

* Menu:

* Automatic indentation::
* Python Shell window::


File: python.info,  Node: Automatic indentation,  Next: Python Shell window,  Up: Basic editing and navigation

5.24.6.7 Automatic indentation
..............................

After a block-opening statement, the next line is indented by 4 spaces
(in the Python Shell window by one tab).  After certain keywords
(break, return etc.)  the next line is dedented.  In leading
indentation, `Backspace' deletes up to 4 spaces if they are there.
`Tab' inserts 1-4 spaces (in the Python Shell window one tab). See also
the indent/dedent region commands in the edit menu.


File: python.info,  Node: Python Shell window,  Prev: Automatic indentation,  Up: Basic editing and navigation

5.24.6.8 Python Shell window
............................

   * `C-C' interrupts executing command

   * `C-D' sends end-of-file; closes window if typed at a `>>>' prompt

   * `Alt-p' retrieves previous command matching what you have typed

   * `Alt-n' retrieves next

   * `Return' while on any previous command retrieves that command

   * `Alt-/' (Expand word) is also useful here


File: python.info,  Node: Syntax colors,  Next: Startup,  Prev: Basic editing and navigation,  Up: IDLE

5.24.6.9 Syntax colors
......................

The coloring is applied in a background "thread," so you may
occasionally see uncolorized text.  To change the color scheme, edit
the `[Colors]' section in `config.txt'.

Python syntax colors:

    Keywords
          orange

    Strings
          green

    Comments
          red

    Definitions
          blue

Shell colors:

    Console output
          brown

    stdout
          blue

    stderr
          dark green

    stdin
          black


File: python.info,  Node: Startup,  Prev: Syntax colors,  Up: IDLE

5.24.6.10 Startup
.................

Upon startup with the `-s' option, IDLE will execute the file
referenced by the environment variables `IDLESTARTUP' or *note
PYTHONSTARTUP: 500.  Idle first checks for `IDLESTARTUP'; if
`IDLESTARTUP' is present the file referenced is run.  If `IDLESTARTUP'
is not present, Idle checks for `PYTHONSTARTUP'.  Files referenced by
these environment variables are convenient places to store functions
that are used frequently from the Idle shell, or for executing import
statements to import common modules.

  In addition, `Tk' also loads a startup file if it is present.  Note
that the Tk file is loaded unconditionally.  This additional file is
`.Idle.py' and is looked for in the user's home directory.  Statements
in this file will be executed in the Tk namespace, so this file is not
useful for importing functions to be used from Idle's Python shell.

* Menu:

* Command line usage::


File: python.info,  Node: Command line usage,  Up: Startup

5.24.6.11 Command line usage
............................

    idle.py [-c command] [-d] [-e] [-s] [-t title] [arg] ...

    -c command  run this command
    -d          enable debugger
    -e          edit mode; arguments are files to be edited
    -s          run $IDLESTARTUP or $PYTHONSTARTUP first
    -t title    set title of shell window

If there are arguments:

  1. If `-e' is used, arguments are files opened for editing and
     `sys.argv' reflects the arguments passed to IDLE itself.

  2. Otherwise, if `-c' is used, all arguments are placed in
     `sys.argv[1:...]', with `sys.argv[0]' set to `'-c''.

  3. Otherwise, if neither `-e' nor `-c' is used, the first argument is
     a script which is executed with the remaining arguments in
     `sys.argv[1:...]'  and `sys.argv[0]' set to the script name.  If
     the script name is '-', no script is executed but an interactive
     Python session is started; the arguments are still available in
     `sys.argv'.


File: python.info,  Node: Other Graphical User Interface Packages,  Prev: IDLE,  Up: Graphical User Interfaces with Tk

5.24.7 Other Graphical User Interface Packages
----------------------------------------------

There are an number of extension widget sets to *note Tkinter: 17e.

See also
........

Python megawidgets(1)
     is a toolkit for building high-level compound widgets in Python
     using the *note Tkinter: 17e. module.  It consists of a set of
     base classes and a library of flexible and extensible megawidgets
     built on this foundation. These megawidgets include notebooks,
     comboboxes, selection widgets, paned widgets, scrolled widgets,
     dialog windows, etc.  Also, with the Pmw.Blt interface to BLT, the
     busy, graph, stripchart, tabset and vector commands are be
     available.

     The initial ideas for Pmw were taken from the Tk `itcl' extensions
     `[incr Tk]' by Michael McLennan and `[incr Widgets]' by Mark
     Ulferts. Several of the megawidgets are direct translations from
     the itcl to Python. It offers most of the range of widgets that
     `[incr Widgets]' does, and is almost as complete as Tix, lacking
     however Tix's fast `HList' widget for drawing trees.

Tkinter3000 Widget Construction Kit (WCK)(2)
     is a library that allows you to write new Tkinter widgets in pure
     Python.  The WCK framework gives you full control over widget
     creation, configuration, screen appearance, and event handling.
     WCK widgets can be very fast and light-weight, since they can
     operate directly on Python data structures, without having to
     transfer data through the Tk/Tcl layer.

  The major cross-platform (Windows, Mac OS X, Unix-like) GUI toolkits
that are also available for Python:

See also
........

PyGTK(3)
     is a set of bindings for the GTK(4) widget set. It provides an
     object oriented interface that is slightly higher level than the C
     one. It comes with many more widgets than Tkinter provides, and has
     good Python-specific reference documentation. There are also
     bindings to GNOME(5).  One well known PyGTK application is
     PythonCAD(6). An online tutorial(7) is available.

PyQt(8)
     PyQt is a *sip*-wrapped binding to the Qt toolkit.  Qt is an
     extensive C++ GUI application development framework that is
     available for Unix, Windows and Mac OS X. *sip* is a tool for
     generating bindings for C++ libraries as Python classes, and is
     specifically designed for Python. The _PyQt3_ bindings have a
     book, GUI Programming with Python: QT Edition(9) by Boudewijn
     Rempt. The _PyQt4_ bindings also have a book, Rapid GUI
     Programming with Python and Qt(10), by Mark Summerfield.

wxPython(11)
     wxPython is a cross-platform GUI toolkit for Python that is built
     around the popular wxWidgets(12) (formerly wxWindows) C++ toolkit.
     It provides a native look and feel for applications on Windows,
     Mac OS X, and Unix systems by using each platform's native widgets
     where ever possible, (GTK+ on Unix-like systems).  In addition to
     an extensive set of widgets, wxPython provides classes for online
     documentation and context sensitive help, printing, HTML viewing,
     low-level device context drawing, drag and drop, system clipboard
     access, an XML-based resource format and more, including an ever
     growing library of user-contributed modules.  wxPython has a book,
     wxPython in Action(13), by Noel Rappin and Robin Dunn.

  PyGTK, PyQt, and wxPython, all have a modern look and feel and more
widgets than Tkinter. In addition, there are many other GUI toolkits for
Python, both cross-platform, and platform-specific. See the GUI
Programming(14) page in the Python Wiki for a much more complete list,
and also for links to documents where the different GUI toolkits are
compared.

  ---------- Footnotes ----------

  (1) http://pmw.sourceforge.net/

  (2) http://tkinter.effbot.org/

  (3) http://www.pygtk.org/

  (4) http://www.gtk.org/

  (5) http://www.gnome.org

  (6) http://www.pythoncad.org/

  (7) http://www.pygtk.org/pygtk2tutorial/index.html

  (8) http://www.riverbankcomputing.co.uk/software/pyqt/

  (9) http://www.commandprompt.com/community/pyqt/

  (10) http://www.qtrac.eu/pyqtbook.html

  (11) http://www.wxpython.org

  (12) http://www.wxwidgets.org/

  (13) http://www.amazon.com/exec/obidos/ASIN/1932394621

  (14) http://wiki.python.org/moin/GuiProgramming


File: python.info,  Node: Development Tools,  Next: Debugging and Profiling,  Prev: Graphical User Interfaces with Tk,  Up: The Python Standard Library

5.25 Development Tools
======================

The modules described in this chapter help you write software.  For
example, the *note pydoc: 140. module takes a module and generates
documentation based on the module's contents.  The *note doctest: b6.
and *note unittest: 188. modules contains frameworks for writing unit
tests that automatically exercise code and verify that the expected
output is produced.  *2to3* can translate Python 2.x source code into
valid Python 3.x code.

  The list of modules described in this chapter is:

* Menu:

* pydoc: pydoc --- Documentation generator and online help system. Documentation generator and online help system
* doctest: doctest --- Test interactive Python examples. Test interactive Python examples
* unittest: unittest --- Unit testing framework. Unit testing framework
* 2to3 - Automated Python 2 to 3 code translation::
* test: test --- Regression tests package for Python. Regression tests package for Python
* test.test_support: test test_support --- Utility functions for tests. Utility functions for tests


File: python.info,  Node: pydoc --- Documentation generator and online help system,  Next: doctest --- Test interactive Python examples,  Up: Development Tools

5.25.1 `pydoc' -- Documentation generator and online help system
----------------------------------------------------------------

New in version 2.1.

  The *note pydoc: 140. module automatically generates documentation
from Python modules.  The documentation can be presented as pages of
text on the console, served to a Web browser, or saved to HTML files.

  The built-in function *note help(): 487. invokes the online help
system in the interactive interpreter, which uses *note pydoc: 140. to
generate its documentation as text on the console.  The same text
documentation can also be viewed from outside the Python interpreter by
running *pydoc* as a script at the operating system's command prompt.
For example, running

    pydoc sys

at a shell prompt will display documentation on the *note sys: 16e.
module, in a style similar to the manual pages shown by the Unix *man*
command.  The argument to *pydoc* can be the name of a function,
module, or package, or a dotted reference to a class, method, or
function within a module or module in a package.  If the argument to
*pydoc* looks like a path (that is, it contains the path separator for
your operating system, such as a slash in Unix), and refers to an
existing Python source file, then documentation is produced for that
file.

     Note: In order to find objects and their documentation, *note
     pydoc: 140. imports the module(s) to be documented.  Therefore,
     any code on module level will be executed on that occasion.  Use
     an `if __name__ == '__main__':' guard to only execute code when a
     file is invoked as a script and not just imported.

  Specifying a `-w' flag before the argument will cause HTML
documentation to be written out to a file in the current directory,
instead of displaying text on the console.

  Specifying a `-k' flag before the argument will search the synopsis
lines of all available modules for the keyword given as the argument,
again in a manner similar to the Unix *man* command.  The synopsis line
of a module is the first line of its documentation string.

  You can also use *pydoc* to start an HTTP server on the local machine
that will serve documentation to visiting Web browsers. *pydoc -p 1234*
will start a HTTP server on port 1234, allowing you to browse the
documentation at `http://localhost:1234/' in your preferred Web browser.
*pydoc -g* will start the server and additionally bring up a small
*note Tkinter: 17e.-based graphical interface to help you search for
documentation pages.

  When *pydoc* generates documentation, it uses the current environment
and path to locate modules.  Thus, invoking *pydoc spam* documents
precisely the version of the module you would get if you started the
Python interpreter and typed `import spam'.

  Module docs for core modules are assumed to reside in
<http://docs.python.org/library/>.  This can be overridden by setting
the `PYTHONDOCS' environment variable to a different URL or to a local
directory containing the Library Reference Manual pages.


File: python.info,  Node: doctest --- Test interactive Python examples,  Next: unittest --- Unit testing framework,  Prev: pydoc --- Documentation generator and online help system,  Up: Development Tools

5.25.2 `doctest' -- Test interactive Python examples
----------------------------------------------------

The *note doctest: b6. module searches for pieces of text that look
like interactive Python sessions, and then executes those sessions to
verify that they work exactly as shown.  There are several common ways
to use doctest:

   * To check that a module's docstrings are up-to-date by verifying
     that all interactive examples still work as documented.

   * To perform regression testing by verifying that interactive
     examples from a test file or a test object work as expected.

   * To write tutorial documentation for a package, liberally
     illustrated with input-output examples.  Depending on whether the
     examples or the expository text are emphasized, this has the
     flavor of "literate testing" or "executable documentation".

  Here's a complete but small example module:

    """
    This is the "example" module.

    The example module supplies one function, factorial().  For example,

    >>> factorial(5)
    120
    """

    def factorial(n):
        """Return the factorial of n, an exact integer >= 0.

        If the result is small enough to fit in an int, return an int.
        Else return a long.

        >>> [factorial(n) for n in range(6)]
        [1, 1, 2, 6, 24, 120]
        >>> [factorial(long(n)) for n in range(6)]
        [1, 1, 2, 6, 24, 120]
        >>> factorial(30)
        265252859812191058636308480000000L
        >>> factorial(30L)
        265252859812191058636308480000000L
        >>> factorial(-1)
        Traceback (most recent call last):
            ...
        ValueError: n must be >= 0

        Factorials of floats are OK, but the float must be an exact integer:
        >>> factorial(30.1)
        Traceback (most recent call last):
            ...
        ValueError: n must be exact integer
        >>> factorial(30.0)
        265252859812191058636308480000000L

        It must also not be ridiculously large:
        >>> factorial(1e100)
        Traceback (most recent call last):
            ...
        OverflowError: n too large
        """

        import math
        if not n >= 0:
            raise ValueError("n must be >= 0")
        if math.floor(n) != n:
            raise ValueError("n must be exact integer")
        if n+1 == n:  # catch a value like 1e300
            raise OverflowError("n too large")
        result = 1
        factor = 2
        while factor <= n:
            result *= factor
            factor += 1
        return result


    if __name__ == "__main__":
        import doctest
        doctest.testmod()

If you run `example.py' directly from the command line, *note doctest:
b6.  works its magic:

    $ python example.py
    $

There's no output!  That's normal, and it means all the examples
worked.  Pass `-v' to the script, and *note doctest: b6. prints a
detailed log of what it's trying, and prints a summary at the end:

    $ python example.py -v
    Trying:
        factorial(5)
    Expecting:
        120
    ok
    Trying:
        [factorial(n) for n in range(6)]
    Expecting:
        [1, 1, 2, 6, 24, 120]
    ok
    Trying:
        [factorial(long(n)) for n in range(6)]
    Expecting:
        [1, 1, 2, 6, 24, 120]
    ok

And so on, eventually ending with:

    Trying:
        factorial(1e100)
    Expecting:
        Traceback (most recent call last):
            ...
        OverflowError: n too large
    ok
    2 items passed all tests:
       1 tests in __main__
       8 tests in __main__.factorial
    9 tests in 2 items.
    9 passed and 0 failed.
    Test passed.
    $

That's all you need to know to start making productive use of *note
doctest: b6.!  Jump in.  The following sections provide full details.
Note that there are many examples of doctests in the standard Python
test suite and libraries.  Especially useful examples can be found in
the standard test file `Lib/test/test_doctest.py'.

* Menu:

* Simple Usage; Checking Examples in Docstrings: Simple Usage Checking Examples in Docstrings.
* Simple Usage; Checking Examples in a Text File: Simple Usage Checking Examples in a Text File.
* How It Works::
* Basic API::
* Unittest API::
* Advanced API::
* Debugging::
* Soapbox::


File: python.info,  Node: Simple Usage Checking Examples in Docstrings,  Next: Simple Usage Checking Examples in a Text File,  Up: doctest --- Test interactive Python examples

5.25.2.1 Simple Usage: Checking Examples in Docstrings
......................................................

The simplest way to start using doctest (but not necessarily the way
you'll continue to do it) is to end each module `M' with:

    if __name__ == "__main__":
        import doctest
        doctest.testmod()

*note doctest: b6. then examines docstrings in module `M'.

  Running the module as a script causes the examples in the docstrings
to get executed and verified:

    python M.py

This won't display anything unless an example fails, in which case the
failing example(s) and the cause(s) of the failure(s) are printed to
stdout, and the final line of output is `***Test Failed*** N
failures.', where _N_ is the number of examples that failed.

  Run it with the `-v' switch instead:

    python M.py -v

and a detailed report of all examples tried is printed to standard
output, along with assorted summaries at the end.

  You can force verbose mode by passing `verbose=True' to *note
testmod(): 400, or prohibit it by passing `verbose=False'.  In either
of those cases, `sys.argv' is not examined by *note testmod(): 400. (so
passing `-v' or not has no effect).

  Since Python 2.6, there is also a command line shortcut for running
*note testmod(): 400.  You can instruct the Python interpreter to run
the doctest module directly from the standard library and pass the
module name(s) on the command line:

    python -m doctest -v example.py

This will import `example.py' as a standalone module and run *note
testmod(): 400. on it.  Note that this may not work correctly if the
file is part of a package and imports other submodules from that
package.

  For more information on *note testmod(): 400, see section *note Basic
API: 2155.


File: python.info,  Node: Simple Usage Checking Examples in a Text File,  Next: How It Works,  Prev: Simple Usage Checking Examples in Docstrings,  Up: doctest --- Test interactive Python examples

5.25.2.2 Simple Usage: Checking Examples in a Text File
.......................................................

Another simple application of doctest is testing interactive examples
in a text file.  This can be done with the *note testfile(): 2158.
function:

    import doctest
    doctest.testfile("example.txt")

That short script executes and verifies any interactive Python examples
contained in the file `example.txt'.  The file content is treated as if
it were a single giant docstring; the file doesn't need to contain a
Python program!   For example, perhaps `example.txt' contains this:

    The ``example`` module
    ======================

    Using ``factorial``
    -------------------

    This is an example text file in reStructuredText format.  First import
    ``factorial`` from the ``example`` module:

        >>> from example import factorial

    Now use it:

        >>> factorial(6)
        120

Running `doctest.testfile("example.txt")' then finds the error in this
documentation:

    File "./example.txt", line 14, in example.txt
    Failed example:
        factorial(6)
    Expected:
        120
    Got:
        720

As with *note testmod(): 400, *note testfile(): 2158. won't display
anything unless an example fails.  If an example does fail, then the
failing example(s) and the cause(s) of the failure(s) are printed to
stdout, using the same format as *note testmod(): 400.

  By default, *note testfile(): 2158. looks for files in the calling
module's directory.  See section *note Basic API: 2155. for a
description of the optional arguments that can be used to tell it to
look for files in other locations.

  Like *note testmod(): 400, *note testfile(): 2158.'s verbosity can be
set with the `-v' command-line switch or with the optional keyword
argument _verbose_.

  Since Python 2.6, there is also a command line shortcut for running
*note testfile(): 2158.  You can instruct the Python interpreter to run
the doctest module directly from the standard library and pass the file
name(s) on the command line:

    python -m doctest -v example.txt

Because the file name does not end with `.py', *note doctest: b6.
infers that it must be run with *note testfile(): 2158, not *note
testmod(): 400.

  For more information on *note testfile(): 2158, see section *note
Basic API: 2155.


File: python.info,  Node: How It Works,  Next: Basic API,  Prev: Simple Usage Checking Examples in a Text File,  Up: doctest --- Test interactive Python examples

5.25.2.3 How It Works
.....................

This section examines in detail how doctest works: which docstrings it
looks at, how it finds interactive examples, what execution context it
uses, how it handles exceptions, and how option flags can be used to
control its behavior.  This is the information that you need to know to
write doctest examples; for information about actually running doctest
on these examples, see the following sections.

* Menu:

* Which Docstrings Are Examined?::
* How are Docstring Examples Recognized?::
* What's the Execution Context?::
* What About Exceptions?::
* Option Flags and Directives::
* Warnings::


File: python.info,  Node: Which Docstrings Are Examined?,  Next: How are Docstring Examples Recognized?,  Up: How It Works

5.25.2.4 Which Docstrings Are Examined?
.......................................

The module docstring, and all function, class and method docstrings are
searched.  Objects imported into the module are not searched.

  In addition, if `M.__test__' exists and "is true", it must be a dict,
and each entry maps a (string) name to a function object, class object,
or string.  Function and class object docstrings found from
`M.__test__' are searched, and strings are treated as if they were
docstrings.  In output, a key `K' in `M.__test__' appears with name

    <name of M>.__test__.K

Any classes found are recursively searched similarly, to test
docstrings in their contained methods and nested classes.

  Changed in version 2.4: A "private name" concept is deprecated and no
longer documented.


File: python.info,  Node: How are Docstring Examples Recognized?,  Next: What's the Execution Context?,  Prev: Which Docstrings Are Examined?,  Up: How It Works

5.25.2.5 How are Docstring Examples Recognized?
...............................................

In most cases a copy-and-paste of an interactive console session works
fine, but doctest isn't trying to do an exact emulation of any specific
Python shell.

    >>> # comments are ignored
    >>> x = 12
    >>> x
    12
    >>> if x == 13:
    ...     print "yes"
    ... else:
    ...     print "no"
    ...     print "NO"
    ...     print "NO!!!"
    ...
    no
    NO
    NO!!!
    >>>

Any expected output must immediately follow the final `'>>> '' or `'...
'' line containing the code, and the expected output (if any) extends
to the next `'>>> '' or all-whitespace line.

  The fine print:

   * Expected output cannot contain an all-whitespace line, since such
     a line is taken to signal the end of expected output.  If expected
     output does contain a blank line, put `<BLANKLINE>' in your
     doctest example each place a blank line is expected.

     New in version 2.4: `<BLANKLINE>' was added; there was no way to
     use expected output containing empty lines in previous versions.

   * All hard tab characters are expanded to spaces, using 8-column tab
     stops.  Tabs in output generated by the tested code are not
     modified.  Because any hard tabs in the sample output _are_
     expanded, this means that if the code output includes hard tabs,
     the only way the doctest can pass is if the *note
     NORMALIZE_WHITESPACE: 215f. option or directive is in effect.
     Alternatively, the test can be rewritten to capture the output and
     compare it to an expected value as part of the test.  This
     handling of tabs in the source was arrived at through trial and
     error, and has proven to be the least error prone way of handling
     them.  It is possible to use a different algorithm for handling
     tabs by writing a custom *note DocTestParser: 2160. class.

     Changed in version 2.4: Expanding tabs to spaces is new; previous
     versions tried to preserve hard tabs, with confusing results.

   * Output to stdout is captured, but not output to stderr (exception
     tracebacks are captured via a different means).

   * If you continue a line via backslashing in an interactive session,
     or for any other reason use a backslash, you should use a raw
     docstring, which will preserve your backslashes exactly as you
     type them:

         >>> def f(x):
         ...     r'''Backslashes in a raw docstring: m\n'''
         >>> print f.__doc__
         Backslashes in a raw docstring: m\n

     Otherwise, the backslash will be interpreted as part of the
     string. For example, the "\" above would be interpreted as a
     newline character.  Alternatively, you can double each backslash
     in the doctest version (and not use a raw string):

         >>> def f(x):
         ...     '''Backslashes in a raw docstring: m\\n'''
         >>> print f.__doc__
         Backslashes in a raw docstring: m\n


   * The starting column doesn't matter:

         >>> assert "Easy!"
               >>> import math
                   >>> math.floor(1.9)
                   1.0

     and as many leading whitespace characters are stripped from the
     expected output as appeared in the initial `'>>> '' line that
     started the example.


File: python.info,  Node: What's the Execution Context?,  Next: What About Exceptions?,  Prev: How are Docstring Examples Recognized?,  Up: How It Works

5.25.2.6 What's the Execution Context?
......................................

By default, each time *note doctest: b6. finds a docstring to test, it
uses a _shallow copy_ of `M''s globals, so that running tests doesn't
change the module's real globals, and so that one test in `M' can't
leave behind crumbs that accidentally allow another test to work.  This
means examples can freely use any names defined at top-level in `M',
and names defined earlier in the docstring being run. Examples cannot
see names defined in other docstrings.

  You can force use of your own dict as the execution context by passing
`globs=your_dict' to *note testmod(): 400. or *note testfile(): 2158.
instead.


File: python.info,  Node: What About Exceptions?,  Next: Option Flags and Directives,  Prev: What's the Execution Context?,  Up: How It Works

5.25.2.7 What About Exceptions?
...............................

No problem, provided that the traceback is the only output produced by
the example:  just paste in the traceback. (1) Since tracebacks contain
details that are likely to change rapidly (for example, exact file
paths and line numbers), this is one case where doctest works hard to
be flexible in what it accepts.

  Simple example:

    >>> [1, 2, 3].remove(42)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: list.remove(x): x not in list

That doctest succeeds if *note ValueError: 233. is raised, with the
`list.remove(x): x not in list' detail as shown.

  The expected output for an exception must start with a traceback
header, which may be either of the following two lines, indented the
same as the first line of the example:

    Traceback (most recent call last):
    Traceback (innermost last):

The traceback header is followed by an optional traceback stack, whose
contents are ignored by doctest.  The traceback stack is typically
omitted, or copied verbatim from an interactive session.

  The traceback stack is followed by the most interesting part: the
line(s) containing the exception type and detail.  This is usually the
last line of a traceback, but can extend across multiple lines if the
exception has a multi-line detail:

    >>> raise ValueError('multi\n    line\ndetail')
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: multi
        line
    detail

The last three lines (starting with *note ValueError: 233.) are
compared against the exception's type and detail, and the rest are
ignored.

  Changed in version 2.4: Previous versions were unable to handle
multi-line exception details.

  Best practice is to omit the traceback stack, unless it adds
significant documentation value to the example.  So the last example is
probably better as:

    >>> raise ValueError('multi\n    line\ndetail')
    Traceback (most recent call last):
        ...
    ValueError: multi
        line
    detail

Note that tracebacks are treated very specially.  In particular, in the
rewritten example, the use of `...' is independent of doctest's *note
ELLIPSIS: 401. option.  The ellipsis in that example could be left out,
or could just as well be three (or three hundred) commas or digits, or
an indented transcript of a Monty Python skit.

  Some details you should read once, but won't need to remember:

   * Doctest can't guess whether your expected output came from an
     exception traceback or from ordinary printing.  So, e.g., an
     example that expects `ValueError: 42 is prime' will pass whether
     *note ValueError: 233. is actually raised or if the example merely
     prints that traceback text.  In practice, ordinary output rarely
     begins with a traceback header line, so this doesn't create real
     problems.

   * Each line of the traceback stack (if present) must be indented
     further than the first line of the example, _or_ start with a
     non-alphanumeric character.  The first line following the
     traceback header indented the same and starting with an
     alphanumeric is taken to be the start of the exception detail.  Of
     course this does the right thing for genuine tracebacks.

   * When the *note IGNORE_EXCEPTION_DETAIL: 2165. doctest option is
     specified, everything following the leftmost colon and any module
     information in the exception name is ignored.

   * The interactive shell omits the traceback header line for some
     *note SyntaxError: 485.s.  But doctest uses the traceback header
     line to distinguish exceptions from non-exceptions.  So in the
     rare case where you need to test a *note SyntaxError: 485. that
     omits the traceback header, you will need to manually add the
     traceback header line to your test example.

   * For some *note SyntaxError: 485.s, Python displays the character
     position of the syntax error, using a `^' marker:

         >>> 1 1
           File "<stdin>", line 1
             1 1
               ^
         SyntaxError: invalid syntax

     Since the lines showing the position of the error come before the
     exception type and detail, they are not checked by doctest.  For
     example, the following test would pass, even though it puts the
     `^' marker in the wrong location:

         >>> 1 1
         Traceback (most recent call last):
           File "<stdin>", line 1
             1 1
             ^
         SyntaxError: invalid syntax



  ---------- Footnotes ----------

  (1) Examples containing both expected output and an exception are not
supported.  Trying to guess where one ends and the other begins is too
error-prone, and that also makes for a confusing test.


File: python.info,  Node: Option Flags and Directives,  Next: Warnings,  Prev: What About Exceptions?,  Up: How It Works

5.25.2.8 Option Flags and Directives
....................................

A number of option flags control various aspects of doctest's behavior.
Symbolic names for the flags are supplied as module constants, which
can be or'ed together and passed to various functions.  The names can
also be used in doctest directives (see below).

  The first group of options define test semantics, controlling aspects
of how doctest decides whether actual output matches an example's
expected output:

 -- Data: doctest.DONT_ACCEPT_TRUE_FOR_1
     By default, if an expected output block contains just `1', an
     actual output block containing just `1' or just `True' is
     considered to be a match, and similarly for `0' versus `False'.
     When *note DONT_ACCEPT_TRUE_FOR_1: 2168. is specified, neither
     substitution is allowed.  The default behavior caters to that
     Python changed the return type of many functions from integer to
     boolean; doctests expecting "little integer" output still work in
     these cases.  This option will probably go away, but not for
     several years.

 -- Data: doctest.DONT_ACCEPT_BLANKLINE
     By default, if an expected output block contains a line containing
     only the string `<BLANKLINE>', then that line will match a blank
     line in the actual output.  Because a genuinely blank line
     delimits the expected output, this is the only way to communicate
     that a blank line is expected.  When *note DONT_ACCEPT_BLANKLINE:
     2169. is specified, this substitution is not allowed.

 -- Data: doctest.NORMALIZE_WHITESPACE
     When specified, all sequences of whitespace (blanks and newlines)
     are treated as equal.  Any sequence of whitespace within the
     expected output will match any sequence of whitespace within the
     actual output. By default, whitespace must match exactly. *note
     NORMALIZE_WHITESPACE: 215f. is especially useful when a line of
     expected output is very long, and you want to wrap it across
     multiple lines in your source.

 -- Data: doctest.ELLIPSIS
     When specified, an ellipsis marker (`...') in the expected output
     can match any substring in the actual output.  This includes
     substrings that span line boundaries, and empty substrings, so
     it's best to keep usage of this simple.  Complicated uses can lead
     to the same kinds of "oops, it matched too much!"  surprises that
     `.*' is prone to in regular expressions.

 -- Data: doctest.IGNORE_EXCEPTION_DETAIL
     When specified, an example that expects an exception passes if an
     exception of the expected type is raised, even if the exception
     detail does not match.  For example, an example expecting
     `ValueError: 42' will pass if the actual exception raised is
     `ValueError: 3*14', but will fail, e.g., if *note TypeError: 215.
     is raised.

     It will also ignore the module name used in Python 3 doctest
     reports. Hence both these variations will work regardless of
     whether the test is run under Python 2.7 or Python 3.2 (or later
     versions):

         >>> raise CustomError('message') #doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
         CustomError: message


         >>> raise CustomError('message') #doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
         my_module.CustomError: message

     Note that *note ELLIPSIS: 401. can also be used to ignore the
     details of the exception message, but such a test may still fail
     based on whether or not the module details are printed as part of
     the exception name. Using *note IGNORE_EXCEPTION_DETAIL: 2165. and
     the details from Python 2.3 is also the only clear way to write a
     doctest that doesn't care about the exception detail yet continues
     to pass under Python 2.3 or earlier (those releases do not support
     doctest directives and ignore them as irrelevant comments). For
     example,

         >>> (1, 2)[3] = 'moo' #doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
           File "<stdin>", line 1, in ?
         TypeError: object doesn't support item assignment

     passes under Python 2.3 and later Python versions, even though the
     detail changed in Python 2.4 to say "does not" instead of
     "doesn't".

     Changed in version 2.7: *note IGNORE_EXCEPTION_DETAIL: 2165. now
     also ignores any information relating to the module containing the
     exception under test

 -- Data: doctest.SKIP
     When specified, do not run the example at all.  This can be useful
     in contexts where doctest examples serve as both documentation and
     test cases, and an example should be included for documentation
     purposes, but should not be checked.  E.g., the example's output
     might be random; or the example might depend on resources which
     would be unavailable to the test driver.

     The SKIP flag can also be used for temporarily "commenting out"
     examples.

  New in version 2.5.

 -- Data: doctest.COMPARISON_FLAGS
     A bitmask or'ing together all the comparison flags above.

  The second group of options controls how test failures are reported:

 -- Data: doctest.REPORT_UDIFF
     When specified, failures that involve multi-line expected and
     actual outputs are displayed using a unified diff.

 -- Data: doctest.REPORT_CDIFF
     When specified, failures that involve multi-line expected and
     actual outputs will be displayed using a context diff.

 -- Data: doctest.REPORT_NDIFF
     When specified, differences are computed by `difflib.Differ',
     using the same algorithm as the popular `ndiff.py' utility. This
     is the only method that marks differences within lines as well as
     across lines.  For example, if a line of expected output contains
     digit `1' where actual output contains letter `l', a line is
     inserted with a caret marking the mismatching column positions.

 -- Data: doctest.REPORT_ONLY_FIRST_FAILURE
     When specified, display the first failing example in each doctest,
     but suppress output for all remaining examples.  This will prevent
     doctest from reporting correct examples that break because of
     earlier failures; but it might also hide incorrect examples that
     fail independently of the first failure.  When *note
     REPORT_ONLY_FIRST_FAILURE: 216c. is specified, the remaining
     examples are still run, and still count towards the total number
     of failures reported; only the output is suppressed.

 -- Data: doctest.REPORTING_FLAGS
     A bitmask or'ing together all the reporting flags above.

  "Doctest directives" may be used to modify the option flags for
individual examples.  Doctest directives are expressed as a special
Python comment following an example's source code:

    directive             ::= "#" "doctest:" directive_options
    directive_options     ::= directive_option ("," directive_option)\*
    directive_option      ::= on_or_off directive_option_name
    on_or_off             ::= "+" \| "-"
    directive_option_name ::= "DONT_ACCEPT_BLANKLINE" \| "NORMALIZE_WHITESPACE" \| ...

Whitespace is not allowed between the `+' or `-' and the directive
option name.  The directive option name can be any of the option flag
names explained above.

  An example's doctest directives modify doctest's behavior for that
single example.  Use `+' to enable the named behavior, or `-' to
disable it.

  For example, this test passes:

    >>> print range(20) #doctest: +NORMALIZE_WHITESPACE
    [0,   1,  2,  3,  4,  5,  6,  7,  8,  9,
    10,  11, 12, 13, 14, 15, 16, 17, 18, 19]

Without the directive it would fail, both because the actual output
doesn't have two blanks before the single-digit list elements, and
because the actual output is on a single line.  This test also passes,
and also requires a directive to do so:

    >>> print range(20) # doctest:+ELLIPSIS
    [0, 1, ..., 18, 19]

Multiple directives can be used on a single physical line, separated by
commas:

    >>> print range(20) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    [0,    1, ...,   18,    19]

If multiple directive comments are used for a single example, then they
are combined:

    >>> print range(20) # doctest: +ELLIPSIS
    ...                 # doctest: +NORMALIZE_WHITESPACE
    [0,    1, ...,   18,    19]

As the previous example shows, you can add `...' lines to your example
containing only directives.  This can be useful when an example is too
long for a directive to comfortably fit on the same line:

    >>> print range(5) + range(10,20) + range(30,40) + range(50,60)
    ... # doctest: +ELLIPSIS
    [0, ..., 4, 10, ..., 19, 30, ..., 39, 50, ..., 59]

Note that since all options are disabled by default, and directives
apply only to the example they appear in, enabling options (via `+' in
a directive) is usually the only meaningful choice.  However, option
flags can also be passed to functions that run doctests, establishing
different defaults.  In such cases, disabling an option via `-' in a
directive can be useful.

  New in version 2.4: Doctest directives and the associated constants
*note DONT_ACCEPT_BLANKLINE: 2169, *note NORMALIZE_WHITESPACE: 215f,
*note ELLIPSIS: 401, *note IGNORE_EXCEPTION_DETAIL: 2165, *note
REPORT_UDIFF: 402, *note REPORT_CDIFF: 403, *note REPORT_NDIFF: 404,
*note REPORT_ONLY_FIRST_FAILURE: 216c, *note COMPARISON_FLAGS: 216b. and
*note REPORTING_FLAGS: 216d. were added.

  There's also a way to register new option flag names, although this
isn't useful unless you intend to extend *note doctest: b6. internals
via subclassing:

 -- Function: doctest.register_optionflag (name)
     Create a new option flag with a given name, and return the new
     flag's integer value.  *note register_optionflag(): 2173. can be
     used when subclassing *note OutputChecker: 2174. or *note
     DocTestRunner: 2175. to create new options that are supported by
     your subclasses.  *note register_optionflag(): 2173. should always
     be called using the following idiom:

         MY_FLAG = register_optionflag('MY_FLAG')

     New in version 2.4.


File: python.info,  Node: Warnings,  Prev: Option Flags and Directives,  Up: How It Works

5.25.2.9 Warnings
.................

*note doctest: b6. is serious about requiring exact matches in expected
output.  If even a single character doesn't match, the test fails.
This will probably surprise you a few times, as you learn exactly what
Python does and doesn't guarantee about output.  For example, when
printing a dict, Python doesn't guarantee that the key-value pairs will
be printed in any particular order, so a test like

    >>> foo()
    {"Hermione": "hippogryph", "Harry": "broomstick"}

is vulnerable!  One workaround is to do

    >>> foo() == {"Hermione": "hippogryph", "Harry": "broomstick"}
    True

instead.  Another is to do

    >>> d = foo().items()
    >>> d.sort()
    >>> d
    [('Harry', 'broomstick'), ('Hermione', 'hippogryph')]

There are others, but you get the idea.

  Another bad idea is to print things that embed an object address, like

    >>> id(1.0) # certain to fail some of the time
    7948648
    >>> class C: pass
    >>> C()   # the default repr() for instances embeds an address
    <__main__.C instance at 0x00AC18F0>

The *note ELLIPSIS: 401. directive gives a nice approach for the last
example:

    >>> C() #doctest: +ELLIPSIS
    <__main__.C instance at 0x...>

Floating-point numbers are also subject to small output variations
across platforms, because Python defers to the platform C library for
float formatting, and C libraries vary widely in quality here.

    >>> 1./7  # risky
    0.14285714285714285
    >>> print 1./7 # safer
    0.142857142857
    >>> print round(1./7, 6) # much safer
    0.142857

Numbers of the form `I/2.**J' are safe across all platforms, and I often
contrive doctest examples to produce numbers of that form:

    >>> 3./4  # utterly safe
    0.75

Simple fractions are also easier for people to understand, and that
makes for better documentation.


File: python.info,  Node: Basic API,  Next: Unittest API,  Prev: How It Works,  Up: doctest --- Test interactive Python examples

5.25.2.10 Basic API
...................

The functions *note testmod(): 400. and *note testfile(): 2158. provide
a simple interface to doctest that should be sufficient for most basic
uses.  For a less formal introduction to these two functions, see
sections *note Simple Usage; Checking Examples in Docstrings: 2154.
and *note Simple Usage; Checking Examples in a Text File: 2157.

 -- Function: doctest.testfile (filename[, module_relative][, name][,
          package][, globs][, verbose][, report][, optionflags][,
          extraglobs][, raise_on_error][, parser][, encoding])
     All arguments except _filename_ are optional, and should be
     specified in keyword form.

     Test examples in the file named _filename_.  Return
     `(failure_count, test_count)'.

     Optional argument _module_relative_ specifies how the filename
     should be interpreted:

        * If _module_relative_ is `True' (the default), then _filename_
          specifies an OS-independent module-relative path.  By
          default, this path is relative to the calling module's
          directory; but if the _package_ argument is specified, then it
          is relative to that package.  To ensure OS-independence,
          _filename_ should use `/' characters to separate path
          segments, and may not be an absolute path (i.e., it may not
          begin with `/').

        * If _module_relative_ is `False', then _filename_ specifies an
          OS-specific path.  The path may be absolute or relative;
          relative paths are resolved with respect to the current
          working directory.

     Optional argument _name_ gives the name of the test; by default,
     or if `None', `os.path.basename(filename)' is used.

     Optional argument _package_ is a Python package or the name of a
     Python package whose directory should be used as the base
     directory for a module-relative filename.  If no package is
     specified, then the calling module's directory is used as the base
     directory for module-relative filenames.  It is an error to
     specify _package_ if _module_relative_ is `False'.

     Optional argument _globs_ gives a dict to be used as the globals
     when executing examples.  A new shallow copy of this dict is
     created for the doctest, so its examples start with a clean slate.
     By default, or if `None', a new empty dict is used.

     Optional argument _extraglobs_ gives a dict merged into the
     globals used to execute examples.  This works like *note
     dict.update(): 3f1.:  if _globs_ and _extraglobs_ have a common
     key, the associated value in _extraglobs_ appears in the combined
     dict.  By default, or if `None', no extra globals are used.  This
     is an advanced feature that allows parameterization of doctests.
     For example, a doctest can be written for a base class, using a
     generic name for the class, then reused to test any number of
     subclasses by passing an _extraglobs_ dict mapping the generic
     name to the subclass to be tested.

     Optional argument _verbose_ prints lots of stuff if true, and
     prints only failures if false; by default, or if `None', it's true
     if and only if `'-v'' is in `sys.argv'.

     Optional argument _report_ prints a summary at the end when true,
     else prints nothing at the end.  In verbose mode, the summary is
     detailed, else the summary is very brief (in fact, empty if all
     tests passed).

     Optional argument _optionflags_ or's together option flags.  See
     section *note Option Flags and Directives: 2167.

     Optional argument _raise_on_error_ defaults to false.  If true, an
     exception is raised upon the first failure or unexpected exception
     in an example.  This allows failures to be post-mortem debugged.
     Default behavior is to continue running examples.

     Optional argument _parser_ specifies a *note DocTestParser: 2160.
     (or subclass) that should be used to extract tests from the files.
     It defaults to a normal parser (i.e., `DocTestParser()').

     Optional argument _encoding_ specifies an encoding that should be
     used to convert the file to unicode.

     New in version 2.4.

     Changed in version 2.5: The parameter _encoding_ was added.

 -- Function: doctest.testmod ([m][, name][, globs][, verbose][,
          report][, optionflags][, extraglobs][, raise_on_error][,
          exclude_empty])
     All arguments are optional, and all except for _m_ should be
     specified in keyword form.

     Test examples in docstrings in functions and classes reachable
     from module _m_ (or module *note __main__: 2. if _m_ is not
     supplied or is `None'), starting with `m.__doc__'.

     Also test examples reachable from dict `m.__test__', if it exists
     and is not `None'.  `m.__test__' maps names (strings) to
     functions, classes and strings; function and class docstrings are
     searched for examples; strings are searched directly, as if they
     were docstrings.

     Only docstrings attached to objects belonging to module _m_ are
     searched.

     Return `(failure_count, test_count)'.

     Optional argument _name_ gives the name of the module; by default,
     or if `None', `m.__name__' is used.

     Optional argument _exclude_empty_ defaults to false.  If true,
     objects for which no doctests are found are excluded from
     consideration. The default is a backward compatibility hack, so
     that code still using `doctest.master.summarize()' in conjunction
     with *note testmod(): 400. continues to get output for objects
     with no tests. The _exclude_empty_ argument to the newer *note
     DocTestFinder: 2179.  constructor defaults to true.

     Optional arguments _extraglobs_, _verbose_, _report_,
     _optionflags_, _raise_on_error_, and _globs_ are the same as for
     function *note testfile(): 2158.  above, except that _globs_
     defaults to `m.__dict__'.

     Changed in version 2.3: The parameter _optionflags_ was added.

     Changed in version 2.4: The parameters _extraglobs_,
     _raise_on_error_ and _exclude_empty_ were added.

     Changed in version 2.5: The optional argument _isprivate_,
     deprecated in 2.4, was removed.

  There's also a function to run the doctests associated with a single
object.  This function is provided for backward compatibility.  There
are no plans to deprecate it, but it's rarely useful:

 -- Function: doctest.run_docstring_examples (f, globs[, verbose][,
          name][, compileflags][, optionflags])
     Test examples associated with object _f_; for example, _f_ may be
     a module, function, or class object.

     A shallow copy of dictionary argument _globs_ is used for the
     execution context.

     Optional argument _name_ is used in failure messages, and defaults
     to `"NoName"'.

     If optional argument _verbose_ is true, output is generated even
     if there are no failures.  By default, output is generated only in
     case of an example failure.

     Optional argument _compileflags_ gives the set of flags that
     should be used by the Python compiler when running the examples.
     By default, or if `None', flags are deduced corresponding to the
     set of future features found in _globs_.

     Optional argument _optionflags_ works as for function *note
     testfile(): 2158. above.


File: python.info,  Node: Unittest API,  Next: Advanced API,  Prev: Basic API,  Up: doctest --- Test interactive Python examples

5.25.2.11 Unittest API
......................

As your collection of doctest'ed modules grows, you'll want a way to
run all their doctests systematically.  Prior to Python 2.4, *note
doctest: b6. had a barely documented `Tester' class that supplied a
rudimentary way to combine doctests from multiple modules. `Tester' was
feeble, and in practice most serious Python testing frameworks build on
the *note unittest: 188. module, which supplies many flexible ways to
combine tests from multiple sources.  So, in Python 2.4, *note doctest:
b6.'s `Tester' class is deprecated, and *note doctest: b6. provides two
functions that can be used to create *note unittest: 188.  test suites
from modules and text files containing doctests.  To integrate with
*note unittest: 188. test discovery, include a `load_tests()' function
in your test module:

    import unittest
    import doctest
    import my_module_with_doctests

    def load_tests(loader, tests, ignore):
        tests.addTests(doctest.DocTestSuite(my_module_with_doctests))
        return tests

There are two main functions for creating *note unittest.TestSuite:
44c. instances from text files and modules with doctests:

 -- Function: doctest.DocFileSuite (*paths, [module_relative][,
          package][, setUp][, tearDown][, globs][, optionflags][,
          parser][, encoding])
     Convert doctest tests from one or more text files to a *note
     unittest.TestSuite: 44c.

     The returned *note unittest.TestSuite: 44c. is to be run by the
     unittest framework and runs the interactive examples in each file.
     If an example in any file fails, then the synthesized unit test
     fails, and a `failureException' exception is raised showing the
     name of the file containing the test and a (sometimes approximate)
     line number.

     Pass one or more paths (as strings) to text files to be examined.

     Options may be provided as keyword arguments:

     Optional argument _module_relative_ specifies how the filenames in
     _paths_ should be interpreted:

        * If _module_relative_ is `True' (the default), then each
          filename in _paths_ specifies an OS-independent
          module-relative path.  By default, this path is relative to
          the calling module's directory; but if the _package_ argument
          is specified, then it is relative to that package.  To ensure
          OS-independence, each filename should use `/' characters to
          separate path segments, and may not be an absolute path
          (i.e., it may not begin with `/').

        * If _module_relative_ is `False', then each filename in
          _paths_ specifies an OS-specific path.  The path may be
          absolute or relative; relative paths are resolved with
          respect to the current working directory.

     Optional argument _package_ is a Python package or the name of a
     Python package whose directory should be used as the base
     directory for module-relative filenames in _paths_.  If no package
     is specified, then the calling module's directory is used as the
     base directory for module-relative filenames.  It is an error to
     specify _package_ if _module_relative_ is `False'.

     Optional argument _setUp_ specifies a set-up function for the test
     suite.  This is called before running the tests in each file.  The
     _setUp_ function will be passed a *note DocTest: 217e. object.
     The setUp function can access the test globals as the _globs_
     attribute of the test passed.

     Optional argument _tearDown_ specifies a tear-down function for
     the test suite.  This is called after running the tests in each
     file.  The _tearDown_ function will be passed a *note DocTest:
     217e. object.  The setUp function can access the test globals as
     the _globs_ attribute of the test passed.

     Optional argument _globs_ is a dictionary containing the initial
     global variables for the tests.  A new copy of this dictionary is
     created for each test.  By default, _globs_ is a new empty
     dictionary.

     Optional argument _optionflags_ specifies the default doctest
     options for the tests, created by or-ing together individual
     option flags.  See section *note Option Flags and Directives:
     2167. See function *note set_unittest_reportflags(): 217f. below
     for a better way to set reporting options.

     Optional argument _parser_ specifies a *note DocTestParser: 2160.
     (or subclass) that should be used to extract tests from the files.
     It defaults to a normal parser (i.e., `DocTestParser()').

     Optional argument _encoding_ specifies an encoding that should be
     used to convert the file to unicode.

     New in version 2.4.

     Changed in version 2.5: The global `__file__' was added to the
     globals provided to doctests loaded from a text file using *note
     DocFileSuite(): 217d.

     Changed in version 2.5: The parameter _encoding_ was added.

 -- Function: doctest.DocTestSuite ([module][, globs][, extraglobs][,
          test_finder][, setUp][, tearDown][, checker])
     Convert doctest tests for a module to a *note unittest.TestSuite:
     44c.

     The returned *note unittest.TestSuite: 44c. is to be run by the
     unittest framework and runs each doctest in the module.  If any of
     the doctests fail, then the synthesized unit test fails, and a
     `failureException' exception is raised showing the name of the
     file containing the test and a (sometimes approximate) line number.

     Optional argument _module_ provides the module to be tested.  It
     can be a module object or a (possibly dotted) module name.  If not
     specified, the module calling this function is used.

     Optional argument _globs_ is a dictionary containing the initial
     global variables for the tests.  A new copy of this dictionary is
     created for each test.  By default, _globs_ is a new empty
     dictionary.

     Optional argument _extraglobs_ specifies an extra set of global
     variables, which is merged into _globs_.  By default, no extra
     globals are used.

     Optional argument _test_finder_ is the *note DocTestFinder: 2179.
     object (or a drop-in replacement) that is used to extract doctests
     from the module.

     Optional arguments _setUp_, _tearDown_, and _optionflags_ are the
     same as for function *note DocFileSuite(): 217d. above.

     New in version 2.3.

     Changed in version 2.4: The parameters _globs_, _extraglobs_,
     _test_finder_, _setUp_, _tearDown_, and _optionflags_ were added;
     this function now uses the same search technique as *note
     testmod(): 400.

  Under the covers, *note DocTestSuite(): 2180. creates a *note
unittest.TestSuite: 44c. out of `doctest.DocTestCase' instances, and
`DocTestCase' is a subclass of *note unittest.TestCase: 27d.
`DocTestCase' isn't documented here (it's an internal detail), but
studying its code can answer questions about the exact details of *note
unittest: 188. integration.

  Similarly, *note DocFileSuite(): 217d. creates a *note
unittest.TestSuite: 44c. out of `doctest.DocFileCase' instances, and
`DocFileCase' is a subclass of `DocTestCase'.

  So both ways of creating a *note unittest.TestSuite: 44c. run
instances of `DocTestCase'.  This is important for a subtle reason:
when you run *note doctest: b6. functions yourself, you can control the
*note doctest: b6. options in use directly, by passing option flags to
*note doctest: b6. functions.  However, if you're writing a *note
unittest: 188. framework, *note unittest: 188. ultimately controls when
and how tests get run.  The framework author typically wants to control
*note doctest: b6. reporting options (perhaps, e.g., specified by
command line options), but there's no way to pass options through *note
unittest: 188. to *note doctest: b6. test runners.

  For this reason, *note doctest: b6. also supports a notion of *note
doctest: b6.  reporting flags specific to *note unittest: 188. support,
via this function:

 -- Function: doctest.set_unittest_reportflags (flags)
     Set the *note doctest: b6. reporting flags to use.

     Argument _flags_ or's together option flags.  See section *note
     Option Flags and Directives: 2167.  Only "reporting flags" can be
     used.

     This is a module-global setting, and affects all future doctests
     run by module *note unittest: 188.:  the `runTest()' method of
     `DocTestCase' looks at the option flags specified for the test
     case when the `DocTestCase' instance was constructed.  If no
     reporting flags were specified (which is the typical and expected
     case), *note doctest: b6.'s *note unittest: 188. reporting flags
     are or'ed into the option flags, and the option flags so augmented
     are passed to the *note DocTestRunner: 2175. instance created to
     run the doctest.  If any reporting flags were specified when the
     `DocTestCase' instance was constructed, *note doctest: b6.'s *note
     unittest: 188. reporting flags are ignored.

     The value of the *note unittest: 188. reporting flags in effect
     before the function was called is returned by the function.

     New in version 2.4.


File: python.info,  Node: Advanced API,  Next: Debugging,  Prev: Unittest API,  Up: doctest --- Test interactive Python examples

5.25.2.12 Advanced API
......................

The basic API is a simple wrapper that's intended to make doctest easy
to use.  It is fairly flexible, and should meet most users' needs;
however, if you require more fine-grained control over testing, or wish
to extend doctest's capabilities, then you should use the advanced API.

  The advanced API revolves around two container classes, which are
used to store the interactive examples extracted from doctest cases:

   * *note Example: 2183.: A single Python *note statement: d84, paired
     with its expected output.

   * *note DocTest: 217e.: A collection of *note Example: 2183.s,
     typically extracted from a single docstring or text file.

  Additional processing classes are defined to find, parse, and run,
and check doctest examples:

   * *note DocTestFinder: 2179.: Finds all docstrings in a given
     module, and uses a *note DocTestParser: 2160. to create a *note
     DocTest: 217e. from every docstring that contains interactive
     examples.

   * *note DocTestParser: 2160.: Creates a *note DocTest: 217e. object
     from a string (such as an object's docstring).

   * *note DocTestRunner: 2175.: Executes the examples in a *note
     DocTest: 217e, and uses an *note OutputChecker: 2174. to verify
     their output.

   * *note OutputChecker: 2174.: Compares the actual output from a
     doctest example with the expected output, and decides whether they
     match.

  The relationships among these processing classes are summarized in
the following diagram:

                                list of:
    +------+                   +---------+
    |module| --DocTestFinder-> | DocTest | --DocTestRunner-> results
    +------+    |        ^     +---------+     |       ^    (printed)
                |        |     | Example |     |       |
                v        |     |   ...   |     v       |
               DocTestParser   | Example |   OutputChecker
                               +---------+


* Menu:

* DocTest Objects::
* Example Objects::
* DocTestFinder objects::
* DocTestParser objects::
* DocTestRunner objects::
* OutputChecker objects::


File: python.info,  Node: DocTest Objects,  Next: Example Objects,  Up: Advanced API

5.25.2.13 DocTest Objects
.........................

 -- Class: doctest.DocTest (examples, globs, name, filename, lineno,
          docstring)
     A collection of doctest examples that should be run in a single
     namespace.  The constructor arguments are used to initialize the
     member variables of the same names.

     New in version 2.4.

     *note DocTest: 217e. defines the following member variables.  They
     are initialized by the constructor, and should not be modified
     directly.

      -- Attribute: examples
          A list of *note Example: 2183. objects encoding the
          individual interactive Python examples that should be run by
          this test.

      -- Attribute: globs
          The namespace (aka globals) that the examples should be run
          in. This is a dictionary mapping names to values.  Any
          changes to the namespace made by the examples (such as
          binding new variables) will be reflected in *note globs: 2187.
          after the test is run.

      -- Attribute: name
          A string name identifying the *note DocTest: 217e.
          Typically, this is the name of the object or file that the
          test was extracted from.

      -- Attribute: filename
          The name of the file that this *note DocTest: 217e. was
          extracted from; or `None' if the filename is unknown, or if
          the *note DocTest: 217e. was not extracted from a file.

      -- Attribute: lineno
          The line number within *note filename: 2189. where this *note
          DocTest: 217e. begins, or `None' if the line number is
          unavailable.  This line number is zero-based with respect to
          the beginning of the file.

      -- Attribute: docstring
          The string that the test was extracted from, or 'None' if the
          string is unavailable, or if the test was not extracted from
          a string.


File: python.info,  Node: Example Objects,  Next: DocTestFinder objects,  Prev: DocTest Objects,  Up: Advanced API

5.25.2.14 Example Objects
.........................

 -- Class: doctest.Example (source, want[, exc_msg][, lineno][,
          indent][, options])
     A single interactive example, consisting of a Python statement and
     its expected output.  The constructor arguments are used to
     initialize the member variables of the same names.

     New in version 2.4.

     *note Example: 2183. defines the following member variables.  They
     are initialized by the constructor, and should not be modified
     directly.

      -- Attribute: source
          A string containing the example's source code.  This source
          code consists of a single Python statement, and always ends
          with a newline; the constructor adds a newline when necessary.

      -- Attribute: want
          The expected output from running the example's source code
          (either from stdout, or a traceback in case of exception).
          *note want: 218f. ends with a newline unless no output is
          expected, in which case it's an empty string.  The
          constructor adds a newline when necessary.

      -- Attribute: exc_msg
          The exception message generated by the example, if the
          example is expected to generate an exception; or `None' if it
          is not expected to generate an exception.  This exception
          message is compared against the return value of *note
          traceback.format_exception_only(): 2191.  *note exc_msg:
          2190. ends with a newline unless it's `None'.  The
          constructor adds a newline if needed.

      -- Attribute: lineno
          The line number within the string containing this example
          where the example begins.  This line number is zero-based
          with respect to the beginning of the containing string.

      -- Attribute: indent
          The example's indentation in the containing string, i.e., the
          number of space characters that precede the example's first
          prompt.

      -- Attribute: options
          A dictionary mapping from option flags to `True' or `False',
          which is used to override default options for this example.
          Any option flags not contained in this dictionary are left at
          their default value (as specified by the *note DocTestRunner:
          2175.'s `optionflags'). By default, no options are set.


File: python.info,  Node: DocTestFinder objects,  Next: DocTestParser objects,  Prev: Example Objects,  Up: Advanced API

5.25.2.15 DocTestFinder objects
...............................

 -- Class: doctest.DocTestFinder ([verbose][, parser][, recurse][,
          exclude_empty])
     A processing class used to extract the *note DocTest: 217e.s that
     are relevant to a given object, from its docstring and the
     docstrings of its contained objects.  *note DocTest: 217e.s can
     currently be extracted from the following object types: modules,
     functions, classes, methods, staticmethods, classmethods, and
     properties.

     The optional argument _verbose_ can be used to display the objects
     searched by the finder.  It defaults to `False' (no output).

     The optional argument _parser_ specifies the *note DocTestParser:
     2160. object (or a drop-in replacement) that is used to extract
     doctests from docstrings.

     If the optional argument _recurse_ is false, then *note
     DocTestFinder.find(): 2197.  will only examine the given object,
     and not any contained objects.

     If the optional argument _exclude_empty_ is false, then *note
     DocTestFinder.find(): 2197. will include tests for objects with
     empty docstrings.

     New in version 2.4.

     *note DocTestFinder: 2179. defines the following method:

      -- Method: find (obj[, name][, module][, globs][, extraglobs])
          Return a list of the *note DocTest: 217e.s that are defined
          by _obj_'s docstring, or by any of its contained objects'
          docstrings.

          The optional argument _name_ specifies the object's name;
          this name will be used to construct names for the returned
          *note DocTest: 217e.s.  If _name_ is not specified, then
          `obj.__name__' is used.

          The optional parameter _module_ is the module that contains
          the given object.  If the module is not specified or is None,
          then the test finder will attempt to automatically determine
          the correct module.  The object's module is used:

             * As a default namespace, if _globs_ is not specified.

             * To prevent the DocTestFinder from extracting DocTests
               from objects that are imported from other modules.
               (Contained objects with modules other than _module_ are
               ignored.)

             * To find the name of the file containing the object.

             * To help find the line number of the object within its
               file.

          If _module_ is `False', no attempt to find the module will be
          made.  This is obscure, of use mostly in testing doctest
          itself: if _module_ is `False', or is `None' but cannot be
          found automatically, then all objects are considered to
          belong to the (non-existent) module, so all contained objects
          will (recursively) be searched for doctests.

          The globals for each *note DocTest: 217e. is formed by
          combining _globs_ and _extraglobs_ (bindings in _extraglobs_
          override bindings in _globs_).  A new shallow copy of the
          globals dictionary is created for each *note DocTest: 217e.
          If _globs_ is not specified, then it defaults to the module's
          ___dict___, if specified, or `{}' otherwise.  If _extraglobs_
          is not specified, then it defaults to `{}'.


File: python.info,  Node: DocTestParser objects,  Next: DocTestRunner objects,  Prev: DocTestFinder objects,  Up: Advanced API

5.25.2.16 DocTestParser objects
...............................

 -- Class: doctest.DocTestParser
     A processing class used to extract interactive examples from a
     string, and use them to create a *note DocTest: 217e. object.

     New in version 2.4.

     *note DocTestParser: 2160. defines the following methods:

      -- Method: get_doctest (string, globs, name, filename, lineno)
          Extract all doctest examples from the given string, and
          collect them into a *note DocTest: 217e. object.

          _globs_, _name_, _filename_, and _lineno_ are attributes for
          the new *note DocTest: 217e. object.  See the documentation
          for *note DocTest: 217e. for more information.

      -- Method: get_examples (string[, name])
          Extract all doctest examples from the given string, and
          return them as a list of *note Example: 2183. objects.  Line
          numbers are 0-based.  The optional argument _name_ is a name
          identifying this string, and is only used for error messages.

      -- Method: parse (string[, name])
          Divide the given string into examples and intervening text,
          and return them as a list of alternating *note Example:
          2183.s and strings. Line numbers for the *note Example:
          2183.s are 0-based.  The optional argument _name_ is a name
          identifying this string, and is only used for error messages.


File: python.info,  Node: DocTestRunner objects,  Next: OutputChecker objects,  Prev: DocTestParser objects,  Up: Advanced API

5.25.2.17 DocTestRunner objects
...............................

 -- Class: doctest.DocTestRunner ([checker][, verbose][, optionflags])
     A processing class used to execute and verify the interactive
     examples in a *note DocTest: 217e.

     The comparison between expected outputs and actual outputs is done
     by an *note OutputChecker: 2174.  This comparison may be
     customized with a number of option flags; see section *note Option
     Flags and Directives: 2167. for more information.  If the option
     flags are insufficient, then the comparison may also be customized
     by passing a subclass of *note OutputChecker: 2174. to the
     constructor.

     The test runner's display output can be controlled in two ways.
     First, an output function can be passed to `TestRunner.run()';
     this function will be called with strings that should be
     displayed.  It defaults to `sys.stdout.write'.  If capturing the
     output is not sufficient, then the display output can be also
     customized by subclassing DocTestRunner, and overriding the methods
     *note report_start(): 219f, *note report_success(): 21a0, *note
     report_unexpected_exception(): 21a1, and *note report_failure():
     21a2.

     The optional keyword argument _checker_ specifies the *note
     OutputChecker: 2174.  object (or drop-in replacement) that should
     be used to compare the expected outputs to the actual outputs of
     doctest examples.

     The optional keyword argument _verbose_ controls the *note
     DocTestRunner: 2175.'s verbosity.  If _verbose_ is `True', then
     information is printed about each example, as it is run.  If
     _verbose_ is `False', then only failures are printed.  If
     _verbose_ is unspecified, or `None', then verbose output is used
     iff the command-line switch `-v' is used.

     The optional keyword argument _optionflags_ can be used to control
     how the test runner compares expected output to actual output, and
     how it displays failures.  For more information, see section *note
     Option Flags and Directives: 2167.

     New in version 2.4.

     *note DocTestParser: 2160. defines the following methods:

      -- Method: report_start (out, test, example)
          Report that the test runner is about to process the given
          example. This method is provided to allow subclasses of *note
          DocTestRunner: 2175. to customize their output; it should not
          be called directly.

          _example_ is the example about to be processed.  _test_ is
          the test _containing example_.  _out_ is the output function
          that was passed to *note DocTestRunner.run(): 21a3.

      -- Method: report_success (out, test, example, got)
          Report that the given example ran successfully.  This method
          is provided to allow subclasses of *note DocTestRunner: 2175.
          to customize their output; it should not be called directly.

          _example_ is the example about to be processed.  _got_ is the
          actual output from the example.  _test_ is the test
          containing _example_.  _out_ is the output function that was
          passed to *note DocTestRunner.run(): 21a3.

      -- Method: report_failure (out, test, example, got)
          Report that the given example failed.  This method is
          provided to allow subclasses of *note DocTestRunner: 2175. to
          customize their output; it should not be called directly.

          _example_ is the example about to be processed.  _got_ is the
          actual output from the example.  _test_ is the test
          containing _example_.  _out_ is the output function that was
          passed to *note DocTestRunner.run(): 21a3.

      -- Method: report_unexpected_exception (out, test, example,
               exc_info)
          Report that the given example raised an unexpected exception.
          This method is provided to allow subclasses of *note
          DocTestRunner: 2175. to customize their output; it should not
          be called directly.

          _example_ is the example about to be processed. _exc_info_ is
          a tuple containing information about the unexpected exception
          (as returned by *note sys.exc_info(): 2e4.). _test_ is the
          test containing _example_.  _out_ is the output function that
          was passed to *note DocTestRunner.run(): 21a3.

      -- Method: run (test[, compileflags][, out][, clear_globs])
          Run the examples in _test_ (a *note DocTest: 217e. object),
          and display the results using the writer function _out_.

          The examples are run in the namespace `test.globs'.  If
          _clear_globs_ is true (the default), then this namespace will
          be cleared after the test runs, to help with garbage
          collection. If you would like to examine the namespace after
          the test completes, then use _clear_globs=False_.

          _compileflags_ gives the set of flags that should be used by
          the Python compiler when running the examples.  If not
          specified, then it will default to the set of future-import
          flags that apply to _globs_.

          The output of each example is checked using the *note
          DocTestRunner: 2175.'s output checker, and the results are
          formatted by the `DocTestRunner.report_*()' methods.

      -- Method: summarize ([verbose])
          Print a summary of all the test cases that have been run by
          this DocTestRunner, and return a *note named tuple: 9e9.
          `TestResults(failed, attempted)'.

          The optional _verbose_ argument controls how detailed the
          summary is.  If the verbosity is not specified, then the
          *note DocTestRunner: 2175.'s verbosity is used.

          Changed in version 2.6: Use a named tuple.


File: python.info,  Node: OutputChecker objects,  Prev: DocTestRunner objects,  Up: Advanced API

5.25.2.18 OutputChecker objects
...............................

 -- Class: doctest.OutputChecker
     A class used to check the whether the actual output from a doctest
     example matches the expected output.  *note OutputChecker: 2174.
     defines two methods: *note check_output(): 21a7, which compares a
     given pair of outputs, and returns true if they match; and *note
     output_difference(): 21a8, which returns a string describing the
     differences between two outputs.

     New in version 2.4.

     *note OutputChecker: 2174. defines the following methods:

      -- Method: check_output (want, got, optionflags)
          Return `True' iff the actual output from an example (_got_)
          matches the expected output (_want_).  These strings are
          always considered to match if they are identical; but
          depending on what option flags the test runner is using,
          several non-exact match types are also possible.  See section
          *note Option Flags and Directives: 2167. for more information
          about option flags.

      -- Method: output_difference (example, got, optionflags)
          Return a string describing the differences between the
          expected output for a given example (_example_) and the
          actual output (_got_).  _optionflags_ is the set of option
          flags used to compare _want_ and _got_.


File: python.info,  Node: Debugging,  Next: Soapbox,  Prev: Advanced API,  Up: doctest --- Test interactive Python examples

5.25.2.19 Debugging
...................

Doctest provides several mechanisms for debugging doctest examples:

   * Several functions convert doctests to executable Python programs,
     which can be run under the Python debugger, *note pdb: 12d.

   * The *note DebugRunner: 21ab. class is a subclass of *note
     DocTestRunner: 2175. that raises an exception for the first
     failing example, containing information about that example. This
     information can be used to perform post-mortem debugging on the
     example.

   * The *note unittest: 188. cases generated by *note DocTestSuite():
     2180. support the *note debug(): 21ac. method defined by *note
     unittest.TestCase: 27d.

   * You can add a call to *note pdb.set_trace(): 21ad. in a doctest
     example, and you'll drop into the Python debugger when that line
     is executed.  Then you can inspect current values of variables,
     and so on.  For example, suppose `a.py' contains just this module
     docstring:

         """
         >>> def f(x):
         ...     g(x*2)
         >>> def g(x):
         ...     print x+3
         ...     import pdb; pdb.set_trace()
         >>> f(3)
         9
         """

     Then an interactive Python session may look like this:

         >>> import a, doctest
         >>> doctest.testmod(a)
         --Return--
         > <doctest a[1]>(3)g()->None
         -> import pdb; pdb.set_trace()
         (Pdb) list
           1     def g(x):
           2         print x+3
           3  ->     import pdb; pdb.set_trace()
         [EOF]
         (Pdb) print x
         6
         (Pdb) step
         --Return--
         > <doctest a[0]>(2)f()->None
         -> g(x*2)
         (Pdb) list
           1     def f(x):
           2  ->     g(x*2)
         [EOF]
         (Pdb) print x
         3
         (Pdb) step
         --Return--
         > <doctest a[2]>(1)?()->None
         -> f(3)
         (Pdb) cont
         (0, 3)
         >>>

     Changed in version 2.4: The ability to use *note pdb.set_trace():
     21ad. usefully inside doctests was added.

  Functions that convert doctests to Python code, and possibly run the
synthesized code under the debugger:

 -- Function: doctest.script_from_examples (s)
     Convert text with examples to a script.

     Argument _s_ is a string containing doctest examples.  The string
     is converted to a Python script, where doctest examples in _s_ are
     converted to regular code, and everything else is converted to
     Python comments.  The generated script is returned as a string.
     For example,

         import doctest
         print doctest.script_from_examples(r"""
             Set x and y to 1 and 2.
             >>> x, y = 1, 2

             Print their sum:
             >>> print x+y
             3
         """)

     displays:

         # Set x and y to 1 and 2.
         x, y = 1, 2
         #
         # Print their sum:
         print x+y
         # Expected:
         ## 3

     This function is used internally by other functions (see below),
     but can also be useful when you want to transform an interactive
     Python session into a Python script.

     New in version 2.4.

 -- Function: doctest.testsource (module, name)
     Convert the doctest for an object to a script.

     Argument _module_ is a module object, or dotted name of a module,
     containing the object whose doctests are of interest.  Argument
     _name_ is the name (within the module) of the object with the
     doctests of interest.  The result is a string, containing the
     object's docstring converted to a Python script, as described for
     *note script_from_examples(): 21ae. above.  For example, if module
     `a.py' contains a top-level function `f()', then

         import a, doctest
         print doctest.testsource(a, "a.f")

     prints a script version of function `f()''s docstring, with
     doctests converted to code, and the rest placed in comments.

     New in version 2.3.

 -- Function: doctest.debug (module, name[, pm])
     Debug the doctests for an object.

     The _module_ and _name_ arguments are the same as for function
     *note testsource(): 21af. above.  The synthesized Python script
     for the named object's docstring is written to a temporary file,
     and then that file is run under the control of the Python
     debugger, *note pdb: 12d.

     A shallow copy of `module.__dict__' is used for both local and
     global execution context.

     Optional argument _pm_ controls whether post-mortem debugging is
     used.  If _pm_ has a true value, the script file is run directly,
     and the debugger gets involved only if the script terminates via
     raising an unhandled exception.  If it does, then post-mortem
     debugging is invoked, via *note pdb.post_mortem(): 344, passing
     the traceback object from the unhandled exception.  If _pm_ is not
     specified, or is false, the script is run under the debugger from
     the start, via passing an appropriate *note execfile(): 425. call
     to *note pdb.run(): 21b0.

     New in version 2.3.

     Changed in version 2.4: The _pm_ argument was added.

 -- Function: doctest.debug_src (src[, pm][, globs])
     Debug the doctests in a string.

     This is like function *note debug(): 21ac. above, except that a
     string containing doctest examples is specified directly, via the
     _src_ argument.

     Optional argument _pm_ has the same meaning as in function *note
     debug(): 21ac. above.

     Optional argument _globs_ gives a dictionary to use as both local
     and global execution context.  If not specified, or `None', an
     empty dictionary is used.  If specified, a shallow copy of the
     dictionary is used.

     New in version 2.4.

  The *note DebugRunner: 21ab. class, and the special exceptions it may
raise, are of most interest to testing framework authors, and will only
be sketched here.  See the source code, and especially *note
DebugRunner: 21ab.'s docstring (which is a doctest!) for more details:

 -- Class: doctest.DebugRunner ([checker][, verbose][, optionflags])
     A subclass of *note DocTestRunner: 2175. that raises an exception
     as soon as a failure is encountered.  If an unexpected exception
     occurs, an *note UnexpectedException: 21b2. exception is raised,
     containing the test, the example, and the original exception.  If
     the output doesn't match, then a *note DocTestFailure: 21b3.
     exception is raised, containing the test, the example, and the
     actual output.

     For information about the constructor parameters and methods, see
     the documentation for *note DocTestRunner: 2175. in section *note
     Advanced API: 2182.

  There are two exceptions that may be raised by *note DebugRunner:
21ab. instances:

 -- Exception: doctest.DocTestFailure (test, example, got)
     An exception raised by *note DocTestRunner: 2175. to signal that a
     doctest example's actual output did not match its expected output.
     The constructor arguments are used to initialize the member
     variables of the same names.

  *note DocTestFailure: 21b3. defines the following member variables:

 -- Attribute: DocTestFailure.test
     The *note DocTest: 217e. object that was being run when the
     example failed.

 -- Attribute: DocTestFailure.example
     The *note Example: 2183. that failed.

 -- Attribute: DocTestFailure.got
     The example's actual output.

 -- Exception: doctest.UnexpectedException (test, example, exc_info)
     An exception raised by *note DocTestRunner: 2175. to signal that a
     doctest example raised an unexpected exception.  The constructor
     arguments are used to initialize the member variables of the same
     names.

  *note UnexpectedException: 21b2. defines the following member
variables:

 -- Attribute: UnexpectedException.test
     The *note DocTest: 217e. object that was being run when the
     example failed.

 -- Attribute: UnexpectedException.example
     The *note Example: 2183. that failed.

 -- Attribute: UnexpectedException.exc_info
     A tuple containing information about the unexpected exception, as
     returned by *note sys.exc_info(): 2e4.

