This is python.info, produced by makeinfo version 4.8 from
build/texinfo/python.texi.

Generated by Sphinx 1.1pre.
INFO-DIR-SECTION Documentation tools
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY

     Python 2.7.2, April 02, 2012

     Georg Brandl

     Copyright (C) 1990-2012, Python Software Foundation


File: python.info,  Node: DOMImplementation Objects,  Next: Node Objects,  Up: Objects in the DOM

5.19.6.3 DOMImplementation Objects
..................................

The `DOMImplementation' interface provides a way for applications to
determine the availability of particular features in the DOM they are
using.  DOM Level 2 added the ability to create new `Document' and
`DocumentType' objects using the `DOMImplementation' as well.

 -- Method: DOMImplementation.hasFeature (feature, version)
     Return true if the feature identified by the pair of strings
     _feature_ and _version_ is implemented.

 -- Method: DOMImplementation.createDocument (namespaceUri,
          qualifiedName, doctype)
     Return a new `Document' object (the root of the DOM), with a child
     `Element' object having the given _namespaceUri_ and
     _qualifiedName_. The _doctype_ must be a `DocumentType' object
     created by *note createDocumentType(): 1a05, or `None'. In the
     Python DOM API, the first two arguments can also be `None' in
     order to indicate that no `Element' child is to be created.

 -- Method: DOMImplementation.createDocumentType (qualifiedName,
          publicId, systemId)
     Return a new `DocumentType' object that encapsulates the given
     _qualifiedName_, _publicId_, and _systemId_ strings, representing
     the information contained in an XML document type declaration.


File: python.info,  Node: Node Objects,  Next: NodeList Objects,  Prev: DOMImplementation Objects,  Up: Objects in the DOM

5.19.6.4 Node Objects
.....................

All of the components of an XML document are subclasses of `Node'.

 -- Attribute: Node.nodeType
     An integer representing the node type.  Symbolic constants for the
     types are on the `Node' object: `ELEMENT_NODE', `ATTRIBUTE_NODE',
     `TEXT_NODE', `CDATA_SECTION_NODE', `ENTITY_NODE',
     `PROCESSING_INSTRUCTION_NODE', `COMMENT_NODE', `DOCUMENT_NODE',
     `DOCUMENT_TYPE_NODE', `NOTATION_NODE'.  This is a read-only
     attribute.

 -- Attribute: Node.parentNode
     The parent of the current node, or `None' for the document node.
     The value is always a `Node' object or `None'.  For `Element'
     nodes, this will be the parent element, except for the root
     element, in which case it will be the `Document' object. For
     `Attr' nodes, this is always `None'. This is a read-only attribute.

 -- Attribute: Node.attributes
     A `NamedNodeMap' of attribute objects.  Only elements have actual
     values for this; others provide `None' for this attribute. This is
     a read-only attribute.

 -- Attribute: Node.previousSibling
     The node that immediately precedes this one with the same parent.
     For instance the element with an end-tag that comes just before
     the _self_ element's start-tag.  Of course, XML documents are made
     up of more than just elements so the previous sibling could be
     text, a comment, or something else.  If this node is the first
     child of the parent, this attribute will be `None'. This is a
     read-only attribute.

 -- Attribute: Node.nextSibling
     The node that immediately follows this one with the same parent.
     See also *note previousSibling: 1a0a.  If this is the last child
     of the parent, this attribute will be `None'. This is a read-only
     attribute.

 -- Attribute: Node.childNodes
     A list of nodes contained within this node. This is a read-only
     attribute.

 -- Attribute: Node.firstChild
     The first child of the node, if there are any, or `None'. This is
     a read-only attribute.

 -- Attribute: Node.lastChild
     The last child of the node, if there are any, or `None'. This is a
     read-only attribute.

 -- Attribute: Node.localName
     The part of the `tagName' following the colon if there is one,
     else the entire `tagName'.  The value is a string.

 -- Attribute: Node.prefix
     The part of the `tagName' preceding the colon if there is one,
     else the empty string.  The value is a string, or `None'

 -- Attribute: Node.namespaceURI
     The namespace associated with the element name.  This will be a
     string or `None'.  This is a read-only attribute.

 -- Attribute: Node.nodeName
     This has a different meaning for each node type; see the DOM
     specification for details.  You can always get the information you
     would get here from another property such as the `tagName'
     property for elements or the `name' property for attributes. For
     all node types, the value of this attribute will be either a
     string or `None'.  This is a read-only attribute.

 -- Attribute: Node.nodeValue
     This has a different meaning for each node type; see the DOM
     specification for details.  The situation is similar to that with
     *note nodeName: 1a12.  The value is a string or `None'.

 -- Method: Node.hasAttributes ()
     Returns true if the node has any attributes.

 -- Method: Node.hasChildNodes ()
     Returns true if the node has any child nodes.

 -- Method: Node.isSameNode (other)
     Returns true if _other_ refers to the same node as this node. This
     is especially useful for DOM implementations which use any sort of
     proxy architecture (because more than one object can refer to the
     same node).

          Note: This is based on a proposed DOM Level 3 API which is
          still in the "working draft" stage, but this particular
          interface appears uncontroversial.  Changes from the W3C will
          not necessarily affect this method in the Python DOM interface
          (though any new W3C API for this would also be supported).

 -- Method: Node.appendChild (newChild)
     Add a new child node to this node at the end of the list of
     children, returning _newChild_. If the node was already in in the
     tree, it is removed first.

 -- Method: Node.insertBefore (newChild, refChild)
     Insert a new child node before an existing child.  It must be the
     case that _refChild_ is a child of this node; if not, *note
     ValueError: 233. is raised.  _newChild_ is returned. If _refChild_
     is `None', it inserts _newChild_ at the end of the children's list.

 -- Method: Node.removeChild (oldChild)
     Remove a child node.  _oldChild_ must be a child of this node; if
     not, *note ValueError: 233. is raised.  _oldChild_ is returned on
     success.  If _oldChild_ will not be used further, its `unlink()'
     method should be called.

 -- Method: Node.replaceChild (newChild, oldChild)
     Replace an existing node with a new node. It must be the case that
     _oldChild_ is a child of this node; if not, *note ValueError:
     233. is raised.

 -- Method: Node.normalize ()
     Join adjacent text nodes so that all stretches of text are stored
     as single `Text' instances.  This simplifies processing text from
     a DOM tree for many applications.

     New in version 2.1.

 -- Method: Node.cloneNode (deep)
     Clone this node.  Setting _deep_ means to clone all child nodes as
     well.  This returns the clone.


File: python.info,  Node: NodeList Objects,  Next: DocumentType Objects,  Prev: Node Objects,  Up: Objects in the DOM

5.19.6.5 NodeList Objects
.........................

A `NodeList' represents a sequence of nodes.  These objects are used in
two ways in the DOM Core recommendation:  the `Element' objects provides
one as its list of child nodes, and the `getElementsByTagName()' and
`getElementsByTagNameNS()' methods of `Node' return objects with this
interface to represent query results.

  The DOM Level 2 recommendation defines one method and one attribute
for these objects:

 -- Method: NodeList.item (i)
     Return the _i_'th item from the sequence, if there is one, or
     `None'.  The index _i_ is not allowed to be less then zero or
     greater than or equal to the length of the sequence.

 -- Attribute: NodeList.length
     The number of nodes in the sequence.

  In addition, the Python DOM interface requires that some additional
support is provided to allow `NodeList' objects to be used as Python
sequences.  All `NodeList' implementations must include support for
*note __len__(): 3f9. and *note __getitem__(): 43e.; this allows
iteration over the `NodeList' in *note for: 2e1. statements and proper
support for the *note len(): 50a. built-in function.

  If a DOM implementation supports modification of the document, the
`NodeList' implementation must also support the *note __setitem__():
454. and *note __delitem__(): 455. methods.


File: python.info,  Node: DocumentType Objects,  Next: Document Objects,  Prev: NodeList Objects,  Up: Objects in the DOM

5.19.6.6 DocumentType Objects
.............................

Information about the notations and entities declared by a document
(including the external subset if the parser uses it and can provide
the information) is available from a `DocumentType' object.  The
`DocumentType' for a document is available from the `Document' object's
`doctype' attribute; if there is no `DOCTYPE' declaration for the
document, the document's `doctype' attribute will be set to `None'
instead of an instance of this interface.

  `DocumentType' is a specialization of `Node', and adds the following
attributes:

 -- Attribute: DocumentType.publicId
     The public identifier for the external subset of the document type
     definition.  This will be a string or `None'.

 -- Attribute: DocumentType.systemId
     The system identifier for the external subset of the document type
     definition.  This will be a URI as a string, or `None'.

 -- Attribute: DocumentType.internalSubset
     A string giving the complete internal subset from the document.
     This does not include the brackets which enclose the subset.  If
     the document has no internal subset, this should be `None'.

 -- Attribute: DocumentType.name
     The name of the root element as given in the `DOCTYPE'
     declaration, if present.

 -- Attribute: DocumentType.entities
     This is a `NamedNodeMap' giving the definitions of external
     entities.  For entity names defined more than once, only the first
     definition is provided (others are ignored as required by the XML
     recommendation).  This may be `None' if the information is not
     provided by the parser, or if no entities are defined.

 -- Attribute: DocumentType.notations
     This is a `NamedNodeMap' giving the definitions of notations. For
     notation names defined more than once, only the first definition
     is provided (others are ignored as required by the XML
     recommendation).  This may be `None' if the information is not
     provided by the parser, or if no notations are defined.


File: python.info,  Node: Document Objects,  Next: Element Objects,  Prev: DocumentType Objects,  Up: Objects in the DOM

5.19.6.7 Document Objects
.........................

A `Document' represents an entire XML document, including its
constituent elements, attributes, processing instructions, comments
etc.  Remember that it inherits properties from `Node'.

 -- Attribute: Document.documentElement
     The one and only root element of the document.

 -- Method: Document.createElement (tagName)
     Create and return a new element node.  The element is not inserted
     into the document when it is created.  You need to explicitly
     insert it with one of the other methods such as `insertBefore()'
     or `appendChild()'.

 -- Method: Document.createElementNS (namespaceURI, tagName)
     Create and return a new element with a namespace.  The _tagName_
     may have a prefix.  The element is not inserted into the document
     when it is created.  You need to explicitly insert it with one of
     the other methods such as `insertBefore()' or `appendChild()'.

 -- Method: Document.createTextNode (data)
     Create and return a text node containing the data passed as a
     parameter.  As with the other creation methods, this one does not
     insert the node into the tree.

 -- Method: Document.createComment (data)
     Create and return a comment node containing the data passed as a
     parameter.  As with the other creation methods, this one does not
     insert the node into the tree.

 -- Method: Document.createProcessingInstruction (target, data)
     Create and return a processing instruction node containing the
     _target_ and _data_ passed as parameters.  As with the other
     creation methods, this one does not insert the node into the tree.

 -- Method: Document.createAttribute (name)
     Create and return an attribute node.  This method does not
     associate the attribute node with any particular element.  You
     must use `setAttributeNode()' on the appropriate `Element' object
     to use the newly created attribute instance.

 -- Method: Document.createAttributeNS (namespaceURI, qualifiedName)
     Create and return an attribute node with a namespace.  The
     _tagName_ may have a prefix.  This method does not associate the
     attribute node with any particular element.  You must use
     `setAttributeNode()' on the appropriate `Element' object to use
     the newly created attribute instance.

 -- Method: Document.getElementsByTagName (tagName)
     Search for all descendants (direct children, children's children,
     etc.) with a particular element type name.

 -- Method: Document.getElementsByTagNameNS (namespaceURI, localName)
     Search for all descendants (direct children, children's children,
     etc.) with a particular namespace URI and localname.  The
     localname is the part of the namespace after the prefix.


File: python.info,  Node: Element Objects,  Next: Attr Objects,  Prev: Document Objects,  Up: Objects in the DOM

5.19.6.8 Element Objects
........................

`Element' is a subclass of `Node', so inherits all the attributes of
that class.

 -- Attribute: Element.tagName
     The element type name.  In a namespace-using document it may have
     colons in it.  The value is a string.

 -- Method: Element.getElementsByTagName (tagName)
     Same as equivalent method in the `Document' class.

 -- Method: Element.getElementsByTagNameNS (namespaceURI, localName)
     Same as equivalent method in the `Document' class.

 -- Method: Element.hasAttribute (name)
     Returns true if the element has an attribute named by _name_.

 -- Method: Element.hasAttributeNS (namespaceURI, localName)
     Returns true if the element has an attribute named by
     _namespaceURI_ and _localName_.

 -- Method: Element.getAttribute (name)
     Return the value of the attribute named by _name_ as a string. If
     no such attribute exists, an empty string is returned, as if the
     attribute had no value.

 -- Method: Element.getAttributeNode (attrname)
     Return the `Attr' node for the attribute named by _attrname_.

 -- Method: Element.getAttributeNS (namespaceURI, localName)
     Return the value of the attribute named by _namespaceURI_ and
     _localName_ as a string. If no such attribute exists, an empty
     string is returned, as if the attribute had no value.

 -- Method: Element.getAttributeNodeNS (namespaceURI, localName)
     Return an attribute value as a node, given a _namespaceURI_ and
     _localName_.

 -- Method: Element.removeAttribute (name)
     Remove an attribute by name.  If there is no matching attribute, a
     *note NotFoundErr: 1a3d. is raised.

 -- Method: Element.removeAttributeNode (oldAttr)
     Remove and return _oldAttr_ from the attribute list, if present.
     If _oldAttr_ is not present, *note NotFoundErr: 1a3d. is raised.

 -- Method: Element.removeAttributeNS (namespaceURI, localName)
     Remove an attribute by name.  Note that it uses a localName, not a
     qname.  No exception is raised if there is no matching attribute.

 -- Method: Element.setAttribute (name, value)
     Set an attribute value from a string.

 -- Method: Element.setAttributeNode (newAttr)
     Add a new attribute node to the element, replacing an existing
     attribute if necessary if the `name' attribute matches.  If a
     replacement occurs, the old attribute node will be returned.  If
     _newAttr_ is already in use, *note InuseAttributeErr: 1a42. will
     be raised.

 -- Method: Element.setAttributeNodeNS (newAttr)
     Add a new attribute node to the element, replacing an existing
     attribute if necessary if the `namespaceURI' and `localName'
     attributes match.  If a replacement occurs, the old attribute node
     will be returned.  If _newAttr_ is already in use, *note
     InuseAttributeErr: 1a42. will be raised.

 -- Method: Element.setAttributeNS (namespaceURI, qname, value)
     Set an attribute value from a string, given a _namespaceURI_ and a
     _qname_.  Note that a qname is the whole attribute name.  This is
     different than above.


File: python.info,  Node: Attr Objects,  Next: NamedNodeMap Objects,  Prev: Element Objects,  Up: Objects in the DOM

5.19.6.9 Attr Objects
.....................

`Attr' inherits from `Node', so inherits all its attributes.

 -- Attribute: Attr.name
     The attribute name.  In a namespace-using document it may include
     a colon.

 -- Attribute: Attr.localName
     The part of the name following the colon if there is one, else the
     entire name.  This is a read-only attribute.

 -- Attribute: Attr.prefix
     The part of the name preceding the colon if there is one, else the
     empty string.

 -- Attribute: Attr.value
     The text value of the attribute.  This is a synonym for the
     `nodeValue' attribute.


File: python.info,  Node: NamedNodeMap Objects,  Next: Comment Objects,  Prev: Attr Objects,  Up: Objects in the DOM

5.19.6.10 NamedNodeMap Objects
..............................

`NamedNodeMap' does _not_ inherit from `Node'.

 -- Attribute: NamedNodeMap.length
     The length of the attribute list.

 -- Method: NamedNodeMap.item (index)
     Return an attribute with a particular index.  The order you get
     the attributes in is arbitrary but will be consistent for the life
     of a DOM.  Each item is an attribute node.  Get its value with the
     `value' attribute.

  There are also experimental methods that give this class more mapping
behavior.  You can use them or you can use the standardized
`getAttribute*()' family of methods on the `Element' objects.


File: python.info,  Node: Comment Objects,  Next: Text and CDATASection Objects,  Prev: NamedNodeMap Objects,  Up: Objects in the DOM

5.19.6.11 Comment Objects
.........................

`Comment' represents a comment in the XML document.  It is a subclass of
`Node', but cannot have child nodes.

 -- Attribute: Comment.data
     The content of the comment as a string.  The attribute contains
     all characters between the leading `<!-'`-' and trailing `-'`->',
     but does not include them.


File: python.info,  Node: Text and CDATASection Objects,  Next: ProcessingInstruction Objects,  Prev: Comment Objects,  Up: Objects in the DOM

5.19.6.12 Text and CDATASection Objects
.......................................

The `Text' interface represents text in the XML document.  If the parser
and DOM implementation support the DOM's XML extension, portions of the
text enclosed in CDATA marked sections are stored in `CDATASection'
objects.  These two interfaces are identical, but provide different
values for the `nodeType' attribute.

  These interfaces extend the `Node' interface.  They cannot have child
nodes.

 -- Attribute: Text.data
     The content of the text node as a string.

     Note: The use of a `CDATASection' node does not indicate that the
     node represents a complete CDATA marked section, only that the
     content of the node was part of a CDATA section.  A single CDATA
     section may be represented by more than one node in the document
     tree.  There is no way to determine whether two adjacent
     `CDATASection' nodes represent different CDATA marked sections.


File: python.info,  Node: ProcessingInstruction Objects,  Next: Exceptions<6>,  Prev: Text and CDATASection Objects,  Up: Objects in the DOM

5.19.6.13 ProcessingInstruction Objects
.......................................

Represents a processing instruction in the XML document; this inherits
from the `Node' interface and cannot have child nodes.

 -- Attribute: ProcessingInstruction.target
     The content of the processing instruction up to the first
     whitespace character.  This is a read-only attribute.

 -- Attribute: ProcessingInstruction.data
     The content of the processing instruction following the first
     whitespace character.


File: python.info,  Node: Exceptions<6>,  Prev: ProcessingInstruction Objects,  Up: Objects in the DOM

5.19.6.14 Exceptions
....................

New in version 2.1.

  The DOM Level 2 recommendation defines a single exception, *note
DOMException: 1a57, and a number of constants that allow applications
to determine what sort of error occurred. *note DOMException: 1a57.
instances carry a *note code: 62. attribute that provides the
appropriate value for the specific exception.

  The Python DOM interface provides the constants, but also expands the
set of exceptions so that a specific exception exists for each of the
exception codes defined by the DOM.  The implementations must raise the
appropriate specific exception, each of which carries the appropriate
value for the *note code: 62.  attribute.

 -- Exception: xml.dom.DOMException
     Base exception class used for all specific DOM exceptions.  This
     exception class cannot be directly instantiated.

 -- Exception: xml.dom.DomstringSizeErr
     Raised when a specified range of text does not fit into a string.
     This is not known to be used in the Python DOM implementations,
     but may be received from DOM implementations not written in Python.

 -- Exception: xml.dom.HierarchyRequestErr
     Raised when an attempt is made to insert a node where the node
     type is not allowed.

 -- Exception: xml.dom.IndexSizeErr
     Raised when an index or size parameter to a method is negative or
     exceeds the allowed values.

 -- Exception: xml.dom.InuseAttributeErr
     Raised when an attempt is made to insert an `Attr' node that is
     already present elsewhere in the document.

 -- Exception: xml.dom.InvalidAccessErr
     Raised if a parameter or an operation is not supported on the
     underlying object.

 -- Exception: xml.dom.InvalidCharacterErr
     This exception is raised when a string parameter contains a
     character that is not permitted in the context it's being used in
     by the XML 1.0 recommendation.  For example, attempting to create
     an `Element' node with a space in the element type name will cause
     this error to be raised.

 -- Exception: xml.dom.InvalidModificationErr
     Raised when an attempt is made to modify the type of a node.

 -- Exception: xml.dom.InvalidStateErr
     Raised when an attempt is made to use an object that is not
     defined or is no longer usable.

 -- Exception: xml.dom.NamespaceErr
     If an attempt is made to change any object in a way that is not
     permitted with regard to the Namespaces in XML(1) recommendation,
     this exception is raised.

 -- Exception: xml.dom.NotFoundErr
     Exception when a node does not exist in the referenced context.
     For example, `NamedNodeMap.removeNamedItem()' will raise this if
     the node passed in does not exist in the map.

 -- Exception: xml.dom.NotSupportedErr
     Raised when the implementation does not support the requested type
     of object or operation.

 -- Exception: xml.dom.NoDataAllowedErr
     This is raised if data is specified for a node which does not
     support data.


 -- Exception: xml.dom.NoModificationAllowedErr
     Raised on attempts to modify an object where modifications are not
     allowed (such as for read-only nodes).

 -- Exception: xml.dom.SyntaxErr
     Raised when an invalid or illegal string is specified.


 -- Exception: xml.dom.WrongDocumentErr
     Raised when a node is inserted in a different document than it
     currently belongs to, and the implementation does not support
     migrating the node from one document to the other.

  The exception codes defined in the DOM recommendation map to the
exceptions described above according to this table:

Constant                                   Exception
--------------------------------------------------------------------------------- 
`DOMSTRING_SIZE_ERR'                       *note DomstringSizeErr: 1a58.
`HIERARCHY_REQUEST_ERR'                    *note HierarchyRequestErr: 1a59.
`INDEX_SIZE_ERR'                           *note IndexSizeErr: 1a5a.
`INUSE_ATTRIBUTE_ERR'                      *note InuseAttributeErr: 1a42.
`INVALID_ACCESS_ERR'                       *note InvalidAccessErr: 1a5b.
`INVALID_CHARACTER_ERR'                    *note InvalidCharacterErr: 1a5c.
`INVALID_MODIFICATION_ERR'                 *note InvalidModificationErr: 1a5d.
`INVALID_STATE_ERR'                        *note InvalidStateErr: 1a5e.
`NAMESPACE_ERR'                            *note NamespaceErr: 1a5f.
`NOT_FOUND_ERR'                            *note NotFoundErr: 1a3d.
`NOT_SUPPORTED_ERR'                        *note NotSupportedErr: 1a60.
`NO_DATA_ALLOWED_ERR'                      *note NoDataAllowedErr: 1a61.
`NO_MODIFICATION_ALLOWED_ERR'              *note NoModificationAllowedErr: 1a62.
`SYNTAX_ERR'                               *note SyntaxErr: 1a63.
`WRONG_DOCUMENT_ERR'                       *note WrongDocumentErr: 1a64.

  ---------- Footnotes ----------

  (1) http://www.w3.org/TR/REC-xml-names/


File: python.info,  Node: Conformance,  Prev: Objects in the DOM,  Up: xml dom --- The Document Object Model API

5.19.6.15 Conformance
.....................

This section describes the conformance requirements and relationships
between the Python DOM API, the W3C DOM recommendations, and the OMG
IDL mapping for Python.

* Menu:

* Type Mapping::
* Accessor Methods::


File: python.info,  Node: Type Mapping,  Next: Accessor Methods,  Up: Conformance

5.19.6.16 Type Mapping
......................

The primitive IDL types used in the DOM specification are mapped to
Python types according to the following table.

IDL Type               Python Type
----------------------------------------------------------------------- 
`boolean'              `IntegerType' (with a value of `0' or `1')
`int'                  `IntegerType'
`long int'             `IntegerType'
`unsigned int'         `IntegerType'

  Additionally, the `DOMString' defined in the recommendation is mapped
to a Python string or Unicode string.  Applications should be able to
handle Unicode whenever a string is returned from the DOM.

  The IDL `null' value is mapped to `None', which may be accepted or
provided by the implementation whenever `null' is allowed by the API.


File: python.info,  Node: Accessor Methods,  Prev: Type Mapping,  Up: Conformance

5.19.6.17 Accessor Methods
..........................

The mapping from OMG IDL to Python defines accessor functions for IDL
`attribute' declarations in much the way the Java mapping does.
Mapping the IDL declarations

    readonly attribute string someValue;
             attribute string anotherValue;

yields three accessor functions:  a "get" method for `someValue'
(`_get_someValue()'), and "get" and "set" methods for `anotherValue'
(`_get_anotherValue()' and `_set_anotherValue()').  The mapping, in
particular, does not require that the IDL attributes are accessible as
normal Python attributes:  `object.someValue' is _not_ required to
work, and may raise an *note AttributeError: 1f5.

  The Python DOM API, however, _does_ require that normal attribute
access work.  This means that the typical surrogates generated by
Python IDL compilers are not likely to work, and wrapper objects may be
needed on the client if the DOM objects are accessed via CORBA. While
this does require some additional consideration for CORBA DOM clients,
the implementers with experience using DOM over CORBA from Python do
not consider this a problem.  Attributes that are declared `readonly'
may not restrict write access in all DOM implementations.

  In the Python DOM API, accessor functions are not required.  If
provided, they should take the form defined by the Python IDL mapping,
but these methods are considered unnecessary since the attributes are
accessible directly from Python.  "Set" accessors should never be
provided for `readonly' attributes.

  The IDL definitions do not fully embody the requirements of the W3C
DOM API, such as the notion of certain objects, such as the return
value of `getElementsByTagName()', being "live".  The Python DOM API
does not require implementations to enforce such requirements.


File: python.info,  Node: xml dom minidom --- Lightweight DOM implementation,  Next: xml dom pulldom --- Support for building partial DOM trees,  Prev: xml dom --- The Document Object Model API,  Up: Structured Markup Processing Tools

5.19.7 `xml.dom.minidom' -- Lightweight DOM implementation
----------------------------------------------------------

New in version 2.0.

  *note xml.dom.minidom: 1a2. is a light-weight implementation of the
Document Object Model interface.  It is intended to be simpler than the
full DOM and also significantly smaller.

  DOM applications typically start by parsing some XML into a DOM.  With
*note xml.dom.minidom: 1a2, this is done through the parse functions:

    from xml.dom.minidom import parse, parseString

    dom1 = parse('c:\\temp\\mydata.xml') # parse an XML file by name

    datasource = open('c:\\temp\\mydata.xml')
    dom2 = parse(datasource)   # parse an open file

    dom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')

The *note parse(): 1a6c. function can take either a filename or an open
file object.

 -- Function: xml.dom.minidom.parse (filename_or_file[, parser[,
          bufsize]])
     Return a `Document' from the given input. _filename_or_file_ may be
     either a file name, or a file-like object. _parser_, if given,
     must be a SAX2 parser object. This function will change the
     document handler of the parser and activate namespace support;
     other parser configuration (like setting an entity resolver) must
     have been done in advance.

  If you have XML in a string, you can use the *note parseString():
1a6d. function instead:

 -- Function: xml.dom.minidom.parseString (string[, parser])
     Return a `Document' that represents the _string_. This method
     creates a *note StringIO: 165. object for the string and passes
     that on to *note parse(): 1a6c.

  Both functions return a `Document' object representing the content of
the document.

  What the *note parse(): 1a6c. and *note parseString(): 1a6d.
functions do is connect an XML parser with a "DOM builder" that can
accept parse events from any SAX parser and convert them into a DOM
tree.  The name of the functions are perhaps misleading, but are easy
to grasp when learning the interfaces.  The parsing of the document
will be completed before these functions return; it's simply that these
functions do not provide a parser implementation themselves.

  You can also create a `Document' by calling a method on a "DOM
Implementation" object.  You can get this object either by calling the
`getDOMImplementation()' function in the *note xml.dom: 1a1. package or
the *note xml.dom.minidom: 1a2. module. Using the implementation from
the *note xml.dom.minidom: 1a2. module will always return a `Document'
instance from the minidom implementation, while the version from *note
xml.dom: 1a1. may provide an alternate implementation (this is likely
if you have the PyXML package(1) installed).  Once you have a
`Document', you can add child nodes to it to populate the DOM:

    from xml.dom.minidom import getDOMImplementation

    impl = getDOMImplementation()

    newdoc = impl.createDocument(None, "some_tag", None)
    top_element = newdoc.documentElement
    text = newdoc.createTextNode('Some textual content.')
    top_element.appendChild(text)

Once you have a DOM document object, you can access the parts of your
XML document through its properties and methods.  These properties are
defined in the DOM specification.  The main property of the document
object is the `documentElement' property.  It gives you the main
element in the XML document: the one that holds all others.  Here is an
example program:

    dom3 = parseString("<myxml>Some data</myxml>")
    assert dom3.documentElement.tagName == "myxml"

When you are finished with a DOM tree, you may optionally call the
`unlink()' method to encourage early cleanup of the now-unneeded
objects.  `unlink()' is a *note xml.dom.minidom: 1a2.-specific
extension to the DOM API that renders the node and its descendants are
essentially useless.  Otherwise, Python's garbage collector will
eventually take care of the objects in the tree.

See also
........

Document Object Model (DOM) Level 1 Specification(2)
     The W3C recommendation for the DOM supported by *note
     xml.dom.minidom: 1a2.

* Menu:

* DOM Objects::
* DOM Example::
* minidom and the DOM standard::

  ---------- Footnotes ----------

  (1) http://pyxml.sourceforge.net/

  (2) http://www.w3.org/TR/REC-DOM-Level-1/


File: python.info,  Node: DOM Objects,  Next: DOM Example,  Up: xml dom minidom --- Lightweight DOM implementation

5.19.7.1 DOM Objects
....................

The definition of the DOM API for Python is given as part of the *note
xml.dom: 1a1.  module documentation.  This section lists the
differences between the API and *note xml.dom.minidom: 1a2.

 -- Method: Node.unlink ()
     Break internal references within the DOM so that it will be
     garbage collected on versions of Python without cyclic GC.  Even
     when cyclic GC is available, using this can make large amounts of
     memory available sooner, so calling this on DOM objects as soon as
     they are no longer needed is good practice.  This only needs to be
     called on the `Document' object, but may be called on child nodes
     to discard children of that node.

 -- Method: Node.writexml (writer[, indent=""[, addindent=""[,
          newl=""]]])
     Write XML to the writer object.  The writer should have a
     `write()' method which matches that of the file object interface.
     The _indent_ parameter is the indentation of the current node.
     The _addindent_ parameter is the incremental indentation to use
     for subnodes of the current one.  The _newl_ parameter specifies
     the string to use to terminate newlines.

     For the `Document' node, an additional keyword argument _encoding_
     can be used to specify the encoding field of the XML header.

     Changed in version 2.1: The optional keyword parameters _indent_,
     _addindent_, and _newl_ were added to support pretty output.

     Changed in version 2.3: For the `Document' node, an additional
     keyword argument _encoding_ can be used to specify the encoding
     field of the XML header.

 -- Method: Node.toxml ([encoding])
     Return the XML that the DOM represents as a string.

     With no argument, the XML header does not specify an encoding, and
     the result is Unicode string if the default encoding cannot
     represent all characters in the document. Encoding this string in
     an encoding other than UTF-8 is likely incorrect, since UTF-8 is
     the default encoding of XML.

     With an explicit _encoding_ (1) argument, the result is a byte
     string in the specified encoding. It is recommended that this
     argument is always specified. To avoid *note UnicodeError: 422.
     exceptions in case of unrepresentable text data, the encoding
     argument should be specified as "utf-8".

     Changed in version 2.3: the _encoding_ argument was introduced;
     see *note writexml(): 1a71.

 -- Method: Node.toprettyxml ([indent=""[, newl=""[, encoding=""]]])
     Return a pretty-printed version of the document. _indent_
     specifies the indentation string and defaults to a tabulator;
     _newl_ specifies the string emitted at the end of each line and
     defaults to `\n'.

     New in version 2.1.

     Changed in version 2.3: the encoding argument was introduced; see
     *note writexml(): 1a71.

  The following standard DOM methods have special considerations with
*note xml.dom.minidom: 1a2.:

 -- Method: Node.cloneNode (deep)
     Although this method was present in the version of *note
     xml.dom.minidom: 1a2.  packaged with Python 2.0, it was seriously
     broken.  This has been corrected for subsequent releases.

  ---------- Footnotes ----------

  (1) The encoding string included in XML output should conform to the
appropriate standards. For example, "UTF-8" is valid, but "UTF8" is
not. See <http://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl>
and <http://www.iana.org/assignments/character-sets> .


File: python.info,  Node: DOM Example,  Next: minidom and the DOM standard,  Prev: DOM Objects,  Up: xml dom minidom --- Lightweight DOM implementation

5.19.7.2 DOM Example
....................

This example program is a fairly realistic example of a simple program.
In this particular case, we do not take much advantage of the
flexibility of the DOM.

    import xml.dom.minidom

    document = """\
    <slideshow>
    <title>Demo slideshow</title>
    <slide><title>Slide title</title>
    <point>This is a demo</point>
    <point>Of a program for processing slides</point>
    </slide>

    <slide><title>Another demo slide</title>
    <point>It is important</point>
    <point>To have more than</point>
    <point>one slide</point>
    </slide>
    </slideshow>
    """

    dom = xml.dom.minidom.parseString(document)

    def getText(nodelist):
        rc = []
        for node in nodelist:
            if node.nodeType == node.TEXT_NODE:
                rc.append(node.data)
        return ''.join(rc)

    def handleSlideshow(slideshow):
        print "<html>"
        handleSlideshowTitle(slideshow.getElementsByTagName("title")[0])
        slides = slideshow.getElementsByTagName("slide")
        handleToc(slides)
        handleSlides(slides)
        print "</html>"

    def handleSlides(slides):
        for slide in slides:
            handleSlide(slide)

    def handleSlide(slide):
        handleSlideTitle(slide.getElementsByTagName("title")[0])
        handlePoints(slide.getElementsByTagName("point"))

    def handleSlideshowTitle(title):
        print "<title>%s</title>" % getText(title.childNodes)

    def handleSlideTitle(title):
        print "<h2>%s</h2>" % getText(title.childNodes)

    def handlePoints(points):
        print "<ul>"
        for point in points:
            handlePoint(point)
        print "</ul>"

    def handlePoint(point):
        print "<li>%s</li>" % getText(point.childNodes)

    def handleToc(slides):
        for slide in slides:
            title = slide.getElementsByTagName("title")[0]
            print "<p>%s</p>" % getText(title.childNodes)

    handleSlideshow(dom)



File: python.info,  Node: minidom and the DOM standard,  Prev: DOM Example,  Up: xml dom minidom --- Lightweight DOM implementation

5.19.7.3 minidom and the DOM standard
.....................................

The *note xml.dom.minidom: 1a2. module is essentially a DOM
1.0-compatible DOM with some DOM 2 features (primarily namespace
features).

  Usage of the DOM interface in Python is straight-forward.  The
following mapping rules apply:

   * Interfaces are accessed through instance objects. Applications
     should not instantiate the classes themselves; they should use the
     creator functions available on the `Document' object. Derived
     interfaces support all operations (and attributes) from the base
     interfaces, plus any new operations.

   * Operations are used as methods. Since the DOM uses only *note in:
     417.  parameters, the arguments are passed in normal order (from
     left to right).  There are no optional arguments. `void'
     operations return `None'.

   * IDL attributes map to instance attributes. For compatibility with
     the OMG IDL language mapping for Python, an attribute `foo' can
     also be accessed through accessor methods `_get_foo()' and
     `_set_foo()'.  `readonly' attributes must not be changed; this is
     not enforced at runtime.

   * The types `short int', `unsigned int', `unsigned long long', and
     `boolean' all map to Python integer objects.

   * The type `DOMString' maps to Python strings. *note
     xml.dom.minidom: 1a2. supports either byte or Unicode strings, but
     will normally produce Unicode strings.  Values of type `DOMString'
     may also be `None' where allowed to have the IDL `null' value by
     the DOM specification from the W3C.

   * `const' declarations map to variables in their respective scope
     (e.g.  `xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE'); they
     must not be changed.

   * `DOMException' is currently not supported in *note
     xml.dom.minidom: 1a2.  Instead, *note xml.dom.minidom: 1a2. uses
     standard Python exceptions such as *note TypeError: 215. and *note
     AttributeError: 1f5.

   * `NodeList' objects are implemented using Python's built-in list
     type.  Starting with Python 2.2, these objects provide the
     interface defined in the DOM specification, but with earlier
     versions of Python they do not support the official API.  They
     are, however, much more "Pythonic" than the interface defined in
     the W3C recommendations.

  The following interfaces have no implementation in *note
xml.dom.minidom: 1a2.:

   * `DOMTimeStamp'

   * `DocumentType' (added in Python 2.1)

   * `DOMImplementation' (added in Python 2.1)

   * `CharacterData'

   * `CDATASection'

   * `Notation'

   * `Entity'

   * `EntityReference'

   * `DocumentFragment'

  Most of these reflect information in the XML document that is not of
general utility to most DOM users.


File: python.info,  Node: xml dom pulldom --- Support for building partial DOM trees,  Next: xml sax --- Support for SAX2 parsers,  Prev: xml dom minidom --- Lightweight DOM implementation,  Up: Structured Markup Processing Tools

5.19.8 `xml.dom.pulldom' -- Support for building partial DOM trees
------------------------------------------------------------------

New in version 2.0.

  *note xml.dom.pulldom: 1a3. allows building only selected portions of
a Document Object Model representation of a document from SAX events.

 -- Class: xml.dom.pulldom.PullDOM ([documentFactory])
     *note xml.sax.handler.ContentHandler: 1a7c. implementation that ...

 -- Class: xml.dom.pulldom.DOMEventStream (stream, parser, bufsize)
     ...

 -- Class: xml.dom.pulldom.SAX2DOM ([documentFactory])
     *note xml.sax.handler.ContentHandler: 1a7c. implementation that ...

 -- Function: xml.dom.pulldom.parse (stream_or_string[, parser[,
          bufsize]])
     ...

 -- Function: xml.dom.pulldom.parseString (string[, parser])
     ...

 -- Data: xml.dom.pulldom.default_bufsize
     Default value for the _bufsize_ parameter to *note parse(): 1a7f.

     Changed in version 2.1: The value of this variable can be changed
     before calling *note parse(): 1a7f. and the new value will take
     effect.

* Menu:

* DOMEventStream Objects::


File: python.info,  Node: DOMEventStream Objects,  Up: xml dom pulldom --- Support for building partial DOM trees

5.19.8.1 DOMEventStream Objects
...............................

 -- Method: DOMEventStream.getEvent ()
     ...

 -- Method: DOMEventStream.expandNode (node)
     ...

 -- Method: DOMEventStream.reset ()
     ...


File: python.info,  Node: xml sax --- Support for SAX2 parsers,  Next: xml sax handler --- Base classes for SAX handlers,  Prev: xml dom pulldom --- Support for building partial DOM trees,  Up: Structured Markup Processing Tools

5.19.9 `xml.sax' -- Support for SAX2 parsers
--------------------------------------------

New in version 2.0.

  The *note xml.sax: 1a6. package provides a number of modules which
implement the Simple API for XML (SAX) interface for Python.  The
package itself provides the SAX exceptions and the convenience
functions which will be most used by users of the SAX API.

  The convenience functions are:

 -- Function: xml.sax.make_parser ([parser_list])
     Create and return a SAX `XMLReader' object.  The first parser
     found will be used.  If _parser_list_ is provided, it must be a
     sequence of strings which name modules that have a function named
     `create_parser()'.  Modules listed in _parser_list_ will be used
     before modules in the default list of parsers.

 -- Function: xml.sax.parse (filename_or_stream, handler[,
          error_handler])
     Create a SAX parser and use it to parse a document.  The document,
     passed in as _filename_or_stream_, can be a filename or a file
     object.  The _handler_ parameter needs to be a SAX
     `ContentHandler' instance.  If _error_handler_ is given, it must
     be a SAX `ErrorHandler' instance; if omitted,  *note
     SAXParseException: 1a8b. will be raised on all errors.  There is no
     return value; all work must be done by the _handler_ passed in.

 -- Function: xml.sax.parseString (string, handler[, error_handler])
     Similar to *note parse(): 1a8a, but parses from a buffer _string_
     received as a parameter.

  A typical SAX application uses three kinds of objects: readers,
handlers and input sources.  "Reader" in this context is another term
for parser, i.e. some piece of code that reads the bytes or characters
from the input source, and produces a sequence of events. The events
then get distributed to the handler objects, i.e. the reader invokes a
method on the handler.  A SAX application must therefore obtain a
reader object, create or open the input sources, create the handlers,
and connect these objects all together.  As the final step of
preparation, the reader is called to parse the input. During parsing,
methods on the handler objects are called based on structural and
syntactic events from the input data.

  For these objects, only the interfaces are relevant; they are
normally not instantiated by the application itself.  Since Python does
not have an explicit notion of interface, they are formally introduced
as classes, but applications may use implementations which do not
inherit from the provided classes.  The `InputSource', `Locator',
`Attributes', `AttributesNS', and `XMLReader' interfaces are defined in
the module *note xml.sax.xmlreader: 1a9.  The handler interfaces are
defined in *note xml.sax.handler: 1a7.  For convenience, `InputSource'
(which is often instantiated directly) and the handler classes are also
available from *note xml.sax: 1a6.  These interfaces are described
below.

  In addition to these classes, *note xml.sax: 1a6. provides the
following exception classes.

 -- Exception: xml.sax.SAXException (msg[, exception])
     Encapsulate an XML error or warning.  This class can contain basic
     error or warning information from either the XML parser or the
     application: it can be subclassed to provide additional
     functionality or to add localization.  Note that although the
     handlers defined in the `ErrorHandler' interface receive instances
     of this exception, it is not required to actually raise the
     exception -- it is also useful as a container for information.

     When instantiated, _msg_ should be a human-readable description of
     the error.  The optional _exception_ parameter, if given, should
     be `None' or an exception that was caught by the parsing code and
     is being passed along as information.

     This is the base class for the other SAX exception classes.

 -- Exception: xml.sax.SAXParseException (msg, exception, locator)
     Subclass of *note SAXException: 1a8d. raised on parse errors.
     Instances of this class are passed to the methods of the SAX
     `ErrorHandler' interface to provide information about the parse
     error.  This class supports the SAX `Locator' interface as well as
     the *note SAXException: 1a8d. interface.

 -- Exception: xml.sax.SAXNotRecognizedException (msg[, exception])
     Subclass of *note SAXException: 1a8d. raised when a SAX
     `XMLReader' is confronted with an unrecognized feature or
     property.  SAX applications and extensions may use this class for
     similar purposes.

 -- Exception: xml.sax.SAXNotSupportedException (msg[, exception])
     Subclass of *note SAXException: 1a8d. raised when a SAX
     `XMLReader' is asked to enable a feature that is not supported, or
     to set a property to a value that the implementation does not
     support.  SAX applications and extensions may use this class for
     similar purposes.

See also
........

SAX: The Simple API for XML(1)
     This site is the focal point for the definition of the SAX API.
     It provides a Java implementation and online documentation.  Links
     to implementations and historical information are also available.

Module *note xml.sax.handler: 1a7.
     Definitions of the interfaces for application-provided objects.

Module *note xml.sax.saxutils: 1a8.
     Convenience functions for use in SAX applications.

Module *note xml.sax.xmlreader: 1a9.
     Definitions of the interfaces for parser-provided objects.

* Menu:

* SAXException Objects::

  ---------- Footnotes ----------

  (1) http://www.saxproject.org/


File: python.info,  Node: SAXException Objects,  Up: xml sax --- Support for SAX2 parsers

5.19.9.1 SAXException Objects
.............................

The *note SAXException: 1a8d. exception class supports the following
methods:

 -- Method: SAXException.getMessage ()
     Return a human-readable message describing the error condition.

 -- Method: SAXException.getException ()
     Return an encapsulated exception object, or `None'.


File: python.info,  Node: xml sax handler --- Base classes for SAX handlers,  Next: xml sax saxutils --- SAX Utilities,  Prev: xml sax --- Support for SAX2 parsers,  Up: Structured Markup Processing Tools

5.19.10 `xml.sax.handler' -- Base classes for SAX handlers
----------------------------------------------------------

New in version 2.0.

  The SAX API defines four kinds of handlers: content handlers, DTD
handlers, error handlers, and entity resolvers. Applications normally
only need to implement those interfaces whose events they are
interested in; they can implement the interfaces in a single object or
in multiple objects. Handler implementations should inherit from the
base classes provided in the module *note xml.sax.handler: 1a7, so that
all methods get default implementations.

 -- Class: xml.sax.handler.ContentHandler
     This is the main callback interface in SAX, and the one most
     important to applications. The order of events in this interface
     mirrors the order of the information in the document.

 -- Class: xml.sax.handler.DTDHandler
     Handle DTD events.

     This interface specifies only those DTD events required for basic
     parsing (unparsed entities and attributes).

 -- Class: xml.sax.handler.EntityResolver
     Basic interface for resolving entities. If you create an object
     implementing this interface, then register the object with your
     Parser, the parser will call the method in your object to resolve
     all external entities.

 -- Class: xml.sax.handler.ErrorHandler
     Interface used by the parser to present error and warning messages
     to the application.  The methods of this object control whether
     errors are immediately converted to exceptions or are handled in
     some other way.

  In addition to these classes, *note xml.sax.handler: 1a7. provides
symbolic constants for the feature and property names.

 -- Data: xml.sax.handler.feature_namespaces
         value: `"http://xml.org/sax/features/namespaces"' 
         true: Perform Namespace processing. 
         false: Optionally do not perform Namespace processing (implies namespace-prefixes; default). 
         access: (parsing) read-only; (not parsing) read/write 


 -- Data: xml.sax.handler.feature_namespace_prefixes
         value: `"http://xml.org/sax/features/namespace-prefixes"' 
         true: Report the original prefixed names and attributes used for Namespace declarations. 
         false: Do not report attributes used for Namespace declarations, and optionally do not report original prefixed names (default). 
         access: (parsing) read-only; (not parsing) read/write 


 -- Data: xml.sax.handler.feature_string_interning
         value: `"http://xml.org/sax/features/string-interning"' 
         true: All element names, prefixes, attribute names, Namespace URIs, and local names are interned using the built-in intern function. 
         false: Names are not necessarily interned, although they may be (default). 
         access: (parsing) read-only; (not parsing) read/write 


 -- Data: xml.sax.handler.feature_validation
         value: `"http://xml.org/sax/features/validation"' 
         true: Report all validation errors (implies external-general-entities and external-parameter-entities). 
         false: Do not report validation errors. 
         access: (parsing) read-only; (not parsing) read/write 


 -- Data: xml.sax.handler.feature_external_ges
         value: `"http://xml.org/sax/features/external-general-entities"' 
         true: Include all external general (text) entities. 
         false: Do not include external general entities. 
         access: (parsing) read-only; (not parsing) read/write 


 -- Data: xml.sax.handler.feature_external_pes
         value: `"http://xml.org/sax/features/external-parameter-entities"' 
         true: Include all external parameter entities, including the external DTD subset. 
         false: Do not include any external parameter entities, even the external DTD subset. 
         access: (parsing) read-only; (not parsing) read/write 


 -- Data: xml.sax.handler.all_features
     List of all features.

 -- Data: xml.sax.handler.property_lexical_handler
         value: `"http://xml.org/sax/properties/lexical-handler"' 
         data type: xml.sax.sax2lib.LexicalHandler (not supported in Python 2) 
         description: An optional extension handler for lexical events like comments. 
         access: read/write 


 -- Data: xml.sax.handler.property_declaration_handler
         value: `"http://xml.org/sax/properties/declaration-handler"' 
         data type: xml.sax.sax2lib.DeclHandler (not supported in Python 2) 
         description: An optional extension handler for DTD-related events other than notations and unparsed entities. 
         access: read/write 


 -- Data: xml.sax.handler.property_dom_node
         value: `"http://xml.org/sax/properties/dom-node"' 
         data type: org.w3c.dom.Node (not supported in Python 2) 
         description: When parsing, the current DOM node being visited if this is a DOM iterator; when not parsing, the root DOM node for iteration. 
         access: (parsing) read-only; (not parsing) read/write 


 -- Data: xml.sax.handler.property_xml_string
         value: `"http://xml.org/sax/properties/xml-string"' 
         data type: String 
         description: The literal string of characters that was the source for the current event. 
         access: read-only 


 -- Data: xml.sax.handler.all_properties
     List of all known property names.

* Menu:

* ContentHandler Objects::
* DTDHandler Objects::
* EntityResolver Objects::
* ErrorHandler Objects::


File: python.info,  Node: ContentHandler Objects,  Next: DTDHandler Objects,  Up: xml sax handler --- Base classes for SAX handlers

5.19.10.1 ContentHandler Objects
................................

Users are expected to subclass *note ContentHandler: 1a7c. to support
their application.  The following methods are called by the parser on
the appropriate events in the input document:

 -- Method: ContentHandler.setDocumentLocator (locator)
     Called by the parser to give the application a locator for
     locating the origin of document events.

     SAX parsers are strongly encouraged (though not absolutely
     required) to supply a locator: if it does so, it must supply the
     locator to the application by invoking this method before invoking
     any of the other methods in the DocumentHandler interface.

     The locator allows the application to determine the end position
     of any document-related event, even if the parser is not reporting
     an error. Typically, the application will use this information for
     reporting its own errors (such as character content that does not
     match an application's business rules). The information returned
     by the locator is probably not sufficient for use with a search
     engine.

     Note that the locator will return correct information only during
     the invocation of the events in this interface. The application
     should not attempt to use it at any other time.

 -- Method: ContentHandler.startDocument ()
     Receive notification of the beginning of a document.

     The SAX parser will invoke this method only once, before any other
     methods in this interface or in DTDHandler (except for *note
     setDocumentLocator(): 1aa7.).

 -- Method: ContentHandler.endDocument ()
     Receive notification of the end of a document.

     The SAX parser will invoke this method only once, and it will be
     the last method invoked during the parse. The parser shall not
     invoke this method until it has either abandoned parsing (because
     of an unrecoverable error) or reached the end of input.

 -- Method: ContentHandler.startPrefixMapping (prefix, uri)
     Begin the scope of a prefix-URI Namespace mapping.

     The information from this event is not necessary for normal
     Namespace processing: the SAX XML reader will automatically
     replace prefixes for element and attribute names when the
     `feature_namespaces' feature is enabled (the default).

     There are cases, however, when applications need to use prefixes
     in character data or in attribute values, where they cannot safely
     be expanded automatically; the *note startPrefixMapping(): 1aaa.
     and *note endPrefixMapping(): 1aab. events supply the information
     to the application to expand prefixes in those contexts itself, if
     necessary.

     Note that *note startPrefixMapping(): 1aaa. and *note
     endPrefixMapping(): 1aab. events are not guaranteed to be properly
     nested relative to each-other: all *note startPrefixMapping():
     1aaa. events will occur before the corresponding *note
     startElement(): 1aac. event, and all *note endPrefixMapping():
     1aab. events will occur after the corresponding *note
     endElement(): 1aad. event, but their order is not guaranteed.

 -- Method: ContentHandler.endPrefixMapping (prefix)
     End the scope of a prefix-URI mapping.

     See *note startPrefixMapping(): 1aaa. for details. This event will
     always occur after the corresponding *note endElement(): 1aad.
     event, but the order of *note endPrefixMapping(): 1aab. events is
     not otherwise guaranteed.

 -- Method: ContentHandler.startElement (name, attrs)
     Signals the start of an element in non-namespace mode.

     The _name_ parameter contains the raw XML 1.0 name of the element
     type as a string and the _attrs_ parameter holds an object of the
     `Attributes' interface (see *note The Attributes Interface: 1aae.)
     containing the attributes of the element.  The object passed as
     _attrs_ may be re-used by the parser; holding on to a reference to
     it is not a reliable way to keep a copy of the attributes.  To
     keep a copy of the attributes, use the *note copy(): 71. method of
     the _attrs_ object.

 -- Method: ContentHandler.endElement (name)
     Signals the end of an element in non-namespace mode.

     The _name_ parameter contains the name of the element type, just
     as with the *note startElement(): 1aac. event.

 -- Method: ContentHandler.startElementNS (name, qname, attrs)
     Signals the start of an element in namespace mode.

     The _name_ parameter contains the name of the element type as a
     `(uri, localname)' tuple, the _qname_ parameter contains the raw
     XML 1.0 name used in the source document, and the _attrs_
     parameter holds an instance of the `AttributesNS' interface (see
     *note The AttributesNS Interface: 1ab0.)  containing the
     attributes of the element.  If no namespace is associated with the
     element, the _uri_ component of _name_ will be `None'.  The object
     passed as _attrs_ may be re-used by the parser; holding on to a
     reference to it is not a reliable way to keep a copy of the
     attributes.  To keep a copy of the attributes, use the *note
     copy(): 71. method of the _attrs_ object.

     Parsers may set the _qname_ parameter to `None', unless the
     `feature_namespace_prefixes' feature is activated.

 -- Method: ContentHandler.endElementNS (name, qname)
     Signals the end of an element in namespace mode.

     The _name_ parameter contains the name of the element type, just
     as with the *note startElementNS(): 1aaf. method, likewise the
     _qname_ parameter.

 -- Method: ContentHandler.characters (content)
     Receive notification of character data.

     The Parser will call this method to report each chunk of character
     data. SAX parsers may return all contiguous character data in a
     single chunk, or they may split it into several chunks; however,
     all of the characters in any single event must come from the same
     external entity so that the Locator provides useful information.

     _content_ may be a Unicode string or a byte string; the `expat'
     reader module produces always Unicode strings.

          Note: The earlier SAX 1 interface provided by the Python XML
          Special Interest Group used a more Java-like interface for
          this method.  Since most parsers used from Python did not
          take advantage of the older interface, the simpler signature
          was chosen to replace it.  To convert old code to the new
          interface, use _content_ instead of slicing content with the
          old _offset_ and _length_ parameters.

 -- Method: ContentHandler.ignorableWhitespace (whitespace)
     Receive notification of ignorable whitespace in element content.

     Validating Parsers must use this method to report each chunk of
     ignorable whitespace (see the W3C XML 1.0 recommendation, section
     2.10): non-validating parsers may also use this method if they are
     capable of parsing and using content models.

     SAX parsers may return all contiguous whitespace in a single
     chunk, or they may split it into several chunks; however, all of
     the characters in any single event must come from the same
     external entity, so that the Locator provides useful information.

 -- Method: ContentHandler.processingInstruction (target, data)
     Receive notification of a processing instruction.

     The Parser will invoke this method once for each processing
     instruction found: note that processing instructions may occur
     before or after the main document element.

     A SAX parser should never report an XML declaration (XML 1.0,
     section 2.8) or a text declaration (XML 1.0, section 4.3.1) using
     this method.

 -- Method: ContentHandler.skippedEntity (name)
     Receive notification of a skipped entity.

     The Parser will invoke this method once for each entity skipped.
     Non-validating processors may skip entities if they have not seen
     the declarations (because, for example, the entity was declared in
     an external DTD subset). All processors may skip external
     entities, depending on the values of the `feature_external_ges'
     and the `feature_external_pes' properties.


File: python.info,  Node: DTDHandler Objects,  Next: EntityResolver Objects,  Prev: ContentHandler Objects,  Up: xml sax handler --- Base classes for SAX handlers

5.19.10.2 DTDHandler Objects
............................

*note DTDHandler: 1a96. instances provide the following methods:

 -- Method: DTDHandler.notationDecl (name, publicId, systemId)
     Handle a notation declaration event.

 -- Method: DTDHandler.unparsedEntityDecl (name, publicId, systemId,
          ndata)
     Handle an unparsed entity declaration event.


File: python.info,  Node: EntityResolver Objects,  Next: ErrorHandler Objects,  Prev: DTDHandler Objects,  Up: xml sax handler --- Base classes for SAX handlers

5.19.10.3 EntityResolver Objects
................................

 -- Method: EntityResolver.resolveEntity (publicId, systemId)
     Resolve the system identifier of an entity and return either the
     system identifier to read from as a string, or an InputSource to
     read from. The default implementation returns _systemId_.


File: python.info,  Node: ErrorHandler Objects,  Prev: EntityResolver Objects,  Up: xml sax handler --- Base classes for SAX handlers

5.19.10.4 ErrorHandler Objects
..............................

Objects with this interface are used to receive error and warning
information from the `XMLReader'.  If you create an object that
implements this interface, then register the object with your
`XMLReader', the parser will call the methods in your object to report
all warnings and errors. There are three levels of errors available:
warnings, (possibly) recoverable errors, and unrecoverable errors.  All
methods take a `SAXParseException' as the only parameter.  Errors and
warnings may be converted to an exception by raising the passed-in
exception object.

 -- Method: ErrorHandler.error (exception)
     Called when the parser encounters a recoverable error.  If this
     method does not raise an exception, parsing may continue, but
     further document information should not be expected by the
     application.  Allowing the parser to continue may allow additional
     errors to be discovered in the input document.

 -- Method: ErrorHandler.fatalError (exception)
     Called when the parser encounters an error it cannot recover from;
     parsing is expected to terminate when this method returns.

 -- Method: ErrorHandler.warning (exception)
     Called when the parser presents minor warning information to the
     application.  Parsing is expected to continue when this method
     returns, and document information will continue to be passed to
     the application. Raising an exception in this method will cause
     parsing to end.


File: python.info,  Node: xml sax saxutils --- SAX Utilities,  Next: xml sax xmlreader --- Interface for XML parsers,  Prev: xml sax handler --- Base classes for SAX handlers,  Up: Structured Markup Processing Tools

5.19.11 `xml.sax.saxutils' -- SAX Utilities
-------------------------------------------

New in version 2.0.

  The module *note xml.sax.saxutils: 1a8. contains a number of classes
and functions that are commonly useful when creating SAX applications,
either in direct use, or as base classes.

 -- Function: xml.sax.saxutils.escape (data[, entities])
     Escape `'&'', `'<'', and `'>'' in a string of data.

     You can escape other strings of data by passing a dictionary as
     the optional _entities_ parameter.  The keys and values must all
     be strings; each key will be replaced with its corresponding
     value.  The characters `'&'', `'<'' and `'>'' are always escaped,
     even if _entities_ is provided.

 -- Function: xml.sax.saxutils.unescape (data[, entities])
     Unescape `'&amp;'', `'&lt;'', and `'&gt;'' in a string of data.

     You can unescape other strings of data by passing a dictionary as
     the optional _entities_ parameter.  The keys and values must all
     be strings; each key will be replaced with its corresponding
     value.  `'&amp'', `'&lt;'', and `'&gt;'' are always unescaped,
     even if _entities_ is provided.

     New in version 2.3.

 -- Function: xml.sax.saxutils.quoteattr (data[, entities])
     Similar to *note escape(): 1ac4, but also prepares _data_ to be
     used as an attribute value.  The return value is a quoted version
     of _data_ with any additional required replacements. *note
     quoteattr(): 1ac6. will select a quote character based on the
     content of _data_, attempting to avoid encoding any quote
     characters in the string.  If both single- and double-quote
     characters are already in _data_, the double-quote characters will
     be encoded and _data_ will be wrapped in double-quotes.  The
     resulting string can be used directly as an attribute value:

         >>> print "<element attr=%s>" % quoteattr("ab ' cd \" ef")
         <element attr="ab ' cd &quot; ef">

     This function is useful when generating attribute values for HTML
     or any SGML using the reference concrete syntax.

     New in version 2.2.

 -- Class: xml.sax.saxutils.XMLGenerator ([out[, encoding]])
     This class implements the `ContentHandler' interface by writing SAX
     events back into an XML document. In other words, using an *note
     XMLGenerator: 1ac7.  as the content handler will reproduce the
     original document being parsed. _out_ should be a file-like object
     which will default to _sys.stdout_. _encoding_ is the encoding of
     the output stream which defaults to `'iso-8859-1''.

 -- Class: xml.sax.saxutils.XMLFilterBase (base)
     This class is designed to sit between an `XMLReader' and the client
     application's event handlers.  By default, it does nothing but
     pass requests up to the reader and events on to the handlers
     unmodified, but subclasses can override specific methods to modify
     the event stream or the configuration requests as they pass
     through.

 -- Function: xml.sax.saxutils.prepare_input_source (source[, base])
     This function takes an input source and an optional base URL and
     returns a fully resolved `InputSource' object ready for reading.
     The input source can be given as a string, a file-like object, or
     an `InputSource' object; parsers will use this function to
     implement the polymorphic _source_ argument to their `parse()'
     method.


File: python.info,  Node: xml sax xmlreader --- Interface for XML parsers,  Next: xml etree ElementTree --- The ElementTree XML API,  Prev: xml sax saxutils --- SAX Utilities,  Up: Structured Markup Processing Tools

5.19.12 `xml.sax.xmlreader' -- Interface for XML parsers
--------------------------------------------------------

New in version 2.0.

  SAX parsers implement the *note XMLReader: 1acc. interface. They are
implemented in a Python module, which must provide a function
`create_parser()'. This function is invoked by  *note
xml.sax.make_parser(): 1a89. with no arguments to create a new  parser
object.

 -- Class: xml.sax.xmlreader.XMLReader
     Base class which can be inherited by SAX parsers.

 -- Class: xml.sax.xmlreader.IncrementalParser
     In some cases, it is desirable not to parse an input source at
     once, but to feed chunks of the document as they get available.
     Note that the reader will normally not read the entire file, but
     read it in chunks as well; still `parse()' won't return until the
     entire document is processed. So these interfaces should be used
     if the blocking behaviour of `parse()' is not desirable.

     When the parser is instantiated it is ready to begin accepting
     data from the feed method immediately. After parsing has been
     finished with a call to close the reset method must be called to
     make the parser ready to accept new data, either from feed or
     using the parse method.

     Note that these methods must _not_ be called during parsing, that
     is, after parse has been called and before it returns.

     By default, the class also implements the parse method of the
     XMLReader interface using the feed, close and reset methods of the
     IncrementalParser interface as a convenience to SAX 2.0 driver
     writers.

 -- Class: xml.sax.xmlreader.Locator
     Interface for associating a SAX event with a document location. A
     locator object will return valid results only during calls to
     DocumentHandler methods; at any other time, the results are
     unpredictable. If information is not available, methods may return
     `None'.

 -- Class: xml.sax.xmlreader.InputSource ([systemId])
     Encapsulation of the information needed by the *note XMLReader:
     1acc. to read entities.

     This class may include information about the public identifier,
     system identifier, byte stream (possibly with character encoding
     information) and/or the character stream of an entity.

     Applications will create objects of this class for use in the
     *note XMLReader.parse(): 1ad0. method and for returning from
     EntityResolver.resolveEntity.

     An *note InputSource: 1acf. belongs to the application, the *note
     XMLReader: 1acc. is not allowed to modify *note InputSource: 1acf.
     objects passed to it from the application, although it may make
     copies and modify those.

 -- Class: xml.sax.xmlreader.AttributesImpl (attrs)
     This is an implementation of the `Attributes' interface (see
     section *note The Attributes Interface: 1aae.).  This is a
     dictionary-like object which represents the element attributes in
     a `startElement()' call. In addition to the most useful dictionary
     operations, it supports a number of other methods as described by
     the interface. Objects of this class should be instantiated by
     readers; _attrs_ must be a dictionary-like object containing a
     mapping from attribute names to attribute values.

 -- Class: xml.sax.xmlreader.AttributesNSImpl (attrs, qnames)
     Namespace-aware variant of *note AttributesImpl: 1ad1, which will
     be passed to `startElementNS()'. It is derived from *note
     AttributesImpl: 1ad1, but understands attribute names as
     two-tuples of _namespaceURI_ and _localname_. In addition, it
     provides a number of methods expecting qualified names as they
     appear in the original document.  This class implements the
     `AttributesNS' interface (see section *note The AttributesNS
     Interface: 1ab0.).

* Menu:

* XMLReader Objects::
* IncrementalParser Objects::
* Locator Objects::
* InputSource Objects::
* The Attributes Interface::
* The AttributesNS Interface::


File: python.info,  Node: XMLReader Objects,  Next: IncrementalParser Objects,  Up: xml sax xmlreader --- Interface for XML parsers

5.19.12.1 XMLReader Objects
...........................

The *note XMLReader: 1acc. interface supports the following methods:

 -- Method: XMLReader.parse (source)
     Process an input source, producing SAX events. The _source_ object
     can be a system identifier (a string identifying the input source
     - typically a file name or an URL), a file-like object, or an
     *note InputSource: 1acf. object. When *note parse(): 1ad0.
     returns, the input is completely processed, and the parser object
     can be discarded or reset. As a limitation, the current
     implementation only accepts byte streams; processing of character
     streams is for further study.

 -- Method: XMLReader.getContentHandler ()
     Return the current `ContentHandler'.

 -- Method: XMLReader.setContentHandler (handler)
     Set the current `ContentHandler'.  If no `ContentHandler' is set,
     content events will be discarded.

 -- Method: XMLReader.getDTDHandler ()
     Return the current `DTDHandler'.

 -- Method: XMLReader.setDTDHandler (handler)
     Set the current `DTDHandler'.  If no `DTDHandler' is set, DTD
     events will be discarded.

 -- Method: XMLReader.getEntityResolver ()
     Return the current `EntityResolver'.

 -- Method: XMLReader.setEntityResolver (handler)
     Set the current `EntityResolver'.  If no `EntityResolver' is set,
     attempts to resolve an external entity will result in opening the
     system identifier for the entity, and fail if it is not available.

 -- Method: XMLReader.getErrorHandler ()
     Return the current `ErrorHandler'.

 -- Method: XMLReader.setErrorHandler (handler)
     Set the current error handler.  If no `ErrorHandler' is set,
     errors will be raised as exceptions, and warnings will be printed.

 -- Method: XMLReader.setLocale (locale)
     Allow an application to set the locale for errors and warnings.

     SAX parsers are not required to provide localization for errors
     and warnings; if they cannot support the requested locale,
     however, they must raise a SAX exception.  Applications may
     request a locale change in the middle of a parse.

 -- Method: XMLReader.getFeature (featurename)
     Return the current setting for feature _featurename_.  If the
     feature is not recognized, `SAXNotRecognizedException' is raised.
     The well-known featurenames are listed in the module *note
     xml.sax.handler: 1a7.

 -- Method: XMLReader.setFeature (featurename, value)
     Set the _featurename_ to _value_. If the feature is not recognized,
     `SAXNotRecognizedException' is raised. If the feature or its
     setting is not supported by the parser, _SAXNotSupportedException_
     is raised.

 -- Method: XMLReader.getProperty (propertyname)
     Return the current setting for property _propertyname_. If the
     property is not recognized, a `SAXNotRecognizedException' is
     raised. The well-known propertynames are listed in the module
     *note xml.sax.handler: 1a7.

 -- Method: XMLReader.setProperty (propertyname, value)
     Set the _propertyname_ to _value_. If the property is not
     recognized, `SAXNotRecognizedException' is raised. If the property
     or its setting is not supported by the parser,
     _SAXNotSupportedException_ is raised.


File: python.info,  Node: IncrementalParser Objects,  Next: Locator Objects,  Prev: XMLReader Objects,  Up: xml sax xmlreader --- Interface for XML parsers

5.19.12.2 IncrementalParser Objects
...................................

Instances of *note IncrementalParser: 1acd. offer the following
additional methods:

 -- Method: IncrementalParser.feed (data)
     Process a chunk of _data_.

 -- Method: IncrementalParser.close ()
     Assume the end of the document. That will check well-formedness
     conditions that can be checked only at the end, invoke handlers,
     and may clean up resources allocated during parsing.

 -- Method: IncrementalParser.reset ()
     This method is called after close has been called to reset the
     parser so that it is ready to parse new documents. The results of
     calling parse or feed after close without calling reset are
     undefined.


File: python.info,  Node: Locator Objects,  Next: InputSource Objects,  Prev: IncrementalParser Objects,  Up: xml sax xmlreader --- Interface for XML parsers

5.19.12.3 Locator Objects
.........................

Instances of *note Locator: 1ace. provide these methods:

 -- Method: Locator.getColumnNumber ()
     Return the column number where the current event ends.

 -- Method: Locator.getLineNumber ()
     Return the line number where the current event ends.

 -- Method: Locator.getPublicId ()
     Return the public identifier for the current event.

 -- Method: Locator.getSystemId ()
     Return the system identifier for the current event.


File: python.info,  Node: InputSource Objects,  Next: The Attributes Interface,  Prev: Locator Objects,  Up: xml sax xmlreader --- Interface for XML parsers

5.19.12.4 InputSource Objects
.............................

 -- Method: InputSource.setPublicId (id)
     Sets the public identifier of this *note InputSource: 1acf.

 -- Method: InputSource.getPublicId ()
     Returns the public identifier of this *note InputSource: 1acf.

 -- Method: InputSource.setSystemId (id)
     Sets the system identifier of this *note InputSource: 1acf.

 -- Method: InputSource.getSystemId ()
     Returns the system identifier of this *note InputSource: 1acf.

 -- Method: InputSource.setEncoding (encoding)
     Sets the character encoding of this *note InputSource: 1acf.

     The encoding must be a string acceptable for an XML encoding
     declaration (see section 4.3.3 of the XML recommendation).

     The encoding attribute of the *note InputSource: 1acf. is ignored
     if the *note InputSource: 1acf. also contains a character stream.

 -- Method: InputSource.getEncoding ()
     Get the character encoding of this InputSource.

 -- Method: InputSource.setByteStream (bytefile)
     Set the byte stream (a Python file-like object which does not
     perform byte-to-character conversion) for this input source.

     The SAX parser will ignore this if there is also a character
     stream specified, but it will use a byte stream in preference to
     opening a URI connection itself.

     If the application knows the character encoding of the byte
     stream, it should set it with the setEncoding method.

 -- Method: InputSource.getByteStream ()
     Get the byte stream for this input source.

     The getEncoding method will return the character encoding for this
     byte stream, or None if unknown.

 -- Method: InputSource.setCharacterStream (charfile)
     Set the character stream for this input source. (The stream must
     be a Python 1.6 Unicode-wrapped file-like that performs conversion
     to Unicode strings.)

     If there is a character stream specified, the SAX parser will
     ignore any byte stream and will not attempt to open a URI
     connection to the system identifier.

 -- Method: InputSource.getCharacterStream ()
     Get the character stream for this input source.


File: python.info,  Node: The Attributes Interface,  Next: The AttributesNS Interface,  Prev: InputSource Objects,  Up: xml sax xmlreader --- Interface for XML parsers

5.19.12.5 The `Attributes' Interface
....................................

`Attributes' objects implement a portion of the mapping protocol,
including the methods *note copy(): 71, `get()', `has_key()', `items()',
`keys()', and `values()'.  The following methods are also provided:

 -- Method: Attributes.getLength ()
     Return the number of attributes.

 -- Method: Attributes.getNames ()
     Return the names of the attributes.

 -- Method: Attributes.getType (name)
     Returns the type of the attribute _name_, which is normally
     `'CDATA''.

 -- Method: Attributes.getValue (name)
     Return the value of attribute _name_.


File: python.info,  Node: The AttributesNS Interface,  Prev: The Attributes Interface,  Up: xml sax xmlreader --- Interface for XML parsers

5.19.12.6 The `AttributesNS' Interface
......................................

This interface is a subtype of the `Attributes' interface (see section
*note The Attributes Interface: 1aae.).  All methods supported by that
interface are also available on `AttributesNS' objects.

  The following methods are also available:

 -- Method: AttributesNS.getValueByQName (name)
     Return the value for a qualified name.

 -- Method: AttributesNS.getNameByQName (name)
     Return the `(namespace, localname)' pair for a qualified _name_.

 -- Method: AttributesNS.getQNameByName (name)
     Return the qualified name for a `(namespace, localname)' pair.

 -- Method: AttributesNS.getQNames ()
     Return the qualified names of all attributes.


File: python.info,  Node: xml etree ElementTree --- The ElementTree XML API,  Prev: xml sax xmlreader --- Interface for XML parsers,  Up: Structured Markup Processing Tools

5.19.13 `xml.etree.ElementTree' -- The ElementTree XML API
----------------------------------------------------------

New in version 2.5.

  The *note Element: 1b05. type is a flexible container object,
designed to store hierarchical data structures in memory.  The type can
be described as a cross between a list and a dictionary.

  Each element has a number of properties associated with it:

   * a tag which is a string identifying what kind of data this element
     represents (the element type, in other words).

   * a number of attributes, stored in a Python dictionary.

   * a text string.

   * an optional tail string.

   * a number of child elements, stored in a Python sequence

  To create an element instance, use the *note Element: 1b05.
constructor or the *note SubElement(): 1b06. factory function.

  The *note ElementTree: 1b07. class can be used to wrap an element
structure, and convert it from and to XML.

  A C implementation of this API is available as
`xml.etree.cElementTree'.

  See <http://effbot.org/zone/element-index.htm> for tutorials and
links to other docs.  Fredrik Lundh's page is also the location of the
development version of the xml.etree.ElementTree.

  Changed in version 2.7: The ElementTree API is updated to 1.3.  For
more information, see Introducing ElementTree 1.3(1).

* Menu:

* Functions: Functions<4>.
* Element Objects: Element Objects<2>.
* ElementTree Objects::
* QName Objects::
* TreeBuilder Objects::
* XMLParser Objects: XMLParser Objects<2>.

  ---------- Footnotes ----------

  (1) http://effbot.org/zone/elementtree-13-intro.htm


File: python.info,  Node: Functions<4>,  Next: Element Objects<2>,  Up: xml etree ElementTree --- The ElementTree XML API

5.19.13.1 Functions
...................

 -- Function: xml.etree.ElementTree.Comment (text=None)
     Comment element factory.  This factory function creates a special
     element that will be serialized as an XML comment by the standard
     serializer.  The comment string can be either a bytestring or a
     Unicode string.  _text_ is a string containing the comment string.
     Returns an element instance representing a comment.

 -- Function: xml.etree.ElementTree.dump (elem)
     Writes an element tree or element structure to sys.stdout.  This
     function should be used for debugging only.

     The exact output format is implementation dependent.  In this
     version, it's written as an ordinary XML file.

     _elem_ is an element tree or an individual element.

 -- Function: xml.etree.ElementTree.fromstring (text)
     Parses an XML section from a string constant.  Same as *note
     XML(): 1b0d.  _text_ is a string containing XML data.  Returns an
     *note Element: 1b05. instance.

 -- Function: xml.etree.ElementTree.fromstringlist (sequence,
          parser=None)
     Parses an XML document from a sequence of string fragments.
     _sequence_ is a list or other sequence containing XML data
     fragments.  _parser_ is an optional parser instance.  If not
     given, the standard *note XMLParser: 1b0f.  parser is used.
     Returns an *note Element: 1b05. instance.

     New in version 2.7.

 -- Function: xml.etree.ElementTree.iselement (element)
     Checks if an object appears to be a valid element object.
     _element_ is an element instance.  Returns a true value if this is
     an element object.

 -- Function: xml.etree.ElementTree.iterparse (source, events=None,
          parser=None)
     Parses an XML section into an element tree incrementally, and
     reports what's going on to the user.  _source_ is a filename or
     file object containing XML data.  _events_ is a list of events to
     report back.  If omitted, only "end" events are reported.
     _parser_ is an optional parser instance.  If not given, the
     standard *note XMLParser: 1b0f. parser is used.  Returns an *note
     iterator: 84a. providing `(event, elem)' pairs.

          Note: *note iterparse(): 1b11. only guarantees that it has
          seen the ">" character of a starting tag when it emits a
          "start" event, so the attributes are defined, but the
          contents of the text and tail attributes are undefined at
          that point.  The same applies to the element children; they
          may or may not be present.

          If you need a fully populated element, look for "end" events
          instead.

 -- Function: xml.etree.ElementTree.parse (source, parser=None)
     Parses an XML section into an element tree.  _source_ is a
     filename or file object containing XML data.  _parser_ is an
     optional parser instance.  If not given, the standard *note
     XMLParser: 1b0f. parser is used.  Returns an *note ElementTree:
     1b07. instance.

 -- Function: xml.etree.ElementTree.ProcessingInstruction (target,
          text=None)
     PI element factory.  This factory function creates a special
     element that will be serialized as an XML processing instruction.
     _target_ is a string containing the PI target.  _text_ is a string
     containing the PI contents, if given.  Returns an element
     instance, representing a processing instruction.

 -- Function: xml.etree.ElementTree.register_namespace (prefix, uri)
     Registers a namespace prefix.  The registry is global, and any
     existing mapping for either the given prefix or the namespace URI
     will be removed.  _prefix_ is a namespace prefix.  _uri_ is a
     namespace uri.  Tags and attributes in this namespace will be
     serialized with the given prefix, if at all possible.

     New in version 2.7.

 -- Function: xml.etree.ElementTree.SubElement (parent, tag, attrib={},
          **extra)
     Subelement factory.  This function creates an element instance,
     and appends it to an existing element.

     The element name, attribute names, and attribute values can be
     either bytestrings or Unicode strings.  _parent_ is the parent
     element.  _tag_ is the subelement name.  _attrib_ is an optional
     dictionary, containing element attributes.  _extra_ contains
     additional attributes, given as keyword arguments.  Returns an
     element instance.

 -- Function: xml.etree.ElementTree.tostring (element,
          encoding="us-ascii", method="xml")
     Generates a string representation of an XML element, including all
     subelements.  _element_ is an *note Element: 1b05. instance.
     _encoding_ (1) is the output encoding (default is US-ASCII).
     _method_ is either `"xml"', `"html"' or `"text"' (default is
     `"xml"').  Returns an encoded string containing the XML data.

 -- Function: xml.etree.ElementTree.tostringlist (element,
          encoding="us-ascii", method="xml")
     Generates a string representation of an XML element, including all
     subelements.  _element_ is an *note Element: 1b05. instance.
     _encoding_ (2) is the output encoding (default is US-ASCII).
     _method_ is either `"xml"', `"html"' or `"text"' (default is
     `"xml"').  Returns a list of encoded strings containing the XML
     data.  It does not guarantee any specific sequence, except that
     `"".join(tostringlist(element)) == tostring(element)'.

     New in version 2.7.

 -- Function: xml.etree.ElementTree.XML (text, parser=None)
     Parses an XML section from a string constant.  This function can
     be used to embed "XML literals" in Python code.  _text_ is a
     string containing XML data.  _parser_ is an optional parser
     instance.  If not given, the standard *note XMLParser: 1b0f.
     parser is used.  Returns an *note Element: 1b05. instance.

 -- Function: xml.etree.ElementTree.XMLID (text, parser=None)
     Parses an XML section from a string constant, and also returns a
     dictionary which maps from element id:s to elements.  _text_ is a
     string containing XML data.  _parser_ is an optional parser
     instance.  If not given, the standard *note XMLParser: 1b0f.
     parser is used.  Returns a tuple containing an *note Element:
     1b05. instance and a dictionary.

  ---------- Footnotes ----------

  (1) The encoding string included in XML output should conform to the
appropriate standards.  For example, "UTF-8" is valid, but "UTF8" is
not.  See
<http://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl> and
<http://www.iana.org/assignments/character-sets>.

  (2) The encoding string included in XML output should conform to the
appropriate standards.  For example, "UTF-8" is valid, but "UTF8" is
not.  See
<http://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl> and
<http://www.iana.org/assignments/character-sets>.


File: python.info,  Node: Element Objects<2>,  Next: ElementTree Objects,  Prev: Functions<4>,  Up: xml etree ElementTree --- The ElementTree XML API

5.19.13.2 Element Objects
.........................

 -- Class: xml.etree.ElementTree.Element (tag, attrib={}, **extra)
     Element class.  This class defines the Element interface, and
     provides a reference implementation of this interface.

     The element name, attribute names, and attribute values can be
     either bytestrings or Unicode strings.  _tag_ is the element name.
     _attrib_ is an optional dictionary, containing element
     attributes.  _extra_ contains additional attributes, given as
     keyword arguments.

      -- Attribute: tag
          A string identifying what kind of data this element
          represents (the element type, in other words).

      -- Attribute: text
          The _text_ attribute can be used to hold additional data
          associated with the element.  As the name implies this
          attribute is usually a string but may be any
          application-specific object.  If the element is created from
          an XML file the attribute will contain any text found between
          the element tags.

      -- Attribute: tail
          The _tail_ attribute can be used to hold additional data
          associated with the element.  This attribute is usually a
          string but may be any application-specific object.  If the
          element is created from an XML file the attribute will
          contain any text found after the element's end tag and before
          the next tag.

      -- Attribute: attrib
          A dictionary containing the element's attributes.  Note that
          while the _attrib_ value is always a real mutable Python
          dictionary, an ElementTree implementation may choose to use
          another internal representation, and create the dictionary
          only if someone asks for it.  To take advantage of such
          implementations, use the dictionary methods below whenever
          possible.

     The following dictionary-like methods work on the element
     attributes.

      -- Method: clear ()
          Resets an element.  This function removes all subelements,
          clears all attributes, and sets the text and tail attributes
          to None.

      -- Method: get (key, default=None)
          Gets the element attribute named _key_.

          Returns the attribute value, or _default_ if the attribute
          was not found.

      -- Method: items ()
          Returns the element attributes as a sequence of (name, value)
          pairs.  The attributes are returned in an arbitrary order.

      -- Method: keys ()
          Returns the elements attribute names as a list.  The names
          are returned in an arbitrary order.

      -- Method: set (key, value)
          Set the attribute _key_ on the element to _value_.

     The following methods work on the element's children (subelements).

      -- Method: append (subelement)
          Adds the element _subelement_ to the end of this elements
          internal list of subelements.

      -- Method: extend (subelements)
          Appends _subelements_ from a sequence object with zero or
          more elements.  Raises *note AssertionError: 7dd. if a
          subelement is not a valid object.

          New in version 2.7.

      -- Method: find (match)
          Finds the first subelement matching _match_.  _match_ may be
          a tag name or path.  Returns an element instance or `None'.

      -- Method: findall (match)
          Finds all matching subelements, by tag name or path.  Returns
          a list containing all matching elements in document order.

      -- Method: findtext (match, default=None)
          Finds text for the first subelement matching _match_.
          _match_ may be a tag name or path.  Returns the text content
          of the first matching element, or _default_ if no element was
          found.  Note that if the matching element has no text content
          an empty string is returned.

      -- Method: getchildren ()
          Deprecated since version 2.7: Use `list(elem)' or iteration.

      -- Method: getiterator (tag=None)
          Deprecated since version 2.7: Use method *note
          Element.iter(): 1b2a. instead.

      -- Method: insert (index, element)
          Inserts a subelement at the given position in this element.

      -- Method: iter (tag=None)
          Creates a tree *note iterator: 84a. with the current element
          as the root.  The iterator iterates over this element and all
          elements below it, in document (depth first) order.  If _tag_
          is not `None' or `'*'', only elements whose tag equals _tag_
          are returned from the iterator.  If the tree structure is
          modified during iteration, the result is undefined.

      -- Method: iterfind (match)
          Finds all matching subelements, by tag name or path.  Returns
          an iterable yielding all matching elements in document order.

          New in version 2.7.

      -- Method: itertext ()
          Creates a text iterator.  The iterator loops over this
          element and all subelements, in document order, and returns
          all inner text.

          New in version 2.7.

      -- Method: makeelement (tag, attrib)
          Creates a new element object of the same type as this
          element.  Do not call this method, use the *note
          SubElement(): 1b06. factory function instead.

      -- Method: remove (subelement)
          Removes _subelement_ from the element.  Unlike the find*
          methods this method compares elements based on the instance
          identity, not on tag value or contents.

     *note Element: 1b05. objects also support the following sequence
     type methods for working with subelements: *note __delitem__():
     455, *note __getitem__(): 43e, *note __setitem__(): 454, *note
     __len__(): 3f9.

     Caution: Elements with no subelements will test as `False'.  This
     behavior will change in future versions.  Use specific `len(elem)'
     or `elem is None' test instead.

         element = root.find('foo')

         if not element:  # careful!
             print "element not found, or element has no subelements"

         if element is None:
             print "element not found"




File: python.info,  Node: ElementTree Objects,  Next: QName Objects,  Prev: Element Objects<2>,  Up: xml etree ElementTree --- The ElementTree XML API

5.19.13.3 ElementTree Objects
.............................

 -- Class: xml.etree.ElementTree.ElementTree (element=None, file=None)
     ElementTree wrapper class.  This class represents an entire element
     hierarchy, and adds some extra support for serialization to and
     from standard XML.

     _element_ is the root element.  The tree is initialized with the
     contents of the XML _file_ if given.

      -- Method: _setroot (element)
          Replaces the root element for this tree.  This discards the
          current contents of the tree, and replaces it with the given
          element.  Use with care.  _element_ is an element instance.

      -- Method: find (match)
          Finds the first toplevel element matching _match_.  _match_
          may be a tag name or path.  Same as getroot().find(match).
          Returns the first matching element, or `None' if no element
          was found.

      -- Method: findall (match)
          Finds all matching subelements, by tag name or path.  Same as
          getroot().findall(match).  _match_ may be a tag name or path.
          Returns a list containing all matching elements, in document
          order.

      -- Method: findtext (match, default=None)
          Finds the element text for the first toplevel element with
          given tag.  Same as getroot().findtext(match).  _match_ may
          be a tag name or path.  _default_ is the value to return if
          the element was not found.  Returns the text content of the
          first matching element, or the default value no element was
          found.  Note that if the element is found, but has no text
          content, this method returns an empty string.

      -- Method: getiterator (tag=None)
          Deprecated since version 2.7: Use method *note
          ElementTree.iter(): 1b37. instead.

      -- Method: getroot ()
          Returns the root element for this tree.

      -- Method: iter (tag=None)
          Creates and returns a tree iterator for the root element.
          The iterator loops over all elements in this tree, in section
          order.  _tag_ is the tag to look for (default is to return
          all elements)

      -- Method: iterfind (match)
          Finds all matching subelements, by tag name or path.  Same as
          getroot().iterfind(match). Returns an iterable yielding all
          matching elements in document order.

          New in version 2.7.

      -- Method: parse (source, parser=None)
          Loads an external XML section into this element tree.
          _source_ is a file name or file object.  _parser_ is an
          optional parser instance.  If not given, the standard
          XMLParser parser is used.  Returns the section root element.

      -- Method: write (file, encoding="us-ascii",
               xml_declaration=None, method="xml")
          Writes the element tree to a file, as XML.  _file_ is a file
          name, or a file object opened for writing.  _encoding_ (1) is
          the output encoding (default is US-ASCII).  _xml_declaration_
          controls if an XML declaration should be added to the file.
          Use False for never, True for always, None for only if not
          US-ASCII or UTF-8 (default is None).  _method_ is either
          `"xml"', `"html"' or `"text"' (default is `"xml"').  Returns
          an encoded string.

This is the XML file that is going to be manipulated:

    <html>
        <head>
            <title>Example page</title>
        </head>
        <body>
            <p>Moved to <a href="http://example.org/">example.org</a>
            or <a href="http://example.com/">example.com</a>.</p>
        </body>
    </html>

Example of changing the attribute "target" of every link in first
paragraph:

    >>> from xml.etree.ElementTree import ElementTree
    >>> tree = ElementTree()
    >>> tree.parse("index.xhtml")
    <Element 'html' at 0xb77e6fac>
    >>> p = tree.find("body/p")     # Finds first occurrence of tag p in body
    >>> p
    <Element 'p' at 0xb77ec26c>
    >>> links = list(p.iter("a"))   # Returns list of all links
    >>> links
    [<Element 'a' at 0xb77ec2ac>, <Element 'a' at 0xb77ec1cc>]
    >>> for i in links:             # Iterates through all found links
    ...     i.attrib["target"] = "blank"
    >>> tree.write("output.xhtml")


  ---------- Footnotes ----------

  (1) The encoding string included in XML output should conform to the
appropriate standards.  For example, "UTF-8" is valid, but "UTF8" is
not.  See
<http://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl> and
<http://www.iana.org/assignments/character-sets>.


File: python.info,  Node: QName Objects,  Next: TreeBuilder Objects,  Prev: ElementTree Objects,  Up: xml etree ElementTree --- The ElementTree XML API

5.19.13.4 QName Objects
.......................

 -- Class: xml.etree.ElementTree.QName (text_or_uri, tag=None)
     QName wrapper.  This can be used to wrap a QName attribute value,
     in order to get proper namespace handling on output.
     _text_or_uri_ is a string containing the QName value, in the form
     {uri}local, or, if the tag argument is given, the URI part of a
     QName.  If _tag_ is given, the first argument is interpreted as an
     URI, and this argument is interpreted as a local name.  *note
     QName: 1b3e. instances are opaque.


File: python.info,  Node: TreeBuilder Objects,  Next: XMLParser Objects<2>,  Prev: QName Objects,  Up: xml etree ElementTree --- The ElementTree XML API

5.19.13.5 TreeBuilder Objects
.............................

 -- Class: xml.etree.ElementTree.TreeBuilder (element_factory=None)
     Generic element structure builder.  This builder converts a
     sequence of start, data, and end method calls to a well-formed
     element structure.  You can use this class to build an element
     structure using a custom XML parser, or a parser for some other
     XML-like format.  The _element_factory_ is called to create new
     *note Element: 1b05. instances when given.

      -- Method: close ()
          Flushes the builder buffers, and returns the toplevel document
          element.  Returns an *note Element: 1b05. instance.

      -- Method: data (data)
          Adds text to the current element.  _data_ is a string.  This
          should be either a bytestring, or a Unicode string.

      -- Method: end (tag)
          Closes the current element.  _tag_ is the element name.
          Returns the closed element.

      -- Method: start (tag, attrs)
          Opens a new element.  _tag_ is the element name.  _attrs_ is
          a dictionary containing element attributes.  Returns the
          opened element.

     In addition, a custom *note TreeBuilder: 1b41. object can provide
     the following method:

      -- Method: doctype (name, pubid, system)
          Handles a doctype declaration.  _name_ is the doctype name.
          _pubid_ is the public identifier.  _system_ is the system
          identifier.  This method does not exist on the default *note
          TreeBuilder: 1b41. class.

          New in version 2.7.


File: python.info,  Node: XMLParser Objects<2>,  Prev: TreeBuilder Objects,  Up: xml etree ElementTree --- The ElementTree XML API

5.19.13.6 XMLParser Objects
...........................

 -- Class: xml.etree.ElementTree.XMLParser (html=0, target=None,
          encoding=None)
     *note Element: 1b05. structure builder for XML source data, based
     on the expat parser.  _html_ are predefined HTML entities.  This
     flag is not supported by the current implementation.  _target_ is
     the target object.  If omitted, the builder uses an instance of
     the standard TreeBuilder class.  _encoding_ (1) is optional.  If
     given, the value overrides the encoding specified in the XML file.

      -- Method: close ()
          Finishes feeding data to the parser.  Returns an element
          structure.

      -- Method: doctype (name, pubid, system)
          Deprecated since version 2.7: Define the *note
          TreeBuilder.doctype(): 1b46. method on a custom TreeBuilder
          target.

      -- Method: feed (data)
          Feeds data to the parser.  _data_ is encoded data.

*note XMLParser.feed(): 1b4b. calls _target_'s `start()' method for
each opening tag, its `end()' method for each closing tag, and data is
processed by method `data()'.  *note XMLParser.close(): 1b49.  calls
_target_'s method `close()'.  *note XMLParser: 1b0f. can be used not
only for building a tree structure.  This is an example of counting the
maximum depth of an XML file:

    >>> from xml.etree.ElementTree import XMLParser
    >>> class MaxDepth:                     # The target object of the parser
    ...     maxDepth = 0
    ...     depth = 0
    ...     def start(self, tag, attrib):   # Called for each opening tag.
    ...         self.depth += 1
    ...         if self.depth > self.maxDepth:
    ...             self.maxDepth = self.depth
    ...     def end(self, tag):             # Called for each closing tag.
    ...         self.depth -= 1
    ...     def data(self, data):
    ...         pass            # We do not need to do anything with data.
    ...     def close(self):    # Called when all data has been parsed.
    ...         return self.maxDepth
    ...
    >>> target = MaxDepth()
    >>> parser = XMLParser(target=target)
    >>> exampleXml = """
    ... <a>
    ...   <b>
    ...   </b>
    ...   <b>
    ...     <c>
    ...       <d>
    ...       </d>
    ...     </c>
    ...   </b>
    ... </a>"""
    >>> parser.feed(exampleXml)
    >>> parser.close()
    4


  ---------- Footnotes ----------

  (1) The encoding string included in XML output should conform to the
appropriate standards.  For example, "UTF-8" is valid, but "UTF8" is
not.  See
<http://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl> and
<http://www.iana.org/assignments/character-sets>.


File: python.info,  Node: Internet Protocols and Support,  Next: Multimedia Services,  Prev: Structured Markup Processing Tools,  Up: The Python Standard Library

5.20 Internet Protocols and Support
===================================

The modules described in this chapter implement Internet protocols and
support for related technology.  They are all implemented in Python.
Most of these modules require the presence of the system-dependent
module *note socket: 15d, which is currently supported on most popular
platforms.  Here is an overview:

* Menu:

* webbrowser: webbrowser --- Convenient Web-browser controller. Convenient Web-browser controller
* cgi: cgi --- Common Gateway Interface support. Common Gateway Interface support
* cgitb: cgitb --- Traceback manager for CGI scripts. Traceback manager for CGI scripts
* wsgiref: wsgiref --- WSGI Utilities and Reference Implementation. WSGI Utilities and Reference Implementation
* urllib: urllib --- Open arbitrary resources by URL. Open arbitrary resources by URL
* urllib2: urllib2 --- extensible library for opening URLs. extensible library for opening URLs
* httplib: httplib --- HTTP protocol client. HTTP protocol client
* ftplib: ftplib --- FTP protocol client. FTP protocol client
* poplib: poplib --- POP3 protocol client. POP3 protocol client
* imaplib: imaplib --- IMAP4 protocol client. IMAP4 protocol client
* nntplib: nntplib --- NNTP protocol client. NNTP protocol client
* smtplib: smtplib --- SMTP protocol client. SMTP protocol client
* smtpd: smtpd --- SMTP Server. SMTP Server
* telnetlib: telnetlib --- Telnet client. Telnet client
* uuid: uuid --- UUID objects according to RFC 4122. UUID objects according to RFC 4122
* urlparse: urlparse --- Parse URLs into components. Parse URLs into components
* SocketServer: SocketServer --- A framework for network servers. A framework for network servers
* BaseHTTPServer: BaseHTTPServer --- Basic HTTP server. Basic HTTP server
* SimpleHTTPServer: SimpleHTTPServer --- Simple HTTP request handler. Simple HTTP request handler
* CGIHTTPServer: CGIHTTPServer --- CGI-capable HTTP request handler. CGI-capable HTTP request handler
* cookielib: cookielib --- Cookie handling for HTTP clients. Cookie handling for HTTP clients
* Cookie: Cookie --- HTTP state management. HTTP state management
* xmlrpclib: xmlrpclib --- XML-RPC client access. XML-RPC client access
* SimpleXMLRPCServer: SimpleXMLRPCServer --- Basic XML-RPC server. Basic XML-RPC server
* DocXMLRPCServer: DocXMLRPCServer --- Self-documenting XML-RPC server. Self-documenting XML-RPC server

webbrowser --- Convenient Web-browser controller

* Browser Controller Objects::

cgi --- Common Gateway Interface support

* Introduction: Introduction<8>.
* Using the cgi module::
* Higher Level Interface::
* Old classes::
* Functions: Functions<5>.
* Caring about security::
* Installing your CGI script on a Unix system::
* Testing your CGI script::
* Debugging CGI scripts::
* Common problems and solutions::

wsgiref --- WSGI Utilities and Reference Implementation

* wsgiref.util: wsgiref util -- WSGI environment utilities. WSGI environment utilities
* wsgiref.headers: wsgiref headers -- WSGI response header tools. WSGI response header tools
* wsgiref.simple_server: wsgiref simple_server -- a simple WSGI HTTP server. a simple WSGI HTTP server
* wsgiref.validate: wsgiref validate --- WSGI conformance checker. WSGI conformance checker
* wsgiref.handlers: wsgiref handlers -- server/gateway base classes. server/gateway base classes
* Examples: Examples<10>.

urllib --- Open arbitrary resources by URL

* High-level interface::
* Utility functions: Utility functions<2>.
* URL Opener objects::
* urllib Restrictions::
* Examples: Examples<11>.

urllib2 --- extensible library for opening URLs

* Request Objects::
* OpenerDirector Objects::
* BaseHandler Objects::
* HTTPRedirectHandler Objects::
* HTTPCookieProcessor Objects::
* ProxyHandler Objects::
* HTTPPasswordMgr Objects::
* AbstractBasicAuthHandler Objects::
* HTTPBasicAuthHandler Objects::
* ProxyBasicAuthHandler Objects::
* AbstractDigestAuthHandler Objects::
* HTTPDigestAuthHandler Objects::
* ProxyDigestAuthHandler Objects::
* HTTPHandler Objects::
* HTTPSHandler Objects::
* FileHandler Objects::
* FTPHandler Objects::
* CacheFTPHandler Objects::
* UnknownHandler Objects::
* HTTPErrorProcessor Objects::
* Examples: Examples<12>.

httplib --- HTTP protocol client

* HTTPConnection Objects::
* HTTPResponse Objects::
* Examples: Examples<13>.

ftplib --- FTP protocol client

* FTP Objects::
* FTP_TLS Objects::

poplib --- POP3 protocol client

* POP3 Objects::
* POP3 Example::

imaplib --- IMAP4 protocol client

* IMAP4 Objects::
* IMAP4 Example::

nntplib --- NNTP protocol client

* NNTP Objects::

smtplib --- SMTP protocol client

* SMTP Objects::
* SMTP Example::

smtpd --- SMTP Server

* SMTPServer Objects::
* DebuggingServer Objects::
* PureProxy Objects::
* MailmanProxy Objects::

telnetlib --- Telnet client

* Telnet Objects::
* Telnet Example::

uuid --- UUID objects according to RFC 4122

* Example: Example<10>.

urlparse --- Parse URLs into components

* Results of urlparse() and urlsplit(): Results of urlparse and urlsplit.

SocketServer --- A framework for network servers

* Server Creation Notes::
* Server Objects::
* RequestHandler Objects::
* Examples: Examples<14>.

Examples

* SocketServer.TCPServer Example: SocketServer TCPServer Example.
* SocketServer.UDPServer Example: SocketServer UDPServer Example.
* Asynchronous Mixins::

BaseHTTPServer --- Basic HTTP server

* More examples::

cookielib --- Cookie handling for HTTP clients

* CookieJar and FileCookieJar Objects::
* FileCookieJar subclasses and co-operation with web browsers::
* CookiePolicy Objects::
* DefaultCookiePolicy Objects::
* Cookie Objects::
* Examples: Examples<15>.

Cookie --- HTTP state management

* Cookie Objects: Cookie Objects<2>.
* Morsel Objects::
* Example: Example<11>.

xmlrpclib --- XML-RPC client access

* ServerProxy Objects::
* Boolean Objects::
* DateTime Objects::
* Binary Objects::
* Fault Objects::
* ProtocolError Objects::
* MultiCall Objects::
* Convenience Functions: Convenience Functions<2>.
* Example of Client Usage::
* Example of Client and Server Usage::

SimpleXMLRPCServer --- Basic XML-RPC server

* SimpleXMLRPCServer Objects::
* CGIXMLRPCRequestHandler::

SimpleXMLRPCServer Objects

* SimpleXMLRPCServer Example::

DocXMLRPCServer --- Self-documenting XML-RPC server

* DocXMLRPCServer Objects::
* DocCGIXMLRPCRequestHandler::


File: python.info,  Node: webbrowser --- Convenient Web-browser controller,  Next: cgi --- Common Gateway Interface support,  Up: Internet Protocols and Support

5.20.1 `webbrowser' -- Convenient Web-browser controller
--------------------------------------------------------

The *note webbrowser: 197. module provides a high-level interface to
allow displaying Web-based documents to users. Under most
circumstances, simply calling the *note open(): 1b51. function from
this module will do the right thing.

  Under Unix, graphical browsers are preferred under X11, but text-mode
browsers will be used if graphical browsers are not available or an X11
display isn't available.  If text-mode browsers are used, the calling
process will block until the user exits the browser.

  If the environment variable `BROWSER' exists, it is interpreted to
override the platform default list of browsers, as a *note os.pathsep:
62a.-separated list of browsers to try in order.  When the value of a
list part contains the string `%s', then it is  interpreted as a
literal browser command line to be used with the argument URL
substituted for `%s'; if the part does not contain `%s', it is simply
interpreted as the name of the browser to launch. (1)

  For non-Unix platforms, or when a remote browser is available on
Unix, the controlling process will not wait for the user to finish with
the browser, but allow the remote browser to maintain its own windows
on the display.  If remote browsers are not available on Unix, the
controlling process will launch a new browser and wait.

  The script *webbrowser* can be used as a command-line interface for
the module. It accepts an URL as the argument. It accepts the following
optional parameters: `-n' opens the URL in a new browser window, if
possible; `-t' opens the URL in a new browser page ("tab"). The options
are, naturally, mutually exclusive.

  The following exception is defined:

 -- Exception: webbrowser.Error
     Exception raised when a browser control error occurs.

  The following functions are defined:

 -- Function: webbrowser.open (url[, new=0[, autoraise=True]])
     Display _url_ using the default browser. If _new_ is 0, the _url_
     is opened in the same browser window if possible.  If _new_ is 1,
     a new browser window is opened if possible.  If _new_ is 2, a new
     browser page ("tab") is opened if possible.  If _autoraise_ is
     `True', the window is raised if possible (note that under many
     window managers this will occur regardless of the setting of this
     variable).

     Note that on some platforms, trying to open a filename using this
     function, may work and start the operating system's associated
     program.  However, this is neither supported nor portable.

     Changed in version 2.5: _new_ can now be 2.

 -- Function: webbrowser.open_new (url)
     Open _url_ in a new window of the default browser, if possible,
     otherwise, open _url_ in the only browser window.

 -- Function: webbrowser.open_new_tab (url)
     Open _url_ in a new page ("tab") of the default browser, if
     possible, otherwise equivalent to *note open_new(): 1b53.

     New in version 2.5.

 -- Function: webbrowser.get ([name])
     Return a controller object for the browser type _name_.  If _name_
     is empty, return a controller for a default browser appropriate to
     the caller's environment.

 -- Function: webbrowser.register (name, constructor[, instance])
     Register the browser type _name_.  Once a browser type is
     registered, the *note get(): 1b55. function can return a
     controller for that browser type.  If _instance_ is not provided,
     or is `None', _constructor_ will be called without parameters to
     create an instance when needed.  If _instance_ is provided,
     _constructor_ will never be called, and may be `None'.

     This entry point is only useful if you plan to either set the `BROWSER'
     variable or call *note get(): 1b55. with a nonempty argument
     matching the name of a handler you declare.

  A number of browser types are predefined.  This table gives the type
names that may be passed to the *note get(): 1b55. function and the
corresponding instantiations for the controller classes, all defined in
this module.

Type Name                   Class Name                                    Notes
-------------------------------------------------------------------------------------- 
`'mozilla''                 `Mozilla('mozilla')'                          
`'firefox''                 `Mozilla('mozilla')'                          
`'netscape''                `Mozilla('netscape')'                         
`'galeon''                  `Galeon('galeon')'                            
`'epiphany''                `Galeon('epiphany')'                          
`'skipstone''               `BackgroundBrowser('skipstone')'              
`'kfmclient''               `Konqueror()'                                 (1)
`'konqueror''               `Konqueror()'                                 (1)
`'kfm''                     `Konqueror()'                                 (1)
`'mosaic''                  `BackgroundBrowser('mosaic')'                 
`'opera''                   `Opera()'                                     
`'grail''                   `Grail()'                                     
`'links''                   `GenericBrowser('links')'                     
`'elinks''                  `Elinks('elinks')'                            
`'lynx''                    `GenericBrowser('lynx')'                      
`'w3m''                     `GenericBrowser('w3m')'                       
`'windows-default''         `WindowsDefault'                              (2)
`'internet-config''         `InternetConfig'                              (3)
`'macosx''                  `MacOSX('default')'                           (4)

  Notes:

  1. "Konqueror" is the file manager for the KDE desktop environment
     for Unix, and only makes sense to use if KDE is running.  Some way
     of reliably detecting KDE would be nice; the `KDEDIR' variable is
     not sufficient.  Note also that the name "kfm" is used even when
     using the *konqueror* command with KDE 2 -- the implementation
     selects the best strategy for running Konqueror.

  2. Only on Windows platforms.

  3. Only on Mac OS platforms; requires the standard MacPython *note
     ic: f0. module.

  4. Only on Mac OS X platform.

  Here are some simple examples:

    url = 'http://www.python.org/'

    # Open URL in a new tab, if a browser window is already open.
    webbrowser.open_new_tab(url + 'doc/')

    # Open URL in new window, raising the window if possible.
    webbrowser.open_new(url)


* Menu:

* Browser Controller Objects::

  ---------- Footnotes ----------

  (1) Executables named here without a full path will be searched in the
directories given in the `PATH' environment variable.


File: python.info,  Node: Browser Controller Objects,  Up: webbrowser --- Convenient Web-browser controller

5.20.1.1 Browser Controller Objects
...................................

Browser controllers provide these methods which parallel three of the
module-level convenience functions:

 -- Method: controller.open (url[, new=0[, autoraise=True]])
     Display _url_ using the browser handled by this controller. If
     _new_ is 1, a new browser window is opened if possible. If _new_
     is 2, a new browser page ("tab") is opened if possible.

 -- Method: controller.open_new (url)
     Open _url_ in a new window of the browser handled by this
     controller, if possible, otherwise, open _url_ in the only browser
     window.  Alias *note open_new(): 1b53.

 -- Method: controller.open_new_tab (url)
     Open _url_ in a new page ("tab") of the browser handled by this
     controller, if possible, otherwise equivalent to *note open_new():
     1b53.

     New in version 2.5.


File: python.info,  Node: cgi --- Common Gateway Interface support,  Next: cgitb --- Traceback manager for CGI scripts,  Prev: webbrowser --- Convenient Web-browser controller,  Up: Internet Protocols and Support

5.20.2 `cgi' -- Common Gateway Interface support
------------------------------------------------

Support module for Common Gateway Interface (CGI) scripts.

  This module defines a number of utilities for use by CGI scripts
written in Python.

* Menu:

* Introduction: Introduction<8>.
* Using the cgi module::
* Higher Level Interface::
* Old classes::
* Functions: Functions<5>.
* Caring about security::
* Installing your CGI script on a Unix system::
* Testing your CGI script::
* Debugging CGI scripts::
* Common problems and solutions::


File: python.info,  Node: Introduction<8>,  Next: Using the cgi module,  Up: cgi --- Common Gateway Interface support

5.20.2.1 Introduction
.....................

A CGI script is invoked by an HTTP server, usually to process user input
submitted through an HTML `<FORM>' or `<ISINDEX>' element.

  Most often, CGI scripts live in the server's special `cgi-bin'
directory.  The HTTP server places all sorts of information about the
request (such as the client's hostname, the requested URL, the query
string, and lots of other goodies) in the script's shell environment,
executes the script, and sends the script's output back to the client.

  The script's input is connected to the client too, and sometimes the
form data is read this way; at other times the form data is passed via
the "query string" part of the URL.  This module is intended to take
care of the different cases and provide a simpler interface to the
Python script.  It also provides a number of utilities that help in
debugging scripts, and the latest addition is support for file uploads
from a form (if your browser supports it).

  The output of a CGI script should consist of two sections, separated
by a blank line.  The first section contains a number of headers,
telling the client what kind of data is following.  Python code to
generate a minimal header section looks like this:

    print "Content-Type: text/html"     # HTML is following
    print                               # blank line, end of headers

The second section is usually HTML, which allows the client software to
display nicely formatted text with header, in-line images, etc. Here's
Python code that prints a simple piece of HTML:

    print "<TITLE>CGI script output</TITLE>"
    print "<H1>This is my first CGI script</H1>"
    print "Hello, world!"



File: python.info,  Node: Using the cgi module,  Next: Higher Level Interface,  Prev: Introduction<8>,  Up: cgi --- Common Gateway Interface support

5.20.2.2 Using the cgi module
.............................

Begin by writing `import cgi'.  Do not use `from cgi import *' -- the
module defines all sorts of names for its own use or for backward
compatibility that you don't want in your namespace.

  When you write a new script, consider adding these lines:

    import cgitb
    cgitb.enable()

This activates a special exception handler that will display detailed
reports in the Web browser if any errors occur.  If you'd rather not
show the guts of your program to users of your script, you can have the
reports saved to files instead, with code like this:

    import cgitb
    cgitb.enable(display=0, logdir="/tmp")

It's very helpful to use this feature during script development. The
reports produced by *note cgitb: 5e. provide information that can save
you a lot of time in tracking down bugs.  You can always remove the
`cgitb' line later when you have tested your script and are confident
that it works correctly.

  To get at submitted form data, it's best to use the `FieldStorage'
class.  The other classes defined in this module are provided mostly
for backward compatibility. Instantiate it exactly once, without
arguments.  This reads the form contents from standard input or the
environment (depending on the value of various environment variables
set according to the CGI standard).  Since it may consume standard
input, it should be instantiated only once.

  The `FieldStorage' instance can be indexed like a Python dictionary.
It allows membership testing with the *note in: 417. operator, and also
supports the standard dictionary method `keys()' and the built-in
function *note len(): 50a.  Form fields containing empty strings are
ignored and do not appear in the dictionary; to keep such values,
provide a true value for the optional _keep_blank_values_ keyword
parameter when creating the `FieldStorage' instance.

  For instance, the following code (which assumes that the
`Content-Type' header and blank line have already been printed) checks
that the fields `name' and `addr' are both set to a non-empty string:

    form = cgi.FieldStorage()
    if "name" not in form or "addr" not in form:
        print "<H1>Error</H1>"
        print "Please fill in the name and addr fields."
        return
    print "<p>name:", form["name"].value
    print "<p>addr:", form["addr"].value
    ...further form processing here...

Here the fields, accessed through `form[key]', are themselves instances
of `FieldStorage' (or `MiniFieldStorage', depending on the form
encoding). The `value' attribute of the instance yields the string value
of the field.  The `getvalue()' method returns this string value
directly; it also accepts an optional second argument as a default to
return if the requested key is not present.

  If the submitted form data contains more than one field with the same
name, the object retrieved by `form[key]' is not a `FieldStorage' or
`MiniFieldStorage' instance but a list of such instances.  Similarly, in
this situation, `form.getvalue(key)' would return a list of strings. If
you expect this possibility (when your HTML form contains multiple
fields with the same name), use the `getlist()' function, which always
returns a list of values (so that you do not need to special-case the
single item case).  For example, this code concatenates any number of
username fields, separated by commas:

    value = form.getlist("username")
    usernames = ",".join(value)

If a field represents an uploaded file, accessing the value via the
`value' attribute or the `getvalue()' method reads the entire file in
memory as a string.  This may not be what you want. You can test for an
uploaded file by testing either the `filename' attribute or the `file'
attribute.  You can then read the data at leisure from the `file'
attribute:

    fileitem = form["userfile"]
    if fileitem.file:
        # It's an uploaded file; count lines
        linecount = 0
        while 1:
            line = fileitem.file.readline()
            if not line: break
            linecount = linecount + 1

If an error is encountered when obtaining the contents of an uploaded
file (for example, when the user interrupts the form submission by
clicking on a Back or Cancel button) the `done' attribute of the object
for the field will be set to the value -1.

  The file upload draft standard entertains the possibility of
uploading multiple files from one field (using a recursive
`multipart/*' encoding).  When this occurs, the item will be a
dictionary-like `FieldStorage' item.  This can be determined by testing
its `type' attribute, which should be `multipart/form-data' (or perhaps
another MIME type matching `multipart/*').  In this case, it can be
iterated over recursively just like the top-level form object.

  When a form is submitted in the "old" format (as the query string or
as a single data part of type `application/x-www-form-urlencoded'), the
items will actually be instances of the class `MiniFieldStorage'.  In
this case, the `list', `file', and `filename' attributes are always
`None'.

  A form submitted via POST that also has a query string will contain
both `FieldStorage' and `MiniFieldStorage' items.


File: python.info,  Node: Higher Level Interface,  Next: Old classes,  Prev: Using the cgi module,  Up: cgi --- Common Gateway Interface support

5.20.2.3 Higher Level Interface
...............................

New in version 2.2.

  The previous section explains how to read CGI form data using the
`FieldStorage' class.  This section describes a higher level interface
which was added to this class to allow one to do it in a more readable
and intuitive way.  The interface doesn't make the techniques described
in previous sections obsolete -- they are still useful to process file
uploads efficiently, for example.

  The interface consists of two simple methods. Using the methods you
can process form data in a generic way, without the need to worry
whether only one or more values were posted under one name.

  In the previous section, you learned to write following code anytime
you expected a user to post more than one value under one name:

    item = form.getvalue("item")
    if isinstance(item, list):
        # The user is requesting more than one item.
    else:
        # The user is requesting only one item.

This situation is common for example when a form contains a group of
multiple checkboxes with the same name:

    <input type="checkbox" name="item" value="1" />
    <input type="checkbox" name="item" value="2" />

In most situations, however, there's only one form control with a
particular name in a form and then you expect and need only one value
associated with this name.  So you write a script containing for
example this code:

    user = form.getvalue("user").upper()

The problem with the code is that you should never expect that a client
will provide valid input to your scripts.  For example, if a curious
user appends another `user=foo' pair to the query string, then the
script would crash, because in this situation the `getvalue("user")'
method call returns a list instead of a string.  Calling the *note
upper(): 8a5. method on a list is not valid (since lists do not have a
method of this name) and results in an *note AttributeError: 1f5.
exception.

  Therefore, the appropriate way to read form data values was to always
use the code which checks whether the obtained value is a single value
or a list of values.  That's annoying and leads to less readable
scripts.

  A more convenient approach is to use the methods `getfirst()' and
`getlist()' provided by this higher level interface.

 -- Method: FieldStorage.getfirst (name[, default])
     This method always returns only one value associated with form
     field _name_.  The method returns only the first value in case
     that more values were posted under such name.  Please note that
     the order in which the values are received may vary from browser
     to browser and should not be counted on. (1)  If no such form
     field or value exists then the method returns the value specified
     by the optional parameter _default_.  This parameter defaults to
     `None' if not specified.

 -- Method: FieldStorage.getlist (name)
     This method always returns a list of values associated with form
     field _name_.  The method returns an empty list if no such form
     field or value exists for _name_.  It returns a list consisting of
     one item if only one such value exists.

  Using these methods you can write nice compact code:

    import cgi
    form = cgi.FieldStorage()
    user = form.getfirst("user", "").upper()    # This way it's safe.
    for item in form.getlist("item"):
        do_something(item)


  ---------- Footnotes ----------

  (1) Note that some recent versions of the HTML specification do state
what order the field values should be supplied in, but knowing whether
a request was received from a conforming browser, or even from a
browser at all, is tedious and error-prone.


File: python.info,  Node: Old classes,  Next: Functions<5>,  Prev: Higher Level Interface,  Up: cgi --- Common Gateway Interface support

5.20.2.4 Old classes
....................

Deprecated since version 2.6.

  `SvFormContentDict' stores single value form content as dictionary; it
assumes each field name occurs in the form only once.

  `FormContentDict' stores multiple value form content as a dictionary
(the form items are lists of values).  Useful if your form contains
multiple fields with the same name.

  Other classes (`FormContent', `InterpFormContentDict') are present
for backwards compatibility with really old applications only.


File: python.info,  Node: Functions<5>,  Next: Caring about security,  Prev: Old classes,  Up: cgi --- Common Gateway Interface support

5.20.2.5 Functions
..................

These are useful if you want more control, or if you want to employ
some of the algorithms implemented in this module in other
circumstances.

 -- Function: cgi.parse (fp[, keep_blank_values[, strict_parsing]])
     Parse a query in the environment or from a file (the file defaults
     to `sys.stdin').  The _keep_blank_values_ and _strict_parsing_
     parameters are passed to *note urlparse.parse_qs(): 1b69.
     unchanged.

 -- Function: cgi.parse_qs (qs[, keep_blank_values[, strict_parsing]])
     This function is deprecated in this module. Use *note
     urlparse.parse_qs(): 1b69.  instead. It is maintained here only
     for backward compatiblity.

 -- Function: cgi.parse_qsl (qs[, keep_blank_values[, strict_parsing]])
     This function is deprecated in this module. Use *note
     urlparse.parse_qsl(): 1b6c.  instead. It is maintained here only
     for backward compatiblity.

 -- Function: cgi.parse_multipart (fp, pdict)
     Parse input of type `multipart/form-data' (for  file uploads).
     Arguments are _fp_ for the input file and _pdict_ for a dictionary
     containing other parameters in the `Content-Type' header.

     Returns a dictionary just like *note urlparse.parse_qs(): 1b69.
     keys are the field names, each value is a list of values for that
     field.  This is easy to use but not much good if you are expecting
     megabytes to be uploaded -- in that case, use the `FieldStorage'
     class instead which is much more flexible.

     Note that this does not parse nested multipart parts -- use
     `FieldStorage' for that.

 -- Function: cgi.parse_header (string)
     Parse a MIME header (such as `Content-Type') into a main value and
     a dictionary of parameters.

 -- Function: cgi.test ()
     Robust test CGI script, usable as main program. Writes minimal
     HTTP headers and formats all information provided to the script in
     HTML form.

 -- Function: cgi.print_environ ()
     Format the shell environment in HTML.

 -- Function: cgi.print_form (form)
     Format a form in HTML.

 -- Function: cgi.print_directory ()
     Format the current directory in HTML.

 -- Function: cgi.print_environ_usage ()
     Print a list of useful (used by CGI) environment variables in HTML.

 -- Function: cgi.escape (s[, quote])
     Convert the characters `'&'', `'<'' and `'>'' in string _s_ to
     HTML-safe sequences.  Use this if you need to display text that
     might contain such characters in HTML.  If the optional flag
     _quote_ is true, the quotation mark character (`"') is also
     translated; this helps for inclusion in an HTML attribute value
     delimited by double quotes, as in `<a href="...">'.  Note that
     single quotes are never translated.

     If the value to be quoted might include single- or double-quote
     characters, or both, consider using the *note quoteattr(): 1ac6.
     function in the *note xml.sax.saxutils: 1a8. module instead.


File: python.info,  Node: Caring about security,  Next: Installing your CGI script on a Unix system,  Prev: Functions<5>,  Up: cgi --- Common Gateway Interface support

5.20.2.6 Caring about security
..............................

There's one important rule: if you invoke an external program (via the
*note os.system(): 3e9. or *note os.popen(): 6d7. functions. or others
with similar functionality), make very sure you don't pass arbitrary
strings received from the client to the shell.  This is a well-known
security hole whereby clever hackers anywhere on the Web can exploit a
gullible CGI script to invoke arbitrary shell commands.  Even parts of
the URL or field names cannot be trusted, since the request doesn't
have to come from your form!

  To be on the safe side, if you must pass a string gotten from a form
to a shell command, you should make sure the string contains only
alphanumeric characters, dashes, underscores, and periods.


File: python.info,  Node: Installing your CGI script on a Unix system,  Next: Testing your CGI script,  Prev: Caring about security,  Up: cgi --- Common Gateway Interface support

5.20.2.7 Installing your CGI script on a Unix system
....................................................

Read the documentation for your HTTP server and check with your local
system administrator to find the directory where CGI scripts should be
installed; usually this is in a directory `cgi-bin' in the server tree.

  Make sure that your script is readable and executable by "others";
the Unix file mode should be `0755' octal (use `chmod 0755 filename').
Make sure that the first line of the script contains `#!' starting in
column 1 followed by the pathname of the Python interpreter, for
instance:

    #!/usr/local/bin/python

Make sure the Python interpreter exists and is executable by "others".

  Make sure that any files your script needs to read or write are
readable or writable, respectively, by "others" -- their mode should be
`0644' for readable and `0666' for writable.  This is because, for
security reasons, the HTTP server executes your script as user
"nobody", without any special privileges.  It can only read (write,
execute) files that everybody can read (write, execute).  The current
directory at execution time is also different (it is usually the
server's cgi-bin directory) and the set of environment variables is
also different from what you get when you log in.  In particular, don't
count on the shell's search path for executables ( `PATH') or the
Python module search path ( *note PYTHONPATH: 564.) to be set to
anything interesting.

  If you need to load modules from a directory which is not on Python's
default module search path, you can change the path in your script,
before importing other modules.  For example:

    import sys
    sys.path.insert(0, "/usr/home/joe/lib/python")
    sys.path.insert(0, "/usr/local/lib/python")

(This way, the directory inserted last will be searched first!)

  Instructions for non-Unix systems will vary; check your HTTP server's
documentation (it will usually have a section on CGI scripts).


File: python.info,  Node: Testing your CGI script,  Next: Debugging CGI scripts,  Prev: Installing your CGI script on a Unix system,  Up: cgi --- Common Gateway Interface support

5.20.2.8 Testing your CGI script
................................

Unfortunately, a CGI script will generally not run when you try it from
the command line, and a script that works perfectly from the command
line may fail mysteriously when run from the server.  There's one
reason why you should still test your script from the command line: if
it contains a syntax error, the Python interpreter won't execute it at
all, and the HTTP server will most likely send a cryptic error to the
client.

  Assuming your script has no syntax errors, yet it does not work, you
have no choice but to read the next section.


File: python.info,  Node: Debugging CGI scripts,  Next: Common problems and solutions,  Prev: Testing your CGI script,  Up: cgi --- Common Gateway Interface support

5.20.2.9 Debugging CGI scripts
..............................

First of all, check for trivial installation errors -- reading the
section above on installing your CGI script carefully can save you a
lot of time.  If you wonder whether you have understood the
installation procedure correctly, try installing a copy of this module
file (`cgi.py') as a CGI script.  When invoked as a script, the file
will dump its environment and the contents of the form in HTML form.
Give it the right mode etc, and send it a request.  If it's installed
in the standard `cgi-bin' directory, it should be possible to send it a
request by entering a URL into your browser of the form:

    http://yourhostname/cgi-bin/cgi.py?name=Joe+Blow&addr=At+Home

If this gives an error of type 404, the server cannot find the script -
perhaps you need to install it in a different directory.  If it gives
another error, there's an installation problem that you should fix
before trying to go any further.  If you get a nicely formatted listing
of the environment and form content (in this example, the fields should
be listed as "addr" with value "At Home" and "name" with value "Joe
Blow"), the `cgi.py' script has been installed correctly.  If you
follow the same procedure for your own script, you should now be able
to debug it.

  The next step could be to call the *note cgi: 5c. module's *note
test(): 176. function from your script: replace its main code with the
single statement

    cgi.test()

This should produce the same results as those gotten from installing the
`cgi.py' file itself.

  When an ordinary Python script raises an unhandled exception (for
whatever reason: of a typo in a module name, a file that can't be
opened, etc.), the Python interpreter prints a nice traceback and
exits.  While the Python interpreter will still do this when your CGI
script raises an exception, most likely the traceback will end up in
one of the HTTP server's log files, or be discarded altogether.

  Fortunately, once you have managed to get your script to execute
_some_ code, you can easily send tracebacks to the Web browser using
the *note cgitb: 5e. module.  If you haven't done so already, just add
the lines:

    import cgitb
    cgitb.enable()

to the top of your script.  Then try running it again; when a problem
occurs, you should see a detailed report that will likely make apparent
the cause of the crash.

  If you suspect that there may be a problem in importing the *note
cgitb: 5e. module, you can use an even more robust approach (which only
uses built-in modules):

    import sys
    sys.stderr = sys.stdout
    print "Content-Type: text/plain"
    print
    ...your code here...

This relies on the Python interpreter to print the traceback.  The
content type of the output is set to plain text, which disables all
HTML processing.  If your script works, the raw HTML will be displayed
by your client.  If it raises an exception, most likely after the first
two lines have been printed, a traceback will be displayed. Because no
HTML interpretation is going on, the traceback will be readable.


File: python.info,  Node: Common problems and solutions,  Prev: Debugging CGI scripts,  Up: cgi --- Common Gateway Interface support

5.20.2.10 Common problems and solutions
.......................................

   * Most HTTP servers buffer the output from CGI scripts until the
     script is completed.  This means that it is not possible to
     display a progress report on the client's display while the script
     is running.

   * Check the installation instructions above.

   * Check the HTTP server's log files.  (`tail -f logfile' in a
     separate window may be useful!)

   * Always check a script for syntax errors first, by doing something
     like `python script.py'.

   * If your script does not have any syntax errors, try adding `import
     cgitb; cgitb.enable()' to the top of the script.

   * When invoking external programs, make sure they can be found.
     Usually, this means using absolute path names -- `PATH' is usually
     not set to a very useful value in a CGI script.

   * When reading or writing external files, make sure they can be read
     or written by the userid under which your CGI script will be
     running: this is typically the userid under which the web server
     is running, or some explicitly specified userid for a web server's
     `suexec' feature.

   * Don't try to give a CGI script a set-uid mode.  This doesn't work
     on most systems, and is a security liability as well.


File: python.info,  Node: cgitb --- Traceback manager for CGI scripts,  Next: wsgiref --- WSGI Utilities and Reference Implementation,  Prev: cgi --- Common Gateway Interface support,  Up: Internet Protocols and Support

5.20.3 `cgitb' -- Traceback manager for CGI scripts
---------------------------------------------------

New in version 2.2.

  The *note cgitb: 5e. module provides a special exception handler for
Python scripts.  (Its name is a bit misleading.  It was originally
designed to display extensive traceback information in HTML for CGI
scripts.  It was later generalized to also display this information in
plain text.)  After this module is activated, if an uncaught exception
occurs, a detailed, formatted report will be displayed.  The report
includes a traceback showing excerpts of the source code for each level,
as well as the values of the arguments and local variables to currently
running functions, to help you debug the problem.  Optionally, you can
save this information to a file instead of sending it to the browser.

  To enable this feature, simply add this to the top of your CGI script:

    import cgitb
    cgitb.enable()

The options to the *note enable(): 1b7d. function control whether the
report is displayed in the browser and whether the report is logged to
a file for later analysis.

 -- Function: cgitb.enable ([display[, logdir[, context[, format]]]])
     This function causes the *note cgitb: 5e. module to take over the
     interpreter's default handling for exceptions by setting the value
     of *note sys.excepthook: 4b9.

     The optional argument _display_ defaults to `1' and can be set to
     `0' to suppress sending the traceback to the browser. If the
     argument _logdir_ is present, the traceback reports are written to
     files.  The value of _logdir_ should be a directory where these
     files will be placed. The optional argument _context_ is the
     number of lines of context to display around the current line of
     source code in the traceback; this defaults to `5'. If the optional
     argument _format_ is `"html"', the output is formatted as HTML.
     Any other value forces plain text output.  The default value is
     `"html"'.

 -- Function: cgitb.handler ([info])
     This function handles an exception using the default settings
     (that is, show a report in the browser, but don't log to a file).
     This can be used when you've caught an exception and want to
     report it using *note cgitb: 5e.  The optional _info_ argument
     should be a 3-tuple containing an exception type, exception value,
     and traceback object, exactly like the tuple returned by *note
     sys.exc_info(): 2e4.  If the _info_ argument is not supplied, the
     current exception is obtained from *note sys.exc_info(): 2e4.


File: python.info,  Node: wsgiref --- WSGI Utilities and Reference Implementation,  Next: urllib --- Open arbitrary resources by URL,  Prev: cgitb --- Traceback manager for CGI scripts,  Up: Internet Protocols and Support

5.20.4 `wsgiref' -- WSGI Utilities and Reference Implementation
---------------------------------------------------------------

New in version 2.5.

  The Web Server Gateway Interface (WSGI) is a standard interface
between web server software and web applications written in Python.
Having a standard interface makes it easy to use an application that
supports WSGI with a number of different web servers.

  Only authors of web servers and programming frameworks need to know
every detail and corner case of the WSGI design.  You don't need to
understand every detail of WSGI just to install a WSGI application or
to write a web application using an existing framework.

  *note wsgiref: 19a. is a reference implementation of the WSGI
specification that can be used to add WSGI support to a web server or
framework.  It provides utilities for manipulating WSGI environment
variables and response headers, base classes for implementing WSGI
servers, a demo HTTP server that serves WSGI applications, and a
validation tool that checks WSGI servers and applications for
conformance to the WSGI specification ( PEP 333(1)).

  See <http://www.wsgi.org> for more information about WSGI, and links
to tutorials and other resources.

* Menu:

* wsgiref.util: wsgiref util -- WSGI environment utilities. WSGI environment utilities
* wsgiref.headers: wsgiref headers -- WSGI response header tools. WSGI response header tools
* wsgiref.simple_server: wsgiref simple_server -- a simple WSGI HTTP server. a simple WSGI HTTP server
* wsgiref.validate: wsgiref validate --- WSGI conformance checker. WSGI conformance checker
* wsgiref.handlers: wsgiref handlers -- server/gateway base classes. server/gateway base classes
* Examples: Examples<10>.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0333


File: python.info,  Node: wsgiref util -- WSGI environment utilities,  Next: wsgiref headers -- WSGI response header tools,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.20.4.1 `wsgiref.util' - WSGI environment utilities
....................................................

This module provides a variety of utility functions for working with
WSGI environments.  A WSGI environment is a dictionary containing HTTP
request variables as described in PEP 333(1).  All of the functions
taking an _environ_ parameter expect a WSGI-compliant dictionary to be
supplied; please see PEP 333(2) for a detailed specification.

 -- Function: wsgiref.util.guess_scheme (environ)
     Return a guess for whether `wsgi.url_scheme' should be "http" or
     "https", by checking for a `HTTPS' environment variable in the
     _environ_ dictionary.  The return value is a string.

     This function is useful when creating a gateway that wraps CGI or
     a CGI-like protocol such as FastCGI.  Typically, servers providing
     such protocols will include a `HTTPS' variable with a value of "1"
     "yes", or "on" when a request is received via SSL.  So, this
     function returns "https" if such a value is found, and "http"
     otherwise.

 -- Function: wsgiref.util.request_uri (environ[, include_query=1])
     Return the full request URI, optionally including the query
     string, using the algorithm found in the "URL Reconstruction"
     section of PEP 333(3).  If _include_query_ is false, the query
     string is not included in the resulting URI.

 -- Function: wsgiref.util.application_uri (environ)
     Similar to *note request_uri(): 1b83, except that the `PATH_INFO'
     and `QUERY_STRING' variables are ignored.  The result is the base
     URI of the application object addressed by the request.

 -- Function: wsgiref.util.shift_path_info (environ)
     Shift a single name from `PATH_INFO' to `SCRIPT_NAME' and return
     the name.  The _environ_ dictionary is _modified_ in-place; use a
     copy if you need to keep the original `PATH_INFO' or `SCRIPT_NAME'
     intact.

     If there are no remaining path segments in `PATH_INFO', `None' is
     returned.

     Typically, this routine is used to process each portion of a
     request URI path, for example to treat the path as a series of
     dictionary keys. This routine modifies the passed-in environment
     to make it suitable for invoking another WSGI application that is
     located at the target URI. For example, if there is a WSGI
     application at `/foo', and the request URI path is `/foo/bar/baz',
     and the WSGI application at `/foo' calls *note shift_path_info():
     1b85, it will receive the string "bar", and the environment will
     be updated to be suitable for passing to a WSGI application at
     `/foo/bar'.  That is, `SCRIPT_NAME' will change from `/foo' to
     `/foo/bar', and `PATH_INFO' will change from `/bar/baz' to `/baz'.

     When `PATH_INFO' is just a "/", this routine returns an empty
     string and appends a trailing slash to `SCRIPT_NAME', even though
     empty path segments are normally ignored, and `SCRIPT_NAME'
     doesn't normally end in a slash.  This is intentional behavior, to
     ensure that an application can tell the difference between URIs
     ending in `/x' from ones ending in `/x/' when using this routine
     to do object traversal.

 -- Function: wsgiref.util.setup_testing_defaults (environ)
     Update _environ_ with trivial defaults for testing purposes.

     This routine adds various parameters required for WSGI, including
     `HTTP_HOST', `SERVER_NAME', `SERVER_PORT', `REQUEST_METHOD',
     `SCRIPT_NAME', `PATH_INFO', and all of the PEP 333(4)-defined
     `wsgi.*' variables.  It only supplies default values, and does not
     replace any existing settings for these variables.

     This routine is intended to make it easier for unit tests of WSGI
     servers and applications to set up dummy environments.  It should
     NOT be used by actual WSGI servers or applications, since the data
     is fake!

     Example usage:

         from wsgiref.util import setup_testing_defaults
         from wsgiref.simple_server import make_server

         # A relatively simple WSGI application. It's going to print out the
         # environment dictionary after being updated by setup_testing_defaults
         def simple_app(environ, start_response):
             setup_testing_defaults(environ)

             status = '200 OK'
             headers = [('Content-type', 'text/plain')]

             start_response(status, headers)

             ret = ["%s: %s\n" % (key, value)
                    for key, value in environ.iteritems()]
             return ret

         httpd = make_server('', 8000, simple_app)
         print "Serving on port 8000..."
         httpd.serve_forever()



  In addition to the environment functions above, the *note
wsgiref.util: 19e. module also provides these miscellaneous utilities:

 -- Function: wsgiref.util.is_hop_by_hop (header_name)
     Return true if 'header_name' is an HTTP/1.1 "Hop-by-Hop" header,
     as defined by RFC 2616(5).

 -- Class: wsgiref.util.FileWrapper (filelike[, blksize=8192])
     A wrapper to convert a file-like object to an *note iterator: 84a.
     The resulting objects support both *note __getitem__(): 43e. and
     *note __iter__(): 310. iteration styles, for compatibility with
     Python 2.1 and Jython. As the object is iterated over, the
     optional _blksize_ parameter will be repeatedly passed to the
     _filelike_ object's `read()' method to obtain strings to yield.
     When `read()' returns an empty string, iteration is ended and is
     not resumable.

     If _filelike_ has a `close()' method, the returned object will
     also have a `close()' method, and it will invoke the _filelike_
     object's `close()' method when called.

     Example usage:

         from StringIO import StringIO
         from wsgiref.util import FileWrapper

         # We're using a StringIO-buffer for as the file-like object
         filelike = StringIO("This is an example file-like object"*10)
         wrapper = FileWrapper(filelike, blksize=5)

         for chunk in wrapper:
             print chunk



  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0333

  (2) http://www.python.org/dev/peps/pep-0333

  (3) http://www.python.org/dev/peps/pep-0333

  (4) http://www.python.org/dev/peps/pep-0333

  (5) http://tools.ietf.org/html/rfc2616.html


File: python.info,  Node: wsgiref headers -- WSGI response header tools,  Next: wsgiref simple_server -- a simple WSGI HTTP server,  Prev: wsgiref util -- WSGI environment utilities,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.20.4.2 `wsgiref.headers' - WSGI response header tools
.......................................................

This module provides a single class, *note Headers: 1b8a, for convenient
manipulation of WSGI response headers using a mapping-like interface.

 -- Class: wsgiref.headers.Headers (headers)
     Create a mapping-like object wrapping _headers_, which must be a
     list of header name/value tuples as described in PEP 333(1).  Any
     changes made to the new *note Headers: 1b8a. object will directly
     update the _headers_ list it was created with.

     *note Headers: 1b8a. objects support typical mapping operations
     including *note __getitem__(): 43e, `get()', *note __setitem__():
     454, `setdefault()', *note __delitem__(): 455, *note
     __contains__(): 311. and `has_key()'.  For each of these methods,
     the key is the header name (treated case-insensitively), and the
     value is the first value associated with that header name.
     Setting a header deletes any existing values for that header, then
     adds a new value at the end of the wrapped header list.  Headers'
     existing order is generally maintained, with new headers added to
     the end of the wrapped list.

     Unlike a dictionary, *note Headers: 1b8a. objects do not raise an
     error when you try to get or delete a key that isn't in the
     wrapped header list. Getting a nonexistent header just returns
     `None', and deleting a nonexistent header does nothing.

     *note Headers: 1b8a. objects also support `keys()', `values()', and
     `items()' methods.  The lists returned by `keys()' and `items()'
     can include the same key more than once if there is a multi-valued
     header.  The `len()' of a *note Headers: 1b8a. object is the same
     as the length of its `items()', which is the same as the length of
     the wrapped header list.  In fact, the `items()' method just
     returns a copy of the wrapped header list.

     Calling `str()' on a *note Headers: 1b8a. object returns a
     formatted string suitable for transmission as HTTP response
     headers.  Each header is placed on a line with its value,
     separated by a colon and a space. Each line is terminated by a
     carriage return and line feed, and the string is terminated with a
     blank line.

     In addition to their mapping interface and formatting features,
     *note Headers: 1b8a.  objects also have the following methods for
     querying and adding multi-valued headers, and for adding headers
     with MIME parameters:

      -- Method: get_all (name)
          Return a list of all the values for the named header.

          The returned list will be sorted in the order they appeared
          in the original header list or were added to this instance,
          and may contain duplicates.  Any fields deleted and
          re-inserted are always appended to the header list.  If no
          fields exist with the given name, returns an empty list.

      -- Method: add_header (name, value, **_params)
          Add a (possibly multi-valued) header, with optional MIME
          parameters specified via keyword arguments.

          _name_ is the header field to add.  Keyword arguments can be
          used to set MIME parameters for the header field.  Each
          parameter must be a string or `None'.  Underscores in
          parameter names are converted to dashes, since dashes are
          illegal in Python identifiers, but many MIME parameter names
          include dashes.  If the parameter value is a string, it is
          added to the header value parameters in the form
          `name="value"'. If it is `None', only the parameter name is
          added.  (This is used for MIME parameters without a value.)
          Example usage:

              h.add_header('content-disposition', 'attachment', filename='bud.gif')

          The above will add a header that looks like this:

              Content-Disposition: attachment; filename="bud.gif"



  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0333


File: python.info,  Node: wsgiref simple_server -- a simple WSGI HTTP server,  Next: wsgiref validate --- WSGI conformance checker,  Prev: wsgiref headers -- WSGI response header tools,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.20.4.3 `wsgiref.simple_server' - a simple WSGI HTTP server
............................................................

This module implements a simple HTTP server (based on *note
BaseHTTPServer: 16.)  that serves WSGI applications.  Each server
instance serves a single WSGI application on a given host and port.  If
you want to serve multiple applications on a single host and port, you
should create a WSGI application that parses `PATH_INFO' to select
which application to invoke for each request.  (E.g., using the
`shift_path_info()' function from *note wsgiref.util: 19e.)

 -- Function: wsgiref.simple_server.make_server (host, port, app[,
          server_class=WSGIServer[, handler_class=WSGIRequestHandler]])
     Create a new WSGI server listening on _host_ and _port_, accepting
     connections for _app_.  The return value is an instance of the
     supplied _server_class_, and will process requests using the
     specified _handler_class_.  _app_ must be a WSGI application
     object, as defined by PEP 333(1).

     Example usage:

         from wsgiref.simple_server import make_server, demo_app

         httpd = make_server('', 8000, demo_app)
         print "Serving HTTP on port 8000..."

         # Respond to requests until process is killed
         httpd.serve_forever()

         # Alternative: serve one request, then exit
         httpd.handle_request()



 -- Function: wsgiref.simple_server.demo_app (environ, start_response)
     This function is a small but complete WSGI application that
     returns a text page containing the message "Hello world!" and a
     list of the key/value pairs provided in the _environ_ parameter.
     It's useful for verifying that a WSGI server (such as *note
     wsgiref.simple_server: 19d.) is able to run a simple WSGI
     application correctly.

 -- Class: wsgiref.simple_server.WSGIServer (server_address,
          RequestHandlerClass)
     Create a *note WSGIServer: 1b90. instance.  _server_address_
     should be a `(host,port)' tuple, and _RequestHandlerClass_ should
     be the subclass of *note BaseHTTPServer.BaseHTTPRequestHandler:
     1b91. that will be used to process requests.

     You do not normally need to call this constructor, as the *note
     make_server(): 1b8e.  function can handle all the details for you.

     *note WSGIServer: 1b90. is a subclass of *note
     BaseHTTPServer.HTTPServer: 1b92, so all of its methods (such as
     `serve_forever()' and `handle_request()') are available. *note
     WSGIServer: 1b90. also provides these WSGI-specific methods:

      -- Method: set_app (application)
          Sets the callable _application_ as the WSGI application that
          will receive requests.

      -- Method: get_app ()
          Returns the currently-set application callable.

     Normally, however, you do not need to use these additional
     methods, as *note set_app(): 1b93. is normally called by *note
     make_server(): 1b8e, and the *note get_app(): 1b94. exists mainly
     for the benefit of request handler instances.

 -- Class: wsgiref.simple_server.WSGIRequestHandler (request,
          client_address, server)
     Create an HTTP handler for the given _request_ (i.e. a socket),
     _client_address_ (a `(host,port)' tuple), and _server_ (*note
     WSGIServer: 1b90. instance).

     You do not need to create instances of this class directly; they
     are automatically created as needed by *note WSGIServer: 1b90.
     objects.  You can, however, subclass this class and supply it as a
     _handler_class_ to the *note make_server(): 1b8e. function.  Some
     possibly relevant methods for overriding in subclasses:

      -- Method: get_environ ()
          Returns a dictionary containing the WSGI environment for a
          request.  The default implementation copies the contents of
          the *note WSGIServer: 1b90. object's `base_environ'
          dictionary attribute and then adds various headers derived
          from the HTTP request.  Each call to this method should
          return a new dictionary containing all of the relevant CGI
          environment variables as specified in PEP 333(2).

      -- Method: get_stderr ()
          Return the object that should be used as the `wsgi.errors'
          stream. The default implementation just returns `sys.stderr'.

      -- Method: handle ()
          Process the HTTP request.  The default implementation creates
          a handler instance using a *note wsgiref.handlers: 19b. class
          to implement the actual WSGI application interface.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0333

  (2) http://www.python.org/dev/peps/pep-0333


File: python.info,  Node: wsgiref validate --- WSGI conformance checker,  Next: wsgiref handlers -- server/gateway base classes,  Prev: wsgiref simple_server -- a simple WSGI HTTP server,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.20.4.4 `wsgiref.validate' -- WSGI conformance checker
.......................................................

When creating new WSGI application objects, frameworks, servers, or
middleware, it can be useful to validate the new code's conformance
using *note wsgiref.validate: 19f.  This module provides a function
that creates WSGI application objects that validate communications
between a WSGI server or gateway and a WSGI application object, to
check both sides for protocol conformance.

  Note that this utility does not guarantee complete PEP 333(1)
compliance; an absence of errors from this module does not necessarily
mean that errors do not exist.  However, if this module does produce an
error, then it is virtually certain that either the server or
application is not 100% compliant.

  This module is based on the `paste.lint' module from Ian Bicking's
"Python Paste" library.

 -- Function: wsgiref.validate.validator (application)
     Wrap _application_ and return a new WSGI application object.  The
     returned application will forward all requests to the original
     _application_, and will check that both the _application_ and the
     server invoking it are conforming to the WSGI specification and to
     RFC 2616.

     Any detected nonconformance results in an *note AssertionError:
     7dd. being raised; note, however, that how these errors are
     handled is server-dependent.  For example, *note
     wsgiref.simple_server: 19d. and other servers based on *note
     wsgiref.handlers: 19b. (that don't override the error handling
     methods to do something else) will simply output a message that an
     error has occurred, and dump the traceback to `sys.stderr' or some
     other error stream.

     This wrapper may also generate output using the *note warnings:
     194. module to indicate behaviors that are questionable but which
     may not actually be prohibited by PEP 333(2).  Unless they are
     suppressed using Python command-line options or the *note
     warnings: 194. API, any such warnings will be written to
     `sys.stderr' (_not_ `wsgi.errors', unless they happen to be the
     same object).

     Example usage:

         from wsgiref.validate import validator
         from wsgiref.simple_server import make_server

         # Our callable object which is intentionally not compliant to the
         # standard, so the validator is going to break
         def simple_app(environ, start_response):
             status = '200 OK' # HTTP Status
             headers = [('Content-type', 'text/plain')] # HTTP Headers
             start_response(status, headers)

             # This is going to break because we need to return a list, and
             # the validator is going to inform us
             return "Hello World"

         # This is the application wrapped in a validator
         validator_app = validator(simple_app)

         httpd = make_server('', 8000, validator_app)
         print "Listening on port 8000...."
         httpd.serve_forever()



  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0333

  (2) http://www.python.org/dev/peps/pep-0333


File: python.info,  Node: wsgiref handlers -- server/gateway base classes,  Next: Examples<10>,  Prev: wsgiref validate --- WSGI conformance checker,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.20.4.5 `wsgiref.handlers' - server/gateway base classes
.........................................................

This module provides base handler classes for implementing WSGI servers
and gateways.  These base classes handle most of the work of
communicating with a WSGI application, as long as they are given a
CGI-like environment, along with input, output, and error streams.

 -- Class: wsgiref.handlers.CGIHandler
     CGI-based invocation via `sys.stdin', `sys.stdout', `sys.stderr'
     and `os.environ'.  This is useful when you have a WSGI application
     and want to run it as a CGI script.  Simply invoke
     `CGIHandler().run(app)', where `app' is the WSGI application
     object you wish to invoke.

     This class is a subclass of *note BaseCGIHandler: 1b9d. that sets
     `wsgi.run_once' to true, `wsgi.multithread' to false, and
     `wsgi.multiprocess' to true, and always uses *note sys: 16e. and
     *note os: 129. to obtain the necessary CGI streams and environment.

 -- Class: wsgiref.handlers.BaseCGIHandler (stdin, stdout, stderr,
          environ[, multithread=True[, multiprocess=False]])
     Similar to *note CGIHandler: 1b9c, but instead of using the *note
     sys: 16e. and *note os: 129. modules, the CGI environment and I/O
     streams are specified explicitly.  The _multithread_ and
     _multiprocess_ values are used to set the `wsgi.multithread' and
     `wsgi.multiprocess' flags for any applications run by the handler
     instance.

     This class is a subclass of *note SimpleHandler: 1b9e. intended
     for use with software other than HTTP "origin servers".  If you
     are writing a gateway protocol implementation (such as CGI,
     FastCGI, SCGI, etc.) that uses a `Status:' header to send an HTTP
     status, you probably want to subclass this instead of *note
     SimpleHandler: 1b9e.

 -- Class: wsgiref.handlers.SimpleHandler (stdin, stdout, stderr,
          environ[, multithread=True[, multiprocess=False]])
     Similar to *note BaseCGIHandler: 1b9d, but designed for use with
     HTTP origin servers.  If you are writing an HTTP server
     implementation, you will probably want to subclass this instead of
     *note BaseCGIHandler: 1b9d.

     This class is a subclass of *note BaseHandler: 1b9f.  It overrides
     the *note __init__(): 36b, `get_stdin()', `get_stderr()',
     `add_cgi_vars()', `_write()', and `_flush()' methods to support
     explicitly setting the environment and streams via the
     constructor.  The supplied environment and streams are stored in
     the `stdin', `stdout', `stderr', and `environ' attributes.

 -- Class: wsgiref.handlers.BaseHandler
     This is an abstract base class for running WSGI applications.
     Each instance will handle a single HTTP request, although in
     principle you could create a subclass that was reusable for
     multiple requests.

     *note BaseHandler: 1b9f. instances have only one method intended
     for external use:

      -- Method: run (app)
          Run the specified WSGI application, _app_.

     All of the other *note BaseHandler: 1b9f. methods are invoked by
     this method in the process of running the application, and thus
     exist primarily to allow customizing the process.

     The following methods MUST be overridden in a subclass:

      -- Method: _write (data)
          Buffer the string _data_ for transmission to the client.
          It's okay if this method actually transmits the data; *note
          BaseHandler: 1b9f. just separates write and flush operations
          for greater efficiency when the underlying system actually
          has such a distinction.

      -- Method: _flush ()
          Force buffered data to be transmitted to the client.  It's
          okay if this method is a no-op (i.e., if *note _write():
          1ba1. actually sends the data).

      -- Method: get_stdin ()
          Return an input stream object suitable for use as the
          `wsgi.input' of the request currently being processed.

      -- Method: get_stderr ()
          Return an output stream object suitable for use as the
          `wsgi.errors' of the request currently being processed.

      -- Method: add_cgi_vars ()
          Insert CGI variables for the current request into the
          `environ' attribute.

     Here are some other methods and attributes you may wish to
     override. This list is only a summary, however, and does not
     include every method that can be overridden.  You should consult
     the docstrings and source code for additional information before
     attempting to create a customized *note BaseHandler: 1b9f.
     subclass.

     Attributes and methods for customizing the WSGI environment:

      -- Attribute: wsgi_multithread
          The value to be used for the `wsgi.multithread' environment
          variable.  It defaults to true in *note BaseHandler: 1b9f,
          but may have a different default (or be set by the
          constructor) in the other subclasses.

      -- Attribute: wsgi_multiprocess
          The value to be used for the `wsgi.multiprocess' environment
          variable.  It defaults to true in *note BaseHandler: 1b9f,
          but may have a different default (or be set by the
          constructor) in the other subclasses.

      -- Attribute: wsgi_run_once
          The value to be used for the `wsgi.run_once' environment
          variable.  It defaults to false in *note BaseHandler: 1b9f,
          but *note CGIHandler: 1b9c. sets it to true by default.

      -- Attribute: os_environ
          The default environment variables to be included in every
          request's WSGI environment.  By default, this is a copy of
          `os.environ' at the time that *note wsgiref.handlers: 19b.
          was imported, but subclasses can either create their own at
          the class or instance level.  Note that the dictionary should
          be considered read-only, since the default value is shared
          between multiple classes and instances.

      -- Attribute: server_software
          If the *note origin_server: 1bab. attribute is set, this
          attribute's value is used to set the default
          `SERVER_SOFTWARE' WSGI environment variable, and also to set a
          default `Server:' header in HTTP responses.  It is ignored
          for handlers (such as *note BaseCGIHandler: 1b9d. and *note
          CGIHandler: 1b9c.) that are not HTTP origin servers.

      -- Method: get_scheme ()
          Return the URL scheme being used for the current request.
          The default implementation uses the `guess_scheme()' function
          from *note wsgiref.util: 19e.  to guess whether the scheme
          should be "http" or "https", based on the current request's
          `environ' variables.

      -- Method: setup_environ ()
          Set the `environ' attribute to a fully-populated WSGI
          environment.  The default implementation uses all of the
          above methods and attributes, plus the *note get_stdin():
          1ba3, *note get_stderr(): 1ba4, and *note add_cgi_vars():
          1ba5. methods and the *note wsgi_file_wrapper: 1bae.
          attribute.  It also inserts a `SERVER_SOFTWARE' key if not
          present, as long as the *note origin_server: 1bab. attribute
          is a true value and the *note server_software: 1baa.
          attribute is set.

     Methods and attributes for customizing exception handling:

      -- Method: log_exception (exc_info)
          Log the _exc_info_ tuple in the server log.  _exc_info_ is a
          `(type, value, traceback)' tuple.  The default implementation
          simply writes the traceback to the request's `wsgi.errors'
          stream and flushes it.  Subclasses can override this method
          to change the format or retarget the output, mail the
          traceback to an administrator, or whatever other action may
          be deemed suitable.

      -- Attribute: traceback_limit
          The maximum number of frames to include in tracebacks output
          by the default *note log_exception(): 1baf. method.  If
          `None', all frames are included.

      -- Method: error_output (environ, start_response)
          This method is a WSGI application to generate an error page
          for the user.  It is only invoked if an error occurs before
          headers are sent to the client.

          This method can access the current error information using
          `sys.exc_info()', and should pass that information to
          _start_response_ when calling it (as described in the "Error
          Handling" section of PEP 333(1)).

          The default implementation just uses the *note error_status:
          1bb2, *note error_headers: 1bb3, and *note error_body: 1bb4.
          attributes to generate an output page.  Subclasses can
          override this to produce more dynamic error output.

          Note, however, that it's not recommended from a security
          perspective to spit out diagnostics to any old user; ideally,
          you should have to do something special to enable diagnostic
          output, which is why the default implementation doesn't
          include any.

      -- Attribute: error_status
          The HTTP status used for error responses.  This should be a
          status string as defined in PEP 333(2); it defaults to a 500
          code and message.

      -- Attribute: error_headers
          The HTTP headers used for error responses.  This should be a
          list of WSGI response headers (`(name, value)' tuples), as
          described in PEP 333(3).  The default list just sets the
          content type to `text/plain'.

      -- Attribute: error_body
          The error response body.  This should be an HTTP response
          body string. It defaults to the plain text, "A server error
          occurred.  Please contact the administrator."

     Methods and attributes for PEP 333(4)'s "Optional
     Platform-Specific File Handling" feature:

      -- Attribute: wsgi_file_wrapper
          A `wsgi.file_wrapper' factory, or `None'.  The default value
          of this attribute is the `FileWrapper' class from *note
          wsgiref.util: 19e.

      -- Method: sendfile ()
          Override to implement platform-specific file transmission.
          This method is called only if the application's return value
          is an instance of the class specified by the *note
          wsgi_file_wrapper: 1bae. attribute.  It should return a true
          value if it was able to successfully transmit the file, so
          that the default transmission code will not be executed. The
          default implementation of this method just returns a false
          value.

     Miscellaneous methods and attributes:

      -- Attribute: origin_server
          This attribute should be set to a true value if the handler's
          *note _write(): 1ba1. and *note _flush(): 1ba2. are being
          used to communicate directly to the client, rather than via a
          CGI-like gateway protocol that wants the HTTP status in a
          special `Status:' header.

          This attribute's default value is true in *note BaseHandler:
          1b9f, but false in *note BaseCGIHandler: 1b9d. and *note
          CGIHandler: 1b9c.

      -- Attribute: http_version
          If *note origin_server: 1bab. is true, this string attribute
          is used to set the HTTP version of the response set to the
          client.  It defaults to `"1.0"'.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0333

  (2) http://www.python.org/dev/peps/pep-0333

  (3) http://www.python.org/dev/peps/pep-0333

  (4) http://www.python.org/dev/peps/pep-0333


File: python.info,  Node: Examples<10>,  Prev: wsgiref handlers -- server/gateway base classes,  Up: wsgiref --- WSGI Utilities and Reference Implementation

5.20.4.6 Examples
.................

This is a working "Hello World" WSGI application:

    from wsgiref.simple_server import make_server

    # Every WSGI application must have an application object - a callable
    # object that accepts two arguments. For that purpose, we're going to
    # use a function (note that you're not limited to a function, you can
    # use a class for example). The first argument passed to the function
    # is a dictionary containing CGI-style envrironment variables and the
    # second variable is the callable object (see PEP 333).
    def hello_world_app(environ, start_response):
        status = '200 OK' # HTTP Status
        headers = [('Content-type', 'text/plain')] # HTTP Headers
        start_response(status, headers)

        # The returned object is going to be printed
        return ["Hello World"]

    httpd = make_server('', 8000, hello_world_app)
    print "Serving on port 8000..."

    # Serve until process is killed
    httpd.serve_forever()



File: python.info,  Node: urllib --- Open arbitrary resources by URL,  Next: urllib2 --- extensible library for opening URLs,  Prev: wsgiref --- WSGI Utilities and Reference Implementation,  Up: Internet Protocols and Support

5.20.5 `urllib' -- Open arbitrary resources by URL
--------------------------------------------------

     Note: The *note urllib: 189. module has been split into parts and
     renamed in Python 3.0 to `urllib.request', `urllib.parse', and
     `urllib.error'. The *note 2to3: bbf. tool will automatically adapt
     imports when converting your sources to 3.0.  Also note that the
     *note urllib.urlopen(): 34a. function has been removed in Python
     3.0 in favor of *note urllib2.urlopen(): 34b.

This module provides a high-level interface for fetching data across
the World Wide Web.  In particular, the *note urlopen(): 34a. function
is similar to the built-in function *note open(): 2cb, but accepts
Universal Resource Locators (URLs) instead of filenames.  Some
restrictions apply -- it can only open URLs for reading, and no seek
operations are available.

     Warning: When opening HTTPS URLs, it is not attempted to validate
     the server certificate.  Use at your own risk!

* Menu:

* High-level interface::
* Utility functions: Utility functions<2>.
* URL Opener objects::
* urllib Restrictions::
* Examples: Examples<11>.


File: python.info,  Node: High-level interface,  Next: Utility functions<2>,  Up: urllib --- Open arbitrary resources by URL

5.20.5.1 High-level interface
.............................

 -- Function: urllib.urlopen (url[, data[, proxies]])
     Open a network object denoted by a URL for reading.  If the URL
     does not have a scheme identifier, or if it has `file:' as its
     scheme identifier, this opens a local file (without universal
     newlines); otherwise it opens a socket to a server somewhere on
     the network.  If the connection cannot be made the *note IOError:
     1f7. exception is raised.  If all went well, a file-like object is
     returned.  This supports the following methods: `read()', *note
     readline(): 145, `readlines()', `fileno()', `close()', `info()',
     `getcode()' and `geturl()'.  It also has proper support for the
     *note iterator: 84a. protocol. One caveat: the `read()' method, if
     the size argument is omitted or negative, may not read until the
     end of the data stream; there is no good way to determine that the
     entire stream from a socket has been read in the general case.

     Except for the `info()', `getcode()' and `geturl()' methods, these
     methods have the same interface as for file objects -- see section
     *note File Objects: 61c. in this manual.  (It is not a built-in
     file object, however, so it can't be used at those few places
     where a true built-in file object is required.)

     The `info()' method returns an instance of the class *note
     mimetools.Message: 189c. containing meta-information associated
     with the URL.  When the method is HTTP, these headers are those
     returned by the server at the head of the retrieved HTML page
     (including Content-Length and Content-Type).  When the method is
     FTP, a Content-Length header will be present if (as is now usual)
     the server passed back a file length in response to the FTP
     retrieval request. A Content-Type header will be present if the
     MIME type can be guessed.  When the method is local-file, returned
     headers will include a Date representing the file's last-modified
     time, a Content-Length giving file size, and a Content-Type
     containing a guess at the file's type. See also the description of
     the *note mimetools: 110. module.

     The `geturl()' method returns the real URL of the page.  In some
     cases, the HTTP server redirects a client to another URL.  The
     *note urlopen(): 34a. function handles this transparently, but in
     some cases the caller needs to know which URL the client was
     redirected to.  The `geturl()' method can be used to get at this
     redirected URL.

     The `getcode()' method returns the HTTP status code that was sent
     with the response, or `None' if the URL is no HTTP URL.

     If the _url_ uses the `http:' scheme identifier, the optional
     _data_ argument may be given to specify a `POST' request (normally
     the request type is `GET').  The _data_ argument must be in
     standard `application/x-www-form-urlencoded' format; see the *note
     urlencode(): 1bbb.  function below.

     The *note urlopen(): 34a. function works transparently with
     proxies which do not require authentication.  In a Unix or Windows
     environment, set the `http_proxy', or `ftp_proxy' environment
     variables to a URL that identifies the proxy server before
     starting the Python interpreter.  For example (the `'%'' is the
     command prompt):

         % http_proxy="http://www.someproxy.com:3128"
         % export http_proxy
         % python
         ...

     The `no_proxy' environment variable can be used to specify hosts
     which shouldn't be reached via proxy; if set, it should be a
     comma-separated list of hostname suffixes, optionally with `:port'
     appended, for example `cern.ch,ncsa.uiuc.edu,some.host:8080'.

     In a Windows environment, if no proxy environment variables are
     set, proxy settings are obtained from the registry's Internet
     Settings section.

     In a Mac OS X  environment, *note urlopen(): 34a. will retrieve
     proxy information from the OS X System Configuration Framework,
     which can be managed with Network System Preferences panel.

     Alternatively, the optional _proxies_ argument may be used to
     explicitly specify proxies.  It must be a dictionary mapping
     scheme names to proxy URLs, where an empty dictionary causes no
     proxies to be used, and `None' (the default value) causes
     environmental proxy settings to be used as discussed above.  For
     example:

         # Use http://www.someproxy.com:3128 for http proxying
         proxies = {'http': 'http://www.someproxy.com:3128'}
         filehandle = urllib.urlopen(some_url, proxies=proxies)
         # Don't use any proxies
         filehandle = urllib.urlopen(some_url, proxies={})
         # Use proxies from environment - both versions are equivalent
         filehandle = urllib.urlopen(some_url, proxies=None)
         filehandle = urllib.urlopen(some_url)

     Proxies which require authentication for use are not currently
     supported; this is considered an implementation limitation.

     Changed in version 2.3: Added the _proxies_ support.

     Changed in version 2.6: Added `getcode()' to returned object and
     support for the

     `no_proxy' environment variable.

     Deprecated since version 2.6: The *note urlopen(): 34a. function
     has been removed in Python 3.0 in favor of *note
     urllib2.urlopen(): 34b.

 -- Function: urllib.urlretrieve (url[, filename[, reporthook[, data]]])
     Copy a network object denoted by a URL to a local file, if
     necessary. If the URL points to a local file, or a valid cached
     copy of the object exists, the object is not copied.  Return a
     tuple `(filename, headers)' where _filename_ is the local file
     name under which the object can be found, and _headers_ is whatever
     the `info()' method of the object returned by *note urlopen():
     34a. returned (for a remote object, possibly cached). Exceptions
     are the same as for *note urlopen(): 34a.

     The second argument, if present, specifies the file location to
     copy to (if absent, the location will be a tempfile with a
     generated name). The third argument, if present, is a hook
     function that will be called once on establishment of the network
     connection and once after each block read thereafter.  The hook
     will be passed three arguments; a count of blocks transferred so
     far, a block size in bytes, and the total size of the file.  The
     third argument may be `-1' on older FTP servers which do not
     return a file size in response to a retrieval request.

     If the _url_ uses the `http:' scheme identifier, the optional
     _data_ argument may be given to specify a `POST' request (normally
     the request type is `GET').  The _data_ argument must in standard
     `application/x-www-form-urlencoded' format; see the *note
     urlencode(): 1bbb.  function below.

     Changed in version 2.5: *note urlretrieve(): 1bbc. will raise
     *note ContentTooShortError: 1bbd. when it detects that the amount
     of data available  was less than the expected amount (which is the
     size reported by a  _Content-Length_ header). This can occur, for
     example, when the  download is interrupted.  The _Content-Length_
     is treated as a lower bound: if there's more data  to read, *note
     urlretrieve(): 1bbc. reads more data, but if less data is
     available,  it raises the exception.

     You can still retrieve the downloaded data in this case, it is
     stored  in the `content' attribute of the exception instance.

     If no _Content-Length_ header was supplied, *note urlretrieve():
     1bbc. can not check the size of the data it has downloaded, and
     just returns it.  In this case you just have to assume that the
     download was successful.


 -- Data: urllib._urlopener
     The public functions *note urlopen(): 34a. and *note
     urlretrieve(): 1bbc. create an instance of the *note
     FancyURLopener: 1bbf. class and use it to perform their requested
     actions.  To override this functionality, programmers can create a
     subclass of *note URLopener: 1bc0. or *note FancyURLopener: 1bbf,
     then assign an instance of that class to the `urllib._urlopener'
     variable before calling the desired function.  For example,
     applications may want to specify a different `User-Agent' header
     than *note URLopener: 1bc0. defines.  This can be accomplished
     with the following code:

         import urllib

         class AppURLopener(urllib.FancyURLopener):
             version = "App/1.7"

         urllib._urlopener = AppURLopener()



 -- Function: urllib.urlcleanup ()
     Clear the cache that may have been built up by previous calls to
     *note urlretrieve(): 1bbc.


File: python.info,  Node: Utility functions<2>,  Next: URL Opener objects,  Prev: High-level interface,  Up: urllib --- Open arbitrary resources by URL

5.20.5.2 Utility functions
..........................

 -- Function: urllib.quote (string[, safe])
     Replace special characters in _string_ using the `%xx' escape.
     Letters, digits, and the characters `'_.-'' are never quoted. By
     default, this function is intended for quoting the path section of
     the URL.The optional _safe_ parameter specifies additional
     characters that should not be quoted -- its default value is `'/''.

     Example: `quote('/~connolly/')' yields `'/%7econnolly/''.

 -- Function: urllib.quote_plus (string[, safe])
     Like *note quote(): 1bc3, but also replaces spaces by plus signs,
     as required for quoting HTML form values when building up a query
     string to go into a URL.  Plus signs in the original string are
     escaped unless they are included in _safe_.  It also does not have
     _safe_ default to `'/''.

 -- Function: urllib.unquote (string)
     Replace `%xx' escapes by their single-character equivalent.

     Example: `unquote('/%7Econnolly/')' yields `'/~connolly/''.

 -- Function: urllib.unquote_plus (string)
     Like *note unquote(): 1bc5, but also replaces plus signs by
     spaces, as required for unquoting HTML form values.

 -- Function: urllib.urlencode (query[, doseq])
     Convert a mapping object or a sequence of two-element tuples to a
     "percent-encoded" string, suitable to pass to *note urlopen():
     34a. above as the optional _data_ argument.  This is useful to
     pass a dictionary of form fields to a `POST' request.  The
     resulting string is a series of `key=value' pairs separated by
     `'&'' characters, where both _key_ and _value_ are quoted using
     *note quote_plus(): 1bc4. above.  When a sequence of two-element
     tuples is used as the _query_ argument, the first element of each
     tuple is a key and the second is a value. The value element in
     itself can be a sequence and in that case, if the optional
     parameter _doseq_ is evaluates to _True_, individual `key=value'
     pairs separated by `'&'' are generated for each element of the
     value sequence for the key.  The order of parameters in the
     encoded string will match the order of parameter tuples in the
     sequence. The *note urlparse: 18b. module provides the functions
     `parse_qs()' and `parse_qsl()' which are used to parse query
     strings into Python data structures.

 -- Function: urllib.pathname2url (path)
     Convert the pathname _path_ from the local syntax for a path to
     the form used in the path component of a URL.  This does not
     produce a complete URL.  The return value will already be quoted
     using the *note quote(): 1bc3. function.

 -- Function: urllib.url2pathname (path)
     Convert the path component _path_ from an percent-encoded URL to
     the local syntax for a path.  This does not accept a complete URL.
     This function uses *note unquote(): 1bc5.  to decode _path_.

 -- Function: urllib.getproxies ()
     This helper function returns a dictionary of scheme to proxy
     server URL mappings. It scans the environment for variables named
     `<scheme>_proxy' for all operating systems first, and when it
     cannot find it, looks for proxy information from Mac OSX System
     Configuration for Mac OS X and Windows Systems Registry for
     Windows.


File: python.info,  Node: URL Opener objects,  Next: urllib Restrictions,  Prev: Utility functions<2>,  Up: urllib --- Open arbitrary resources by URL

5.20.5.3 URL Opener objects
...........................

 -- Class: urllib.URLopener ([proxies[, **x509]])
     Base class for opening and reading URLs.  Unless you need to
     support opening objects using schemes other than `http:', `ftp:',
     or `file:', you probably want to use *note FancyURLopener: 1bbf.

     By default, the *note URLopener: 1bc0. class sends a `User-Agent'
     header of `urllib/VVV', where _VVV_ is the *note urllib: 189.
     version number.  Applications can define their own `User-Agent'
     header by subclassing *note URLopener: 1bc0. or *note
     FancyURLopener: 1bbf. and setting the class attribute *note
     version: 1bcb. to an appropriate string value in the subclass
     definition.

     The optional _proxies_ parameter should be a dictionary mapping
     scheme names to proxy URLs, where an empty dictionary turns
     proxies off completely.  Its default value is `None', in which
     case environmental proxy settings will be used if present, as
     discussed in the definition of *note urlopen(): 34a, above.

     Additional keyword parameters, collected in _x509_, may be used for
     authentication of the client when using the `https:' scheme.  The
     keywords _key_file_ and _cert_file_ are supported to provide an
     SSL key and certificate; both are needed to support client
     authentication.

     *note URLopener: 1bc0. objects will raise an *note IOError: 1f7.
     exception if the server returns an error code.

           -- Method: open (fullurl[, data])
               Open _fullurl_ using the appropriate protocol.  This
               method sets up cache and proxy information, then calls
               the appropriate open method with its input arguments.
               If the scheme is not recognized, *note open_unknown():
               1bcd. is called.  The _data_ argument has the same
               meaning as the _data_ argument of *note urlopen(): 34a.

           -- Method: open_unknown (fullurl[, data])
               Overridable interface to open unknown URL types.

           -- Method: retrieve (url[, filename[, reporthook[, data]]])
               Retrieves the contents of _url_ and places it in
               _filename_.  The return value is a tuple consisting of a
               local filename and either a *note mimetools.Message:
               189c. object containing the response headers (for remote
               URLs) or `None' (for local URLs).  The caller must then
               open and read the contents of _filename_.  If _filename_
               is not given and the URL refers to a local file, the
               input filename is returned.  If the URL is non-local and
               _filename_ is not given, the filename is the output of
               *note tempfile.mktemp(): e3f.  with a suffix that
               matches the suffix of the last path component of the
               input URL.  If _reporthook_ is given, it must be a
               function accepting three numeric parameters.  It will be
               called after each chunk of data is read from the
               network.  _reporthook_ is ignored for local URLs.

               If the _url_ uses the `http:' scheme identifier, the
               optional _data_ argument may be given to specify a
               `POST' request (normally the request type is `GET').
               The _data_ argument must in standard
               `application/x-www-form-urlencoded' format; see the
               *note urlencode(): 1bbb.  function below.

           -- Attribute: version
               Variable that specifies the user agent of the opener
               object.  To get *note urllib: 189. to tell servers that
               it is a particular user agent, set this in a subclass as
               a class variable or in the constructor before calling
               the base constructor.

 -- Class: urllib.FancyURLopener (...)
     *note FancyURLopener: 1bbf. subclasses *note URLopener: 1bc0.
     providing default handling for the following HTTP response codes:
     301, 302, 303, 307 and 401.  For the 30x response codes listed
     above, the `Location' header is used to fetch the actual URL.  For
     401 response codes (authentication required), basic HTTP
     authentication is performed.  For the 30x response codes,
     recursion is bounded by the value of the _maxtries_ attribute,
     which defaults to 10.

     For all other response codes, the method `http_error_default()' is
     called which you can override in subclasses to handle the error
     appropriately.

          Note: According to the letter of RFC 2616(1), 301 and 302
          responses to POST requests must not be automatically
          redirected without confirmation by the user.  In reality,
          browsers do allow automatic redirection of these responses,
          changing the POST to a GET, and *note urllib: 189. reproduces
          this behaviour.

     The parameters to the constructor are the same as those for *note
     URLopener: 1bc0.

          Note:

               When performing basic authentication, a *note
               FancyURLopener: 1bbf. instance calls its *note
               prompt_user_passwd(): 1bcf. method.  The default
               implementation asks the users for the required
               information on the controlling terminal.  A subclass may
               override this method to support more appropriate
               behavior if needed.

          The *note FancyURLopener: 1bbf. class offers one additional
          method that should be overloaded to provide the appropriate
          behavior:

           -- Method: prompt_user_passwd (host, realm)
               Return information needed to authenticate the user at
               the given host in the specified security realm.  The
               return value should be a tuple, `(user, password)',
               which can be used for basic authentication.

               The implementation prompts for this information on the
               terminal; an application should override this method to
               use an appropriate interaction model in the local
               environment.

 -- Exception: urllib.ContentTooShortError (msg[, content])
     This exception is raised when the *note urlretrieve(): 1bbc.
     function detects that the amount of the downloaded data is less
     than the  expected amount (given by the _Content-Length_ header).
     The `content' attribute stores the downloaded (and supposedly
     truncated) data.

     New in version 2.5.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2616.html


File: python.info,  Node: urllib Restrictions,  Next: Examples<11>,  Prev: URL Opener objects,  Up: urllib --- Open arbitrary resources by URL

5.20.5.4 `urllib' Restrictions
..............................

 
   * Currently, only the following protocols are supported: HTTP,
     (versions 0.9 and 1.0),  FTP, and local files.

   * The caching feature of *note urlretrieve(): 1bbc. has been
     disabled until I find the time to hack proper processing of
     Expiration time headers.

   * There should be a function to query whether a particular URL is in
     the cache.

   * For backward compatibility, if a URL appears to point to a local
     file but the file can't be opened, the URL is re-interpreted using
     the FTP protocol.  This can sometimes cause confusing error
     messages.

   * The *note urlopen(): 34a. and *note urlretrieve(): 1bbc. functions
     can cause arbitrarily long delays while waiting for a network
     connection to be set up.  This means that it is difficult to build
     an interactive Web client using these functions without using
     threads.

   * The data returned by *note urlopen(): 34a. or *note urlretrieve():
     1bbc. is the raw data returned by the server.  This may be binary
     data (such as an image), plain text or (for example) HTML.  The
     HTTP protocol provides type information in the reply header, which
     can be inspected by looking at the `Content-Type' header.  If the
     returned data is HTML, you can use the module *note htmllib: ed. to
     parse it.

   * The code handling the FTP protocol cannot differentiate between a
     file and a directory.  This can lead to unexpected behavior when
     attempting to read a URL that points to a file that is not
     accessible.  If the URL ends in a `/', it is assumed to refer to a
     directory and will be handled accordingly.  But if an attempt to
     read a file leads to a 550 error (meaning the URL cannot be found
     or is not accessible, often for permission reasons), then the path
     is treated as a directory in order to handle the case when a
     directory is specified by a URL but the trailing `/' has been left
     off.  This can cause misleading results when you try to fetch a
     file whose read permissions make it inaccessible; the FTP code
     will try to read it, fail with a 550 error, and then perform a
     directory listing for the unreadable file. If fine-grained control
     is needed, consider using the *note ftplib: d9. module,
     subclassing *note FancyURLopener: 1bbf, or changing __urlopener_
     to meet your needs.

   * This module does not support the use of proxies which require
     authentication.  This may be implemented in the future.

   * Although the *note urllib: 189. module contains (undocumented)
     routines to parse and unparse URL strings, the recommended
     interface for URL manipulation is in module *note urlparse: 18b.


File: python.info,  Node: Examples<11>,  Prev: urllib Restrictions,  Up: urllib --- Open arbitrary resources by URL

5.20.5.5 Examples
.................

Here is an example session that uses the `GET' method to retrieve a URL
containing parameters:

    >>> import urllib
    >>> params = urllib.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
    >>> f = urllib.urlopen("http://www.musi-cal.com/cgi-bin/query?%s" % params)
    >>> print f.read()

The following example uses the `POST' method instead:

    >>> import urllib
    >>> params = urllib.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
    >>> f = urllib.urlopen("http://www.musi-cal.com/cgi-bin/query", params)
    >>> print f.read()

The following example uses an explicitly specified HTTP proxy,
overriding environment settings:

    >>> import urllib
    >>> proxies = {'http': 'http://proxy.example.com:8080/'}
    >>> opener = urllib.FancyURLopener(proxies)
    >>> f = opener.open("http://www.python.org")
    >>> f.read()

The following example uses no proxies at all, overriding environment
settings:

    >>> import urllib
    >>> opener = urllib.FancyURLopener({})
    >>> f = opener.open("http://www.python.org/")
    >>> f.read()



File: python.info,  Node: urllib2 --- extensible library for opening URLs,  Next: httplib --- HTTP protocol client,  Prev: urllib --- Open arbitrary resources by URL,  Up: Internet Protocols and Support

5.20.6 `urllib2' -- extensible library for opening URLs
-------------------------------------------------------

     Note: The *note urllib2: 18a. module has been split across several
     modules in Python 3.0 named `urllib.request' and `urllib.error'.
     The *note 2to3: bbf. tool will automatically adapt imports when
     converting your sources to 3.0.

The *note urllib2: 18a. module defines functions and classes which help
in opening URLs (mostly HTTP) in a complex world -- basic and digest
authentication, redirections, cookies and more.

  The *note urllib2: 18a. module defines the following functions:

 -- Function: urllib2.urlopen (url[, data][, timeout])
     Open the URL _url_, which can be either a string or a *note
     Request: 1bd5. object.

          Warning: HTTPS requests do not do any verification of the
          server's certificate.

     _data_ may be a string specifying additional data to send to the
     server, or `None' if no such data is needed.  Currently HTTP
     requests are the only ones that use _data_; the HTTP request will
     be a POST instead of a GET when the _data_ parameter is provided.
     _data_ should be a buffer in the standard
     `application/x-www-form-urlencoded' format.  The *note
     urllib.urlencode(): 1bbb. function takes a mapping or sequence of
     2-tuples and returns a string in this format. urllib2 module sends
     HTTP/1.1 requests with `Connection:close' header included.

     The optional _timeout_ parameter specifies a timeout in seconds
     for blocking operations like the connection attempt (if not
     specified, the global default timeout setting will be used).  This
     actually only works for HTTP, HTTPS and FTP connections.

     This function returns a file-like object with two additional
     methods:

        * `geturl()' -- return the URL of the resource retrieved,
          commonly used to determine if a redirect was followed

        * `info()' -- return the meta-information of the page, such as
          headers, in the form of an *note mimetools.Message: 189c.
          instance (see Quick Reference to HTTP Headers(1))

     Raises *note URLError: 1bd6. on errors.

     Note that `None' may be returned if no handler handles the request
     (though the default installed global *note OpenerDirector: 1bd7.
     uses *note UnknownHandler: 1bd8. to ensure this never happens).

     In addition, default installed *note ProxyHandler: 1bd9. makes
     sure the requests are handled through the proxy when they are set.

     Changed in version 2.6: _timeout_ was added.

 -- Function: urllib2.install_opener (opener)
     Install an *note OpenerDirector: 1bd7. instance as the default
     global opener.  Installing an opener is only necessary if you want
     urlopen to use that opener; otherwise, simply call *note
     OpenerDirector.open(): 1bdb. instead of *note urlopen(): 34b.  The
     code does not check for a real *note OpenerDirector: 1bd7, and any
     class with the appropriate interface will work.

 -- Function: urllib2.build_opener ([handler, ...])
     Return an *note OpenerDirector: 1bd7. instance, which chains the
     handlers in the order given. _handler_s can be either instances of
     *note BaseHandler: 1bdd, or subclasses of *note BaseHandler: 1bdd.
     (in which case it must be possible to call the constructor without
     any parameters).  Instances of the following classes will be in
     front of the _handler_s, unless the _handler_s contain them,
     instances of them or subclasses of them: *note ProxyHandler: 1bd9,
     *note UnknownHandler: 1bd8, *note HTTPHandler: 1bde, *note
     HTTPDefaultErrorHandler: 1bdf, *note HTTPRedirectHandler: 1be0,
     *note FTPHandler: 1be1, *note FileHandler: 1be2,
     `HTTPErrorProcessor'.

     If the Python installation has SSL support (i.e., if the *note
     ssl: 161. module can be imported), *note HTTPSHandler: 1be3. will
     also be added.

     Beginning in Python 2.3, a *note BaseHandler: 1bdd. subclass may
     also change its `handler_order' member variable to modify its
     position in the handlers list.

  The following exceptions are raised as appropriate:

 -- Exception: urllib2.URLError
     The handlers raise this exception (or derived exceptions) when
     they run into a problem.  It is a subclass of *note IOError: 1f7.

      -- Attribute: reason
          The reason for this error.  It can be a message string or
          another exception instance (*note socket.error: 370. for
          remote URLs, *note OSError: 22e. for local URLs).

 -- Exception: urllib2.HTTPError
     Though being an exception (a subclass of *note URLError: 1bd6.),
     an *note HTTPError: 1be5.  can also function as a non-exceptional
     file-like return value (the same thing that *note urlopen(): 34b.
     returns).  This is useful when handling exotic HTTP errors, such
     as requests for authentication.

      -- Attribute: code
          An HTTP status code as defined in RFC 2616(2).  This numeric
          value corresponds to a value found in the dictionary of codes
          as found in *note
          BaseHTTPServer.BaseHTTPRequestHandler.responses: 1be7.

  The following classes are provided:

 -- Class: urllib2.Request (url[, data][, headers][, origin_req_host][,
          unverifiable])
     This class is an abstraction of a URL request.

     _url_ should be a string containing a valid URL.

     _data_ may be a string specifying additional data to send to the
     server, or `None' if no such data is needed.  Currently HTTP
     requests are the only ones that use _data_; the HTTP request will
     be a POST instead of a GET when the _data_ parameter is provided.
     _data_ should be a buffer in the standard
     `application/x-www-form-urlencoded' format.  The *note
     urllib.urlencode(): 1bbb. function takes a mapping or sequence of
     2-tuples and returns a string in this format.

     _headers_ should be a dictionary, and will be treated as if *note
     add_header(): 1be8.  was called with each key and value as
     arguments.  This is often used to "spoof" the `User-Agent' header,
     which is used by a browser to identify itself - some HTTP servers
     only allow requests coming from common browsers as opposed to
     scripts.  For example, Mozilla Firefox may identify itself as
     `"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127
     Firefox/2.0.0.11"', while *note urllib2: 18a.'s default user agent
     string is `"Python-urllib/2.6"' (on Python 2.6).

     The final two arguments are only of interest for correct handling
     of third-party HTTP cookies:

     _origin_req_host_ should be the request-host of the origin
     transaction, as defined by RFC 2965(3).  It defaults to
     `cookielib.request_host(self)'.  This is the host name or IP
     address of the original request that was initiated by the user.
     For example, if the request is for an image in an HTML document,
     this should be the request-host of the request for the page
     containing the image.

     _unverifiable_ should indicate whether the request is
     unverifiable, as defined by RFC 2965.  It defaults to False.  An
     unverifiable request is one whose URL the user did not have the
     option to approve.  For example, if the request is for an image in
     an HTML document, and the user had no option to approve the
     automatic fetching of the image, this should be true.

 -- Class: urllib2.OpenerDirector
     The *note OpenerDirector: 1bd7. class opens URLs via *note
     BaseHandler: 1bdd.s chained together. It manages the chaining of
     handlers, and recovery from errors.

 -- Class: urllib2.BaseHandler
     This is the base class for all registered handlers -- and handles
     only the simple mechanics of registration.

 -- Class: urllib2.HTTPDefaultErrorHandler
     A class which defines a default handler for HTTP error responses;
     all responses are turned into *note HTTPError: 1be5. exceptions.

 -- Class: urllib2.HTTPRedirectHandler
     A class to handle redirections.

 -- Class: urllib2.HTTPCookieProcessor ([cookiejar])
     A class to handle HTTP Cookies.

 -- Class: urllib2.ProxyHandler ([proxies])
     Cause requests to go through a proxy. If _proxies_ is given, it
     must be a dictionary mapping protocol names to URLs of proxies.
     The default is to read the list of proxies from the environment
     variables `<protocol>_proxy'.  If no proxy environment variables
     are set, in a Windows environment, proxy settings are obtained
     from the registry's Internet Settings section and in a Mac OS X
     environment, proxy information is retrieved from the OS X System
     Configuration Framework.

     To disable autodetected proxy pass an empty dictionary.

 -- Class: urllib2.HTTPPasswordMgr
     Keep a database of  `(realm, uri) -> (user, password)' mappings.

 -- Class: urllib2.HTTPPasswordMgrWithDefaultRealm
     Keep a database of  `(realm, uri) -> (user, password)' mappings. A
     realm of `None' is considered a catch-all realm, which is searched
     if no other realm fits.

 -- Class: urllib2.AbstractBasicAuthHandler ([password_mgr])
     This is a mixin class that helps with HTTP authentication, both to
     the remote host and to a proxy. _password_mgr_, if given, should
     be something that is compatible with *note HTTPPasswordMgr: 1bea.;
     refer to section *note HTTPPasswordMgr Objects: 1bed. for
     information on the interface that must be supported.

 -- Class: urllib2.HTTPBasicAuthHandler ([password_mgr])
     Handle authentication with the remote host. _password_mgr_, if
     given, should be something that is compatible with *note
     HTTPPasswordMgr: 1bea.; refer to section *note HTTPPasswordMgr
     Objects: 1bed. for information on the interface that must be
     supported.

 -- Class: urllib2.ProxyBasicAuthHandler ([password_mgr])
     Handle authentication with the proxy. _password_mgr_, if given,
     should be something that is compatible with *note HTTPPasswordMgr:
     1bea.; refer to section *note HTTPPasswordMgr Objects: 1bed. for
     information on the interface that must be supported.

 -- Class: urllib2.AbstractDigestAuthHandler ([password_mgr])
     This is a mixin class that helps with HTTP authentication, both to
     the remote host and to a proxy. _password_mgr_, if given, should
     be something that is compatible with *note HTTPPasswordMgr: 1bea.;
     refer to section *note HTTPPasswordMgr Objects: 1bed. for
     information on the interface that must be supported.

 -- Class: urllib2.HTTPDigestAuthHandler ([password_mgr])
     Handle authentication with the remote host. _password_mgr_, if
     given, should be something that is compatible with *note
     HTTPPasswordMgr: 1bea.; refer to section *note HTTPPasswordMgr
     Objects: 1bed. for information on the interface that must be
     supported.

 -- Class: urllib2.ProxyDigestAuthHandler ([password_mgr])
     Handle authentication with the proxy. _password_mgr_, if given,
     should be something that is compatible with *note HTTPPasswordMgr:
     1bea.; refer to section *note HTTPPasswordMgr Objects: 1bed. for
     information on the interface that must be supported.

 -- Class: urllib2.HTTPHandler
     A class to handle opening of HTTP URLs.

 -- Class: urllib2.HTTPSHandler
     A class to handle opening of HTTPS URLs.

 -- Class: urllib2.FileHandler
     Open local files.

 -- Class: urllib2.FTPHandler
     Open FTP URLs.

 -- Class: urllib2.CacheFTPHandler
     Open FTP URLs, keeping a cache of open FTP connections to minimize
     delays.

 -- Class: urllib2.UnknownHandler
     A catch-all class to handle unknown URLs.

* Menu:

* Request Objects::
* OpenerDirector Objects::
* BaseHandler Objects::
* HTTPRedirectHandler Objects::
* HTTPCookieProcessor Objects::
* ProxyHandler Objects::
* HTTPPasswordMgr Objects::
* AbstractBasicAuthHandler Objects::
* HTTPBasicAuthHandler Objects::
* ProxyBasicAuthHandler Objects::
* AbstractDigestAuthHandler Objects::
* HTTPDigestAuthHandler Objects::
* ProxyDigestAuthHandler Objects::
* HTTPHandler Objects::
* HTTPSHandler Objects::
* FileHandler Objects::
* FTPHandler Objects::
* CacheFTPHandler Objects::
* UnknownHandler Objects::
* HTTPErrorProcessor Objects::
* Examples: Examples<12>.

  ---------- Footnotes ----------

  (1) http://www.cs.tut.fi/~jkorpela/http.html

  (2) http://www.faqs.org/rfcs/rfc2616.html

  (3) http://tools.ietf.org/html/rfc2965.html


File: python.info,  Node: Request Objects,  Next: OpenerDirector Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.1 Request Objects
........................

The following methods describe all of *note Request: 1bd5.'s public
interface, and so all must be overridden in subclasses.

 -- Method: Request.add_data (data)
     Set the *note Request: 1bd5. data to _data_.  This is ignored by
     all handlers except HTTP handlers -- and there it should be a byte
     string, and will change the request to be `POST' rather than `GET'.

 -- Method: Request.get_method ()
     Return a string indicating the HTTP request method.  This is only
     meaningful for HTTP requests, and currently always returns `'GET''
     or `'POST''.

 -- Method: Request.has_data ()
     Return whether the instance has a non-`None' data.

 -- Method: Request.get_data ()
     Return the instance's data.

 -- Method: Request.add_header (key, val)
     Add another header to the request.  Headers are currently ignored
     by all handlers except HTTP handlers, where they are added to the
     list of headers sent to the server.  Note that there cannot be
     more than one header with the same name, and later calls will
     overwrite previous calls in case the _key_ collides.  Currently,
     this is no loss of HTTP functionality, since all headers which have
     meaning when used more than once have a (header-specific) way of
     gaining the same functionality using only one header.

 -- Method: Request.add_unredirected_header (key, header)
     Add a header that will not be added to a redirected request.

     New in version 2.4.

 -- Method: Request.has_header (header)
     Return whether the instance has the named header (checks both
     regular and unredirected).

     New in version 2.4.

 -- Method: Request.get_full_url ()
     Return the URL given in the constructor.

 -- Method: Request.get_type ()
     Return the type of the URL -- also known as the scheme.

 -- Method: Request.get_host ()
     Return the host to which a connection will be made.

 -- Method: Request.get_selector ()
     Return the selector -- the part of the URL that is sent to the
     server.

 -- Method: Request.set_proxy (host, type)
     Prepare the request by connecting to a proxy server. The _host_
     and _type_ will replace those of the instance, and the instance's
     selector will be the original URL given in the constructor.

 -- Method: Request.get_origin_req_host ()
     Return the request-host of the origin transaction, as defined by RFC
     2965(1).  See the documentation for the *note Request: 1bd5.
     constructor.

 -- Method: Request.is_unverifiable ()
     Return whether the request is unverifiable, as defined by RFC
     2965. See the documentation for the *note Request: 1bd5.
     constructor.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2965.html


File: python.info,  Node: OpenerDirector Objects,  Next: BaseHandler Objects,  Prev: Request Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.2 OpenerDirector Objects
...............................

*note OpenerDirector: 1bd7. instances have the following methods:

 -- Method: OpenerDirector.add_handler (handler)
     _handler_ should be an instance of *note BaseHandler: 1bdd.  The
     following methods are searched, and added to the possible chains
     (note that HTTP errors are a special case).

        * `_protocol__open' -- signal that the handler knows how to open
          _protocol_ URLs.

        * `http_error__type_' -- signal that the handler knows how to
          handle HTTP errors with HTTP error code _type_.

        * `_protocol__error' -- signal that the handler knows how to
          handle errors from (non-`http') _protocol_.

        * `_protocol__request' -- signal that the handler knows how to
          pre-process _protocol_ requests.

        * `_protocol__response' -- signal that the handler knows how to
          post-process _protocol_ responses.

 -- Method: OpenerDirector.open (url[, data][, timeout])
     Open the given _url_ (which can be a request object or a string),
     optionally passing the given _data_. Arguments, return values and
     exceptions raised are the same as those of *note urlopen(): 34b.
     (which simply calls the *note open(): 2cb.  method on the
     currently installed global *note OpenerDirector: 1bd7.).  The
     optional _timeout_ parameter specifies a timeout in seconds for
     blocking operations like the connection attempt (if not specified,
     the global default timeout setting will be used). The timeout
     feature actually works only for HTTP, HTTPS and FTP connections).

     Changed in version 2.6: _timeout_ was added.

 -- Method: OpenerDirector.error (proto[, arg[, ...]])
     Handle an error of the given protocol.  This will call the
     registered error handlers for the given protocol with the given
     arguments (which are protocol specific).  The HTTP protocol is a
     special case which uses the HTTP response code to determine the
     specific error handler; refer to the `http_error_*()' methods of
     the handler classes.

     Return values and exceptions raised are the same as those of *note
     urlopen(): 34b.

  OpenerDirector objects open URLs in three stages:

  The order in which these methods are called within each stage is
determined by sorting the handler instances.

  1. Every handler with a method named like `_protocol__request' has
     that method called to pre-process the request.

  2. Handlers with a method named like `_protocol__open' are called to
     handle the request. This stage ends when a handler either returns
     a non-*note None: 389.  value (ie. a response), or raises an
     exception (usually *note URLError: 1bd6.).  Exceptions are allowed
     to propagate.

     In fact, the above algorithm is first tried for methods named
     `default_open()'.  If all such methods return *note None: 389, the
     algorithm is repeated for methods named like `_protocol__open'.
     If all such methods return *note None: 389, the algorithm is
     repeated for methods named `unknown_open()'.

     Note that the implementation of these methods may involve calls of
     the parent *note OpenerDirector: 1bd7. instance's *note open():
     1bdb. and *note error(): 1c06. methods.

  3. Every handler with a method named like `_protocol__response' has
     that method called to post-process the response.


File: python.info,  Node: BaseHandler Objects,  Next: HTTPRedirectHandler Objects,  Prev: OpenerDirector Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.3 BaseHandler Objects
............................

*note BaseHandler: 1bdd. objects provide a couple of methods that are
directly useful, and others that are meant to be used by derived
classes.  These are intended for direct use:

 -- Method: BaseHandler.add_parent (director)
     Add a director as parent.

 -- Method: BaseHandler.close ()
     Remove any parents.

  The following members and methods should only be used by classes
derived from *note BaseHandler: 1bdd.

     Note: The convention has been adopted that subclasses defining
     `protocol_request()' or `protocol_response()' methods are named
     `*Processor'; all others are named `*Handler'.

 -- Attribute: BaseHandler.parent
     A valid *note OpenerDirector: 1bd7, which can be used to open
     using a different protocol, or handle errors.

 -- Method: BaseHandler.default_open (req)
     This method is _not_ defined in *note BaseHandler: 1bdd, but
     subclasses should define it if they want to catch all URLs.

     This method, if implemented, will be called by the parent *note
     OpenerDirector: 1bd7.  It should return a file-like object as
     described in the return value of the *note open(): 2cb. of *note
     OpenerDirector: 1bd7, or `None'.  It should raise *note URLError:
     1bd6, unless a truly exceptional thing happens (for example, *note
     MemoryError: 918. should not be mapped to *note URLError: 1bd6.).

     This method will be called before any protocol-specific open
     method.

 -- Method: BaseHandler.protocol_open (req)
     ("protocol" is to be replaced by the protocol name.)

     This method is _not_ defined in *note BaseHandler: 1bdd, but
     subclasses should define it if they want to handle URLs with the
     given _protocol_.

     This method, if defined, will be called by the parent *note
     OpenerDirector: 1bd7.  Return values should be the same as for
     `default_open()'.

 -- Method: BaseHandler.unknown_open (req)
     This method is _not_ defined in *note BaseHandler: 1bdd, but
     subclasses should define it if they want to catch all URLs with no
     specific registered handler to open it.

     This method, if implemented, will be called by the *note parent:
     1c0b.  *note OpenerDirector: 1bd7.  Return values should be the
     same as for *note default_open(): 1c0c.

 -- Method: BaseHandler.http_error_default (req, fp, code, msg, hdrs)
     This method is _not_ defined in *note BaseHandler: 1bdd, but
     subclasses should override it if they intend to provide a
     catch-all for otherwise unhandled HTTP errors.  It will be called
     automatically by the  *note OpenerDirector: 1bd7. getting the
     error, and should not normally be called in other circumstances.

     _req_ will be a *note Request: 1bd5. object, _fp_ will be a
     file-like object with the HTTP error body, _code_ will be the
     three-digit code of the error, _msg_ will be the user-visible
     explanation of the code and _hdrs_ will be a mapping object with
     the headers of the error.

     Return values and exceptions raised should be the same as those of
     *note urlopen(): 34b.

 -- Method: BaseHandler.http_error_nnn (req, fp, code, msg, hdrs)
     _nnn_ should be a three-digit HTTP error code.  This method is
     also not defined in *note BaseHandler: 1bdd, but will be called,
     if it exists, on an instance of a subclass, when an HTTP error
     with code _nnn_ occurs.

     Subclasses should override this method to handle specific HTTP
     errors.

     Arguments, return values and exceptions raised should be the same
     as for *note http_error_default(): 1c0e.

 -- Method: BaseHandler.protocol_request (req)
     ("protocol" is to be replaced by the protocol name.)

     This method is _not_ defined in *note BaseHandler: 1bdd, but
     subclasses should define it if they want to pre-process requests
     of the given _protocol_.

     This method, if defined, will be called by the parent *note
     OpenerDirector: 1bd7.  _req_ will be a *note Request: 1bd5.
     object. The return value should be a *note Request: 1bd5. object.

 -- Method: BaseHandler.protocol_response (req, response)
     ("protocol" is to be replaced by the protocol name.)

     This method is _not_ defined in *note BaseHandler: 1bdd, but
     subclasses should define it if they want to post-process responses
     of the given _protocol_.

     This method, if defined, will be called by the parent *note
     OpenerDirector: 1bd7.  _req_ will be a *note Request: 1bd5.
     object. _response_ will be an object implementing the same
     interface as the return value of *note urlopen(): 34b.  The return
     value should implement the same interface as the return value of
     *note urlopen(): 34b.


File: python.info,  Node: HTTPRedirectHandler Objects,  Next: HTTPCookieProcessor Objects,  Prev: BaseHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.4 HTTPRedirectHandler Objects
....................................

     Note: Some HTTP redirections require action from this module's
     client code.  If this is the case, *note HTTPError: 1be5. is
     raised.  See RFC 2616(1) for details of the precise meanings of
     the various redirection codes.

 -- Method: HTTPRedirectHandler.redirect_request (req, fp, code, msg,
          hdrs, newurl)
     Return a *note Request: 1bd5. or `None' in response to a redirect.
     This is called by the default implementations of the
     `http_error_30*()' methods when a redirection is received from the
     server.  If a redirection should take place, return a new *note
     Request: 1bd5. to allow `http_error_30*()' to perform the redirect
     to _newurl_.  Otherwise, raise *note HTTPError: 1be5. if no other
     handler should try to handle this URL, or return `None' if you
     can't but another handler might.

          Note: The default implementation of this method does not
          strictly follow RFC 2616(2), which says that 301 and 302
          responses to `POST' requests must not be automatically
          redirected without confirmation by the user.  In reality,
          browsers do allow automatic redirection of these responses,
          changing the POST to a `GET', and the default implementation
          reproduces this behavior.

 -- Method: HTTPRedirectHandler.http_error_301 (req, fp, code, msg,
          hdrs)
     Redirect to the `Location:' or `URI:' URL.  This method is called
     by the parent *note OpenerDirector: 1bd7. when getting an HTTP
     'moved permanently' response.

 -- Method: HTTPRedirectHandler.http_error_302 (req, fp, code, msg,
          hdrs)
     The same as *note http_error_301(): 1c13, but called for the
     'found' response.

 -- Method: HTTPRedirectHandler.http_error_303 (req, fp, code, msg,
          hdrs)
     The same as *note http_error_301(): 1c13, but called for the 'see
     other' response.

 -- Method: HTTPRedirectHandler.http_error_307 (req, fp, code, msg,
          hdrs)
     The same as *note http_error_301(): 1c13, but called for the
     'temporary redirect' response.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2616.html

  (2) http://tools.ietf.org/html/rfc2616.html


File: python.info,  Node: HTTPCookieProcessor Objects,  Next: ProxyHandler Objects,  Prev: HTTPRedirectHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.5 HTTPCookieProcessor Objects
....................................

New in version 2.4.

  *note HTTPCookieProcessor: 1be9. instances have one attribute:

 -- Attribute: HTTPCookieProcessor.cookiejar
     The *note cookielib.CookieJar: 1c1a. in which cookies are stored.


File: python.info,  Node: ProxyHandler Objects,  Next: HTTPPasswordMgr Objects,  Prev: HTTPCookieProcessor Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.6 ProxyHandler Objects
.............................

 -- Method: ProxyHandler.protocol_open (request)
     ("protocol" is to be replaced by the protocol name.)

     The *note ProxyHandler: 1bd9. will have a method `_protocol__open'
     for every _protocol_ which has a proxy in the _proxies_ dictionary
     given in the constructor.  The method will modify requests to go
     through the proxy, by calling `request.set_proxy()', and call the
     next handler in the chain to actually execute the protocol.


File: python.info,  Node: HTTPPasswordMgr Objects,  Next: AbstractBasicAuthHandler Objects,  Prev: ProxyHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.7 HTTPPasswordMgr Objects
................................

These methods are available on *note HTTPPasswordMgr: 1bea. and *note
HTTPPasswordMgrWithDefaultRealm: 1beb. objects.

 -- Method: HTTPPasswordMgr.add_password (realm, uri, user, passwd)
     _uri_ can be either a single URI, or a sequence of URIs. _realm_,
     _user_ and _passwd_ must be strings. This causes `(user, passwd)'
     to be used as authentication tokens when authentication for
     _realm_ and a super-URI of any of the given URIs is given.

 -- Method: HTTPPasswordMgr.find_user_password (realm, authuri)
     Get user/password for given realm and URI, if any.  This method
     will return `(None, None)' if there is no matching user/password.

     For *note HTTPPasswordMgrWithDefaultRealm: 1beb. objects, the
     realm `None' will be searched if the given _realm_ has no matching
     user/password.


File: python.info,  Node: AbstractBasicAuthHandler Objects,  Next: HTTPBasicAuthHandler Objects,  Prev: HTTPPasswordMgr Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.8 AbstractBasicAuthHandler Objects
.........................................

 -- Method: AbstractBasicAuthHandler.http_error_auth_reqed (authreq,
          host, req, headers)
     Handle an authentication request by getting a user/password pair,
     and re-trying the request.  _authreq_ should be the name of the
     header where the information about the realm is included in the
     request, _host_ specifies the URL and path to authenticate for,
     _req_ should be the (failed) *note Request: 1bd5. object, and
     _headers_ should be the error headers.

     _host_ is either an authority (e.g. `"python.org"') or a URL
     containing an authority component (e.g. `"http://python.org/"').
     In either case, the authority must not contain a userinfo
     component (so, `"python.org"' and `"python.org:80"' are fine,
     `"joe:password@python.org"' is not).


File: python.info,  Node: HTTPBasicAuthHandler Objects,  Next: ProxyBasicAuthHandler Objects,  Prev: AbstractBasicAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.9 HTTPBasicAuthHandler Objects
.....................................

 -- Method: HTTPBasicAuthHandler.http_error_401 (req, fp, code, msg,
          hdrs)
     Retry the request with authentication information, if available.


File: python.info,  Node: ProxyBasicAuthHandler Objects,  Next: AbstractDigestAuthHandler Objects,  Prev: HTTPBasicAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.10 ProxyBasicAuthHandler Objects
.......................................

 -- Method: ProxyBasicAuthHandler.http_error_407 (req, fp, code, msg,
          hdrs)
     Retry the request with authentication information, if available.


File: python.info,  Node: AbstractDigestAuthHandler Objects,  Next: HTTPDigestAuthHandler Objects,  Prev: ProxyBasicAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.11 AbstractDigestAuthHandler Objects
...........................................

 -- Method: AbstractDigestAuthHandler.http_error_auth_reqed (authreq,
          host, req, headers)
     _authreq_ should be the name of the header where the information
     about the realm is included in the request, _host_ should be the
     host to authenticate to, _req_ should be the (failed) *note
     Request: 1bd5. object, and _headers_ should be the error headers.


File: python.info,  Node: HTTPDigestAuthHandler Objects,  Next: ProxyDigestAuthHandler Objects,  Prev: AbstractDigestAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.12 HTTPDigestAuthHandler Objects
.......................................

 -- Method: HTTPDigestAuthHandler.http_error_401 (req, fp, code, msg,
          hdrs)
     Retry the request with authentication information, if available.


File: python.info,  Node: ProxyDigestAuthHandler Objects,  Next: HTTPHandler Objects,  Prev: HTTPDigestAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.13 ProxyDigestAuthHandler Objects
........................................

 -- Method: ProxyDigestAuthHandler.http_error_407 (req, fp, code, msg,
          hdrs)
     Retry the request with authentication information, if available.


File: python.info,  Node: HTTPHandler Objects,  Next: HTTPSHandler Objects,  Prev: ProxyDigestAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.14 HTTPHandler Objects
.............................

 -- Method: HTTPHandler.http_open (req)
     Send an HTTP request, which can be either GET or POST, depending on
     `req.has_data()'.


File: python.info,  Node: HTTPSHandler Objects,  Next: FileHandler Objects,  Prev: HTTPHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.15 HTTPSHandler Objects
..............................

 -- Method: HTTPSHandler.https_open (req)
     Send an HTTPS request, which can be either GET or POST, depending
     on `req.has_data()'.


File: python.info,  Node: FileHandler Objects,  Next: FTPHandler Objects,  Prev: HTTPSHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.16 FileHandler Objects
.............................

 -- Method: FileHandler.file_open (req)
     Open the file locally, if there is no host name, or the host name
     is `'localhost''. Change the protocol to `ftp' otherwise, and
     retry opening it using `parent'.


File: python.info,  Node: FTPHandler Objects,  Next: CacheFTPHandler Objects,  Prev: FileHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.17 FTPHandler Objects
............................

 -- Method: FTPHandler.ftp_open (req)
     Open the FTP file indicated by _req_. The login is always done
     with empty username and password.


File: python.info,  Node: CacheFTPHandler Objects,  Next: UnknownHandler Objects,  Prev: FTPHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.18 CacheFTPHandler Objects
.................................

*note CacheFTPHandler: 1bf3. objects are *note FTPHandler: 1be1.
objects with the following additional methods:

 -- Method: CacheFTPHandler.setTimeout (t)
     Set timeout of connections to _t_ seconds.

 -- Method: CacheFTPHandler.setMaxConns (m)
     Set maximum number of cached connections to _m_.


File: python.info,  Node: UnknownHandler Objects,  Next: HTTPErrorProcessor Objects,  Prev: CacheFTPHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.19 UnknownHandler Objects
................................

 -- Method: UnknownHandler.unknown_open ()
     Raise a *note URLError: 1bd6. exception.


File: python.info,  Node: HTTPErrorProcessor Objects,  Next: Examples<12>,  Prev: UnknownHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.20 HTTPErrorProcessor Objects
....................................

New in version 2.4.

 -- Method: HTTPErrorProcessor.unknown_open ()
     Process HTTP error responses.

     For 200 error codes, the response object is returned immediately.

     For non-200 error codes, this simply passes the job on to the
     `_protocol__error_code' handler methods, via *note
     OpenerDirector.error(): 1c06.  Eventually, *note
     urllib2.HTTPDefaultErrorHandler: 1bdf. will raise an *note
     HTTPError: 1be5. if no other handler handles the error.


File: python.info,  Node: Examples<12>,  Prev: HTTPErrorProcessor Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.21 Examples
..................

This example gets the python.org main page and displays the first 100
bytes of it:

    >>> import urllib2
    >>> f = urllib2.urlopen('http://www.python.org/')
    >>> print f.read(100)
    <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
    <?xml-stylesheet href="./css/ht2html

Here we are sending a data-stream to the stdin of a CGI and reading the
data it returns to us. Note that this example will only work when the
Python installation supports SSL.

    >>> import urllib2
    >>> req = urllib2.Request(url='https://localhost/cgi-bin/test.cgi',
    ...                       data='This data is passed to stdin of the CGI')
    >>> f = urllib2.urlopen(req)
    >>> print f.read()
    Got Data: "This data is passed to stdin of the CGI"

The code for the sample CGI used in the above example is:

    #!/usr/bin/env python
    import sys
    data = sys.stdin.read()
    print 'Content-type: text-plain\n\nGot Data: "%s"' % data

Use of Basic HTTP Authentication:

    import urllib2
    # Create an OpenerDirector with support for Basic HTTP Authentication...
    auth_handler = urllib2.HTTPBasicAuthHandler()
    auth_handler.add_password(realm='PDQ Application',
                              uri='https://mahler:8092/site-updates.py',
                              user='klem',
                              passwd='kadidd!ehopper')
    opener = urllib2.build_opener(auth_handler)
    # ...and install it globally so it can be used with urlopen.
    urllib2.install_opener(opener)
    urllib2.urlopen('http://www.example.com/login.html')

*note build_opener(): 1bdc. provides many handlers by default,
including a *note ProxyHandler: 1bd9.  By default, *note ProxyHandler:
1bd9. uses the environment variables named `<scheme>_proxy', where
`<scheme>' is the URL scheme involved.  For example, the `http_proxy'
environment variable is read to obtain the HTTP proxy's URL.

  This example replaces the default *note ProxyHandler: 1bd9. with one
that uses programmatically-supplied proxy URLs, and adds proxy
authorization support with *note ProxyBasicAuthHandler: 1bef.

    proxy_handler = urllib2.ProxyHandler({'http': 'http://www.example.com:3128/'})
    proxy_auth_handler = urllib2.ProxyBasicAuthHandler()
    proxy_auth_handler.add_password('realm', 'host', 'username', 'password')

    opener = urllib2.build_opener(proxy_handler, proxy_auth_handler)
    # This time, rather than install the OpenerDirector, we use it directly:
    opener.open('http://www.example.com/login.html')

Adding HTTP headers:

  Use the _headers_ argument to the *note Request: 1bd5. constructor,
or:

    import urllib2
    req = urllib2.Request('http://www.example.com/')
    req.add_header('Referer', 'http://www.python.org/')
    r = urllib2.urlopen(req)

*note OpenerDirector: 1bd7. automatically adds a `User-Agent' header to
every *note Request: 1bd5.  To change this:

    import urllib2
    opener = urllib2.build_opener()
    opener.addheaders = [('User-agent', 'Mozilla/5.0')]
    opener.open('http://www.example.com/')

Also, remember that a few standard headers (`Content-Length',
`Content-Type' and `Host') are added when the *note Request: 1bd5. is
passed to *note urlopen(): 34b. (or *note OpenerDirector.open(): 1bdb.).


File: python.info,  Node: httplib --- HTTP protocol client,  Next: ftplib --- FTP protocol client,  Prev: urllib2 --- extensible library for opening URLs,  Up: Internet Protocols and Support

5.20.7 `httplib' -- HTTP protocol client
----------------------------------------

     Note: The *note httplib: ef. module has been renamed to
     `http.client' in Python 3.0.  The *note 2to3: bbf. tool will
     automatically adapt imports when converting your sources to 3.0.

This module defines classes which implement the client side of the HTTP
and HTTPS protocols.  It is normally not used directly -- the module
*note urllib: 189.  uses it to handle URLs that use HTTP and HTTPS.

     Note: HTTPS support is only available if the *note socket: 15d.
     module was compiled with SSL support.

     Note: The public interface for this module changed substantially
     in Python 2.0.  The `HTTP' class is retained only for backward
     compatibility with 1.5.2.  It should not be used in new code.
     Refer to the online docstrings for usage.

  The module provides the following classes:

 -- Class: httplib.HTTPConnection (host[, port[, strict[, timeout[,
          source_address]]]])
     An *note HTTPConnection: 229. instance represents one transaction
     with an HTTP server.  It should be instantiated passing it a host
     and optional port number.  If no port number is passed, the port
     is extracted from the host string if it has the form `host:port',
     else the default HTTP port (80) is used.  When True, the optional
     parameter _strict_ (which defaults to a false value) causes
     `BadStatusLine' to be raised if the status line can't be parsed as
     a valid HTTP/1.0 or 1.1 status line.  If the optional _timeout_
     parameter is given, blocking operations (like connection attempts)
     will timeout after that many seconds (if it is not given, the
     global default timeout setting is used).  The optional
     _source_address_ parameter may be a tuple of a (host, port) to use
     as the source address the HTTP connection is made from.

     For example, the following calls all create instances that connect
     to the server at the same host and port:

         >>> h1 = httplib.HTTPConnection('www.cwi.nl')
         >>> h2 = httplib.HTTPConnection('www.cwi.nl:80')
         >>> h3 = httplib.HTTPConnection('www.cwi.nl', 80)
         >>> h3 = httplib.HTTPConnection('www.cwi.nl', 80, timeout=10)

     New in version 2.0.

     Changed in version 2.6: _timeout_ was added.

     Changed in version 2.7: _source_address_ was added.

 -- Class: httplib.HTTPSConnection (host[, port[, key_file[,
          cert_file[, strict[, timeout[, source_address]]]]]])
     A subclass of *note HTTPConnection: 229. that uses SSL for
     communication with secure servers.  Default port is `443'.
     _key_file_ is the name of a PEM formatted file that contains your
     private key. _cert_file_ is a PEM formatted certificate chain file.

          Warning: This does not do any verification of the server's
          certificate.

     New in version 2.0.

     Changed in version 2.6: _timeout_ was added.

     Changed in version 2.7: _source_address_ was added.

 -- Class: httplib.HTTPResponse (sock[, debuglevel=0][, strict=0])
     Class whose instances are returned upon successful connection.
     Not instantiated directly by user.

     New in version 2.0.

 -- Class: httplib.HTTPMessage
     An *note HTTPMessage: 1c4c. instance is used to hold the headers
     from an HTTP response. It is implemented using the *note
     mimetools.Message: 189c. class and provides utility functions to
     deal with HTTP Headers. It is not directly instantiated by the
     users.

  The following exceptions are raised as appropriate:

 -- Exception: httplib.HTTPException
     The base class of the other exceptions in this module.  It is a
     subclass of *note Exception: 328.

     New in version 2.0.

 -- Exception: httplib.NotConnected
     A subclass of *note HTTPException: 1c4d.

     New in version 2.0.

 -- Exception: httplib.InvalidURL
     A subclass of *note HTTPException: 1c4d, raised if a port is given
     and is either non-numeric or empty.

     New in version 2.3.

 -- Exception: httplib.UnknownProtocol
     A subclass of *note HTTPException: 1c4d.

     New in version 2.0.

 -- Exception: httplib.UnknownTransferEncoding
     A subclass of *note HTTPException: 1c4d.

     New in version 2.0.

 -- Exception: httplib.UnimplementedFileMode
     A subclass of *note HTTPException: 1c4d.

     New in version 2.0.

 -- Exception: httplib.IncompleteRead
     A subclass of *note HTTPException: 1c4d.

     New in version 2.0.

 -- Exception: httplib.ImproperConnectionState
     A subclass of *note HTTPException: 1c4d.

     New in version 2.0.

 -- Exception: httplib.CannotSendRequest
     A subclass of *note ImproperConnectionState: 1c54.

     New in version 2.0.

 -- Exception: httplib.CannotSendHeader
     A subclass of *note ImproperConnectionState: 1c54.

     New in version 2.0.

 -- Exception: httplib.ResponseNotReady
     A subclass of *note ImproperConnectionState: 1c54.

     New in version 2.0.

 -- Exception: httplib.BadStatusLine
     A subclass of *note HTTPException: 1c4d.  Raised if a server
     responds with a HTTP status code that we don't understand.

     New in version 2.0.

  The constants defined in this module are:

 -- Data: httplib.HTTP_PORT
     The default port for the HTTP protocol (always `80').

 -- Data: httplib.HTTPS_PORT
     The default port for the HTTPS protocol (always `443').

  and also the following constants for integer status codes:

Constant                                       Value         Definition
----------------------------------------------------------------------------------------------------------------------------------------- 
`CONTINUE'                                     `100'         HTTP/1.1, RFC 2616, Section 10.1.1(1)
`SWITCHING_PROTOCOLS'                          `101'         HTTP/1.1, RFC 2616, Section 10.1.2(2)
`PROCESSING'                                   `102'         WEBDAV, RFC 2518, Section 10.1(3)
`OK'                                           `200'         HTTP/1.1, RFC 2616, Section 10.2.1(4)
`CREATED'                                      `201'         HTTP/1.1, RFC 2616, Section 10.2.2(5)
`ACCEPTED'                                     `202'         HTTP/1.1, RFC 2616, Section 10.2.3(6)
`NON_AUTHORITATIVE_INFORMATION'                `203'         HTTP/1.1, RFC 2616, Section 10.2.4(7)
`NO_CONTENT'                                   `204'         HTTP/1.1, RFC 2616, Section 10.2.5(8)
`RESET_CONTENT'                                `205'         HTTP/1.1, RFC 2616, Section 10.2.6(9)
`PARTIAL_CONTENT'                              `206'         HTTP/1.1, RFC 2616, Section 10.2.7(10)
`MULTI_STATUS'                                 `207'         WEBDAV RFC 2518, Section 10.2(11)
`IM_USED'                                      `226'         Delta encoding in HTTP, RFC 3229(12), Section 10.4.1
`MULTIPLE_CHOICES'                             `300'         HTTP/1.1, RFC 2616, Section 10.3.1(13)
`MOVED_PERMANENTLY'                            `301'         HTTP/1.1, RFC 2616, Section 10.3.2(14)
`FOUND'                                        `302'         HTTP/1.1, RFC 2616, Section 10.3.3(15)
`SEE_OTHER'                                    `303'         HTTP/1.1, RFC 2616, Section 10.3.4(16)
`NOT_MODIFIED'                                 `304'         HTTP/1.1, RFC 2616, Section 10.3.5(17)
`USE_PROXY'                                    `305'         HTTP/1.1, RFC 2616, Section 10.3.6(18)
`TEMPORARY_REDIRECT'                           `307'         HTTP/1.1, RFC 2616, Section 10.3.8(19)
`BAD_REQUEST'                                  `400'         HTTP/1.1, RFC 2616, Section 10.4.1(20)
`UNAUTHORIZED'                                 `401'         HTTP/1.1, RFC 2616, Section 10.4.2(21)
`PAYMENT_REQUIRED'                             `402'         HTTP/1.1, RFC 2616, Section 10.4.3(22)
`FORBIDDEN'                                    `403'         HTTP/1.1, RFC 2616, Section 10.4.4(23)
`NOT_FOUND'                                    `404'         HTTP/1.1, RFC 2616, Section 10.4.5(24)
`METHOD_NOT_ALLOWED'                           `405'         HTTP/1.1, RFC 2616, Section 10.4.6(25)
`NOT_ACCEPTABLE'                               `406'         HTTP/1.1, RFC 2616, Section 10.4.7(26)
`PROXY_AUTHENTICATION_REQUIRED'                `407'         HTTP/1.1, RFC 2616, Section 10.4.8(27)
`REQUEST_TIMEOUT'                              `408'         HTTP/1.1, RFC 2616, Section 10.4.9(28)
`CONFLICT'                                     `409'         HTTP/1.1, RFC 2616, Section 10.4.10(29)
`GONE'                                         `410'         HTTP/1.1, RFC 2616, Section 10.4.11(30)
`LENGTH_REQUIRED'                              `411'         HTTP/1.1, RFC 2616, Section 10.4.12(31)
`PRECONDITION_FAILED'                          `412'         HTTP/1.1, RFC 2616, Section 10.4.13(32)
`REQUEST_ENTITY_TOO_LARGE'                     `413'         HTTP/1.1, RFC 2616, Section 10.4.14(33)
`REQUEST_URI_TOO_LONG'                         `414'         HTTP/1.1, RFC 2616, Section 10.4.15(34)
`UNSUPPORTED_MEDIA_TYPE'                       `415'         HTTP/1.1, RFC 2616, Section 10.4.16(35)
`REQUESTED_RANGE_NOT_SATISFIABLE'              `416'         HTTP/1.1, RFC 2616, Section 10.4.17(36)
`EXPECTATION_FAILED'                           `417'         HTTP/1.1, RFC 2616, Section 10.4.18(37)
`UNPROCESSABLE_ENTITY'                         `422'         WEBDAV, RFC 2518, Section 10.3(38)
`LOCKED'                                       `423'         WEBDAV RFC 2518, Section 10.4(39)
`FAILED_DEPENDENCY'                            `424'         WEBDAV, RFC 2518, Section 10.5(40)
`UPGRADE_REQUIRED'                             `426'         HTTP Upgrade to TLS, RFC 2817(41), Section 6
`INTERNAL_SERVER_ERROR'                        `500'         HTTP/1.1, RFC 2616, Section 10.5.1(42)
`NOT_IMPLEMENTED'                              `501'         HTTP/1.1, RFC 2616, Section 10.5.2(43)
`BAD_GATEWAY'                                  `502'         HTTP/1.1 RFC 2616, Section 10.5.3(44)
`SERVICE_UNAVAILABLE'                          `503'         HTTP/1.1, RFC 2616, Section 10.5.4(45)
`GATEWAY_TIMEOUT'                              `504'         HTTP/1.1 RFC 2616, Section 10.5.5(46)
`HTTP_VERSION_NOT_SUPPORTED'                   `505'         HTTP/1.1, RFC 2616, Section 10.5.6(47)
`INSUFFICIENT_STORAGE'                         `507'         WEBDAV, RFC 2518, Section 10.6(48)
`NOT_EXTENDED'                                 `510'         An HTTP Extension Framework, RFC 2774(49), Section 7

 -- Data: httplib.responses
     This dictionary maps the HTTP 1.1 status codes to the W3C names.

     Example: `httplib.responses[httplib.NOT_FOUND]' is `'Not Found''.

     New in version 2.5.

* Menu:

* HTTPConnection Objects::
* HTTPResponse Objects::
* Examples: Examples<13>.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.1.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.1.2

  (3) http://www.webdav.org/specs/rfc2518.html#STATUS_102

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.4

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.6

  (10) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.7

  (11) http://www.webdav.org/specs/rfc2518.html#STATUS_207

  (12) http://tools.ietf.org/html/rfc3229.html

  (13) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.1

  (14) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.2

  (15) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.3

  (16) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4

  (17) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5

  (18) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.6

  (19) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.8

  (20) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (21) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (22) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.3

  (23) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.4

  (24) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (25) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6

  (26) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.7

  (27) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.8

  (28) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.9

  (29) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10

  (30) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.11

  (31) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.12

  (32) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.13

  (33) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.14

  (34) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.15

  (35) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16

  (36) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.17

  (37) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.18

  (38) http://www.webdav.org/specs/rfc2518.html#STATUS_422

  (39) http://www.webdav.org/specs/rfc2518.html#STATUS_423

  (40) http://www.webdav.org/specs/rfc2518.html#STATUS_424

  (41) http://tools.ietf.org/html/rfc2817.html

  (42) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1

  (43) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.2

  (44) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.3

  (45) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4

  (46) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.5

  (47) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.6

  (48) http://www.webdav.org/specs/rfc2518.html#STATUS_507

  (49) http://tools.ietf.org/html/rfc2774.html


File: python.info,  Node: HTTPConnection Objects,  Next: HTTPResponse Objects,  Up: httplib --- HTTP protocol client

5.20.7.1 HTTPConnection Objects
...............................

*note HTTPConnection: 229. instances have the following methods:

 -- Method: HTTPConnection.request (method, url[, body[, headers]])
     This will send a request to the server using the HTTP request
     method _method_ and the selector _url_.  If the _body_ argument is
     present, it should be a string of data to send after the headers
     are finished. Alternatively, it may be an open file object, in
     which case the contents of the file is sent; this file object
     should support `fileno()' and `read()' methods. The header
     Content-Length is automatically set to the correct value. The
     _headers_ argument should be a mapping of extra HTTP headers to
     send with the request.

     Changed in version 2.6: _body_ can be a file object.

 -- Method: HTTPConnection.getresponse ()
     Should be called after a request is sent to get the response from
     the server.  Returns an *note HTTPResponse: 228. instance.

          Note: Note that you must have read the whole response before
          you can send a new request to the server.

 -- Method: HTTPConnection.set_debuglevel (level)
     Set the debugging level (the amount of debugging output printed).
     The default debug level is `0', meaning no debugging output is
     printed.

 -- Method: HTTPConnection.set_tunnel (host, port=None, headers=None)
     Set the host and the port for HTTP Connect Tunnelling. Normally
     used when it is required to do HTTPS Conection through a proxy
     server.

     The headers argument should be a mapping of extra HTTP headers to
     to sent with the CONNECT request.

     New in version 2.7.

 -- Method: HTTPConnection.connect ()
     Connect to the server specified when the object was created.

 -- Method: HTTPConnection.close ()
     Close the connection to the server.

  As an alternative to using the `request()' method described above,
you can also send your request step by step, by using the four
functions below.

 -- Method: HTTPConnection.putrequest (request, selector[, skip_host[,
          skip_accept_encoding]])
     This should be the first call after the connection to the server
     has been made.  It sends a line to the server consisting of the
     _request_ string, the _selector_ string, and the HTTP version
     (`HTTP/1.1').  To disable automatic sending of `Host:' or
     `Accept-Encoding:' headers (for example to accept additional
     content encodings), specify _skip_host_ or _skip_accept_encoding_
     with non-False values.

     Changed in version 2.4: _skip_accept_encoding_ argument added.

 -- Method: HTTPConnection.putheader (header, argument[, ...])
     Send an RFC 822(1)-style header to the server.  It sends a line to
     the server consisting of the header, a colon and a space, and the
     first argument.  If more arguments are given, continuation lines
     are sent, each consisting of a tab and an argument.

 -- Method: HTTPConnection.endheaders ()
     Send a blank line to the server, signalling the end of the headers.

 -- Method: HTTPConnection.send (data)
     Send data to the server.  This should be used directly only after
     the *note endheaders(): 1c66. method has been called and before
     *note getresponse(): 1c5f. is called.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc822.html


File: python.info,  Node: HTTPResponse Objects,  Next: Examples<13>,  Prev: HTTPConnection Objects,  Up: httplib --- HTTP protocol client

5.20.7.2 HTTPResponse Objects
.............................

*note HTTPResponse: 228. instances have the following methods and
attributes:

 -- Method: HTTPResponse.read ([amt])
     Reads and returns the response body, or up to the next _amt_ bytes.

 -- Method: HTTPResponse.getheader (name[, default])
     Get the contents of the header _name_, or _default_ if there is no
     matching header.

 -- Method: HTTPResponse.getheaders ()
     Return a list of (header, value) tuples.

     New in version 2.4.

 -- Method: HTTPResponse.fileno ()
     Returns the `fileno' of the underlying socket.

 -- Attribute: HTTPResponse.msg
     A *note mimetools.Message: 189c. instance containing the response
     headers.

 -- Attribute: HTTPResponse.version
     HTTP protocol version used by server.  10 for HTTP/1.0, 11 for
     HTTP/1.1.

 -- Attribute: HTTPResponse.status
     Status code returned by server.

 -- Attribute: HTTPResponse.reason
     Reason phrase returned by server.


File: python.info,  Node: Examples<13>,  Prev: HTTPResponse Objects,  Up: httplib --- HTTP protocol client

5.20.7.3 Examples
.................

Here is an example session that uses the `GET' method:

    >>> import httplib
    >>> conn = httplib.HTTPConnection("www.python.org")
    >>> conn.request("GET", "/index.html")
    >>> r1 = conn.getresponse()
    >>> print r1.status, r1.reason
    200 OK
    >>> data1 = r1.read()
    >>> conn.request("GET", "/parrot.spam")
    >>> r2 = conn.getresponse()
    >>> print r2.status, r2.reason
    404 Not Found
    >>> data2 = r2.read()
    >>> conn.close()

Here is an example session that uses the `HEAD' method.  Note that the
`HEAD' method never returns any data.

    >>> import httplib
    >>> conn = httplib.HTTPConnection("www.python.org")
    >>> conn.request("HEAD","/index.html")
    >>> res = conn.getresponse()
    >>> print res.status, res.reason
    200 OK
    >>> data = res.read()
    >>> print len(data)
    0
    >>> data == ''
    True

Here is an example session that shows how to `POST' requests:

    >>> import httplib, urllib
    >>> params = urllib.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
    >>> headers = {"Content-type": "application/x-www-form-urlencoded",
    ...            "Accept": "text/plain"}
    >>> conn = httplib.HTTPConnection("musi-cal.mojam.com:80")
    >>> conn.request("POST", "/cgi-bin/query", params, headers)
    >>> response = conn.getresponse()
    >>> print response.status, response.reason
    200 OK
    >>> data = response.read()
    >>> conn.close()



File: python.info,  Node: ftplib --- FTP protocol client,  Next: poplib --- POP3 protocol client,  Prev: httplib --- HTTP protocol client,  Up: Internet Protocols and Support

5.20.8 `ftplib' -- FTP protocol client
--------------------------------------

This module defines the class *note FTP: 336. and a few related items.
The *note FTP: 336. class implements the client side of the FTP
protocol.  You can use this to write Python programs that perform a
variety of automated FTP jobs, such as mirroring other ftp servers.  It
is also used by the module *note urllib: 189. to handle URLs that use
FTP.  For more information on FTP (File Transfer Protocol), see Internet RFC
959(1).

  Here's a sample session using the *note ftplib: d9. module:

    >>> from ftplib import FTP
    >>> ftp = FTP('ftp.cwi.nl')   # connect to host, default port
    >>> ftp.login()               # user anonymous, passwd anonymous@
    >>> ftp.retrlines('LIST')     # list directory contents
    total 24418
    drwxrwsr-x   5 ftp-usr  pdmaint     1536 Mar 20 09:48 .
    dr-xr-srwt 105 ftp-usr  pdmaint     1536 Mar 21 14:32 ..
    -rw-r--r--   1 ftp-usr  pdmaint     5305 Mar 20 09:48 INDEX
     .
     .
     .
    >>> ftp.retrbinary('RETR README', open('README', 'wb').write)
    '226 Transfer complete.'
    >>> ftp.quit()

The module defines the following items:

 -- Class: ftplib.FTP ([host[, user[, passwd[, acct[, timeout]]]]])
     Return a new instance of the *note FTP: 336. class.  When _host_
     is given, the method call `connect(host)' is made.  When _user_ is
     given, additionally the method call `login(user, passwd, acct)' is
     made (where _passwd_ and _acct_ default to the empty string when
     not given).  The optional _timeout_ parameter specifies a timeout
     in seconds for blocking operations like the connection attempt (if
     is not specified, the global default timeout setting will be used).

     Changed in version 2.6: _timeout_ was added.

 -- Class: ftplib.FTP_TLS ([host[, user[, passwd[, acct[, keyfile[,
          certfile[, timeout]]]]]]])
     A *note FTP: 336. subclass which adds TLS support to FTP as
     described in RFC 4217(2).  Connect as usual to port 21 implicitly
     securing the FTP control connection before authenticating.
     Securing the data connection requires the user to explicitly ask
     for it by calling the *note prot_p(): 1c76. method.  _keyfile_ and
     _certfile_ are optional - they can contain a PEM formatted private
     key and certificate chain file name for the SSL connection.

     New in version 2.7.

     Here's a sample session using the *note FTP_TLS: 216. class:

         >>> from ftplib import FTP_TLS
         >>> ftps = FTP_TLS('ftp.python.org')
         >>> ftps.login()           # login anonymously before securing control channel
         >>> ftps.prot_p()          # switch to secure data connection
         >>> ftps.retrlines('LIST') # list directory content securely
         total 9
         drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 .
         drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 ..
         drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 bin
         drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 etc
         d-wxrwxr-x   2 ftp      wheel        1024 Sep  5 13:43 incoming
         drwxr-xr-x   2 root     wheel        1024 Nov 17  1993 lib
         drwxr-xr-x   6 1094     wheel        1024 Sep 13 19:07 pub
         drwxr-xr-x   3 root     wheel        1024 Jan  3  1994 usr
         -rw-r--r--   1 root     root          312 Aug  1  1994 welcome.msg
         '226 Transfer complete.'
         >>> ftps.quit()
         >>>



 -- Exception: ftplib.error_reply
     Exception raised when an unexpected reply is received from the
     server.

 -- Exception: ftplib.error_temp
     Exception raised when an error code signifying a temporary error
     (response codes in the range 400-499) is received.

 -- Exception: ftplib.error_perm
     Exception raised when an error code signifying a permanent error
     (response codes in the range 500-599) is received.

 -- Exception: ftplib.error_proto
     Exception raised when a reply is received from the server that
     does not fit the response specifications of the File Transfer
     Protocol, i.e. begin with a digit in the range 1-5.

 -- Data: ftplib.all_errors
     The set of all exceptions (as a tuple) that methods of *note FTP:
     336.  instances may raise as a result of problems with the FTP
     connection (as opposed to programming errors made by the caller).
     This set includes the four exceptions listed above as well as
     *note socket.error: 370. and *note IOError: 1f7.

See also
........

Module *note netrc: 122.
     Parser for the `.netrc' file format.  The file `.netrc' is
     typically used by FTP clients to load user authentication
     information before prompting the user.

  The file `Tools/scripts/ftpmirror.py' in the Python source
distribution is a script that can mirror FTP sites, or portions
thereof, using the *note ftplib: d9.  module. It can be used as an
extended example that applies this module.

* Menu:

* FTP Objects::
* FTP_TLS Objects::

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc959.html

  (2) http://tools.ietf.org/html/rfc4217.html


File: python.info,  Node: FTP Objects,  Next: FTP_TLS Objects,  Up: ftplib --- FTP protocol client

5.20.8.1 FTP Objects
....................

Several methods are available in two flavors: one for handling text
files and another for binary files.  These are named for the command
which is used followed by `lines' for the text version or `binary' for
the binary version.

  *note FTP: 336. instances have the following methods:

 -- Method: FTP.set_debuglevel (level)
     Set the instance's debugging level.  This controls the amount of
     debugging output printed.  The default, `0', produces no debugging
     output.  A value of `1' produces a moderate amount of debugging
     output, generally a single line per request.  A value of `2' or
     higher produces the maximum amount of debugging output, logging
     each line sent and received on the control connection.

 -- Method: FTP.connect (host[, port[, timeout]])
     Connect to the given host and port.  The default port number is
     `21', as specified by the FTP protocol specification.  It is
     rarely needed to specify a different port number.  This function
     should be called only once for each instance; it should not be
     called at all if a host was given when the instance was created.
     All other methods can only be used after a connection has been
     made.

     The optional _timeout_ parameter specifies a timeout in seconds
     for the connection attempt. If no _timeout_ is passed, the global
     default timeout setting will be used.

     Changed in version 2.6: _timeout_ was added.

 -- Method: FTP.getwelcome ()
     Return the welcome message sent by the server in reply to the
     initial connection.  (This message sometimes contains disclaimers
     or help information that may be relevant to the user.)

 -- Method: FTP.login ([user[, passwd[, acct]]])
     Log in as the given _user_.  The _passwd_ and _acct_ parameters
     are optional and default to the empty string.  If no _user_ is
     specified, it defaults to `'anonymous''.  If _user_ is
     `'anonymous'', the default _passwd_ is `'anonymous@''.  This
     function should be called only once for each instance, after a
     connection has been established; it should not be called at all if
     a host and user were given when the instance was created.  Most
     FTP commands are only allowed after the client has logged in.  The
     _acct_ parameter supplies "accounting information"; few systems
     implement this.

 -- Method: FTP.abort ()
     Abort a file transfer that is in progress.  Using this does not
     always work, but it's worth a try.

 -- Method: FTP.sendcmd (command)
     Send a simple command string to the server and return the response
     string.

 -- Method: FTP.voidcmd (command)
     Send a simple command string to the server and handle the
     response.  Return nothing if a response code corresponding to
     success (codes in the range 200-299) is received.  Raise *note
     error_reply: 1c77. otherwise.

 -- Method: FTP.retrbinary (command, callback[, maxblocksize[, rest]])
     Retrieve a file in binary transfer mode.  _command_ should be an
     appropriate `RETR' command: `'RETR filename''. The _callback_
     function is called for each block of data received, with a single
     string argument giving the data block. The optional _maxblocksize_
     argument specifies the maximum chunk size to read on the low-level
     socket object created to do the actual transfer (which will also
     be the largest size of the data blocks passed to _callback_).  A
     reasonable default is chosen. _rest_ means the same thing as in the
     *note transfercmd(): 1c86. method.

 -- Method: FTP.retrlines (command[, callback])
     Retrieve a file or directory listing in ASCII transfer mode.
     _command_ should be an appropriate `RETR' command (see *note
     retrbinary(): 1c85.) or a command such as `LIST', `NLST' or `MLSD'
     (usually just the string `'LIST'').  `LIST' retrieves a list of
     files and information about those files.  `NLST' retrieves a list
     of file names.  On some servers, `MLSD' retrieves a machine
     readable list of files and information about those files.  The
     _callback_ function is called for each line with a string argument
     containing the line with the trailing CRLF stripped.  The default
     _callback_ prints the line to `sys.stdout'.

 -- Method: FTP.set_pasv (boolean)
     Enable "passive" mode if _boolean_ is true, other disable passive
     mode.  (In Python 2.0 and before, passive mode was off by default;
     in Python 2.1 and later, it is on by default.)

 -- Method: FTP.storbinary (command, file[, blocksize, callback, rest])
     Store a file in binary transfer mode.  _command_ should be an
     appropriate `STOR' command: `"STOR filename"'. _file_ is an open
     file object which is read until EOF using its `read()' method in
     blocks of size _blocksize_ to provide the data to be stored.  The
     _blocksize_ argument defaults to 8192.  _callback_ is an optional
     single parameter callable that is called on each block of data
     after it is sent. _rest_ means the same thing as in the *note
     transfercmd(): 1c86. method.

     Changed in version 2.1: default for _blocksize_ added.

     Changed in version 2.6: _callback_ parameter added.

     Changed in version 2.7: _rest_ parameter added.

 -- Method: FTP.storlines (command, file[, callback])
     Store a file in ASCII transfer mode.  _command_ should be an
     appropriate `STOR' command (see *note storbinary(): 217.).  Lines
     are read until EOF from the open file object _file_ using its
     *note readline(): 145. method to provide the data to be stored.
     _callback_ is an optional single parameter callable that is called
     on each line after it is sent.

     Changed in version 2.6: _callback_ parameter added.

 -- Method: FTP.transfercmd (cmd[, rest])
     Initiate a transfer over the data connection.  If the transfer is
     active, send a `EPRT' or  `PORT' command and the transfer command
     specified by _cmd_, and accept the connection.  If the server is
     passive, send a `EPSV' or `PASV' command, connect to it, and start
     the transfer command.  Either way, return the socket for the
     connection.

     If optional _rest_ is given, a `REST' command is sent to the
     server, passing _rest_ as an argument.  _rest_ is usually a byte
     offset into the requested file, telling the server to restart
     sending the file's bytes at the requested offset, skipping over
     the initial bytes.  Note however that RFC 959 requires only that
     _rest_ be a string containing characters in the printable range
     from ASCII code 33 to ASCII code 126.  The *note transfercmd():
     1c86. method, therefore, converts _rest_ to a string, but no check
     is performed on the string's contents.  If the server does not
     recognize the `REST' command, an *note error_reply: 1c77. exception
     will be raised.  If this happens, simply call *note transfercmd():
     1c86. without a _rest_ argument.

 -- Method: FTP.ntransfercmd (cmd[, rest])
     Like *note transfercmd(): 1c86, but returns a tuple of the data
     connection and the expected size of the data.  If the expected
     size could not be computed, `None' will be returned as the
     expected size.  _cmd_ and _rest_ means the same thing as in *note
     transfercmd(): 1c86.

 -- Method: FTP.nlst (argument[, ...])
     Return a list of file names as returned by the `NLST' command.  The
     optional _argument_ is a directory to list (default is the current
     server directory).  Multiple arguments can be used to pass
     non-standard options to the `NLST' command.

 -- Method: FTP.dir (argument[, ...])
     Produce a directory listing as returned by the `LIST' command,
     printing it to standard output.  The optional _argument_ is a
     directory to list (default is the current server directory).
     Multiple arguments can be used to pass non-standard options to the
     `LIST' command.  If the last argument is a function, it is used as
     a _callback_ function as for *note retrlines(): 1c87.; the default
     prints to `sys.stdout'.  This method returns `None'.

 -- Method: FTP.rename (fromname, toname)
     Rename file _fromname_ on the server to _toname_.

 -- Method: FTP.delete (filename)
     Remove the file named _filename_ from the server.  If successful,
     returns the text of the response, otherwise raises *note
     error_perm: 1c79. on permission errors or *note error_reply: 1c77.
     on other errors.

 -- Method: FTP.cwd (pathname)
     Set the current directory on the server.

 -- Method: FTP.mkd (pathname)
     Create a new directory on the server.

 -- Method: FTP.pwd ()
     Return the pathname of the current directory on the server.

 -- Method: FTP.rmd (dirname)
     Remove the directory named _dirname_ on the server.

 -- Method: FTP.size (filename)
     Request the size of the file named _filename_ on the server.  On
     success, the size of the file is returned as an integer, otherwise
     `None' is returned.  Note that the `SIZE' command is not
     standardized, but is supported by many common server
     implementations.

 -- Method: FTP.quit ()
     Send a `QUIT' command to the server and close the connection. This
     is the "polite" way to close a connection, but it may raise an
     exception if the server responds with an error to the `QUIT'
     command.  This implies a call to the *note close(): 1c95. method
     which renders the *note FTP: 336. instance useless for subsequent
     calls (see below).

 -- Method: FTP.close ()
     Close the connection unilaterally.  This should not be applied to
     an already closed connection such as after a successful call to
     *note quit(): 861.  After this call the *note FTP: 336. instance
     should not be used any more (after a call to *note close(): 1c95.
     or *note quit(): 861. you cannot reopen the connection by issuing
     another *note login(): 1c81. method).


File: python.info,  Node: FTP_TLS Objects,  Prev: FTP Objects,  Up: ftplib --- FTP protocol client

5.20.8.2 FTP_TLS Objects
........................

*note FTP_TLS: 216. class inherits from *note FTP: 336, defining these
additional objects:

 -- Attribute: FTP_TLS.ssl_version
     The SSL version to use (defaults to _TLSv1_).

 -- Method: FTP_TLS.auth ()
     Set up secure control connection by using TLS or SSL, depending on
     what specified in *note ssl_version(): 1c97. attribute.

 -- Method: FTP_TLS.prot_p ()
     Set up secure data connection.

 -- Method: FTP_TLS.prot_c ()
     Set up clear text data connection.


File: python.info,  Node: poplib --- POP3 protocol client,  Next: imaplib --- IMAP4 protocol client,  Prev: ftplib --- FTP protocol client,  Up: Internet Protocols and Support

5.20.9 `poplib' -- POP3 protocol client
---------------------------------------

This module defines a class, *note POP3: 1c9c, which encapsulates a
connection to a POP3 server and implements the protocol as defined in RFC
1725(1).  The *note POP3: 1c9c. class supports both the minimal and
optional command sets.  Additionally, this module provides a class
*note POP3_SSL: 1c9d, which provides support for connecting to POP3
servers that use SSL as an underlying protocol layer.

  Note that POP3, though widely supported, is obsolescent.  The
implementation quality of POP3 servers varies widely, and too many are
quite poor. If your mailserver supports IMAP, you would be better off
using the *note imaplib.IMAP4: 1c9e. class, as IMAP servers tend to be
better implemented.

  A single class is provided by the *note poplib: 136. module:

 -- Class: poplib.POP3 (host[, port[, timeout]])
     This class implements the actual POP3 protocol.  The connection is
     created when the instance is initialized. If _port_ is omitted,
     the standard POP3 port (110) is used. The optional _timeout_
     parameter specifies a timeout in seconds for the connection
     attempt (if not specified, the global default timeout setting will
     be used).

     Changed in version 2.6: _timeout_ was added.

 -- Class: poplib.POP3_SSL (host[, port[, keyfile[, certfile]]])
     This is a subclass of *note POP3: 1c9c. that connects to the
     server over an SSL encrypted socket.  If _port_ is not specified,
     995, the standard POP3-over-SSL port is used.  _keyfile_ and
     _certfile_ are also optional - they can contain a PEM formatted
     private key and certificate chain file for the SSL connection.

     New in version 2.4.

  One exception is defined as an attribute of the *note poplib: 136.
module:

 -- Exception: poplib.error_proto
     Exception raised on any errors from this module (errors from *note
     socket: 15d.  module are not caught). The reason for the exception
     is passed to the constructor as a string.

See also
........

Module *note imaplib: f3.
     The standard Python IMAP module.

Frequently Asked Questions About Fetchmail(2)
     The FAQ for the *fetchmail* POP/IMAP client collects information on
     POP3 server variations and RFC noncompliance that may be useful if
     you need to write an application based on the POP protocol.

* Menu:

* POP3 Objects::
* POP3 Example::

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc1725.html

  (2) http://www.catb.org/~esr/fetchmail/fetchmail-FAQ.html


File: python.info,  Node: POP3 Objects,  Next: POP3 Example,  Up: poplib --- POP3 protocol client

5.20.9.1 POP3 Objects
.....................

All POP3 commands are represented by methods of the same name, in
lower-case; most return the response text sent by the server.

  An *note POP3: 1c9c. instance has the following methods:

 -- Method: POP3.set_debuglevel (level)
     Set the instance's debugging level.  This controls the amount of
     debugging output printed.  The default, `0', produces no debugging
     output.  A value of `1' produces a moderate amount of debugging
     output, generally a single line per request.  A value of `2' or
     higher produces the maximum amount of debugging output, logging
     each line sent and received on the control connection.

 -- Method: POP3.getwelcome ()
     Returns the greeting string sent by the POP3 server.

 -- Method: POP3.user (username)
     Send user command, response should indicate that a password is
     required.

 -- Method: POP3.pass_ (password)
     Send password, response includes message count and mailbox size.
     Note: the mailbox on the server is locked until *note quit(): 861.
     is called.

 -- Method: POP3.apop (user, secret)
     Use the more secure APOP authentication to log into the POP3
     server.

 -- Method: POP3.rpop (user)
     Use RPOP authentication (similar to UNIX r-commands) to log into
     POP3 server.

 -- Method: POP3.stat ()
     Get mailbox status.  The result is a tuple of 2 integers:
     `(message count, mailbox size)'.

 -- Method: POP3.list ([which])
     Request message list, result is in the form `(response, ['mesg_num
     octets', ...], octets)'. If _which_ is set, it is the message to
     list.

 -- Method: POP3.retr (which)
     Retrieve whole message number _which_, and set its seen flag.
     Result is in form `(response, ['line', ...], octets)'.

 -- Method: POP3.dele (which)
     Flag message number _which_ for deletion.  On most servers
     deletions are not actually performed until QUIT (the major
     exception is Eudora QPOP, which deliberately violates the RFCs by
     doing pending deletes on any disconnect).

 -- Method: POP3.rset ()
     Remove any deletion marks for the mailbox.

 -- Method: POP3.noop ()
     Do nothing.  Might be used as a keep-alive.

 -- Method: POP3.quit ()
     Signoff:  commit changes, unlock mailbox, drop connection.

 -- Method: POP3.top (which, howmuch)
     Retrieves the message header plus _howmuch_ lines of the message
     after the header of message number _which_. Result is in form
     `(response, ['line', ...], octets)'.

     The POP3 TOP command this method uses, unlike the RETR command,
     doesn't set the message's seen flag; unfortunately, TOP is poorly
     specified in the RFCs and is frequently broken in off-brand
     servers. Test this method by hand against the POP3 servers you
     will use before trusting it.

 -- Method: POP3.uidl ([which])
     Return message digest (unique id) list. If _which_ is specified,
     result contains the unique id for that message in the form
     `'response mesgnum uid', otherwise result is list `(response,
     ['mesgnum uid', ...], octets)'.

  Instances of *note POP3_SSL: 1c9d. have no additional methods. The
interface of this subclass is identical to its parent.


File: python.info,  Node: POP3 Example,  Prev: POP3 Objects,  Up: poplib --- POP3 protocol client

5.20.9.2 POP3 Example
.....................

Here is a minimal example (without error checking) that opens a mailbox
and retrieves and prints all messages:

    import getpass, poplib

    M = poplib.POP3('localhost')
    M.user(getpass.getuser())
    M.pass_(getpass.getpass())
    numMessages = len(M.list()[1])
    for i in range(numMessages):
        for j in M.retr(i+1)[1]:
            print j

At the end of the module, there is a test section that contains a more
extensive example of usage.


File: python.info,  Node: imaplib --- IMAP4 protocol client,  Next: nntplib --- NNTP protocol client,  Prev: poplib --- POP3 protocol client,  Up: Internet Protocols and Support

5.20.10 `imaplib' -- IMAP4 protocol client
------------------------------------------

This module defines three classes, *note IMAP4: 1c9e, *note IMAP4_SSL:
1cb5. and *note IMAP4_stream: 1cb6, which encapsulate a connection to
an IMAP4 server and implement a large subset of the IMAP4rev1 client
protocol as defined in RFC 2060(1). It is backward compatible with
IMAP4 ( RFC 1730(2)) servers, but note that the `STATUS' command is not
supported in IMAP4.

  Three classes are provided by the *note imaplib: f3. module, *note
IMAP4: 1c9e. is the base class:

 -- Class: imaplib.IMAP4 ([host[, port]])
     This class implements the actual IMAP4 protocol.  The connection
     is created and protocol version (IMAP4 or IMAP4rev1) is determined
     when the instance is initialized. If _host_ is not specified, `'''
     (the local host) is used. If _port_ is omitted, the standard IMAP4
     port (143) is used.

  Three exceptions are defined as attributes of the *note IMAP4: 1c9e.
class:

 -- Exception: IMAP4.error
     Exception raised on any errors.  The reason for the exception is
     passed to the constructor as a string.

 -- Exception: IMAP4.abort
     IMAP4 server errors cause this exception to be raised.  This is a
     sub-class of *note IMAP4.error: 1cb7.  Note that closing the
     instance and instantiating a new one will usually allow recovery
     from this exception.

 -- Exception: IMAP4.readonly
     This exception is raised when a writable mailbox has its status
     changed by the server.  This is a sub-class of *note IMAP4.error:
     1cb7.  Some other client now has write permission, and the mailbox
     will need to be re-opened to re-obtain write permission.

  There's also a subclass for secure connections:

 -- Class: imaplib.IMAP4_SSL ([host[, port[, keyfile[, certfile]]]])
     This is a subclass derived from *note IMAP4: 1c9e. that connects
     over an SSL encrypted socket (to use this class you need a socket
     module that was compiled with SSL support).  If _host_ is not
     specified, `''' (the local host) is used.  If _port_ is omitted,
     the standard IMAP4-over-SSL port (993) is used.  _keyfile_ and
     _certfile_ are also optional - they can contain a PEM formatted
     private key and certificate chain file for the SSL connection.

  The second subclass allows for connections created by a child process:

 -- Class: imaplib.IMAP4_stream (command)
     This is a subclass derived from *note IMAP4: 1c9e. that connects
     to the `stdin/stdout' file descriptors created by passing
     _command_ to `os.popen2()'.

     New in version 2.3.

  The following utility functions are defined:

 -- Function: imaplib.Internaldate2tuple (datestr)
     Parse an IMAP4 `INTERNALDATE' string and return corresponding local
     time.  The return value is a *note time.struct_time: a9b. instance
     or None if the string has wrong format.

 -- Function: imaplib.Int2AP (num)
     Converts an integer into a string representation using characters
     from the set [`A' .. `P'].

 -- Function: imaplib.ParseFlags (flagstr)
     Converts an IMAP4 `FLAGS' response to a tuple of individual flags.

 -- Function: imaplib.Time2Internaldate (date_time)
     Convert _date_time_ to an IMAP4 `INTERNALDATE' representation.  The
     return value is a string in the form: `"DD-Mmm-YYYY HH:MM:SS
     +HHMM"' (including double-quotes).  The _date_time_ argument can
     be a number (int or float) representing seconds since epoch (as
     returned by *note time.time(): 450.), a 9-tuple representing local
     time (as returned by *note time.localtime(): a9c.), or a
     double-quoted string.  In the last case, it is assumed to already
     be in the correct format.

  Note that IMAP4 message numbers change as the mailbox changes; in
particular, after an `EXPUNGE' command performs deletions the remaining
messages are renumbered. So it is highly advisable to use UIDs instead,
with the UID command.

  At the end of the module, there is a test section that contains a
more extensive example of usage.

See also
........

Documents describing the protocol, and sources and binaries  for servers
implementing it, can all be found at the University of Washington's
_IMAP Information Center_ (<http://www.washington.edu/imap/>).

* Menu:

* IMAP4 Objects::
* IMAP4 Example::

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2060.html

  (2) http://tools.ietf.org/html/rfc1730.html


File: python.info,  Node: IMAP4 Objects,  Next: IMAP4 Example,  Up: imaplib --- IMAP4 protocol client

5.20.10.1 IMAP4 Objects
.......................

All IMAP4rev1 commands are represented by methods of the same name,
either upper-case or lower-case.

  All arguments to commands are converted to strings, except for
`AUTHENTICATE', and the last argument to `APPEND' which is passed as an
IMAP4 literal.  If necessary (the string contains IMAP4
protocol-sensitive characters and isn't enclosed with either
parentheses or double quotes) each string is quoted.  However, the
_password_ argument to the `LOGIN' command is always quoted. If you
want to avoid having an argument string quoted (eg: the _flags_
argument to `STORE') then enclose the string in parentheses (eg:
`r'(\Deleted)'').

  Each command returns a tuple: `(type, [data, ...])' where _type_ is
usually `'OK'' or `'NO'', and _data_ is either the text from the
command response, or mandated results from the command. Each _data_ is
either a string, or a tuple. If a tuple, then the first part is the
header of the response, and the second part contains the data (ie:
'literal' value).

  The _message_set_ options to commands below is a string specifying
one or more messages to be acted upon.  It may be a simple message
number (`'1''), a range of message numbers (`'2:4''), or a group of
non-contiguous ranges separated by commas (`'1:3,6:9'').  A range can
contain an asterisk to indicate an infinite upper bound (`'3:*'').

  An *note IMAP4: 1c9e. instance has the following methods:

 -- Method: IMAP4.append (mailbox, flags, date_time, message)
     Append _message_ to named mailbox.

 -- Method: IMAP4.authenticate (mechanism, authobject)
     Authenticate command -- requires response processing.

     _mechanism_ specifies which authentication mechanism is to be used
     - it should appear in the instance variable `capabilities' in the
     form `AUTH=mechanism'.

     _authobject_ must be a callable object:

         data = authobject(response)

     It will be called to process server continuation responses. It
     should return `data' that will be encoded and sent to server. It
     should return `None' if the client abort response `*' should be
     sent instead.

 -- Method: IMAP4.check ()
     Checkpoint mailbox on server.

 -- Method: IMAP4.close ()
     Close currently selected mailbox. Deleted messages are removed
     from writable mailbox. This is the recommended command before
     `LOGOUT'.

 -- Method: IMAP4.copy (message_set, new_mailbox)
     Copy _message_set_ messages onto end of _new_mailbox_.

 -- Method: IMAP4.create (mailbox)
     Create new mailbox named _mailbox_.

 -- Method: IMAP4.delete (mailbox)
     Delete old mailbox named _mailbox_.

 -- Method: IMAP4.deleteacl (mailbox, who)
     Delete the ACLs (remove any rights) set for who on mailbox.

     New in version 2.4.

 -- Method: IMAP4.expunge ()
     Permanently remove deleted items from selected mailbox. Generates
     an `EXPUNGE' response for each deleted message. Returned data
     contains a list of `EXPUNGE' message numbers in order received.

 -- Method: IMAP4.fetch (message_set, message_parts)
     Fetch (parts of) messages.  _message_parts_ should be a string of
     message part names enclosed within parentheses, eg: `"(UID
     BODY[TEXT])"'.  Returned data are tuples of message part envelope
     and data.

 -- Method: IMAP4.getacl (mailbox)
     Get the `ACL's for _mailbox_. The method is non-standard, but is
     supported by the `Cyrus' server.

 -- Method: IMAP4.getannotation (mailbox, entry, attribute)
     Retrieve the specified `ANNOTATION's for _mailbox_. The method is
     non-standard, but is supported by the `Cyrus' server.

     New in version 2.5.

 -- Method: IMAP4.getquota (root)
     Get the `quota' _root_'s resource usage and limits. This method is
     part of the IMAP4 QUOTA extension defined in rfc2087.

     New in version 2.3.

 -- Method: IMAP4.getquotaroot (mailbox)
     Get the list of `quota' `roots' for the named _mailbox_. This
     method is part of the IMAP4 QUOTA extension defined in rfc2087.

     New in version 2.3.

 -- Method: IMAP4.list ([directory[, pattern]])
     List mailbox names in _directory_ matching _pattern_.  _directory_
     defaults to the top-level mail folder, and _pattern_ defaults to
     match anything.  Returned data contains a list of `LIST' responses.

 -- Method: IMAP4.login (user, password)
     Identify the client using a plaintext password. The _password_
     will be quoted.

 -- Method: IMAP4.login_cram_md5 (user, password)
     Force use of `CRAM-MD5' authentication when identifying the client
     to protect the password.  Will only work if the server
     `CAPABILITY' response includes the phrase `AUTH=CRAM-MD5'.

     New in version 2.3.

 -- Method: IMAP4.logout ()
     Shutdown connection to server. Returns server `BYE' response.

 -- Method: IMAP4.lsub ([directory[, pattern]])
     List subscribed mailbox names in directory matching pattern.
     _directory_ defaults to the top level directory and _pattern_
     defaults to match any mailbox.  Returned data are tuples of
     message part envelope and data.

 -- Method: IMAP4.myrights (mailbox)
     Show my ACLs for a mailbox (i.e. the rights that I have on
     mailbox).

     New in version 2.4.

 -- Method: IMAP4.namespace ()
     Returns IMAP namespaces as defined in RFC2342.

     New in version 2.3.

 -- Method: IMAP4.noop ()
     Send `NOOP' to server.

 -- Method: IMAP4.open (host, port)
     Opens socket to _port_ at _host_.  This method is implicitly
     called by the *note IMAP4: 1c9e. constructor.  The connection
     objects established by this method will be used in the `read',
     `readline', `send', and `shutdown' methods.  You may override this
     method.

 -- Method: IMAP4.partial (message_num, message_part, start, length)
     Fetch truncated part of a message. Returned data is a tuple of
     message part envelope and data.

 -- Method: IMAP4.proxyauth (user)
     Assume authentication as _user_. Allows an authorised
     administrator to proxy into any user's mailbox.

     New in version 2.3.

 -- Method: IMAP4.read (size)
     Reads _size_ bytes from the remote server. You may override this
     method.

 -- Method: IMAP4.readline ()
     Reads one line from the remote server. You may override this
     method.

 -- Method: IMAP4.recent ()
     Prompt server for an update. Returned data is `None' if no new
     messages, else value of `RECENT' response.

 -- Method: IMAP4.rename (oldmailbox, newmailbox)
     Rename mailbox named _oldmailbox_ to _newmailbox_.

 -- Method: IMAP4.response (code)
     Return data for response _code_ if received, or `None'. Returns
     the given code, instead of the usual type.

 -- Method: IMAP4.search (charset, criterion[, ...])
     Search mailbox for matching messages.  _charset_ may be `None', in
     which case no `CHARSET' will be specified in the request to the
     server.  The IMAP protocol requires that at least one criterion be
     specified; an exception will be raised when the server returns an
     error.

     Example:

         # M is a connected IMAP4 instance...
         typ, msgnums = M.search(None, 'FROM', '"LDJ"')

         # or:
         typ, msgnums = M.search(None, '(FROM "LDJ")')



 -- Method: IMAP4.select ([mailbox[, readonly]])
     Select a mailbox. Returned data is the count of messages in
     _mailbox_ (`EXISTS' response).  The default _mailbox_ is
     `'INBOX''.  If the _readonly_ flag is set, modifications to the
     mailbox are not allowed.

 -- Method: IMAP4.send (data)
     Sends `data' to the remote server. You may override this method.

 -- Method: IMAP4.setacl (mailbox, who, what)
     Set an `ACL' for _mailbox_. The method is non-standard, but is
     supported by the `Cyrus' server.

 -- Method: IMAP4.setannotation (mailbox, entry, attribute[, ...])
     Set `ANNOTATION's for _mailbox_. The method is non-standard, but is
     supported by the `Cyrus' server.

     New in version 2.5.

 -- Method: IMAP4.setquota (root, limits)
     Set the `quota' _root_'s resource _limits_. This method is part of
     the IMAP4 QUOTA extension defined in rfc2087.

     New in version 2.3.

 -- Method: IMAP4.shutdown ()
     Close connection established in `open'.  This method is implicitly
     called by *note IMAP4.logout(): 1cd1.  You may override this
     method.

 -- Method: IMAP4.socket ()
     Returns socket instance used to connect to server.

 -- Method: IMAP4.sort (sort_criteria, charset, search_criterion[, ...])
     The `sort' command is a variant of `search' with sorting semantics
     for the results.  Returned data contains a space separated list of
     matching message numbers.

     Sort has two arguments before the _search_criterion_ argument(s); a
     parenthesized list of _sort_criteria_, and the searching
     _charset_.  Note that unlike `search', the searching _charset_
     argument is mandatory.  There is also a `uid sort' command which
     corresponds to `sort' the way that `uid search' corresponds to
     `search'.  The `sort' command first searches the mailbox for
     messages that match the given searching criteria using the charset
     argument for the interpretation of strings in the searching
     criteria.  It then returns the numbers of matching messages.

     This is an `IMAP4rev1' extension command.

 -- Method: IMAP4.status (mailbox, names)
     Request named status conditions for _mailbox_.

 -- Method: IMAP4.store (message_set, command, flag_list)
     Alters flag dispositions for messages in mailbox.  _command_ is
     specified by section 6.4.6 of RFC 2060(1) as being one of "FLAGS",
     "+FLAGS", or "-FLAGS", optionally with a suffix of ".SILENT".

     For example, to set the delete flag on all messages:

         typ, data = M.search(None, 'ALL')
         for num in data[0].split():
            M.store(num, '+FLAGS', '\\Deleted')
         M.expunge()



 -- Method: IMAP4.subscribe (mailbox)
     Subscribe to new mailbox.

 -- Method: IMAP4.thread (threading_algorithm, charset,
          search_criterion[, ...])
     The `thread' command is a variant of `search' with threading
     semantics for the results.  Returned data contains a space
     separated list of thread members.

     Thread members consist of zero or more messages numbers, delimited
     by spaces, indicating successive parent and child.

     Thread has two arguments before the _search_criterion_
     argument(s); a _threading_algorithm_, and the searching _charset_.
     Note that unlike `search', the searching _charset_ argument is
     mandatory.  There is also a `uid thread' command which corresponds
     to `thread' the way that `uid search' corresponds to `search'.
     The `thread' command first searches the mailbox for messages that
     match the given searching criteria using the charset argument for
     the interpretation of strings in the searching criteria. It then
     returns the matching messages threaded according to the specified
     threading algorithm.

     This is an `IMAP4rev1' extension command.

     New in version 2.4.

 -- Method: IMAP4.uid (command, arg[, ...])
     Execute command args with messages identified by UID, rather than
     message number.  Returns response appropriate to command.  At
     least one argument must be supplied; if none are provided, the
     server will return an error and an exception will be raised.

 -- Method: IMAP4.unsubscribe (mailbox)
     Unsubscribe from old mailbox.

 -- Method: IMAP4.xatom (name[, arg[, ...]])
     Allow simple extension commands notified by server in `CAPABILITY'
     response.

  Instances of *note IMAP4_SSL: 1cb5. have just one additional method:

 -- Method: IMAP4_SSL.ssl ()
     Returns SSLObject instance used for the secure connection with the
     server.

  The following attributes are defined on instances of *note IMAP4:
1c9e.:

 -- Attribute: IMAP4.PROTOCOL_VERSION
     The most recent supported protocol in the `CAPABILITY' response
     from the server.

 -- Attribute: IMAP4.debug
     Integer value to control debugging output.  The initialize value
     is taken from the module variable `Debug'.  Values greater than
     three trace each command.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2060.html

