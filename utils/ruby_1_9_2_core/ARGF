This is ARGF, produced by makeinfo version 4.8 from ARGF.texi.

   * Home

   * Core

   * Std-lib

   * Downloads

   * Â Â 


File: ARGF,  Node: Top,  Up: (dir)

   * io.c


File: ARGF,  Node: Top,  Up: (dir)

   Object


File: ARGF,  Node: Top,  Up: (dir)

   * #argv

   * #binmode

   * #binmode?

   * #bytes

   * #chars

   * #close

   * #closed?

   * #each

   * #each_byte

   * #each_char

   * #each_line

   * #eof

   * #eof?

   * #external_encoding

   * #file

   * #filename

   * #fileno

   * #getbyte

   * #getc

   * #gets

   * #inplace_mode

   * #inplace_mode=

   * #internal_encoding

   * #lineno

   * #lineno=

   * #lines

   * #path

   * #pos

   * #pos=

   * #read

   * #readbyte

   * #readchar

   * #readline

   * #readlines

   * #readpartial

   * #rewind

   * #seek

   * #set_encoding

   * #skip

   * #tell

   * #to_a

   * #to_i

   * #to_io

   * #to_s


File: ARGF,  Node: Top,  Up: (dir)

   * Enumerable


File: ARGF,  Node: Top,  Up: (dir)

   Quicksearch
   * Encoding

   * Encoding::CompatibilityError

   * Encoding::Converter

   * Encoding::ConverterNotFoundError

   * Encoding::InvalidByteSequenceError

   * Encoding::UndefinedConversionError

   * Process

   * Process::GID

   * Process::Status

   * Process::Sys

   * Process::UID

   * Enumerator

   * Enumerator::Generator

   * Enumerator::Yielder

   * File

   * File::Constants

   * File::Stat

   * IO

   * IO::WaitReadable

   * IO::WaitWritable

   * RubyVM

   * RubyVM::Env

   * RubyVM::InstructionSequence

   * GC

   * GC::Profiler

   * Math

   * Math::DomainError

   * NameError

   * NameError::message

   * ARGF

   * ArgumentError

   * Array

   * BasicObject

   * Bignum

   * Binding

   * Class

   * Comparable

   * Complex

   * Continuation

   * Data

   * Dir

   * EOFError

   * EncodingError

   * Enumerable

   * Errno

   * Exception

   * FalseClass

   * Fiber

   * FiberError

   * FileTest

   * Fixnum

   * Float

   * FloatDomainError

   * Hash

   * IOError

   * IndexError

   * Integer

   * Interrupt

   * Kernel

   * KeyError

   * LoadError

   * LocalJumpError

   * Marshal

   * MatchData

   * Method

   * Module

   * Mutex

   * NilClass

   * NoMemoryError

   * NoMethodError

   * NotImplementedError

   * Numeric

   * Object

   * ObjectSpace

   * Proc

   * Random

   * Range

   * RangeError

   * Rational

   * Regexp

   * RegexpError

   * RuntimeError

   * ScriptError

   * SecurityError

   * Signal

   * SignalException

   * StandardError

   * StopIteration

   * String

   * Struct

   * Symbol

   * SyntaxError

   * SystemCallError

   * SystemExit

   * SystemStackError

   * Thread

   * ThreadError

   * ThreadGroup

   * Time

   * TrueClass

   * TypeError

   * UnboundMethod

   * ZeroDivisionError

   * fatal
   No matching classes.


File: ARGF,  Node: Top,  Up: (dir)

   `ARGF' is a stream designed for use in scripts that process files
given as command-line arguments, or passed in via STDIN.

   The arguments passed to your script are stored in the `ARGV' Array,
one argument per element. `ARGF' assumes that any arguments that
arenÃ¢Â€Â™t filenames have been removed from `ARGV'. For example:  ruby
argf.rb -verbose file1 file2

   ARGV  #=> ["-verbose", "file1", "file2"] option = ARGV.shift #=>
"-verbose" ARGV  #=> ["file1", "file2"]

   You can now use `ARGF' to work with a concatenation of each of these
named files. For instance, `ARGF.read' will return the contents of
file1 followed by the contents of file2.

   After a file in `ARGV' has been read, `ARGF' removes it from the
Array. Thus, after all files have been read `ARGV' will be empty.

   You can manipulate `ARGV' yourself to control what `ARGF' operates
on. If you remove a file from `ARGV', it is ignored by `ARGF'; if you
add files to `ARGV', they are treated as if they were named on the
command line. For example:  ["file1"] ARGF.readlines # Returns the
contents of file1 as an Array ARGV           #=> [] ARGV.replace
["file2", "file3"] ARGF.read      # Returns the contents of file2 and
file3

   If `ARGV' is empty, `ARGF' acts as if it contained STDIN, i.e. the
data piped to your script. For example:  echo "glark" | ruby -e 'p
ARGF.read' "glark\n"


File: ARGF,  Node: Top,  Up: (dir)

   argv â†’ ARGV click to toggle source

   Returns the `ARGV' array, which contains the arguments passed to
your script, one per element.

   For example:  ruby argf.rb -v glark.txt

   ARGF.argv   #=> ["-v", "glark.txt"]



Tag Table:
Node: Top127

End Tag Table
